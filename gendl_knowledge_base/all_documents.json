[
  {
    "text": ";;\n;; Copyright 2002, 2009 Genworks International\n;;\n;; This source file is part of the General-purpose Declarative\n;; Language project (GDL).\n;;\n;; This source file contains free software: you can redistribute it\n;; and/or modify it under the terms of the GNU Affero General Public\n;; License as published by the Free Software Foundation, either\n;; version 3 of the License, or (at your option) any later version.\n;; \n;; This source file is distributed in the hope that it will be useful,\n;; but WITHOUT ANY WARRANTY; without even the implied warranty of\n;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n;; Affero General Public License for more details.\n;; \n;; You should have received a copy of the GNU Affero General Public\n;; License along with this source file.  If not, see\n;; <http://www.gnu.org/licenses/>.\n;; \n\n\n         Basic GDL Overview and Syntax\n         =============================\n\nThis file contains basic information and usage instructions for the",
    "metadata": {
      "source": "usage.txt",
      "file_name": "usage.txt",
      "file_type": "txt",
      "content_type": "usage_guide",
      "topic": "general",
      "chunk_id": 0,
      "chunk_count": 34
    },
    "id": "da21bda891a5fdeb071958ff0c950555"
  },
  {
    "text": ";; <http://www.gnu.org/licenses/>.\n;; \n\n\n         Basic GDL Overview and Syntax\n         =============================\n\nThis file contains basic information and usage instructions for the\nbase General-purpose Declarative Language System.\n\nFor further documentation and updates, please visit\nhttp://www.genworks.com or contact us at info@genworks.com\nor 248-910-0912.\n\nThe GDL product is a commercially available KBE system, and the core\nGDL language is a proposed standard for a vendor-neutral KBE\nlanguage. \n\n\nCore GDL Syntax\n==================\n\nGDL is based on and is a superset of ANSI Common Lisp.\n\n1 define-package\n================\n\nThe macro gdl:define-package is used to set up a new working package\nin GDL.\n\nExample:\n\n   (gdl:define-package :gdl-user)\n\nThe :gdl-user package is an empty, pre-defined package for your use if\nyou do not wish to make a new package just for scratch work.\n\nFor real projects it is recommended that you make and work in your own\nGDL package.",
    "metadata": {
      "source": "usage.txt",
      "file_name": "usage.txt",
      "file_type": "txt",
      "content_type": "usage_guide",
      "topic": "general",
      "chunk_id": 1,
      "chunk_count": 34
    },
    "id": "f3157b350302755645934a45657928ad"
  },
  {
    "text": "-defined package for your use if\nyou do not wish to make a new package just for scratch work.\n\nFor real projects it is recommended that you make and work in your own\nGDL package.\n\n\nNotes for advanced users:\n\n  Packages defined with gdl:define-package will implicitly :use the\n  GDL package and the Common-Lisp package, so you will have access to\n  all exported symbols in these packages without prefixing them with\n  their package name.\n\n  You may extend this behavior, by calling gdl:define-package and\n  adding additional packages to use with (:use ...).  For example, if\n  you want to work in a package with access to GDL exported symbols,\n  Common Lisp exported symbols, and symbols from the Surf (NURBS\n  surfaces and brep solids) package, you could set it up as follows:\n\n    (gdl:define-package :my-gdl-user (:use :gdl :surf))\n\n\n2 define-object\n===============\n\ndefine-object is the basic macro for defining objects (i.e. creating\nclasses) in GDL.",
    "metadata": {
      "source": "usage.txt",
      "file_name": "usage.txt",
      "file_type": "txt",
      "content_type": "usage_guide",
      "topic": "general",
      "chunk_id": 2,
      "chunk_count": 34
    },
    "id": "bdeedb7e7640b025c1fed94e393e5a74"
  },
  {
    "text": "e :my-gdl-user (:use :gdl :surf))\n\n\n2 define-object\n===============\n\ndefine-object is the basic macro for defining objects (i.e. creating\nclasses) in GDL. A GDL object definition is a superset of a CLOS\nStandard Class.\n\nBasic syntax of Define-Object is \n\n (define-object <class-name> <mixin-list> <specification-plist>)\n\n<class-name> is any non-keyword symbol. A CLOS Standard Class will be\ngenerated for this symbol, so any name you use will override a\ndefclass if one is already defined with the same name.\n\n<mixin-list> is a list of other class-names from which this object\nwill inherit. It maps directly into the CLOS mixin list.\n\nNote that the standard mixin GDL:Vanilla-Mixin gets mixed in\nautomatically with any GDL object and carries some of the basic GDL\nfunctionality (messages).\n\n<spec-plist> is a plist made up of pairs made from special keywords\nand expression lists. The special keywords currently supported are the\nfollowing, and each is documented in the respective section of this",
    "metadata": {
      "source": "usage.txt",
      "file_name": "usage.txt",
      "file_type": "txt",
      "content_type": "usage_guide",
      "topic": "general",
      "chunk_id": 3,
      "chunk_count": 34
    },
    "id": "f9c07e7ca4984ef247de1cd25948f92b"
  },
  {
    "text": "st> is a plist made up of pairs made from special keywords\nand expression lists. The special keywords currently supported are the\nfollowing, and each is documented in the respective section of this\nfile: :input-slots, :computed-slots, :trickle-down-slots, :objects,\n:hidden-objects, :functions, and :methods.\n\n\n2.1 :input-slots\n================\n\n:input-slots are made up of a list, each of whose elements is either a\nsymbol or a list expression whose first element is a symbol. In either\ncase, the symbol represents a value which can be supplied either\n\n (a) into the toplevel object of an object hierarchy, at object instantiation\n     (see (1.5), make-object, below)\n\n (b) into a child object, using a :objects specification (see (1.6), :objects,\n     below)\n\nInputs are specified either as a simple symbol (which may, but need\nnot be, a keyword symbol), or as an expression whose first is a symbol\nand whose second is an expression returning a value which will be the",
    "metadata": {
      "source": "usage.txt",
      "file_name": "usage.txt",
      "file_type": "txt",
      "content_type": "usage_guide",
      "topic": "general",
      "chunk_id": 4,
      "chunk_count": 34
    },
    "id": "f6ee154091eab520ee687fe15611095c"
  },
  {
    "text": "e symbol (which may, but need\nnot be, a keyword symbol), or as an expression whose first is a symbol\nand whose second is an expression returning a value which will be the\ndefault value for the input slot.\n\nOptionally, a third item can be supplied, the keyword :defaulting,\nwhich indicates that if a slot by this name is contained in any\nancestor object's list of :trickle-down-slots, the value from the\nancestor will take precedence over the local default expression.\n\nExample 1:\n\n (define-object person (base-object)\n\n   :input-slots\n   (first-name last-name age image-url))\n\nIn this example, the slots first-name, last-name, age, and image-url\nare all defined, with no default expressions. This means that for the\nobject to answer these messages, these slots must be specified at the\ntime of object instantiation.\n\nExample 2:\n\n (define-object person (base-object)\n\n   :input-slots\n   (first-name last-name age \n    (image-url \"http://localhost:9000/images/\")))",
    "metadata": {
      "source": "usage.txt",
      "file_name": "usage.txt",
      "file_type": "txt",
      "content_type": "usage_guide",
      "topic": "general",
      "chunk_id": 5,
      "chunk_count": 34
    },
    "id": "91f1351a4f83a4a84220ae656acec2c0"
  },
  {
    "text": "instantiation.\n\nExample 2:\n\n (define-object person (base-object)\n\n   :input-slots\n   (first-name last-name age \n    (image-url \"http://localhost:9000/images/\")))\n\nIn this example, first-name, last-name, and age are all defined with\nno default expressions, but image-url has the default expression\n\"http://localhost:9000/images/.\" This means that if nothing is\nspecified for image-url at object instantiation time, the image-url\nmessage will return \"http://localhost:9000/images/.\"\n\n\nExample 3:\n\n (define-object person (base-object)\n\n   :input-slots\n   (first-name last-name age \n    (image-url \"http://localhost:9000/images/\" :defaulting)))\n\n\nThis example is the same as Example 2, with the exception that if\nimage-url is included in an ancestor object (see below for discussion\nof object hierarchies) as a :trickle-down-slot, the slot's value from\nthat ancestor will take precedence over the local default expression\nof \"http://localhost:9000/images/.\"\n\n\n\n2.2 computed-slots\n==================",
    "metadata": {
      "source": "usage.txt",
      "file_name": "usage.txt",
      "file_type": "txt",
      "content_type": "usage_guide",
      "topic": "general",
      "chunk_id": 6,
      "chunk_count": 34
    },
    "id": "89e62540bd6eaf6662ff24d38574473d"
  },
  {
    "text": "s) as a :trickle-down-slot, the slot's value from\nthat ancestor will take precedence over the local default expression\nof \"http://localhost:9000/images/.\"\n\n\n\n2.2 computed-slots\n==================\n\ncomputed-slots are messages which are generally computed based on\ntheir default expression.\n\ncomputed-slots will only be computed when called (\"demanded\"), then\ntheir values will be cached in memory. Only if another slot on which\nthey depend becomes modified will they become unbound, then their\nvalues will be recomputed from their expressions when demanded.\n\nThe referencing macro ``the'' is used to refer to the values of\nmessages within the current object (named implicitly with the variable\n\"self\"), or, through reference-chaining (see (1.6), :objects, below),\nthe values of messages in other object instances.\n\nNotes for Advanced users: \n\n  In packages created with gdl:define-package, the Common Lisp symbol\n  ``the'' is shadowed by gdl:the. If you wish to access",
    "metadata": {
      "source": "usage.txt",
      "file_name": "usage.txt",
      "file_type": "txt",
      "content_type": "usage_guide",
      "topic": "general",
      "chunk_id": 7,
      "chunk_count": 34
    },
    "id": "86b9437e52743ad2b1c0fa7ef4e447bc"
  },
  {
    "text": "t instances.\n\nNotes for Advanced users: \n\n  In packages created with gdl:define-package, the Common Lisp symbol\n  ``the'' is shadowed by gdl:the. If you wish to access\n  common-lisp:the, use the explicit package prefix, e.g. ``cl:the.''\n\nExample 1:\n\n  (define-object person (base-object)\n\n   :input-slots\n   (first-name\n    last-name \n    age\n    image-url)\n\n   :computed-slots\n   ((full-name (concatenate 'string (the first-name) \" \" (the  last-name)))))\n\nIn this example, the message full-name is always computed strictly\nbased on its default expression, which concatenates (the first-name)\nand (the last-name).\n\n\nExample 2:\n\n  (define-object person (base-object)\n\n   :input-slots\n   (first-name\n    last-name \n    age\n    image-url)\n\n   :computed-slots\n   ((full-name (concatenate 'string (the first-name) \" \" (the  last-name)) :settable)))\n\nIn this example, the message full-name is by default computed based on\nits default expression, which concatenates (the first-name) and (the\nlast-name).",
    "metadata": {
      "source": "usage.txt",
      "file_name": "usage.txt",
      "file_type": "txt",
      "content_type": "usage_guide",
      "topic": "general",
      "chunk_id": 8,
      "chunk_count": 34
    },
    "id": "e9cab3b0e1ee6ff40222328d1e3b293a"
  },
  {
    "text": "st-name) \" \" (the  last-name)) :settable)))\n\nIn this example, the message full-name is by default computed based on\nits default expression, which concatenates (the first-name) and (the\nlast-name). However, because it is :settable, its value may be altered\nprocedurally at runtime (see \"setting slot values\" below)\n\n \n\n2.3 :objects and :hidden-objects\n================================\n\n:objects is used to specify a list of Instance specifications, where\neach instance is considered to be a ``child'' object of the current\nobject :hidden-objects serves the same purpose and has the same syntax,\nbut hidden objects are considered ``hidden-children'' rather than\n``children'' (so they are not returned by a call to (the children),\nfor example).\n\nInputs to each object are specified as a plist of inputs and\nvalue expressions, spliced in after the objects's name and type\nspecification:\n\n Examples\n ========\n> (define-object city (base-object)\n   \n   :computed-slots",
    "metadata": {
      "source": "usage.txt",
      "file_name": "usage.txt",
      "file_type": "txt",
      "content_type": "usage_guide",
      "topic": "general",
      "chunk_id": 9,
      "chunk_count": 34
    },
    "id": "af9ece6688a0174ef7065d1b2dadf2a8"
  },
  {
    "text": "and\nvalue expressions, spliced in after the objects's name and type\nspecification:\n\n Examples\n ========\n> (define-object city (base-object)\n   \n   :computed-slots\n   ((total-water-usage (+ (the hotel water-usage)\n                          (the bank water-usage))))\n   :objects\n   ((hotel :type 'hotel\n           :size :large)\n    (bank  :type 'bank\n           :size :medium)))\n\n--> CITY\n     \n\n>  (define-object hotel (base-object)\n     :input-slots\n     (size)\n\n     :computed-slots\n     ((water-usage (ecase (the size)\n                     (:small 10)\n                     (:medium 20)\n                     (:large 30)))))\n--> HOTEL\n\n\n>  (define-object bank (base-object)\n     :input-slots\n     (size)\n  \n     :computed-slots\n     ((water-usage (ecase (the size)\n                     (:small 2)\n                     (:medium 3)\n                     (:large 4)))))\n\n--> BANK\n\n  > (setq self (make-object 'city))\n--> #<CITY @ #x20933922>\n\n  > (the total-water-usage)\n--> 33",
    "metadata": {
      "source": "usage.txt",
      "file_name": "usage.txt",
      "file_type": "txt",
      "content_type": "usage_guide",
      "topic": "general",
      "chunk_id": 10,
      "chunk_count": 34
    },
    "id": "7d1cb1f93ea31b8daf916d21f2fccf73"
  },
  {
    "text": "(:medium 3)\n                     (:large 4)))))\n\n--> BANK\n\n  > (setq self (make-object 'city))\n--> #<CITY @ #x20933922>\n\n  > (the total-water-usage)\n--> 33\n\nThe special message children will return a list of all the child\ninstances in a object:\n\n  > (the children)\n--> (#<HOTEL @ #x209350ca> #<BANK @ #x2093b62a>)\n\n\n\n2.4 Sequences of Objects\n========================\n\n2.4.1 Fixed-size Sequences\n==========================\n\nObjects may be specified as a fixed-length sequence, analogous to a\nsingle-dimensional array. Although we call this a fixed-length\nsequence, the length can change if something it depends on becomes\nmodified. But if this happens, the entire sequence will have to be\nrecomputed.\n\nEach member of the sequence will automatically answer an :index\nmessage, which starts at 0 goes up to one less than the total number\nof elements in the sequence.\n\nNote that the referencing macro ``the-child'' may be used to reference",
    "metadata": {
      "source": "usage.txt",
      "file_name": "usage.txt",
      "file_type": "txt",
      "content_type": "usage_guide",
      "topic": "general",
      "chunk_id": 11,
      "chunk_count": 34
    },
    "id": "257beb66c8d50ed31d6b7950fbb83b97"
  },
  {
    "text": "arts at 0 goes up to one less than the total number\nof elements in the sequence.\n\nNote that the referencing macro ``the-child'' may be used to reference\ninto the current child objects (in sequenced objects as well as in\nnormal non-sequenced objects). This can be useful for sequenced\nobjects, in order to access the :index of the current member.\n\nExample\n\n(defparameter *presidents-data*\n    '((:name \n       \"Carter\"\n       :term 1976)\n      (:name \"Reagan\"\n       :term 1980)\n      (:name \"Clinton\"\n       :term 1990)))\n       \n(define-object presidents-container (base-object)\n  :input-slots \n  ((data *presidents-data*))\n  \n  :objects\n  ((presidents :type 'president\n\t       :sequence (:size (length (the data)))\n\t       :name (getf (nth (the-child index)\n\t\t\t\t(the data)) \n\t\t\t   :name)\n\t       :term (getf (nth (the-child index)\n\t\t\t\t(the data)) \n\t\t\t   :term))))\n\n\n(define-object president (base-object)\n :input-slots\n (name term))",
    "metadata": {
      "source": "usage.txt",
      "file_name": "usage.txt",
      "file_type": "txt",
      "content_type": "usage_guide",
      "topic": "general",
      "chunk_id": 12,
      "chunk_count": 34
    },
    "id": "0d1db4d6585a6bb3d9c5c98c97accca4"
  },
  {
    "text": "erm (getf (nth (the-child index)\n\t\t\t\t(the data)) \n\t\t\t   :term))))\n\n\n(define-object president (base-object)\n :input-slots\n (name term))\n\n\nFor convenience, the special objects keyword :Parameters may be used to\npass an actual plist into a child instance instead of having to refer\nto the individual parameters.\n\nExample:\n\n(define-object presidents-container (base-object)\n  :input-slots\n  ((data *presidents-data*))\n  \n  :objects\n  ((presidents :type 'president\n\t       :sequence (:size (length (the data)))\n    \t       :parameters (nth (the-child index)\n\t\t  \t\t(the data)))))\n\n\nThe members of quantified set are accessed like functions, by wrapping\nextra parentheses and including the index number as the argument.\n\nExample:\n\n>   (setq self (make-object 'presidents-container))\n--> #<PRESIDENTS-CONTAINER @ #x207441e2>\n\n>   (the (presidents 0) name)\n--> \"Carter\"\n\n\nThe quantified set can handle certain pre-defined messages,\nincluding  last and first.\n\nExample:\n\n>   (the (presidents last))",
    "metadata": {
      "source": "usage.txt",
      "file_name": "usage.txt",
      "file_type": "txt",
      "content_type": "usage_guide",
      "topic": "general",
      "chunk_id": 13,
      "chunk_count": 34
    },
    "id": "6b2911159edd3002e606f0ce2a9a960e"
  },
  {
    "text": "ER @ #x207441e2>\n\n>   (the (presidents 0) name)\n--> \"Carter\"\n\n\nThe quantified set can handle certain pre-defined messages,\nincluding  last and first.\n\nExample:\n\n>   (the (presidents last))\n--> #<PRESIDENT @ #x2075061a>\n\n\nMembers of a quantified set can also handle the messages\n previous,  next, first?, and last?.\n\n\nThe types of a quantified set can also be quantified, by\nsupplying them as a list and using the keyword :sequence\nin the :type specification, e.g.\n\n(define-object stuff (base-object)\n  :computed-slots\n  ((child-types (list 'boy 'girl 'man 'woman)))\n\n  :objects\n  ((people :type (:sequence (the child-types))\n           :sequence (:size (length (the child-types))))))\n\n\nIf the expression returning the :sequence of types, or of the :size,\nof a fixed-size sequence becomes modified, or anything they depend on\nbecomes modified, then the entire sequence will become unbound and\nwill have to be recomputed the next time it is demanded.\n\n2.4.2 Variable-size Sequences",
    "metadata": {
      "source": "usage.txt",
      "file_name": "usage.txt",
      "file_type": "txt",
      "content_type": "usage_guide",
      "topic": "general",
      "chunk_id": 14,
      "chunk_count": 34
    },
    "id": "65b94f442ec7862e6535bd50853493f2"
  },
  {
    "text": "anything they depend on\nbecomes modified, then the entire sequence will become unbound and\nwill have to be recomputed the next time it is demanded.\n\n2.4.2 Variable-size Sequences\n=============================\n\nObjects may be specified as a variable-length sequence, analogous to a\nlist. These are similar to fixed-length sequences, but the syntax is:\n\n  :sequence (:indices <list-of-indices>)\n\nwhere the <list-of-indices> is an initial list of indices. The indices\nare usually integers, but can be any object which matches with eql\n(e.g. keyword symbols).\n\nFor inserting and deleting members of a variable-length sequence,\nplease see the reference documentation on variable-sequence.\n\n\n2.5 :functions\n==============\n\nFunctions are uncached methods on the object, which discriminate only\non the type of the object. They are defined with a normal\n(non-specialized) lambda list, so they do not discriminate on the\ntypes of their arguments other than the implicit ``self'' argument.",
    "metadata": {
      "source": "usage.txt",
      "file_name": "usage.txt",
      "file_type": "txt",
      "content_type": "usage_guide",
      "topic": "general",
      "chunk_id": 15,
      "chunk_count": 34
    },
    "id": "d246fb270d8bf1bee3431be7670707ba"
  },
  {
    "text": "of the object. They are defined with a normal\n(non-specialized) lambda list, so they do not discriminate on the\ntypes of their arguments other than the implicit ``self'' argument.\n\nFunctions are called in a normal reference chain but their name is\nwrapped in parentheses and the lambda-list is spliced on after the\nname, within the parentheses.\n\nExample:\n=======\n\n(define-object hotel (base-object)\n  :input-slots\n  (room-rate)\n  \n  :functions\n  ((total-cost\n    (number-of-nights)\n    (* (the room-rate) number-of-nights))))\n\n\n>   (setq self (make-object 'hotel :room-rate 100))\n--> #<HOTEL @ #x2094f502> \n\n>   (the (total-cost 7))\n--> 700\n\n>   (the (total-cost 10))\n--> 1000\n\n\n2.5 :methods\n==============\n\nMethods are identical to GDL Functions, with the additional capability\nof specializing on their argument signature (i.e. the combination of\ntypes of the arguments) in addition to the implicit ``self'' argument\n(as with standard CLOS methods).\n\n\n2.6 :trickle-down-slots",
    "metadata": {
      "source": "usage.txt",
      "file_name": "usage.txt",
      "file_type": "txt",
      "content_type": "usage_guide",
      "topic": "general",
      "chunk_id": 16,
      "chunk_count": 34
    },
    "id": "387985c267e2ff9565074767ba27dae5"
  },
  {
    "text": "eir argument signature (i.e. the combination of\ntypes of the arguments) in addition to the implicit ``self'' argument\n(as with standard CLOS methods).\n\n\n2.6 :trickle-down-slots\n=======================\n\n:trickle-down-slots are a list of symbols naming other messages\n(:input-slots, :computed-slots, etc.) in the object which will\nautomatically be available in any descendant (e.g. child, grandchild,\netc.) instances, unless overridden in the descendant instance (e.g. by\nbeing defined as an :input-slot, :computed-slot, etc, in the\ndescendant instance).\n\nExample:\n\n(define-object person (base-object)\n  :input-slots\n  (social-security-number)\n  \n  :trickle-down-slots\n  (social-security-number)\n  \n  :objects\n  ((irs-records       :type 'irs-records)\n   (state-tax-returns :type 'state-tax-returns)\n   (fbi-file          :type 'fbi-file)\n   (interpol-file     :type 'interpol-file)))\n\nIn the above object definition, the message social-security-number",
    "metadata": {
      "source": "usage.txt",
      "file_name": "usage.txt",
      "file_type": "txt",
      "content_type": "usage_guide",
      "topic": "general",
      "chunk_id": 17,
      "chunk_count": 34
    },
    "id": "fd0b9557159b82b4b16d3ce2aa72df75"
  },
  {
    "text": "(fbi-file          :type 'fbi-file)\n   (interpol-file     :type 'interpol-file)))\n\nIn the above object definition, the message social-security-number\nwill be automatically available in the instances irs-records,\nstate-tax-returns, fbi-file, and interpol-file, unless otherwise\ndefined in those respective objects.\n\nNOTE: :objects and :hidden-objects are automatically trickle-down.\n\n\n2.7 Settable Slots\n==================\n\nSettable slots are just like normal slots, but their values can be\nprogrammatically modified using the special object function :set-slot!.\n\nAny other slots depending on them (directly or indirectly) will then\nbecome unbound and be recomputed the next time they are demanded.\n\nExample:\n\n> (define-object container (base-object)\n    :computed-slots\n    ((name \"Pristine\" :settable)\n     (full-name (string-append (the :name) \" Container\") :settable)))\n\n>   (setq self (make-object 'container))\n--> #<CONTAINER @ #x209495c2>\n\n>   (the full-name)\n--> \"Pristine Container\"",
    "metadata": {
      "source": "usage.txt",
      "file_name": "usage.txt",
      "file_type": "txt",
      "content_type": "usage_guide",
      "topic": "general",
      "chunk_id": 18,
      "chunk_count": 34
    },
    "id": "c6b4377210cd39bfa76e2f3769153a08"
  },
  {
    "text": "le)\n     (full-name (string-append (the :name) \" Container\") :settable)))\n\n>   (setq self (make-object 'container))\n--> #<CONTAINER @ #x209495c2>\n\n>   (the full-name)\n--> \"Pristine Container\"\n\n>   (the (set-slot! name \"Tainted\"))\n--> \"Tainted\"\n\n>   (the full-name)\n--> \"Tainted Container\"\n\nBoth :computed-slots and :input-slots may be specified as :settable\n(this includes :input-slots which are also specified as :defaulting).\n\n\n\n3 Make-Object\n=============\n\nThe basic constructor for GDL objects is ``make-object.''\n\nThis maps into a call to the Common Lisp function ``make-instance,''\nwith some extra operations to support the GDL machinery.\n\nKeyword symbols are used to tag input values when passed into an\nobject in a call to make-object:\n\n  Example 1:\n   \n   > (setq myobject (make-object 'person :first-name \"Albert\" :last-name \"Einstein\"))\n\n --> #<PERSON @ #x209274ee>\n\nToplevel inputs can also be specified by applying #'make-object to a\nplist containing the inputs:\n\n  Example 2:",
    "metadata": {
      "source": "usage.txt",
      "file_name": "usage.txt",
      "file_type": "txt",
      "content_type": "usage_guide",
      "topic": "general",
      "chunk_id": 19,
      "chunk_count": 34
    },
    "id": "cee36c8fff776c8e02d0031ecef0356e"
  },
  {
    "text": "on :first-name \"Albert\" :last-name \"Einstein\"))\n\n --> #<PERSON @ #x209274ee>\n\nToplevel inputs can also be specified by applying #'make-object to a\nplist containing the inputs:\n\n  Example 2:\n\n   > (setq myobject (apply #'make-object 'person \n                           (list :first-name \"Albert\" \n                                 :last-name \"Einstein\")))\n --> #<PERSON @ #x209274fa>\n\n\n4 the-object\n============\n\nYou can send messages to individual object instances using the macro\n``the-object:''\n\nExample:\n\n   > (the-object myobject full-name)\n --> \"Albert Einstein\"\n\nThe-object takes as its first argument an expression which returns an\nobject (i.e. instance), followed by a symbol naming a message returned\nby that object. The symbol is immune to Lisp package, so a keyword\nsymbol may be used, but this is not a requirement. As we will see\nlater, the-object actually can take any number of symbols,\nrepresenting a reference chain down through an object hierarcy (see\n\"object hierarchies\" below).",
    "metadata": {
      "source": "usage.txt",
      "file_name": "usage.txt",
      "file_type": "txt",
      "content_type": "usage_guide",
      "topic": "general",
      "chunk_id": 20,
      "chunk_count": 34
    },
    "id": "63049738c1cf5eaabbb8f61ffc08a8a9"
  },
  {
    "text": "this is not a requirement. As we will see\nlater, the-object actually can take any number of symbols,\nrepresenting a reference chain down through an object hierarcy (see\n\"object hierarchies\" below).\n\n(The <instance>) expands to (the-object self <instance>), so you can\nconveniently bind a variable named ``self'' to the result of a\nmake-object, then use a simple ``the'' to do referencing:\n\nExample:\n\n   > (setq self (apply #'make-object 'person \n                        (list :first-name \"Albert\" \n                              :last-name \"Einstein\")))\n--> #<PERSON @ #x2092cc8a>\n\n\n   > (the full-name)\n --> \"Albert Einstein\"\n\n\n\n5 Evaluating Slot Names at Runtime\n==================================\n\nThe ``evaluate'' macro can be used in cases where the message name is\nnot known until runtime -- it is wrapped around an expression which\nreturns a symbol naming a message. The symbol is immune to package, so\nit may be a keyword or non-keyword symbol.\n\nExample:\n========",
    "metadata": {
      "source": "usage.txt",
      "file_name": "usage.txt",
      "file_type": "txt",
      "content_type": "usage_guide",
      "topic": "general",
      "chunk_id": 21,
      "chunk_count": 34
    },
    "id": "47ae55a5d315778e870479c1d4f63536"
  },
  {
    "text": "is wrapped around an expression which\nreturns a symbol naming a message. The symbol is immune to package, so\nit may be a keyword or non-keyword symbol.\n\nExample:\n========\n\n>   (setq my-key :full-name)\n--> :FULL-NAME\n\n>   (setq self (make-object 'container))\n--> #<CONTAINER @ #x209495c2>\n\n>   (the (evaluate my-key))\n--> \"Pristine Container\"\n\n\n6 Formats and Views\n===================\n\n6.1 Overview\n============\n\nThe basic idea behind Formats and Views is that of providing different\nperspectives on an object for the purposes of output. This concept is\nsomething more than ``presentation methods'' as defined by CLIM. It is\nmore like ``presentation objects'' which contain ``presentation\nmethods.''\n\nCore GDL follows the message-passing paradigm of object\norientation. You have objects which have slots, sub-objects,\nfunctions, etc. These are all actually methods, or messages, ``on''\nthe object, i.e. the message passing paradigm.\n\nAnother way to look at message passing is to think that any given",
    "metadata": {
      "source": "usage.txt",
      "file_name": "usage.txt",
      "file_type": "txt",
      "content_type": "usage_guide",
      "topic": "general",
      "chunk_id": 22,
      "chunk_count": 34
    },
    "id": "5768b41d91f271ecfbd79613e4555a8b"
  },
  {
    "text": "ts, sub-objects,\nfunctions, etc. These are all actually methods, or messages, ``on''\nthe object, i.e. the message passing paradigm.\n\nAnother way to look at message passing is to think that any given\nmethod dispatches, or is specialized, only on a single argument, which\nis the object to which it ``belongs.'' Formats and Views extend upon\nthis notion by allowing methods to dispatch on two arguments. The\nfirst argument is a ``Format'' object, and the second argument is the\nnormal object just as with straight GDL.\n\nFormat objects are defined with ``define-format'' and instantiated\nonly when needed, inside the body of a ``with-format'' macro.\n\nMethods which apply to a particular object and from the perspective of\na particular format are defined as :output-methods with\n``define-lens''\n\n6.2 define-format\n=================\n\nAs its name implies, Define-Format is used to define new\nformats. GDL/GWL comes with several pre-defined formats, so it is",
    "metadata": {
      "source": "usage.txt",
      "file_name": "usage.txt",
      "file_type": "txt",
      "content_type": "usage_guide",
      "topic": "general",
      "chunk_id": 23,
      "chunk_count": 34
    },
    "id": "db13792ce7297411c7c230c22cf927c0"
  },
  {
    "text": "e-format\n=================\n\nAs its name implies, Define-Format is used to define new\nformats. GDL/GWL comes with several pre-defined formats, so it is\nlikely that you will not need to define your own formats initially.\n\nThe syntax is\n\n (Define-Format <format-name> <mixin-list> <spec-plist>)\n\n<Format-name> is any non-keyword symbol. A defclass will be generated\nfor this symbol, so any name you use will override a defclass if one\nis already defined with the same name.\n\n<Mixin-list> is a list of other format-names from which this format\nwill inherit. It maps directly into a CLOS mixin list.\n\n<spec-plist> is a plist made up of pairs made from special keywords\nand expression lists. Define-format in GDL currently only supports the\n``:Functions'' section keyword.\n\n6.2.1 functions\n===============\n\nFunctions of a format are actual uncached methods on the format\nobject. They are defined with a normal (non-specialized) lambda\nlist. There is a variable ``stream'' dynamically bound within the body",
    "metadata": {
      "source": "usage.txt",
      "file_name": "usage.txt",
      "file_type": "txt",
      "content_type": "usage_guide",
      "topic": "general",
      "chunk_id": 24,
      "chunk_count": 34
    },
    "id": "4c4096b034bed675c719b54338069a6d"
  },
  {
    "text": "Functions of a format are actual uncached methods on the format\nobject. They are defined with a normal (non-specialized) lambda\nlist. There is a variable ``stream'' dynamically bound within the body\nof these functions, to which output is expected to be written.\n\nExample:\n========\n\n(define-format base-format ()\n  :functions\n  ((a \n    (expression)\n    (format stream \"~a\" expression))\n   \n   (newline-out\n    ()\n    (format stream \"~%\"))))\n\n\n6.3 define-lens\n===============\n\nAs its name implies, the define-lens macro is used to define a\n``lens'' to a object, from the perspective of a given format. A lens\nis a way of defining methods which apply to a object when ``viewed''\nthrough the ``lens'' of a particular format. Therefore, views are\ndefined (and named) according to a particular object type, and a\nparticular format.\n\nThe Syntax is:\n\n (define-lens (<format-name> <object-type>) (<mixin-lists>) <spec-plist>)\n\n<format-name> is the name of a format which must already be defined",
    "metadata": {
      "source": "usage.txt",
      "file_name": "usage.txt",
      "file_type": "txt",
      "content_type": "usage_guide",
      "topic": "general",
      "chunk_id": 25,
      "chunk_count": 34
    },
    "id": "ba245cc7b5515ee09fd6e3692bd7c61b"
  },
  {
    "text": "e, and a\nparticular format.\n\nThe Syntax is:\n\n (define-lens (<format-name> <object-type>) (<mixin-lists>) <spec-plist>)\n\n<format-name> is the name of a format which must already be defined\nwith define-format. <object-type> is the name of an object type which\nmust already be defined with define-object.\n\n<mixin-lists> is currently unused. Inheritance for define-lens in GDL\ncurrently simply follows the inheritance of the particular format and\nobject named in the define-lens. At some point more explicit inheritance\ncontrol might be added using these <mixin-lists>.\n\n<spec-plist> is a plist made up of pairs made from special keywords\nand expression lists define-lens in GDL currently only supports the\n``:output-functions'' section keyword.\n\nOutput-functions are defined like normal :functions on an object,\nhowever, in addition to sending messages to the object with normal\n``the'' referencing macro, the ``write-env'' macro may also be used to",
    "metadata": {
      "source": "usage.txt",
      "file_name": "usage.txt",
      "file_type": "txt",
      "content_type": "usage_guide",
      "topic": "general",
      "chunk_id": 26,
      "chunk_count": 34
    },
    "id": "8730d6f13e155050f66469e56c384690"
  },
  {
    "text": "object,\nhowever, in addition to sending messages to the object with normal\n``the'' referencing macro, the ``write-env'' macro may also be used to\ncall :functions which are known to be defined for the associated\nformat.\n\nExample:\n========\n\n(define-lens (base-format try)()\n  :output-functions\n  ((:summary\n    ()\n    (write-env (a \"The value is: \") (a (the value))\n\t       (newline-out)\n\t       (a \"The color of ``this'' is: \") (a (the this color))\n\t       (newline-out)\n\t       (a \"The color of ``that'' is: \") (a (the (these 0) color))\n\t       (newline-out)))))\n\n6.4 with-format\n===============\n\nThe with-format macro sets up an environment for calling :functions of\nformats (using ``write-env'' -- see below) and :output-functions of\nviews (using ``write-the'' and ``write-the-object'').\n\nThe syntax is:\n\n (With-format (<format-name> <stream-or-pathname>) \n    <body>)\n\n\n<format-name> is the name of a format which has been defined with\n``define-format''",
    "metadata": {
      "source": "usage.txt",
      "file_name": "usage.txt",
      "file_type": "txt",
      "content_type": "usage_guide",
      "topic": "general",
      "chunk_id": 27,
      "chunk_count": 34
    },
    "id": "4e51fd68db9c0a7d33dbf6de4d524898"
  },
  {
    "text": "ax is:\n\n (With-format (<format-name> <stream-or-pathname>) \n    <body>)\n\n\n<format-name> is the name of a format which has been defined with\n``define-format''\n\n<stream-or-pathname> is a variable or expression which evaluates to a\nstream which can accept output or to a string or pathname which can be\nopened to accept output.\n\n<body> can contain any normal Lisp expressions as well as the format\nand view reference macros ``write-env,'' ``write-the-object,'' and\n``write-the'' (see below).\n\nWithin <body>, the parameter ``stream'' will be dynamically bound to\nthe stream specified by <stream-or-pathname>, or to a file stream\nopened to stream-or-pathname, if it is a string or pathname. Because\nit is dynamically bound, this means any other functions or methods\ncalled within <body> will also see the correct value of ``stream.''\n\n6.4.1 Write-Env\n===============\n\nWrite-env must be called either within the (dynamic) body of a\n``with-format'' or within an :output-function of a view, and is used",
    "metadata": {
      "source": "usage.txt",
      "file_name": "usage.txt",
      "file_type": "txt",
      "content_type": "usage_guide",
      "topic": "general",
      "chunk_id": 28,
      "chunk_count": 34
    },
    "id": "a86224b3be6a17e37115c769a0f33d5a"
  },
  {
    "text": "correct value of ``stream.''\n\n6.4.1 Write-Env\n===============\n\nWrite-env must be called either within the (dynamic) body of a\n``with-format'' or within an :output-function of a view, and is used\nto invoke :functions defined on the specified format\n\nExamples:\n\n(define-lens (base-format try)()\n  :output-functions\n  ((summary\n    ()\n    (write-env (a \"The value is: \") (a (the value))\n\t       (newline-out)\n\t       (a \"The color of ``this'' is: \") (a (the this color))\n\t       (newline-out)\n\t       (a \"The color of ``that'' is: \") (a (the (these 0) color))\n\t       (newline-out)))))\n\n(with-format (base-writer \"/tmp/try.txt\")\n  (write-env (a \"This is a test\")))\n\n\n6.4.2 Write-The-Object\n======================\n\nSyntax:\n\n(write-the-object <object> <reference-chain>)\n\n``write-the-object'' works in similar fashion to ``the-object'' in the\nsense that it handles reference chains, but the last element in the\nreference chain must name a :output-function defined in a relevant\nview.",
    "metadata": {
      "source": "usage.txt",
      "file_name": "usage.txt",
      "file_type": "txt",
      "content_type": "usage_guide",
      "topic": "general",
      "chunk_id": 29,
      "chunk_count": 34
    },
    "id": "1f4cea53082fe6edac6c19e3c645a367"
  },
  {
    "text": "ilar fashion to ``the-object'' in the\nsense that it handles reference chains, but the last element in the\nreference chain must name a :output-function defined in a relevant\nview. ``Write-the-object'' must be called inside the (dynamic) body of\na ``with-format'' so that the effective format and stream will be\nknown. The :output-function indicated by the last element of the\nreference chain will be invoked, which presumably will write some\noutput to the specified stream.\n\nCurrently the ``evaluate'' macro is not implemented in GDL to resolve\nthe :write-method name at runtime, so this name must be given as a\nliteral symbol in the compiled source.\n\n\nExample:\n========\n\n(with-writer (base-format *standard-output*)\n  (write-the-object (make-object 'try) (summary)))\n\n2.4.3 Write-The\n===============\n\nSyntax:\n\n(write-the <reference-chain>)\n\n``Write-the'' is similar to ``Write-the-object,'' but it assumes\n``self'' as the object, so it is not necessary to pass the object",
    "metadata": {
      "source": "usage.txt",
      "file_name": "usage.txt",
      "file_type": "txt",
      "content_type": "usage_guide",
      "topic": "general",
      "chunk_id": 30,
      "chunk_count": 34
    },
    "id": "0f8a9ae74384e7f4336e88acd6986a76"
  },
  {
    "text": "Syntax:\n\n(write-the <reference-chain>)\n\n``Write-the'' is similar to ``Write-the-object,'' but it assumes\n``self'' as the object, so it is not necessary to pass the object\nexplicitly to ``write-the'' as is necessary with ``write-the-object.''\n\nExample:\n========\n\n(with-writer (base-format *standard-output*)\n  (let ((self (make-object 'try)))\n    (write-the (summary))))\n\n\nFor further examples and a listing of built-in formats currently\nshipping with GDL/GWL, please see output-formats.txt.\n\n\n\n7 Object Amendments\n===================\n\nThe macro define-object-amendment can be used to extend and/or\nredefine both user-defined objects and built-in GDL objects. The\nsyntax for define-object-amendment is identical to that for\ndefine-object. Any additional elements will be added to the\ndefinition, and any elements with the same names as existing elements\nwill overwrite the existing elements currently loaded into the system.\n\n\n\n8 Extensions and Implementations\n================================",
    "metadata": {
      "source": "usage.txt",
      "file_name": "usage.txt",
      "file_type": "txt",
      "content_type": "usage_guide",
      "topic": "general",
      "chunk_id": 31,
      "chunk_count": 34
    },
    "id": "4f37a6361019f4781bf335b3525b10b0"
  },
  {
    "text": "any elements with the same names as existing elements\nwill overwrite the existing elements currently loaded into the system.\n\n\n\n8 Extensions and Implementations\n================================\n\nGenworks also provides a large set of built-in primitives and\ninterfaces for our GDL product, written in the GDL language. \n\nAlthough Genworks currently produces the only available full-featured\nimplementation of the GDL language specification, this core language\nspecification also represents something of a de-facto standard for KBE\nlanguages based in ANSI Common Lisp. If new implementations emerge, we\nencourage them to adopt this standard as well, and communicate with\nGenworks regarding refinements and further extensions, so that the\nIndustry can move toward a true vendor-neutral Standard KBE language\nspecification.",
    "metadata": {
      "source": "usage.txt",
      "file_name": "usage.txt",
      "file_type": "txt",
      "content_type": "usage_guide",
      "topic": "general",
      "chunk_id": 32,
      "chunk_count": 34
    },
    "id": "ca30464eab584e1bddc69b366c3cd5e6"
  },
  {
    "text": "uage\nspecification.",
    "metadata": {
      "source": "usage.txt",
      "file_name": "usage.txt",
      "file_type": "txt",
      "content_type": "usage_guide",
      "topic": "general",
      "chunk_id": 33,
      "chunk_count": 34
    },
    "id": "51fedb871cd11f7a5d511c47dce7ad20"
  },
  {
    "text": "(in-package :gdl-user)\n\n(eval-when (:compile-toplevel :load-toplevel :execute)\n  (unless (find-package :ql) (load-quicklisp)))\n\n\n(eval-when (:compile-toplevel :load-toplevel :execute)\n  (defparameter *training-home*\n    (make-pathname :name nil :type nil :defaults (glisp:source-pathname)))\n  ;;(unless (find-package :ql) (load-quicklisp))\n  (pushnew (probe-file *training-home*) ql:*local-project-directories* :test #'equalp))\n  \n\n(defparameter *ci-commit-branch* (let ((branch (or (uiop:getenv \"CI_COMMIT_BRANCH\")\n                                                   (uiop:run-program \"git branch --show-current\"\n                                                                     :output :string\n                                                                     :error :string\n                                                                     :ignore-error-status t))))\n                                   (if branch (make-keyword branch) :unspecified)))",
    "metadata": {
      "source": "gornschool-training/make.lisp",
      "file_name": "make.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "general",
      "chunk_id": 0,
      "section": "header"
    },
    "id": "b2f5dfcd4e2cc6b37be6aaba2387fb4b"
  },
  {
    "text": ":ignore-error-status t))))\n                                   (if branch (make-keyword branch) :unspecified)))\n\n(defparameter *ci-commit-sha* (uiop:getenv \"CI_COMMIT_SHA\"))\n\n(defvar *ci-info* (list :branch *ci-commit-branch* :sha *ci-commit-sha*))",
    "metadata": {
      "source": "gornschool-training/make.lisp",
      "file_name": "make.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "general",
      "chunk_id": 1,
      "section": "header"
    },
    "id": "625d3e377664fab787a45c391187acd5"
  },
  {
    "text": "(define-object training (gdl-app)\n\n  :input-slots\n  ((deploy? nil))\n\n\n  :computed-slots\n  ((application-name (case *ci-commit-branch*\n                       (:master \"training\")\n                       (:devo \"training-devo\")\n                       (otherwise \"training-test\")))\n\n   (target-host \"gornschool.com\")\n\n   ;;\n   ;; FLAG Much of what's below consider to become generic for all\n   ;;      deployments. extract \"training\" anything from below.\n   ;;\n\n   (fullchain-pem (format nil \"/etc/keys/~a/fullchain.pem\" (the target-host)))\n   (privkey-pem (format nil \"/etc/keys/~a/privkey.pem\" (the target-host)))\n\n   (build-level :gwl-graphics)\n\n   (generate-scripts? t)   \n\n   (overwrite? t)\n\n   (overwrite-validation-function #'(lambda(pathname)\n                                      (search (the application-name)\n                                              (namestring pathname))))\n\n   (pre-make-function (lambda()\n                        (ql:quickload :training)\n                        (ql:quickload :cl-smtp)))\n\n   (post-load-form (progn\n\n\t\t     (print-variables (the fullchain-pem) (the privkey-pem))\n\t\t     \n\t\t     (remove\n                      nil\n                      `(progn\n\t\t\t ,(when *ci-commit-branch*\n                            `(setf (symbol-value (read-from-string \"training-home::*ci-commit-branch*\"))\n                                   ,*ci-commit-branch*))\n\t\t\t ,(when *ci-commit-sha*\n                            `(setf (symbol-value (read-from-string \"training-home::*ci-commit-shea*\"))\n                                   ,*ci-commit-sha*))))))\n\n\n   (application-fasls\n    (mapcar #'(lambda(system)\n                (asdf:operate 'asdf:monolithic-compile-bundle-op system)\n                (asdf:output-file 'asdf:monolithic-compile-bundle-op system))\n            (list :training :cl-smtp)))\n\n   (http-port (case *ci-commit-branch*\n                ((:master :main) 80)\n                (:devo 9080)\n                (otherwise 9090)))\n\n   (https-port (let ((branch *ci-commit-branch*))\n\t\t (print-variables branch)\n\t\t (let ((port\n\t\t\t (case branch\n\t\t\t   ((:master :main) 443)\n\t\t\t   (:devo 9443)\n\t\t\t   (otherwise 9443))))\n\t\t   (print-variables port)\n\t\t   port)))\n\n   (swank-port (case *ci-commit-branch*\n                 ((:master :main) 1088)\n                 (:devo 10088)\n                 (otherwise 10098)))\n\n   (restart-init-function\n\n    (progn\n\n      (format t \"Building restart-init-function~%\")\n      (print-variables (the privkey-pem) (the fullchain-pem)\n\t\t       (the http-port) (the https-port) (the swank-port))\n    \n      `(lambda()\n\n\t (format t \"Now Starting training app...~%\")\n\n\t (setq gwl:*privkey-pem-path* ,(the privkey-pem))\n\t (setq gwl:*fullchain-pem-path* ,(the fullchain-pem))\n\n\t (gwl::reset-settings)\n\n\t (print-variables gwl:*privkey-pem-path* gwl:*fullchain-pem-path*)\n\n\t (if (and gwl:*privkey-pem-path*\n                  (probe-file gwl:*privkey-pem-path*)\n                  gwl:*fullchain-pem-path*\n                  (probe-file gwl::*fullchain-pem-path*))\n\t     (progn\n\t       (setq gwl:*http-port* ,(the http-port)\n\t\t     gwl:*start-https?* t\n\t\t     gwl:*https-port* ,(the https-port))\n\t       (gendl:start-gendl!))\n             (warn \"Cannot find SSL certificate files: ~a and/or ~a\"\n                   gwl::*privkey-pem-path* gwl::*fullchain-pem-path*))\n\n\t ;; #+zacl (setq cl+ssl:*default-cipher-list* \"@SECLEVEL=0:kEECDH+ECDSA:kEECDH:kEDH:HIGH:MEDIUM:+3DES:+SHA:!RC4:!aNULL:!eNULL:!LOW:!MD5:!EXP\")\n\n\t ;;\n\t ;; Demote this service  process to a normal user\n\t ;;\n\t (when (zerop (glisp:getuid))\n           (format t \"~&~%Demoting process to normal user ...~%\")\n           ;;\n           ;; FLAG -- figure out how to not hardcode the gid/uid below.\n           ;;\n           (glisp:setgid 997) (glisp:setuid 1000))\n\t \n\t ;;\n\t ;; Try to start swank listener after user is set correctly.\n\t ;;\n\t ;; FLAG -- may have to open permissions on /root/.slime/ because\n\t ;; setuid does not change the effective home directory. Figure\n\t ;; out how to change effective home directory.\n\t ;;\n\t (swank:create-server :port ,(the swank-port) :dont-close t)\n\n\t ;;\n\t ;; Set the main asset home directory then call all initializers in order.\n\t ;;\n\t (setf (symbol-value (read-from-string \"training-common:*home*\"))\n\t       (merge-pathnames \"training-source/\" (glisp:executable-homedir-pathname)))\n\n         ;;\n         ;; Application-level init\n         ;;\n\t (funcall (read-from-string \"training-common:initialize-all\"))\n\t ;;\n\t ;; FLAG -- extract this to another repo and load quiz as a  module only if needed.\n\t ;;\n\t (when (find-package :quiz)\n           (setf (symbol-value (read-from-string \"quiz:*vocab-pathname*\"))\n\t\t (merge-pathnames \"sanskrit/vocab/\" (symbol-value (read-from-string \"training-common:*home*\"))))\n           (funcall (read-from-string \"quiz:publish-endpoints\")))\n\n\t (setq gwl:*developing?* ,(case *ci-commit-branch*\n\t\t\t\t    ((:master :main :devo) nil)\n\t\t\t\t    (otherwise t)))\n\n\t (format t \"~&~%Sleeping the main thread to become a webserver...~%\")\n\n\t (force-output)\n\n\t (do () () (sleep 10000)))))))\n\n\n\n\n",
    "metadata": {
      "source": "gornschool-training/make.lisp",
      "file_name": "make.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "general",
      "chunk_id": 0,
      "section": "training"
    },
    "id": "b2f5dfcd4e2cc6b37be6aaba2387fb4b"
  },
  {
    "text": "(defun training-app (&key deploy?)\n  (let* ((self (make-object 'training :deploy? deploy?))\n         ;;(*default-pathname-defaults* (the destination-directory))\n         )\n    (the make!)))\n\n\n;; backups of DNS configuration entries:\n#|\n\nTXT record\n\ndefault._domainkey\n\nv=DKIM1; h=sha256; k=rsa; p=MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAhRL3xx1EyaUJjUYSaqSUC+FwIFOX84VPq7X/Y2Fcp3vq5XjdBNE4OUW/XNklLbzQ+ms6E7v3D9EbgDoVKXePba07QbeDL+0afv+YHm14IJZYlrpTniQLhsAHKxfKmlDhgEDLqHfIr0p+Pl8sXX6UPApHbTzr8Uo3z7RXLZSi/wnn0vkc5lYrvlUzuAsPuqapQwzebPnCyh/0BEWTJY5u+43vNtqEj/902NLED9cdFCBGOTTCm9v+Nuo6hMTWyO3HAXGt4UThFj4tWapBW7RVmb17QlZLbgmXZeJDTInecYPmiPIrkBTbLjzrA4100JXtpd5n/ZLl+qtrgwtqtsLBXQIDAQAB0;173;54M0;173;54m\n\nAutomatic\n\n\n|#\n",
    "metadata": {
      "source": "gornschool-training/make.lisp",
      "file_name": "make.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "general",
      "chunk_id": 1,
      "section": "training-app"
    },
    "id": "625d3e377664fab787a45c391187acd5"
  },
  {
    "text": "(in-package :gdl-user)\n\n(load-quicklisp)\n\n(push (truename \"./\") ql:*local-project-directories*)\n(load \"./make.lisp\")\n\n(let ((hostname (uiop:hostname)))\n  (training-app :deploy? (string-equal hostname \"gornschool.com\")))\n",
    "metadata": {
      "source": "gornschool-training/load.lisp",
      "file_name": "load.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "general",
      "chunk_id": 0,
      "section": "header"
    },
    "id": "b604d3f81aa062b918a34116eee5133b"
  },
  {
    "text": "(in-package :training-1)\n\n",
    "metadata": {
      "source": "gornschool-training/t1/source/installation.lisp",
      "file_name": "installation.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_1_object_definition",
      "chunk_id": 0,
      "section": "header"
    },
    "id": "a5d92c27823863c3f9391281ef9588b1"
  },
  {
    "text": "(define-object installation (base-training-sheet)\n\n  :input-slots\n  (index-url)\n\n  :computed-slots\n  (\n   (body-content\n    (with-cl-who-string ()\n\n      (:p \"You have several options for developing and deploying applications using GendL and Genworks GDL. \"\n          (:em \"GendL\")\n          \" refers to an open-source project hosted at \"\n          (:a :href \"https://gitlab.common-lisp.net/gendl/gendl.git\" \"common-lisp.net\")\n          \" whose copyright is owned by \"\n          (:a :href \"https://genworks.com\" \"Genworks\")\n          \" and which is licensed under the \"\n          (:a :href \"https://www.gnu.org/licenses/agpl-3.0.en.html\" \"GNU Affero General Public License\")\n          \" The AGPL licensing means essentially that GendL and its derivatives\ncan be used free of charge in any way you want, as long as you comply\nwith AGPL by making available your application source code to your\nusers. If you were to host or distribute a compiled GendL application\nwithout complying with AGPL requirements, you would be putting\nyourself and any company you're associated with into legal jeopardy.\")\n\n      (:p \"Please do not be concerned about legal jeopardy, however, as there are several ways to make good use of GendL and KBE while avoiding this risk:\"\n          (:ul\n           (:li \"Host your application source code at a public repository such as \"\n                (:a :href \"https://github.com\" \"Github\") \" or a \" (:a :href \"https://gitlab.common-lisp.net\" \"Gitlab\") \" instance.\")\n           (:li \"Host your running applications using our Hosting Infrastructure (coming soon), which will automatically take care of offering source code to users.\")\n           (:li \"Contact Genworks and arrange to purchase a commercial Genworks GDL seat (these seats are built with commercial Allegro Common Lisp and\ncome with technical support as well as other Enterprise-oriented features.)\")))\n\n\n      (:p\n       \"Up to date prebuilt GendL executable images, based on Clozure CL\n1.12, are available for Windows and Linux on 64-bit Intel\nprocessors. For other Operating Systems and Processors, you can use\nthe Docker container approach (see below), or build GendL from source\non a compliant CL implementation such as Allegro CL, Clozure CL (CCL),\nClasp, LispWorks, or SBCL, on your OS platform of choice (see below). \")\n\n      (:h3 \"Prebuilt GendL for Windows and Linux\")\n      (:p \"You can download the latest prebuilt 64-bit Gendl images\n for Windows or Linux according to the following build combinations:\"\n\n\t  ;;make a table of the following combos, each with a download link. I'll do the first as an example. Combos are:\n\t  ;; \n\t  ;; Linux/SBCL/zip\n\t  ;; Linux/CCL/zip\n\t  ;; Windows/SBCL/zip\n\t  ;; Windows/CCL/zip\n\t  ;; Windows/SBCL/exe\n\t  ;; Windows/CCL/exe\n\t  ;;\n\t  ;; The table will have 3 columns: OS, Lisp, and Archive Type. The download link will be in the Archive Type column.\n\t  ;; The table will have 6 rows, one for each of the above combinations.\n\n\t  (:div\n\t   :class \"mt-8 flow-root\"\n\t   (:div\n\t    :class \"-mx-4 -my-2 overflow-x-auto sm:-mx-6 lg:-mx-8\"\n\t    (:div\n     :class \"inline-block min-w-full py-2 align-middle sm:px-6 lg:px-8\"\n\t     (:table :class \"table-auto border-2 border-green-700 mx-6 divide-x divide-y\"\n\t       (:thead\n\t\t(:tr\n\t\t (dolist (heading (list \"OS\" \"Lisp\" \"File Type\" \"Download\" \"GPG Signature\"))\n\t\t   (htm \n\t\t    (:th\n\t\t     :scope \"col\" :class \"text-center border-2 border-gray-600 py-3.5 pl-4 pr-3 text-lg font-semibold text-gray-900\" (str heading))))))\n\t       (:tbody\n\t\t:class \"divide-x divide-y\"\n\t\t(dolist (row (list\n\t\t\t      (list \"Windows\" \"SBCL\" \"Zip\" \"https://downloads.genworks.com/gendl1598-beta-windows-sbcl.zip\" \"https://downloads.genworks.com/gendl1598-beta-windows-sbcl.zip.sig\")\n\t\t\t      (list \"Windows\" \"Clozure CL\" \"Zip\" \"https://downloads.genworks.com/gendl1598-beta-windows-ccl.zip\" \"https://downloads.genworks.com/gendl1598-beta-windows-ccl.zip.sig\")\n\t\t\t      (list \"Windows\" \"SBCL\" \"exe\" \"https://downloads.genworks.com/gendl1598-beta-windows-sbcl.exe\" \"https://downloads.genworks.com/gendl1598-beta-windows-sbcl.exe.sig\")\n\t\t\t      (list \"Windows\" \"Clozure CL\" \"exe\" \"https://downloads.genworks.com/gendl1598-beta-windows-ccl.exe\" \"https://downloads.genworks.com/gendl1598-beta-windows-ccl.exe.sig\")\n\t\t\t      (list \"Linux\" \"SBCL\" \"Zip\" \"https://downloads.genworks.com/gendl1598-beta-linux-ccl.zip\" \"https://downloads.genworks.com/gendl1598-beta-linux-ccl.zip.sig\")\n\t\t\t      (list \"Linux\" \"Clozure CL\" \"Zip\"\n\t\t\t\t    \"https://downloads.genworks.com/gendl1598-beta-linux-ccl.exe\"\n\t\t\t\t    \"https://downloads.genworks.com/gendl1598-beta-linux-ccl.exe.sig\"\n\t\t\t\t    )))\n\t\t  (destructuring-bind (os lisp archive-type link sig-link) row\n\t\t    (htm\n\t\t     (:tr\n\t\t      (:td :class \"px-6 border-2 border-gray-600 whitespace-nowrap py-4 pl-4 pr-3 text-sm  text-gray-900 \" (str os))\n\t\t      (:td :class \"px-6 border-2 border-gray-600 whitespace-nowrap py-4 pl-4 pr-3 text-sm  text-gray-900 \" (str lisp))\n\t\t      (:td :class \"px-6 border-2 border-gray-600 whitespace-nowrap py-4 pl-4 pr-3 text-sm  text-gray-900 \" (str archive-type))\n\t\t      (:td :class \"px-6 border-2 border-gray-600 whitespace-nowrap py-4 pl-4 pr-3 text-sm  text-gray-900 \" (:a :href link \"Download\"))\n\t\t      (:td :class \"px-6 border-2 border-gray-600 whitespace-nowrap py-4 pl-4 pr-3 text-sm  text-gray-900 \" (:a :href sig-link \"GPG Signature *\"))\n\t\t      )))))))\n\n\t    (:div :class \"inline-block min-w-full py-2 align-middle sm:px-6 lg:px-8\"\n\t\t  \"* \" (:a :href \"https://downloads.genworks.com/publickey.asc\"\n\t\t\t   \"Public Key for GPG Signatures\")))))\n\n\n      (:p \"Note the large Zip files which on Windows may take several minutes to\nextract using the \\\"Extract All\\\" action from Windows File\nExplorer. The free 7-zip program available from\"\n          (:a :href \"https://www.7-zip.org\" \"7-zip.org\")\n          \" is much faster at extracting these archives than the built-in one in\n Windows File Explorer. The \"\n\t  (:span :class \"general-keyword\" \"unzip\")\n\t  \" command which ships with Git Bash Shell is also much faster.\")\n      (:p \"Once it is finished extracting, you may run the \"\n          (:span :class \"general-keyword\" \"run-gdl[.bat]\")\n          \" script which can be found at the toplevel of then extracted directory.\nThis script will launch Gnu Emacs, which will in turn launch and initialize a GendL instance as a subprocess.\")\n\n      (:p\n       \"Note that you may have to override the default Windows security settings\nto allow the script to run, when running it for the first time,\ni.e. the .exe archive will show as coming from an \\\"unverified\npublisher,\\\" and this is expected for now. Windows may also ask you\nabout a certain service or port being started by your program. You can\nsafely disallow it, if you plan to use only \\\"localhost\\\" to access\nyour local Gendl server. If you plan to access your Gendl server from\nother computers on your network, you will want to grant permission to\nthe service or port.\")\n     \n\n      (:h3 \"GendL as a Docker container\")\n\n      (:p\n       \"You can run the latest development version of GendL on any operating\nsystem where you have  a bash shell and \"\n       (:a :href \"https://docker.com\" \"Docker\")\n       \" installed (free version sufficient). On Windows, the easiest way to get Docker and a bash shell is\nby installing the Microsoft-supported \"\n       (:a :href \"https://docs.microsoft.com/en-us/windows/wsl/install\" \"Windows System for Linux 2 (WSL2)\"))\n      (:p \n       \" To get GendL running in a container, follow these steps: \"\n       (:ol (:li \"Clone the \"\n                 (:a :href \"https://gitlab.common-lisp.net/gendl/gendl.git\" \"GendL repository\")\n                 \", for example with the command \"\n                 (:span :class \"general-keyword\" \"git clone https://gitlab.common-lisp.net/gendl/gendl.git\"))\n            (:li \". This repository will contain a file \" (:span :class \"general-keyword\" \"docker/run [--sbcl]\")\n                 \". Run this script.  It will fetch and run a prebuilt container image matching the repository branch you have cloned.\nYou may choose your branch from the official GendL codebase branches:\"\n                 (:dl (:dt (:b \"master\")) (:dd \"The current official stable released version.\")\n                      (:dt (:b \"devo\")) (:dd \"The current version under active development. Contains newest features but may be unstable.\")\n                      (:dt (:b \"release/1598\")) (:dd \"The current release candidate for GendL 1598 (or other version), used for producing beta releases\")))\n            (:li \"Load the file from the repository: \"\n                 (:span :class \"general-keyword\" \"emacs/gdl.el\")\n                 \" into your emacs (e.g. using \"\n                 (:span :class \"general-keyword\" \"M-x load-file\") \")\")\n            (:li \"In emacs, connect to the GendL server using \"\n                 (:span :class \"general-keyword\" \"M-x slime-connect\")\n                 \" and specify the host as \"\n                 (:span :class \"general-keyword\" \"localhost\")\n                 \" and the port as \"\n                 (:span :class \"general-keyword\" \"4200\"))))\n\n\n      (:h3 \"GendL compiled from source\")\n\n      (:p\n       \"If you are already set up with Common Lisp and Quicklisp, you can load and start\nGendL with the following commands: \"\n       (:span :class \"general-keyword\" \"(ql:quickload :gendl) (gendl:start-gendl!)\")\n       \". If you'd like to work with the latest development (\\\"devo\\\") version\nof GendL, then you may clone its repository into your \"\n       (:span :class \"general-keyword\" \"quicklisp/local-projects/\")\n       \" directory, then the above command will load it from there rather than its official distribution location (the\nofficial distribution will typically be built from the latest \"\n       (:span :class \"general-keyword\" \"master\")\n       \" branch. In order to clone the \"\n       (:span :class \"general-keyword\" \"devo\")\n       \" branch, the commands would be:\" :br\n       (:span :class \"general-keyword\" \"git clone https://gitlab.common-lisp.net/gendl/gendl.git; cd gendl; git checkout devo\"))\n\n\n      (:h3 \"Commercial Genworks GDL\")\n      (:p \"Genworks offers commercial Genworks GDL distributions built with\nthe commercial Allegro Common Lisp system. These distributions require an encrypted license file\nto run and are available through an email-based download gateway.\")\n      (:p \"If you would like to inquire about an entitlement for supported commercial\nGenworks GDL, then please contact Genworks at \"\n          (:span :class \"general-keyword\" \"licensing@genworks.com\")\n          \" and you will be provided with further information.\")))))\n\n                    \n\n          \n\n                          \n\n\n",
    "metadata": {
      "source": "gornschool-training/t1/source/installation.lisp",
      "file_name": "installation.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_1_object_definition",
      "chunk_id": 0,
      "section": "installation"
    },
    "id": "a5d92c27823863c3f9391281ef9588b1"
  },
  {
    "text": "(in-package :training-1)\n\n",
    "metadata": {
      "source": "gornschool-training/t1/source/web-based-ide.lisp",
      "file_name": "web-based-ide.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_1_object_definition",
      "chunk_id": 0,
      "section": "header"
    },
    "id": "1f7ffed5621f0c58c2ccc8c8a812284a"
  },
  {
    "text": "(define-object web-based-ide (base-training-sheet)\n  :input-slots\n  (index-url)\n\n  :computed-slots\n  ((main-sheet-body (with-cl-who-string ()\n                      (:h2 (str (the page-header)))\n                      (:p \"Genworks or one of its parters/VARs will be offering a no-install\noption to develop with GendL and Genworks GDL based on running emacs\ninside a web terminal. Please check this space for links once the service is live.\")))))\n\n                          \n\n\n",
    "metadata": {
      "source": "gornschool-training/t1/source/web-based-ide.lisp",
      "file_name": "web-based-ide.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_1_object_definition",
      "chunk_id": 0,
      "section": "web-based-ide"
    },
    "id": "1f7ffed5621f0c58c2ccc8c8a812284a"
  },
  {
    "text": "(in-package :gdl-user)\n\n(gwl:define-package :training-1\n    (:use :training-common)\n  (:shadow #:*home*)\n  (:export #:assembly))\n",
    "metadata": {
      "source": "gornschool-training/t1/source/package.lisp",
      "file_name": "package.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_1_package",
      "chunk_id": 0,
      "section": "header"
    },
    "id": "2aeae12b93269de4ea3950ffabbd7e71"
  },
  {
    "text": "(in-package :training-1)\n\n(defparameter *publish-prefix* \"t1\")\n\n",
    "metadata": {
      "source": "gornschool-training/t1/source/assembly.lisp",
      "file_name": "assembly.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_1_object_definition",
      "chunk_id": 0,
      "section": "header"
    },
    "id": "5be0fc2db08f5171d7e036a4cc11daf4"
  },
  {
    "text": "(define-object assembly (base-tutorial-sheet)\n  :input-slots\n  (tutorial-index\n  (tutorial-name \"Installation and Setup\"))\n\n\n\n\n  :objects\n  ((installation :type 'installation\n                 :pass-down (page-objects)\n                 :page 1\n                 :page-title \"Installation of your GendL-based System\"\n                 :publish-prefix *publish-prefix*\n                 :index-url (the index-page url))\n   \n   (learning-emacs :type 'learning-emacs\n                   :pass-down (page-objects)\n                   :page 2\n                   :page-title \"Learning Emacs\"\n                   :publish-prefix *publish-prefix*\n                   :index-url (the index-page url))\n   \n   (learning-slime :type 'learning-slime\n                   :pass-down (page-objects)\n                   :page 3\n                   :page-title \"Learning Slime\"\n                   :publish-prefix *publish-prefix*\n                   :index-url (the index-page url))\n   \n   ))\n\n  \n\n\n\n\n\n\n\n",
    "metadata": {
      "source": "gornschool-training/t1/source/assembly.lisp",
      "file_name": "assembly.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_1_object_definition",
      "chunk_id": 0,
      "section": "assembly"
    },
    "id": "5be0fc2db08f5171d7e036a4cc11daf4"
  },
  {
    "text": "(in-package :training-1)\n\n",
    "metadata": {
      "source": "gornschool-training/t1/source/learning-emacs.lisp",
      "file_name": "learning-emacs.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_1_object_definition",
      "chunk_id": 0,
      "section": "header"
    },
    "id": "1631872ee7b009b9ee691d7e039248f0"
  },
  {
    "text": "(define-object learning-emacs (base-training-sheet)\n  :input-slots\n  (index-url)\n\n  :computed-slots\n  ((body-content (with-cl-who-string ()\n                   (:p\n                       \"Regardless of which installation method you choose, you will need to become\nfamilar with Gnu Emacs as a first step. Every installation of Gnu Emacs contains a built-in tutorial\nwhich you can access by typing \"\n                       (:span :class \"general-keyword\" \"C-h t\")\n                       \" from inside Emacs (that's hold Control, type h, then release Control\nand type t.)\")\n\n\n                      (:p \"Note on CapsLock: Because the Control key\nis used extensively in Emacs, you may wish to remap your CapsLock to\nact as a Control key. On Windows, this can be done with the\nMicrosoft-supported tool Power Toys (available from Microsoft\nStore). On Linux desktops and MacOS, it is possible to map the\nCapsLock key to the Control key using the Settings or Preferences app.\")))))\n\n                      \n\n                          \n\n\n",
    "metadata": {
      "source": "gornschool-training/t1/source/learning-emacs.lisp",
      "file_name": "learning-emacs.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_1_object_definition",
      "chunk_id": 0,
      "section": "learning-emacs"
    },
    "id": "1631872ee7b009b9ee691d7e039248f0"
  },
  {
    "text": "(in-package :training-1)\n\n",
    "metadata": {
      "source": "gornschool-training/t1/source/learning-slime.lisp",
      "file_name": "learning-slime.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_1_object_definition",
      "chunk_id": 0,
      "section": "header"
    },
    "id": "88480b700ba4916bdb044bd9e5a0560d"
  },
  {
    "text": "(define-object learning-slime (base-training-sheet)\n  :input-slots\n  (index-url)\n\n  :computed-slots\n  ((body-content (with-cl-who-string ()\n                   (:p\n                    (:a :href \"https://slime.common-lisp.dev\" \"Slime\")\n                    \" is the Superior Lisp Interaction Mode for Emacs. If you've successfully installed\nGendl or Genworks GDL according to the \"\n                    (:a :href (the installation url) \"Installation\")\n                    \" section, you will be presented with a Slime REPL prompt where you\ncan type Common Lisp and GendL commands. Although we don't teach all\nof Slime in this tutorial, we do provide examples of working at the REPL.\")\n\n                      (:p \"An excellent video overview of Slime can be found  \"\n                          (:a :href \"https://www.youtube.com/watch?v=_B_4vhsmRRI\" \"here\") \". (you can skip the beginning about installation).\")\n                      (:p \"And you don't need to know much to get started. Here are a few tips to get started:\"\n                          (:ul (:li \"If you get thrown into the debugger, type \"\n                                    (:span :class \"general-keyword\" \"a\") \" to get out of it.\")\n                               (:li \"At the REPL you can type \"\n                                    (:span :class \"general-keyword\" \"M-p\") \" to bring back previous command from history.\")\n                               (:li \"At the REPL you can type \"\n                                    (:span :class \"general-keyword\" \"M-n\") \" to bring up the next command from history.\")))))))\n\n\n                      \n\n                          \n\n\n\n",
    "metadata": {
      "source": "gornschool-training/t1/source/learning-slime.lisp",
      "file_name": "learning-slime.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_1_object_definition",
      "chunk_id": 0,
      "section": "learning-slime"
    },
    "id": "88480b700ba4916bdb044bd9e5a0560d"
  },
  {
    "text": "(in-package :gdl-user)\n\n(unless (uiop:getenv \"CI_COMMIT_SHA\") (training-common:initialize-all))\n",
    "metadata": {
      "source": "gornschool-training/zzend/source/initialize.lisp",
      "file_name": "initialize.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "general",
      "chunk_id": 0,
      "section": "header"
    },
    "id": "e9c59e54b7c86070e91408565a76bba2"
  },
  {
    "text": "(in-package :gdl-user)\n\n(gwl:define-package :training-home\n    (:use :training-common)\n  (:shadow #:*home*)\n  (:export #:assembly))\n\n",
    "metadata": {
      "source": "gornschool-training/home/source/package.lisp",
      "file_name": "package.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "general",
      "chunk_id": 0,
      "section": "header"
    },
    "id": "8cc4d12ec895d49da35e8d1d416a0bf3"
  },
  {
    "text": "(in-package :training-home)\n\n",
    "metadata": {
      "source": "gornschool-training/home/source/assembly.lisp",
      "file_name": "assembly.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "general",
      "chunk_id": 0,
      "section": "header"
    },
    "id": "27b24b21a1f115931e32ed8227703785"
  },
  {
    "text": "(define-object assembly (training-common:base-site-mixin)\n\n  :input-slots ((email-address nil :settable) (restored? nil :settable) (opt-in? nil :settable))\n\n  :computed-slots\n  (\n\n   (title \"GendL Self-start Tutorials\")\n   \n   (page-header nil)\n\n   (body-content\n    (with-cl-who-string()\n      (:h2 \"GendL Self Start Tutorials\")\n\t\t  \n      (:p \"Welcome\"\n          (str (when (the restored?) \" back\"))\n          (str (if (the email-address) (format nil \", ~a\" (the email-address)) \"\"))\n          \" to the GendL Self-Start Tutorials, which are a set of training materials aimed at getting you up and running with GendL and introducing you to some of the development tools and techniques.\")\n                  \n      (:h3 \"So what is GendL?\")\n                  \n      (:p \"GendL is a dynamic, declarative, object-oriented language environment embedded in ANSI Common Lisp (CL).\")\n                  \n      (:p \"It consists of a collection of predefined objects, code-expansion macros, and functions which you, the GendL application developer, may either use directly or extend, to solve problems of any level of complexity decomposed into manageable units.\")\n\n      (:p \"GendL includes geometric primitives and has a built-in web server to  facilitate cross-platform deployment.\")\n\n      (:p \"GendL is open source (under the Gnu AGPL license) and has been ported to several ANSI Common Lisp implementations, including Allegro CL, LispWorks, Clozure CL (CCL), Steel Bank Common Lisp (SBCL), and Clasp. There is also a commercial version offering proprietary/closed-source distribution rights, full levels of technical support and with some extra features like surface and solid modelling. The commercial version is packaged with Allegro CL from Franz Inc.\")\n\n      (:h3 \"About These tutorials\")\n\n      (:p \"The tutorials are designed to be self-paced learning resources and where appropriate  contain example code files which may be downloaded. It is recommended that the first  two tutorials, \"\n          (:a :href (the installing-gendl url) \"Installing GendL\")\n          \" and \"\n          (:a :href (the getting-started url) \"Getting Started with GendL\")\n          \" are completed in that  order - after that we move into more specific or advanced subjects which may be undertaken as required. Within each tutorial there are a number of topics,  which we would suggest are undertaken in the order presented.\")\n\n      (:h3 \"Tutorials\")\n      ((:div :class \"ml-3\")\n       ((:ol :class \"list-decimal\")\n\t(dolist (plis (the tutorial-objects))\n\t  (htm (:li ((:a :href (getf plis :url)) (str (getf plis :tutorial-name))) (:br))))))))\n    \n   (tutorial-objects (safe-sort\n\t\t      (remove nil (mapcar #'(lambda(obj)\n\t\t\t\t\t      (when (theo obj  tutorial-index)\n\t\t\t\t\t\t(list :object obj :tutorial-index (theo obj tutorial-index)\n\t\t\t\t\t\t      :tutorial-name (theo obj tutorial-name) :url (theo obj url))))\n\t\t\t\t\t  (remove-if-not #'(lambda(child)(typep child 'base-tutorial-sheet))\n\t\t\t\t\t\t\t (the children))))\n\t\t      #'< :key #'(lambda(a) (getf a :tutorial-index)))))\n\n\n  ;;\n  ;; FLAG - make the below be a quantified set so we can navigate them more easily.\n  ;;\n  :objects\n  ((installing-gendl :type 'training-1:assembly\n\t\t     :tutorial-index 1\n\t\t     :tutorial-name \"Installing GendL\"\n                     :previous-page nil :next-page (the getting-started)\n                     )\n   \n   (getting-started :type 'training-2:assembly\n\t\t    :tutorial-index 2\n\t\t    :tutorial-name \"Getting started with GendL\"\n                    :previous-page (the installing-gendl) :next-page (the code-structuring))\n\n   \n   (code-structuring :type 'training-3:assembly\n\t\t     :tutorial-index 3\n\t\t     :tutorial-name \"Structuring and Organising your code\"\n                     :previous-page (the getting-started) :next-page (the file-io))\n\n\n   (file-io :type 'training-4:assembly\n\t    :tutorial-index 4\n\t    :tutorial-name \"Reading from and Writing to Files\"\n            :previous-page (the code-structuring) :next-page (the more-objects))\n\n\n   (more-objects :type 'training-5:assembly\n\t\t :tutorial-name \"More on Objects\"\n\t\t :tutorial-index 5\n\t\t :getting-started-url (the getting-started url)\n\t\t :define-object-url (the getting-started object-definition url)\n\t\t :wall-example-url (the getting-started wall-example url)\n\t\t :truss-example-url (the getting-started truss-example url)\n                 :previous-page (the file-io) :next-page (the websites))\n\n   (websites :type 'training-6:assembly\n             :tutorial-name \"Websites and Web Applications\"\n             :tutorial-index 6\n\t     :getting-started-tutorial (the getting-started)\n\t     :io-tutorial (the file-io)\n             :previous-page (the more-objects) :next-page nil)))\n\n\n\n",
    "metadata": {
      "source": "gornschool-training/home/source/assembly.lisp",
      "file_name": "assembly.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "general",
      "chunk_id": 0,
      "section": "assembly"
    },
    "id": "27b24b21a1f115931e32ed8227703785"
  },
  {
    "text": "(in-package :training-5)\n\n",
    "metadata": {
      "source": "gornschool-training/t5/source/trickle-down-slots.lisp",
      "file_name": "trickle-down-slots.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_5_object_definition",
      "chunk_id": 0,
      "section": "header"
    },
    "id": "0c5b156439d69dc5d4b5713ee7f36871"
  },
  {
    "text": "(define-object trickle-down-slots (base-training-sheet)\n  :input-slots\n  (getting-start-url\n   define-object-url\n   wall-example-url)\n  \n  :computed-slots\n  ((index-words (list \":trickle-down-slots\" \":defaulting\"))\n     (code-1 (list \"",
    "metadata": {
      "source": "gornschool-training/t5/source/trickle-down-slots.lisp",
      "file_name": "trickle-down-slots.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_5_object_definition",
      "chunk_id": 0,
      "section": "trickle-down-slots"
    },
    "id": "0c5b156439d69dc5d4b5713ee7f36871"
  },
  {
    "text": "(define-object top-level-1 (base-object)\"\n\t\t \"  :computed-slots\"\n\t\t \"  ((my-slot-1 5))\"\n\t\t \"\"\n\t\t \"  :objects\"\n\t\t \"  ((child-1 :type 'child-1\"\n\t\t \"            :my-slot-1 (the my-slot-1))\"\n\t\t \"\"\n\t\t \"   (child-2 :type 'child-2)))\"\n\t\t \"\"\n\t\t \"",
    "metadata": {
      "source": "gornschool-training/t5/source/trickle-down-slots.lisp",
      "file_name": "trickle-down-slots.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_5_object_definition",
      "chunk_id": 1,
      "section": "top-level-1"
    },
    "id": "811a9d7f706a33750407d0adb25c0f91"
  },
  {
    "text": "(define-object child-1 (base-object)\"\n\t\t \"  :input-slots\"\n\t\t \"  (my-slot-1))\"\n\t\t \"\"  \n\t\t \"",
    "metadata": {
      "source": "gornschool-training/t5/source/trickle-down-slots.lisp",
      "file_name": "trickle-down-slots.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_5_object_definition",
      "chunk_id": 2,
      "section": "child-1"
    },
    "id": "057acdc9cf782ea0902972684e1a1856"
  },
  {
    "text": "(define-object child-2 (base-object)\"\n\t\t \"  :input-slots\"\n\t\t \"  ((my-slot-1 3)))\"))\n   (repl-1 (list (list :command \"(make-self 'top-level-1)\"\n\t\t       :output \"#<TOP-LEVEL-1 #x210522168D>\")\n\t\t (list :command \"(the child-1 my-slot-1)\"\n\t\t       :output 5)\n\t\t (list :command \"(the child-2 my-slot-1)\"\n\t\t       :output 3)))\n   (code-2 (list \"",
    "metadata": {
      "source": "gornschool-training/t5/source/trickle-down-slots.lisp",
      "file_name": "trickle-down-slots.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_5_object_definition",
      "chunk_id": 3,
      "section": "child-2"
    },
    "id": "c0745cdc451b25495bad70487eab2bf4"
  },
  {
    "text": "(define-object top-level-2 (base-object)\"\n\t\t \"  :computed-slots\"\n\t\t \"  ((my-slot-1 5))\"\n\t\t \"\"\n\t\t \"  :objects\"\n\t\t \"  ((child-1 :type 'child-1\"\n\t\t \"            :pass-down (my-slot-1))))\"))\n   \n   (repl-2 (list (list :command \"(make-self 'top-level-2)\"\n\t\t       :output \"#<TOP-LEVEL-1 #x210561B13D>\")\n\t\t (list :command \"(the child-1 my-slot-1)\"\n\t\t       :output 5)))\n\n   (code-3 (list \"",
    "metadata": {
      "source": "gornschool-training/t5/source/trickle-down-slots.lisp",
      "file_name": "trickle-down-slots.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_5_object_definition",
      "chunk_id": 4,
      "section": "top-level-2"
    },
    "id": "2863ad449117a556ecaaf93d5f06012d"
  },
  {
    "text": "(define-object top-level-3 (base-object)\"\n\t\t \"  :computed-slots\"\n\t\t \"  ((my-slot-2 2))\"\n\t\t \"\"\n\t\t \"  :trickle-down-slots\"\n\t\t \"  (my-slot-2)\"\n\t\t \"\"\n\t\t \"  :objects\"\n\t\t \"  ((child-3 :type 'child-3)\"\n\t\t \"  (child-4 :type 'child-4)))\"\n\t\t \"\"\n\t\t \"",
    "metadata": {
      "source": "gornschool-training/t5/source/trickle-down-slots.lisp",
      "file_name": "trickle-down-slots.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_5_object_definition",
      "chunk_id": 5,
      "section": "top-level-3"
    },
    "id": "eeb3c8d2bf2a458e4772b9c79f8d27ea"
  },
  {
    "text": "(define-object child-3 (base-object)\"\n\t\t \"  :input-slots \"\n\t\t \"  ((my-slot-2 3 :defaulting)))\"\n\t\t \"\"\n\t\t \"",
    "metadata": {
      "source": "gornschool-training/t5/source/trickle-down-slots.lisp",
      "file_name": "trickle-down-slots.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_5_object_definition",
      "chunk_id": 6,
      "section": "child-3"
    },
    "id": "fc521bea0a9871407ad1e9a1f4795207"
  },
  {
    "text": "(define-object child-4 (base-object)\"\n\t\t \"  :input-slots \"\n\t\t \"  ((my-slot-2 5)))\"))\n   (repl-3 (list (list :command \"(make-self 'top-level-3)\"\n\t\t       :output \"#<TOP-LEVEL-3 #x2104A23E2D>\")\n\t\t (list :command \"(the my-slot-2)\"\n\t\t       :output 2)\n\t\t (list :command \"(the child-3 my-slot-2)\"\n\t\t       :output 2)\n\t\t (list :command \"(the child-4 my-slot-2)\"\n\t\t       :output 5)))\n   (code-4 (list \"",
    "metadata": {
      "source": "gornschool-training/t5/source/trickle-down-slots.lisp",
      "file_name": "trickle-down-slots.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_5_object_definition",
      "chunk_id": 7,
      "section": "child-4"
    },
    "id": "28772d9f4c746d8440ba1835fd2fbcff"
  },
  {
    "text": "(define-object top-level-4 (base-object)\"\n\t\t \"  :computed-slots\"\n\t\t \"  ((my-slot-3 2))\"\n\t\t \"\"\n\t\t \"  :trickle-down-slots\"\n\t\t \"  (my-slot-3)\"\n\t\t \"\"\n\t\t \"  :objects\"\n\t\t \"  ((child-5 :type 'child-5\"\n\t\t \"            :my-slot-3 1)))\"\n\t\t \"\"\n\t\t \"",
    "metadata": {
      "source": "gornschool-training/t5/source/trickle-down-slots.lisp",
      "file_name": "trickle-down-slots.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_5_object_definition",
      "chunk_id": 8,
      "section": "top-level-4"
    },
    "id": "9903bc21379bfc2d1ddc92b7a6c35d0b"
  },
  {
    "text": "(define-object child-5 (base-object)\"\n\t\t \"  :input-slots\"\n\t\t \"  ((my-slot-3 5 :defaulting)))\"))\n   (repl-4 (list (list :command \"(make-self 'top-level-4)\"\n\t\t       :output \"#<TOP-LEVEL-4 #x2104A3B93D>\")\n\t\t (list :command \"(the child-5 my-slot-3)\"\n\t\t       :output 1)))\n\n\t\t \n\t\t \n   (body-content (with-cl-who-string ()\n\t\t   (:div :class \"grid-container-2-650px\"\n\t\t\t (:div :class \"grid-item\"\n\t\t\t       (:p \"Recall in the \"\n\t\t\t\t   (if (the getting-started-url)\n\t\t\t\t       (htm (:a :href (the getting-started-url) \"Getting Started with GendL\"))\n\t\t\t\t       (htm \"Getting Started with GendL \"))\" tutorial, in the \"\n\t\t\t\t   (if (the define-object-url)\n\t\t\t\t       (htm (:a :href (the define-object-url)\"Defining Objects\"))\n\t\t\t\t       (htm \"Defining Objects\")) \" topic we discussed how values may be passed from a parent object to a child. The following code summarises the process discussed\"\n\t\t\t\t   (str (code-example (the code-1)))\n\t\t\t\t   \"the object \"\n\t\t\t\t   (:span :class \"object\" \"child-1\")\" defines a required \"\n\t\t\t\t   (:span :class \"object-keyword\" \":input-slot\") \" \"\n\t\t\t\t   (:span :class \"slot\" \"my-slot-1\")\" and this is passed in from the parent in the parents \"\n\t\t\t\t   (:span :class \"object-keyword\"\":objects\")\" section. The object \"(:span :class \"object\" \"child-2\")\" defines an optional \"\n\t\t\t\t   (:span :class \"object-keyword\" \":input-slot\")\" \"\n\t\t\t\t   (:span :class \"slot\" \"my-slot-1\")\", in this example as no value is passed in from the parent it uses the default value\"\n\t\t\t\t   (str (repl-example (the repl-1))))\n\t\t\t       (:p \"Furthermore, we covered the use of the \"\n\t\t\t\t   (:span :class \"object-keyword\" \":pass-down\")\" input to a child object in the \"\n\t\t\t\t   (if (the wall-example-url)\n\t\t\t\t       (htm (:a :href (the wall-example-url)\"Wall Example\"))\n\t\t\t\t       (htm \"Wall Example\")) \" topic\"\n\t\t\t\t   (str (code-example (the code-2)))\n\t\t\t\t   (str (repl-example (the repl-2))))\n\t\t\t       (:p \"There is, however, a further way to ensure values flow through from a parent to a child - by using \"(:span :class \"object-keyword\" \":trickle-down-slots\")\n\t\t\t\t   (:p \"When a slot is defined as a \"\n\t\t\t\t       (:span :class \"object-keyword\"\":trickle-down-slot\")\", it will automatically flow through to a child object providing both of the following conditions are satisfied\"\n\t\t\t\t       (:ul (:li \"The child object has an \"\n\t\t\t\t\t\t (:span :class \"object-keyword\"\":input-slot\")\" of the same name\")\n\t\t\t\t\t    (:li \"And that \"\n\t\t\t\t\t\t (:span :class \"object-keyword\"\":input-slot\")\" in the child object is tagged as \"\n\t\t\t\t\t\t (:span :class \"object-keyword\"\":defaulting\")\" and given a default value\"))\n\t\t\t\t       (str (code-example (the code-3)))\n\t\t\t\t       (str (repl-example (the repl-3))))\n\t\t\t\t   (:p \"Even if the slot is defined in the parent as a \"\n\t\t\t\t       (:span :class \"object-keyword\"\":trickle-down-slot\")\", if an input is given explicitly it will be used, over-riding the \"\n\t\t\t\t       (:span :class \"object-keyword\"\":trickle-down-slot\")\" value\"\n\t\t\t\t       (str (code-example (the code-4)))\n\t\t\t\t       (str (repl-example (the repl-4))))\n\t\t\t\t   (:p (:span :class \"object-keyword\"\":trickle-down-slots\")\" are a very convenient and semi-automatic way to pass values form parent to child. An example use is with the \"\n\t\t\t\t       (:span :class \"object\"\"box\")\" object, where \"\n\t\t\t\t       (:span :class \"slot\" \"length\")\", \"\n\t\t\t\t       (:span :class \"slot\" \"width\")\" and \"\n\t\t\t\t       (:span :class \"slot\" \"height\")\" are all \"\n\t\t\t\t       (:span :class \"object-keyword\" \":trickle-down-slots\")\". In previous examples, we have explicitly passed the values through, however strictly speaking this has not been required. One word of caution; it can sometimes be difficult to see where values are coming from if \"\n\t\t\t\t       (:span :class \"object-keyword\"\":trickle-down-slots\")\" are used extensively and particularly if they are incorporated into mixins, but as with all things used appropriately they are a useful addition to the developer toolbox\")))\n\t\t\t (:div :class \"grid-item\"\n\t\t\t       (:h2 \"Resources\")\n\t\t\t       (str (the resource-links))))))))\n",
    "metadata": {
      "source": "gornschool-training/t5/source/trickle-down-slots.lisp",
      "file_name": "trickle-down-slots.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_5_object_definition",
      "chunk_id": 9,
      "section": "child-5"
    },
    "id": "c0f23c375b5a048443f4b80d7c416e84"
  },
  {
    "text": "(in-package :training-5)\n\n",
    "metadata": {
      "source": "gornschool-training/t5/source/settable-slots.lisp",
      "file_name": "settable-slots.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_5_object_definition",
      "chunk_id": 0,
      "section": "header"
    },
    "id": "b2ca37df0d4672f23384d5a91aca1e72"
  },
  {
    "text": "(define-object settable-slots (base-training-sheet)\n  :input-slots\n  (getting-started-url)\n  \n  :computed-slots\n  ((index-words (list \":settable\" \"set-slot!\" \"restore-slot-default\" \"restore-slot-defaults!\" \"dependancy tracker\" \"demand driven\"))\n\t\t\n   (code-1 (list \"",
    "metadata": {
      "source": "gornschool-training/t5/source/settable-slots.lisp",
      "file_name": "settable-slots.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_5_object_definition",
      "chunk_id": 0,
      "section": "settable-slots"
    },
    "id": "b2ca37df0d4672f23384d5a91aca1e72"
  },
  {
    "text": "(define-object settable-slots (base-object)\"\n\t\t \"\"\n\t\t \"  :computed-slots\"\n\t\t \"  ((speed 25 :settable)\"\n\t\t \"   (time 15 :settable)\"\n\t\t \"   (distance (* (the speed) (the time)) :settable))\"\n\t\t \"\"\n\t\t \"  :functions\"\n\t\t \"  ((set-speed! (&key (value 20)) (the (set-slot! :speed value)))\"\n\t\t \"   (set-time! (&key (value 10)) (the (set-slot! :time value)))\"\n\t\t \"   (set-distance! () (the (set-slot! :distance 100)))\"\n\t\t \"   (reset-distance! () (the (restore-slot-default! :distance)))\"\n\t\t \"   (reset-all! () (the (restore-slot-defaults! (list :speed :time :distance))))))\"))\n\n   (repl-1 (list (list :command \"(make-self 'settable-slots)\"\n\t\t       :output \"#<SETTABLE-SLOTS #x2104DC5DFD>\")\n\t\t (list :command \"(the distance)\"\n\t\t       :output 375)))\n   (repl-2 (list (list :command \"(the set-speed!)\"\n\t\t       :output \"NIL\")\n\t\t (list :command \"(the distance)\"\n\t\t       :output 300)))\n   (repl-3 (list (list :command \"(the set-time!)\"\n\t\t       :output \"NIL\")\n\t\t (list :command \"(the distance)\"\n\t\t       :output 200)))\n   \n   (repl-4 (list (list :command \"(the set-distance!)\"\n\t\t       :output \"NIL\")\n\t\t (list :command \"(the distance)\"\n\t\t       :output 100)\n\t\t (list :command \"(the (set-speed! :value 30))\"\n\t\t       :output \"NIL\")\n\t\t (list :command \"(the distance)\"\n\t\t       :output 100)))\n   (repl-5 (list (list :command \"(the reset-distance!)\"\n\t\t       :output \":DISTANCE\")\n\t\t  (list :command \"(the distance)\"\n\t\t       :output 300)))\n   (repl-6 (list (list :command \"(the reset-all!)\"\n\t\t       :output \"(:SPEED :TIME :DISTANCE)\")\n\t\t (list :command \"(the speed)\"\n\t\t       :output 25)\n\t\t (list :command \"(the time)\"\n\t\t       :output 15)\n\t\t (list :command \"(the distance)\"\n\t\t       :output 375)))\n   \n\n   (body-content (with-cl-who-string ()\n\t\t   (:div :class \"grid-container-2-650px\"\n\t\t\t (:div :class \"grid-item\"\n\t\t\t       (:p \"In the \"\n\t\t\t\t   (if (the getting-started-url)\n\t\t\t\t       (htm (:a :href (the getting-started-url) \"Getting Started with GendL\"))\n\t\t\t\t       (htm \"Getting Started with GendL \"))\n\t\t\t\t   \" tutorial, we identified on of the biggest differences between GendL and other programming languages was that slot evaluation was always demand driven and the inbuilt dependency tracker will always ensure slot values are current whenever any input changes. This removes a big burdon from the developer and also ensures run times are fast, as we are never calculating any values we don't need to use.\")\n\t\t               (:p \"However, there may be times when we need to make programatic changes to values an over-ride this default behaviour. To do this, we identify either slots as \"(:span :class \"general-keyword\" \":settable\")\" and then we use the \"(:span :class \"function\" \"set-slot!\")\" function to programaically alter the value of the selected slot.\")\n\t\t               (:p \"When we make a change to a slot value by programatically setting it, the dependency tracker is aware of this and any changes which would ordinarily cause the value to be updated are suspended. If we want to reverse this behaviour (back to default) we can use either of the \"(:span :class \"function\" \"restore-slot-default!\")\" or \"(:span :class \"function\" \"restore-slot-defaults!\")\" functions\")\n\t\t               (:p \"As with a lot of different techniques, programatically altering slot values and over-riding the default behaviour has its place and is a useful additoon to the tools and techniques available to the programmer. However, we need to be aware that at the point we do this, and until we revert to default behaviour, it becomes to responsibility of the developer to manage dependencies. For this reason it is recommended to use this technique sparingly and only when a solution using the default behaviour will not give the desired results\")\n\t\t               (:p \"Consider the following code\")\n\t\t               (str (code-example (the code-1)))\n\t\t               (:p \"3 \"(:span :class \"object-keyword\" \":computed slots\")\", \"(:span :class \"slot\" \"speed\")\", \"\n\t\t\t           (:span :class \"slot\" \"time\")\" and \"\n\t\t\t           (:span :class \"slot\" \"distance\")\" have been tagged as \"\n\t\t\t           (:span :class \"general-keyword\" \":settable\")\". 5 functions have been defined, 3 which set new values (using \"\n\t\t\t           (:span :class \"function\" \"set-slot!\")\") for the respective slots and 2 which will restore default values and behaviours (using \"\n\t\t\t           (:span :class \"function\" \":restore-slot-default!\")\" and \"\n\t\t\t           (:span :class \"function\" \":restore-slot-defaults!\")\"). If we make the object and evaluate distance we get the following\"\n\t\t\t           (str (repl-example (the repl-1)))\n\t\t\t           \"We can now programatically change the value of speed by running the \"(:span :class \"function\" \"set-speed!\")\" function. If we evaluate \"\n\t\t\t           (:span :class \"slot\" \"distance\")\", we can see that\"\n\t\t\t           (:ul (:li \"The value has changed\")\n\t\t\t                (:li \"But the underlying calculation is being performed as specified\"))\n\t\t\t           (str (repl-example (the repl-2)))\n\t\t\t           \"We can do the same with \"(:span :class \"slot\" \"time\")\", getting the same results\"\n\t\t\t           (str (repl-example (the repl-3)))\n\t\t\t           \"If we now modify the value of \"(:span :class \"slot\" \"distance\")\", we can see the change in that value, but then going back and changing the value of \"\n\t\t\t           (:span :class \"slot\" \"speed\")\" again, we can see that \"(:span :class \"slot\" \"distance\")\" has not been changed. This is because \"(:span :class \"slot\" \"distance\")\" has had its value set and any dependency tracking associated with it, which would ordinarily cause a change to its value, has been disabled\"\n\t\t\t           (str (repl-example (the repl-4)))\n\t\t\t           \"However, if we now reset the value of \"(:span :class \"slot\" \"distance\")\" only, we can see that dependency tracking has picked up the values of \"(:span :class \"slot\" \"speed\")\" and \"(:span :class \"slot\" \"time\")\" and has updated the value for \"(:span :class \"slot\" \"distance\")\n\t\t\t           (str (repl-example (the repl-5)))\n\t\t\t           \"Finally, if we reset all slots, all are set back to default\"\n\t\t\t           (str (repl-example (the repl-6)))))\n\t\t\t (:div :class \"grid-item\"\n\t\t\t       (:h2 \"Resources\")\n\t\t\t       (str (the resource-links))))))))\n\n",
    "metadata": {
      "source": "gornschool-training/t5/source/settable-slots.lisp",
      "file_name": "settable-slots.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_5_object_definition",
      "chunk_id": 1,
      "section": "settable-slots"
    },
    "id": "fb461dd02014bf12aa543de0e6436016"
  },
  {
    "text": "(in-package :gdl-user)\n\n(gwl:define-package :training-5\n    (:use :training-common)\n  (:shadow #:*home*)\n  (:export #:assembly))\n\n",
    "metadata": {
      "source": "gornschool-training/t5/source/package.lisp",
      "file_name": "package.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_5_package",
      "chunk_id": 0,
      "section": "header"
    },
    "id": "2111bc8e1aff14564c12a19fc2026657"
  },
  {
    "text": "(in-package :training-5)\n\n(defparameter *publish-prefix* \"t5\")\n\n",
    "metadata": {
      "source": "gornschool-training/t5/source/assembly.lisp",
      "file_name": "assembly.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_5_object_definition",
      "chunk_id": 0,
      "section": "header"
    },
    "id": "49746ffde1a8decba60be3304cc9e139"
  },
  {
    "text": "(define-object assembly(base-tutorial-sheet)\n  :input-slots\n  ((getting-started-url nil)\n   ",
    "metadata": {
      "source": "gornschool-training/t5/source/assembly.lisp",
      "file_name": "assembly.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_5_object_definition",
      "chunk_id": 0,
      "section": "assembly"
    },
    "id": "49746ffde1a8decba60be3304cc9e139"
  },
  {
    "text": "(define-object-url nil)\n   (wall-example-url nil)\n   (truss-example-url nil)\n   (tutorial-name \"More on the GendL object\"))\n\n  :computed-slots\n  ((introduction (with-cl-who-string ()\n\t\t   (:p \"In the \" (if (the getting-started-url)\n\t\t\t\t     (htm (:a :href (the getting-started-url) \"Getting started with GendL\"))\n\t\t\t\t     \"Getting started with GendL\") \"tutorial, we covered the most common options for the GendL object. Some of the examples we used in that tutorial introduced some extra features. This tutorial recaps on ths additional features and additionally covers others\")))\n  )\n\t\t       \n\n  :objects\n  ((useful-slots :type 'useful-slots\n\t\t :pass-down (page-objects)\n\t\t :publish-prefix *publish-prefix*\n\t\t :page 1\n\t\t :page-title \"Useful Slots\"\n\t\t :resources (list \"strings-for-display.lisp\" \"object-tagging.lisp\"))\n    \n    (trickle-down-slots :type 'trickle-down-slots\n\t\t\t:pass-down (page-objects\n\t\t\t\t    getting-started-url\n\t\t\t\t    define-object-url\n\t\t\t\t    wall-example-url )\n                        :pseudo-inputs (getting-started-url)\n\t\t\t:publish-prefix *publish-prefix*\n\t\t\t:page 2\n\t\t\t:page-title \":trickle-down-slots\"\n\t\t\t:resources (list \"trickle-down-slots.lisp\"))\n    \n   (objects :type 'objects\n\t    :pass-down (page-objects\n\t\t\tgetting-started-url\n\t\t\t define-object-url\n\t\t\ttruss-example-url)\n            :pseudo-inputs (getting-started-url)\n\t    :publish-prefix *publish-prefix*\n\t    :page 3\n\t    :page-title \":objects\"\n\t    :resources (list \"hidden-objects.lisp\" \"pseudo-inputs.lisp\"))\n    \n   (settable-slots :type 'settable-slots\n\t\t   :pass-down (page-objects\n\t\t\t       getting-started-url)\n                   :pseudo-inputs (getting-started-url)\n\t\t   :publish-prefix *publish-prefix*\n\t\t   :page 4\n\t\t   :page-title \":settable slots\"\n\t\t   :resources (list \"settable-slots.lisp\"))\n   )\n  )\n\n\n\n\n\n\n",
    "metadata": {
      "source": "gornschool-training/t5/source/assembly.lisp",
      "file_name": "assembly.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_5_object_definition",
      "chunk_id": 1,
      "section": "nil"
    },
    "id": "3410c6bed79d761f53ef8bb639a64903"
  },
  {
    "text": "(in-package :training-5)\n\n",
    "metadata": {
      "source": "gornschool-training/t5/source/objects.lisp",
      "file_name": "objects.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_5_object_definition",
      "chunk_id": 0,
      "section": "header"
    },
    "id": "819a46506eb9dad41da717eb3708ac57"
  },
  {
    "text": "(define-object objects (base-training-sheet)\n:input-slots\n  (getting-start-url\n   define-object-url\n   truss-example-url)\n  \n  :computed-slots\n  ((index-words (list \":pseudo-inputs\" \":hidden-objects\" \"hidden-children\"))\n   (code-1 (list \"",
    "metadata": {
      "source": "gornschool-training/t5/source/objects.lisp",
      "file_name": "objects.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_5_object_definition",
      "chunk_id": 0,
      "section": "objects"
    },
    "id": "819a46506eb9dad41da717eb3708ac57"
  },
  {
    "text": "(define-object hidden-objects (base-object)\"\n\t\t \"  :computed-slots\"\n\t\t \"  ((box-volume (the (my-box 0) volume))\"\n\t\t \"   (hidden-box-volume (the (my-hidden-box 0) volume))\"\n\t\t \"   (object-list (list-elements (the)))\"\n\t\t \"   (all-objects (append (the children)\"\n\t\t \"\t                  (the hidden-children))))\"\n\t\t \"\"\n\t\t \"  :objects\"\n\t\t \"  ((my-box :type 'box\"\n\t\t \"           :length 2\"\n\t\t \"           :width 2\"\n\t\t \"           :height 2\"\n\t\t \"           :sequence (:size 3)))\"\n\t\t \"  :hidden-objects\"\n\t\t \"  ((my-hidden-box :type 'box\"\n\t\t \"                  :length 3\"\n\t\t \"                  :width 3\"\n\t\t \"                  :height 3\"\n\t\t \"                  :sequence (:size 2))))\"))\n   (repl-1 (list (list :command \"(make-self 'hidden-objects)\"\n\t\t       :output \"#<HIDDEN-OBJECTS #x21043FB8BD>\")\n\t\t (list :command \"(the box-volume)\"\n\t\t       :output 8)\n\t\t (list :command \"(the hidden-box-volume)\"\n\t\t       :output 27)\n\t\t (list :command \"(the children)\"\n\t\t       :output \"(#<BOX #x21044894DD> #<BOX #x210448B6ED> #<BOX #x210448B2CD>)\")\n\t\t (list :command \"(object-list)\"\n\t\t       :output \"(#<BOX #x21044894DD> #<BOX #x210448B6ED> #<BOX #x210448B2CD>)\")\n\t\t (list :command \"(the hidden-children)\"\n\t\t       :output \"(#<BOX #x21044876DD> #<BOX #x2104494BAD>)\")\n\t\t (list :command \"(the all-objects)\"\n\t\t       :output \"(#<BOX #x21044894DD> #<BOX #x210448B6ED> #<BOX #x210448B2CD>)\")\n\t\t (list :output \" #<BOX #x21044876DD> #<BOX #x2104494BAD>)\")))\n\n   (code-2 (list \"",
    "metadata": {
      "source": "gornschool-training/t5/source/objects.lisp",
      "file_name": "objects.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_5_object_definition",
      "chunk_id": 1,
      "section": "hidden-objects"
    },
    "id": "c8e26c65cf5b0342cd7e30a3d6ecc41b"
  },
  {
    "text": "(define-object pseudo-inputs (base-object)\"\n\t\t \"  :computed-slots\"\n\t\t \"  ((volumes (mapcar #'(lambda(a) (theo a volume)) (the children))))\"\n\t\t \"\"\n\t\t \"  :objects\"\n\t\t \"  ((my-box :type 'box\"\n\t\t \"           :length 2\"\n\t\t \"           :width 3\"\n\t\t \"           :height 4\"\n\t\t \"           :sequence (:size 3))\"\n\t\t \"  (my-cylinder :type 'cylinder\"\n\t\t \"               :radius 2\"\n\t\t \"               :height 6\"\n\t\t \"               :pseudo-inputs (:volume)\"\n\t\t \"               :volume (div (* (the-child height)\"\n\t\t \"                               (expt (the-child radius) 2)\"\n\t\t \"                               pi) 2))))\"))\n\n   (repl-2 (list (list :command \"(make-self 'pseudo-inputs)\"\n\t\t       :output \"#<PSEUDO-INPUTS #x210485A1BD>\")\n\t\t (list :command \"(the volumes)\"\n\t\t       :output \"(37.69911184307752 24 24 24)\")))\n   \n   (body-content (with-cl-who-string ()\n\t\t   (:div :class \"grid-container-2-650px\"\n\t\t\t (:div :class \"grid-item\"\n\t\t\t       (:p \"In the \"\n\t\t\t\t   (if (the getting-started-url)\n\t\t\t\t       (htm (:a :href (the getting-started-url) \"Getting Started with GendL\"))\n\t\t\t\t       (htm \"Getting Started with GendL \"))\" tutorial, the \"\n\t\t\t\t   (if (the define-object-url)\n\t\t\t\t       (htm (:a :href (the define-object-url)\"Defining Objects\"))\n\t\t\t\t       (htm \"Defining Objects\")) \" topic covered the general syntax for defining objects. In that topic we covered \"\n\t\t\t\t   (:span :class \"object-keyword\" \":input-slots\")\", \"\n\t\t\t\t   (:span :class \"object-keyword\" \":computed-slots\")\", \"\n\t\t\t\t   (:span :class \"object-keyword\" \":functions\")\" and \"\n\t\t\t\t   (:span :class \"object-keyword\" \":objects\")\". In the previous topic we also covered \"\n\t\t\t\t   (:span :class \"object-keyword\" \":trickle-down-slots\")\". In this topic we will look at \"\n\t\t\t\t   (:span :class \"object-keyword\" \":hidden-objects\")\" and the \"(:span :class \"general-keyword\" \":pseudo-inputs\")\" input to both \"\n\t\t\t\t   (:span :class \"object-keyword\" \":objects\")\" and \"\n\t\t\t\t   (:span :class \"object-keyword\" \":hidden-objects\"))\n\t\t\t       (:h3 \":hidden-objects\")\n\t\t\t       (:p \"We actually introduced \"\n\t\t\t\t   (:span :class \"object-keyword\" \":hidden-objects\")\" in the \"\n\t\t\t\t   (if (the define-object-url)\n\t\t\t\t       (htm (:a :href (the truss-example-url)\"Truss Example\"))\n\t\t\t\t       (htm \"Truss Example\"))\" topic of the \"\n\t\t\t\t   (if (the getting-started-url)\n\t\t\t\t       (htm (:a :href (the getting-started-url) \"Getting Started with GendL\"))\n\t\t\t\t       (htm \"Getting Started with GendL \"))\" tutorial\")\n\t\t\t       (:p \"The most obvious outcome of using \"(:span :class \"object-keyword\" \":hidden-objects\")\" is that child objects defined in this way don't show up in the Geysr tree structure. However there are other effects\"\n\t\t\t\t   (:ul (:li (:span :class \"object-keyword\" \":hidden-objects\")\" are omitted from the list returned by (list-elements (the))\")\n\t\t\t\t\t(:li (:span :class \"object-keyword\" \":hidden-objects\")\" are not included in the messages (the children) or (the safe-children)\"))\n\t\t\t\t  \n\t\t\t\t   (:span :class \"object-keyword\" \":hidden-objects\")\", however, can be accessed using referencing chains in exactly the same way that a normal child obejct is referenced. To list all \"\n\t\t\t\t   (:span :class \"object-keyword\" \"hidden-objects\")\" we need to use the message \"\n\t\t\t\t   (:span :class \"slot\" \"(the hidden-children)\")\n\t\t\t\t   (str (code-example (the code-1)))\n\t\t\t\t   (:image :src (format nil \"/~a-images/hidden-objects.png\" (the publish-prefix)) :style \"margin: 5px 0 0 3% ;width: auto; height: 200px;\" )\n\t\t\t\t   (str (repl-example (the repl-1))))\n\t\t\t       (:h3 \":pseudo-inputs\")\n\t\t\t       (:p (:span :class \"general-keyword\" \":pseudo-inputs\")\" enable us to pass a value into an object without the slot being defined as an \"\n\t\t\t\t   (:span :class \"object-keyword\" \":input-slot\")\". This may seem a curious requirement, as if its not defined as an \"\n\t\t\t\t   (:span :class \"object-keyword\" \":input-slot\")\" we won't be able to use it in \"\n\t\t\t\t   (:span :class \"object-keyword\" \":computed-slots\")\" or pass forn to further child \"\n\t\t\t\t   (:span :class \"object-keyword\" \":objects\")\". But it actually turns out to be really usefl if we want to make a slight customisation to an object without needing to define a new object. It may be that we wish to perform a calculation and attach the value to that object, or simply we want to 'tag' an object with some value. For example, the GendL \"\n\t\t\t\t   (:span :class \"object\" \"cylinder\")\" wifeframe object doesn't support a message \"\n\t\t\t\t   (:span :class \"slot\" \"volume\")\", but say we have a number of objects that do, and a cylinder, and we want to process the volumes using \"\n\t\t\t\t   (:span :class \"function\" \"mapcar\")\".\"\n\t\t\t\t   (str (code-example (the code-2)))\n\t\t\t\t   \"In this code, we have an input \"\n\t\t\t\t   (:span :class \"slot\" \"volume\")\" defined for \"\n\t\t\t\t   (:span :class \"object\" \"cylinder\")\", but \"\n\t\t\t\t   (:span :class \"object\" \"cylinder\")\" doesb't have a corresponding \"\n\t\t\t\t   (:span :class \"object-keyword\" \":input-slot\")\", so we have identified this input as a \"\n\t\t\t\t   (:span :class \"general-keyword\" \":pseudo-input\")\". Note that, if we don't define\"\n\t\t\t\t   (:span :class \"slot\" \"volume\")\" as a \"\n\t\t\t\t   (:span :class \"general-keyword\" \"pseudo-input\")\", the code will still work but we will get a compiler warning. Whilst this is the case, its good practice from a coding perspective to identify such slots correctly\"\n\t\t\t\t   (str (repl-example (the repl-2)))))\n\t\t\t (:div :class \"grid-item\"\n\t\t\t       (:h2 \"Resources\")\n\t\t\t       (str (the resource-links))))))))\n\t\t\t\t\t   \n\t\t\t\t  \n",
    "metadata": {
      "source": "gornschool-training/t5/source/objects.lisp",
      "file_name": "objects.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_5_object_definition",
      "chunk_id": 2,
      "section": "pseudo-inputs"
    },
    "id": "7e7b43206144cd73602237c95f82cb6c"
  },
  {
    "text": "(in-package :training-5)\n\n",
    "metadata": {
      "source": "gornschool-training/t5/source/useful-slots.lisp",
      "file_name": "useful-slots.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_5_object_definition",
      "chunk_id": 0,
      "section": "header"
    },
    "id": "04b14e756ea7e45c0541e48e2db5a6ab"
  },
  {
    "text": "(define-object useful-slots (base-training-sheet)\n\n  :computed-slots\n  ((index-words (list \"strings-for-display\" \"root\" \"children\" \"safe-children\" \"all-mixins\" \"typep\" \"type\" \"parent\"))\n   (code-1 (list \"",
    "metadata": {
      "source": "gornschool-training/t5/source/useful-slots.lisp",
      "file_name": "useful-slots.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_5_object_definition",
      "chunk_id": 0,
      "section": "useful-slots"
    },
    "id": "04b14e756ea7e45c0541e48e2db5a6ab"
  },
  {
    "text": "(define-object name-display (base-object)\"\n\t\t \" :objects\"\n\t\t \"  ((my-named-object :type 'box\"\n\t\t \"                    :strings-for-display \\\"My Custom Box\\\"\"\n\t\t \"                    :length 3\"\n\t\t \"                    :width 4\"\n\t\t \"                    :height 5)))\"))\n   (repl-1 (list (list :command \"(setq self (make-object 'name-display))\"\n\t\t       :output \"#NAME-DISPLAY #x210408140D>\")\n\t\t (list :command \"(setq self (the my-named-object))\"\n\t\t       :output \"#<BOX #x2104080FFD>\")\n\t\t (list :command \"(the root)\"\n\t\t       :output \"#NAME-DISPLAY #x210408140D>\")))\n\n   (repl-2 (list (list :command \"(setq self (make-object 'name-display))\"\n\t\t       :output \"#NAME-DISPLAY #x210408140D>\")\n\t\t (list :command \"(the children)\"\n\t\t       :output \"(#<BOX #x2104080FFD>)\")\n\t\t (list :command \"(the safe-children\"\n\t\t       :output \"(#<BOX #x2104080FFD>)\")\n\t\t (list :command \"(list-elements (the))\"\n\t\t       :output \"(#<BOX #x2104080FFD>)\")))\n\n   (repl-3 (list (list :command \"(setq self (make-object 'name-display))\"\n\t\t       :output \"#NAME-DISPLAY #x210408140D>\")\n\t\t (list :command \"(setq self (the my-named-object))\"\n\t\t       :output \"#<BOX #x2104080FFD>\")\n\t\t (list :command \"(the parent)\"\n\t\t       :output \"#NAME-DISPLAY #x210408140D>\")))\n\n   (repl-4 (list (list :command \"(setq self (make-object 'name-display))\"\n\t\t       :output \"#NAME-DISPLAY #x210408140D>\")\n\t\t (list :command \"(the type)\"\n\t\t       :output \"#NAME-DISPLAY #x210408140D>\")\n\t\t (list :command \"(setq self (the my-named-object))\"\n\t\t       :output \"#<BOX #x2104080FFD>\")\n\t\t (list :command \"(the type)\"\n\t\t       :output \"#<BOX #x2104080FFD>\")))\n   (repl-5 (list (list :command \"(setq self (make-object 'name-display))\"\n\t\t       :output \"#NAME-DISPLAY #x210408140D>\")\n\t\t (list :command \"(the all-mixins)\"\n\t\t       :output \"(BASE-OBJECT VANILLA-MIXIN VANILLA-MIXIN* STANDARD-OBJECT T GENDL::GDL-BASIS)\")))\n\n   (code-2 (list \"",
    "metadata": {
      "source": "gornschool-training/t5/source/useful-slots.lisp",
      "file_name": "useful-slots.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_5_object_definition",
      "chunk_id": 1,
      "section": "name-display"
    },
    "id": "15b17aad2746573a3f3a8532549e18e7"
  },
  {
    "text": "(define-object object-tagging (base-object)\"\n\t\t \"  :computed-slots\"\n\t\t \"  ((all-geometry (remove nil\"\n\t\t \"                         (mapcar #'(lambda(a) (when (typep a 'all-geometry-mixin) a))\"\n\t\t \"                                   (the children))))\"\n\t\t \"   (3d-shapes (remove nil\"\n\t\t \"                      (mapcar #'(lambda(a) (when (typep a '3d-shape-mixin) a))\"\n\t\t \"                                (the children)))))\"\n\t\t \"\"\n\t\t \"  :objects\"\n\t\t \"  ((my-box :type 'my-box\"\n\t\t \"           :length 3\"\n\t\t \"           :width 4\"\n\t\t \"           :height 5)\"\n\t\t \"   (my-sphere :type 'my-sphere\"\n\t\t \"              :radius 4)\"\n\t\t \"   (my-line :type 'my-line\"\n\t\t \"            :start (make-point 0 0 0)\"\n\t\t \"            :end (make-point 10 0 0))))\"\n\t\t \"\"\n\t\t \"",
    "metadata": {
      "source": "gornschool-training/t5/source/useful-slots.lisp",
      "file_name": "useful-slots.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_5_object_definition",
      "chunk_id": 2,
      "section": "object-tagging"
    },
    "id": "1bc91808c71b71916a358b5e7613718f"
  },
  {
    "text": "(define-object my-box (box\"\n\t\t \"                       3d-shape-mixin\"\n\t\t \"                       all-geometry-mixin))\"\n\t\t \"\"\n\t\t \"",
    "metadata": {
      "source": "gornschool-training/t5/source/useful-slots.lisp",
      "file_name": "useful-slots.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_5_object_definition",
      "chunk_id": 3,
      "section": "my-box"
    },
    "id": "047a6853ec0e1e51ab69a80cec0f01df"
  },
  {
    "text": "(define-object my-sphere (sphere\"\n\t\t \"                          3d-shape-mixin\"\n\t\t \"                          all-geometry-mixin))\"\n\t\t \"\"\n\t\t \"",
    "metadata": {
      "source": "gornschool-training/t5/source/useful-slots.lisp",
      "file_name": "useful-slots.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_5_object_definition",
      "chunk_id": 4,
      "section": "my-sphere"
    },
    "id": "fee36163d6fb51b626eb1a40dcbd0d6b"
  },
  {
    "text": "(define-object my-line (line\"\n\t\t \"                        all-geometry-mixin))\"\n\t\t \"\"\n\t\t \"",
    "metadata": {
      "source": "gornschool-training/t5/source/useful-slots.lisp",
      "file_name": "useful-slots.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_5_object_definition",
      "chunk_id": 5,
      "section": "my-line"
    },
    "id": "f20a8d934e2b36d01991e7f55590ca84"
  },
  {
    "text": "(define-object all-geometry-mixin())\"\n\t\t \"\"\n\t\t \"",
    "metadata": {
      "source": "gornschool-training/t5/source/useful-slots.lisp",
      "file_name": "useful-slots.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_5_object_definition",
      "chunk_id": 6,
      "section": "all-geometry-mixin"
    },
    "id": "e80bf5af3a6a48c4ec7dd90f8d5746cc"
  },
  {
    "text": "(define-object 3d-shape-mixin())\"))\n   (repl-6 (list (list :command \"(make-self 'object-tagging)\"\n\t\t       :output \"#<OBJECT-TAGGING #x210500014D>\")\n\t\t (list :command \"(the all-geometry)\"\n\t\t       :output \"(#<MY-BOX #x210500566D> #<MY-SPHERE #x2105004DCD> #<MY-LINE #x21050045FD>)\")\n\t\t (list :command \"(the 3d-shapes)\"\n\t\t       :output \"(#<MY-BOX #x210500566D> #<MY-SPHERE #x2105004DCD>)\")))\n   \n   (body-content (with-cl-who-string ()\n\t\t   (:div :class \"grid-container-2-650px\"\n\t\t\t (:div :class \"grid-item\"\n\t\t\t       (:p \"All GendL objetcs use, or mix in, the \"\n\t\t\t\t   (:span :class \"object\" \"Vanilla-Mixin*\") \" object. The full set of messages supported by this object are documented in YADD, but its worth highlighting a few in particular that are useful for application development and application debugging/inspection\")\n\t\t               (:h3 \"Application Development\")\n\t\t               (:ul (:li (:span :class \"slot\" \"strings-for-display\") \" - changes the display name used, for example, by Geysr to the specified string. It is specified as an inut to the object, and over-rides the default name\"\n\t\t\t\t         (str (code-example (the code-1)))\n\t\t\t\t         (:image :src (format nil \"/~a-images/strings-for-display.png\" (the publish-prefix)) :style \"margin: 5px 0 0 3% ;width: auto; height: 200px;\" ))\n\t\t\t            (:li (:span :class \"slot\" \"root\") \" - from anywhere in the objet tree this will return the object corrssponding to the root node\"\n\t\t\t\t         (str (repl-example (the repl-1))))\n\t\t\t            (:li (:span :class \"slot\" \"children\") \" - returns a list of child objects. This is equivalent to \"\n\t\t\t\t         (:em (:b \"(list-elements (the))\"))\". A variant is \"\n\t\t\t\t         (:span :class \"slot\" \"safe-children\")\" which will return a plist with error information for an child objects which throws an error\"\n\t\t\t\t         (str (repl-example (the repl-2))))\n\t\t\t            (:li (:span :class \"slot\" \"parent\") \" - returns the parent object. Care should be taken when using this message since it may impact reusability of an object if the object is used in multiple places and this is used to reference a particular slot/message in the parent object; if the object can be used by mutiple objects then it implies that slot/message must be supported wherever this is used as a child object\"\n\t\t\t\t         (str (repl-example (the repl-3)))))\n\t\t               (:h3 \"Application Debugging/Inspection\")\n\t\t               (:ul (:li (:span :class \"slot\" \"type\") \" - returns the type of the current object\"\n\t\t\t\t         (str (repl-example (the repl-4))))\n\t\t\t            (:li (:span :class \"slot\" \"all-mixins\") \" - returns a list of the mixins used by the current-object. Note that this is generated recursively, so if the mixin specified in the define-object specification itself has one or more mixins, these will be included. Any duplicates are removed\"\n\t\t\t\t         (str (repl-example (the repl-5)))\n\t\t\t\t         \"Note that the typep predicate examines the all-mixins list and will return t if the specified object being tested has a miixin of the type tested against. This can be particularly useful for 'tagging' objects of different types, by just mixing in an empty object and using typep against that empty object\"\n\t\t\t\t         (str (code-example (the code-2)))\n\t\t\t\t         (str (repl-example (the repl-6))))))\n\t\t\t (:div :class \"grid-item\"\n\t\t\t       (:h2 \"Resources\")\n\t\t\t       (str (the resource-links))))))))\n\n\n\n\n",
    "metadata": {
      "source": "gornschool-training/t5/source/useful-slots.lisp",
      "file_name": "useful-slots.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_5_object_definition",
      "chunk_id": 7,
      "section": "3d-shape-mixin"
    },
    "id": "7124db4f2e0365a888c9a3f647d58b78"
  },
  {
    "text": "(in-package :gdl-user)\n\n",
    "metadata": {
      "source": "gornschool-training/t5/resources/source/trickle-down-slots.lisp",
      "file_name": "trickle-down-slots.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_5_object_definition",
      "chunk_id": 0,
      "section": "header"
    },
    "id": "e799c4887cd20d40199e55bd9ba3efa4"
  },
  {
    "text": "(define-object top-level-1 (base-object)\n   :computed-slots\n  ((my-slot-1 5))\n  \n  :objects\n  ((child-1 :type 'child-1\n\t    :my-slot-1 (the my-slot-1))\n\n   (child-2 :type 'child-2)))\n\n",
    "metadata": {
      "source": "gornschool-training/t5/resources/source/trickle-down-slots.lisp",
      "file_name": "trickle-down-slots.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_5_object_definition",
      "chunk_id": 0,
      "section": "top-level-1"
    },
    "id": "e799c4887cd20d40199e55bd9ba3efa4"
  },
  {
    "text": "(define-object child-1 (base-object)\n  :input-slots\n  (my-slot-1))\n  \n",
    "metadata": {
      "source": "gornschool-training/t5/resources/source/trickle-down-slots.lisp",
      "file_name": "trickle-down-slots.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_5_object_definition",
      "chunk_id": 1,
      "section": "child-1"
    },
    "id": "2b7f0a54c493fa7a0f76768c3ccaca22"
  },
  {
    "text": "(define-object child-2 (base-object)\n  :input-slots\n  ((my-slot-1 3)))\n\n;;;;;;;;;;;;;;;;;;;;\n\n",
    "metadata": {
      "source": "gornschool-training/t5/resources/source/trickle-down-slots.lisp",
      "file_name": "trickle-down-slots.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_5_object_definition",
      "chunk_id": 2,
      "section": "child-2"
    },
    "id": "df44a39771cf72ee18b8da972f0f013b"
  },
  {
    "text": "(define-object top-level-2 (base-object)\n   :computed-slots\n  ((my-slot-1 5))\n  \n  :objects\n  ((child-1 :type 'child-1\n\t    :pass-down (my-slot-1))))\n\n   \n;;;;;;;;;;;;;;;;;;;;;;\n\n",
    "metadata": {
      "source": "gornschool-training/t5/resources/source/trickle-down-slots.lisp",
      "file_name": "trickle-down-slots.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_5_object_definition",
      "chunk_id": 3,
      "section": "top-level-2"
    },
    "id": "55eed14b129b0a4aa2dc5e17f3b2fe19"
  },
  {
    "text": "(define-object top-level-3 (base-object)\n  :computed-slots\n  ((my-slot-2 2))\n  \n  :trickle-down-slots\n  (my-slot-2)\n  \n  :objects\n  ((child-3 :type 'child-3)\n   (child-4 :type 'child-4)))\n\n",
    "metadata": {
      "source": "gornschool-training/t5/resources/source/trickle-down-slots.lisp",
      "file_name": "trickle-down-slots.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_5_object_definition",
      "chunk_id": 4,
      "section": "top-level-3"
    },
    "id": "8ede5ab07a105b890c217d9ef8d8fd6e"
  },
  {
    "text": "(define-object child-3 (base-object)\n  :input-slots ((my-slot-2 3 :defaulting)))\n\n",
    "metadata": {
      "source": "gornschool-training/t5/resources/source/trickle-down-slots.lisp",
      "file_name": "trickle-down-slots.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_5_object_definition",
      "chunk_id": 5,
      "section": "child-3"
    },
    "id": "dcab5211a00135d1482928bbb91bc49d"
  },
  {
    "text": "(define-object child-4 (base-object)\n  :input-slots ((my-slot-2 5)))\n\n;;;;;;;;;;;;;;;;;;;;;;\n\n",
    "metadata": {
      "source": "gornschool-training/t5/resources/source/trickle-down-slots.lisp",
      "file_name": "trickle-down-slots.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_5_object_definition",
      "chunk_id": 6,
      "section": "child-4"
    },
    "id": "14385b14aafac226b8c8dc7000176a0f"
  },
  {
    "text": "(define-object top-level-4 (base-object)\n  :computed-slots\n  ((my-slot-3 2))\n  \n  :trickle-down-slots\n  (my-slot-3)\n  \n  :objects\n  ((child-5 :type 'child-5\n\t    :my-slot-3 1)))\n\n",
    "metadata": {
      "source": "gornschool-training/t5/resources/source/trickle-down-slots.lisp",
      "file_name": "trickle-down-slots.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_5_object_definition",
      "chunk_id": 7,
      "section": "top-level-4"
    },
    "id": "42e89239e516bd52729fef7616f185fc"
  },
  {
    "text": "(define-object child-5 (base-object)\n  :input-slots\n  ((my-slot-3 5 :defaulting)))\n",
    "metadata": {
      "source": "gornschool-training/t5/resources/source/trickle-down-slots.lisp",
      "file_name": "trickle-down-slots.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_5_object_definition",
      "chunk_id": 8,
      "section": "child-5"
    },
    "id": "d232c490c607a0b5d05a137ef74540f7"
  },
  {
    "text": "(in-package :gdl-user)\n\n",
    "metadata": {
      "source": "gornschool-training/t5/resources/source/object-tagging.lisp",
      "file_name": "object-tagging.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_5_object_definition",
      "chunk_id": 0,
      "section": "header"
    },
    "id": "e896c03395a012c1d0baa6ec074d4557"
  },
  {
    "text": "(define-object object-tagging (base-object)\n  :computed-slots\n  ((all-geometry (remove nil\n\t\t\t (mapcar #'(lambda(a) (when (typep a 'all-geometry-mixin) a))\n\t\t\t\t (the children))))\n   (3d-shapes (remove nil\n\t\t      (mapcar #'(lambda(a) (when (typep a '3d-shape-mixin) a))\n\t\t\t      (the children))))\n   )\n  :objects\n  ((my-box :type 'my-box\n\t   :length 3\n\t   :width 4\n\t   :height 5)\n   (my-sphere :type 'my-sphere\n\t      :radius 4)\n\n   (my-line :type 'my-line\n\t    :start (make-point 0 0 0)\n\t    :end (make-point 10 0 0))))\n\n",
    "metadata": {
      "source": "gornschool-training/t5/resources/source/object-tagging.lisp",
      "file_name": "object-tagging.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_5_object_definition",
      "chunk_id": 0,
      "section": "object-tagging"
    },
    "id": "e896c03395a012c1d0baa6ec074d4557"
  },
  {
    "text": "(define-object my-box (box\n\t\t       3d-shape-mixin\n\t\t       all-geometry-mixin))\n\n",
    "metadata": {
      "source": "gornschool-training/t5/resources/source/object-tagging.lisp",
      "file_name": "object-tagging.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_5_object_definition",
      "chunk_id": 1,
      "section": "my-box"
    },
    "id": "050389745e2bbb859863a400c15a76ba"
  },
  {
    "text": "(define-object my-sphere (sphere\n\t\t\t  3d-shape-mixin\n\t\t\t  all-geometry-mixin))\n\n",
    "metadata": {
      "source": "gornschool-training/t5/resources/source/object-tagging.lisp",
      "file_name": "object-tagging.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_5_object_definition",
      "chunk_id": 2,
      "section": "my-sphere"
    },
    "id": "e50ff2bcf49788f413a53b21e705c94a"
  },
  {
    "text": "(define-object my-line (line\n\t\t\tall-geometry-mixin))\n\n",
    "metadata": {
      "source": "gornschool-training/t5/resources/source/object-tagging.lisp",
      "file_name": "object-tagging.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_5_object_definition",
      "chunk_id": 3,
      "section": "my-line"
    },
    "id": "51e59593263ae74f9011a1e2082faa87"
  },
  {
    "text": "(define-object all-geometry-mixin())\n\n",
    "metadata": {
      "source": "gornschool-training/t5/resources/source/object-tagging.lisp",
      "file_name": "object-tagging.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_5_object_definition",
      "chunk_id": 4,
      "section": "all-geometry-mixin"
    },
    "id": "a61c8d2a129b1c3acb5671704cdbb5b6"
  },
  {
    "text": "(define-object 3d-shape-mixin())\n\n",
    "metadata": {
      "source": "gornschool-training/t5/resources/source/object-tagging.lisp",
      "file_name": "object-tagging.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_5_object_definition",
      "chunk_id": 5,
      "section": "3d-shape-mixin"
    },
    "id": "9aba22ef56800eaca0f07ed481b6d973"
  },
  {
    "text": "(in-package :gdl-user)\n\n",
    "metadata": {
      "source": "gornschool-training/t5/resources/source/settable-slots.lisp",
      "file_name": "settable-slots.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_5_object_definition",
      "chunk_id": 0,
      "section": "header"
    },
    "id": "81219783eb7eb0237e0614e4ef908902"
  },
  {
    "text": "(define-object settable-slots (base-object)\n\n  :computed-slots\n  ((speed 25 :settable)\n   (time 15 :settable)\n   (distance (* (the speed) (the time)) :settable))\n\n  :functions\n  ((set-speed! (&key (value 20)) (the (set-slot! :speed value)))\n   (set-time! (&key (value 10)) (the (set-slot! :time value)))\n   (set-distance! () (the (set-slot! :distance 100)))\n   (reset-distance! () (the (restore-slot-default! :distance)))\n   (reset-all! () (the (restore-slot-defaults! (list :speed :time :distance))))))\n\n",
    "metadata": {
      "source": "gornschool-training/t5/resources/source/settable-slots.lisp",
      "file_name": "settable-slots.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_5_object_definition",
      "chunk_id": 0,
      "section": "settable-slots"
    },
    "id": "81219783eb7eb0237e0614e4ef908902"
  },
  {
    "text": "(in-package :gdl-user)\n\n",
    "metadata": {
      "source": "gornschool-training/t5/resources/source/strings-for-display.lisp",
      "file_name": "strings-for-display.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_5_object_definition",
      "chunk_id": 0,
      "section": "header"
    },
    "id": "35432cebc1bc196cd2d7206c19c5bb21"
  },
  {
    "text": "(define-object  name-display (base-object)\n  \n  :objects\n  ((my-named-box :type 'my-box\n\t\t :strings-for-display \"My Custom Box\"\n\t\t :length 3\n\t\t :width 4\n\t\t :height 5)))\n   \n\n",
    "metadata": {
      "source": "gornschool-training/t5/resources/source/strings-for-display.lisp",
      "file_name": "strings-for-display.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_5_object_definition",
      "chunk_id": 0,
      "section": "name-display"
    },
    "id": "35432cebc1bc196cd2d7206c19c5bb21"
  },
  {
    "text": "(in-package :gdl-user)\n\n",
    "metadata": {
      "source": "gornschool-training/t5/resources/source/hidden-objects.lisp",
      "file_name": "hidden-objects.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_5_object_definition",
      "chunk_id": 0,
      "section": "header"
    },
    "id": "d19d663fd3b7575cf327abd097fab5ed"
  },
  {
    "text": "(define-object hidden-objects (base-object)\n  :computed-slots\n  ((box-volume (the (my-box 0) volume))\n   (hidden-box-volume (the (my-hidden-box 0) volume))\n   (object-list (list-elements (the)))\n   (all-objects (append (the children)\n\t\t\t(the hidden-children))))\n  \n  :objects\n  ((my-box :type 'box\n\t   :length 2\n\t   :width 2\n\t   :height 2\n\t   :sequence (:size 3)))\n  :hidden-objects\n  ((my-hidden-box :type 'box\n\t\t  :length 3\n\t\t  :width 3\n\t\t  :height 3\n\t\t  :sequence (:size 2))))\n\n\n\n\n",
    "metadata": {
      "source": "gornschool-training/t5/resources/source/hidden-objects.lisp",
      "file_name": "hidden-objects.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_5_object_definition",
      "chunk_id": 0,
      "section": "hidden-objects"
    },
    "id": "d19d663fd3b7575cf327abd097fab5ed"
  },
  {
    "text": "(in-package :gdl-user)\n\n",
    "metadata": {
      "source": "gornschool-training/t5/resources/source/pseudo-objects.lisp",
      "file_name": "pseudo-objects.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_5_object_definition",
      "chunk_id": 0,
      "section": "header"
    },
    "id": "49ef86d6ad1739618e17f84a37d967bc"
  },
  {
    "text": "(define-object pseudo-inputs (base-object)\n  :computed-slots\n  ((volumes (mapcar #'(lambda(a) (theo a volume)) (the children))))\n  \n  :objects\n  ((my-box :type 'box\n\t   :length 2\n\t   :width 3\n\t   :height 4\n\t   :sequence (:size 3))\n   (my-cylinder :type 'cylinder\n\t\t:radius 2\n\t\t:height 6\n\t\t:pseudo-inputs (:volume)\n\t\t:volume (div (* (the-child height)\n\t\t\t\t(expt (the-child radius) 2)\n\t\t\t\tpi) 2))))\n",
    "metadata": {
      "source": "gornschool-training/t5/resources/source/pseudo-objects.lisp",
      "file_name": "pseudo-objects.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_5_object_definition",
      "chunk_id": 0,
      "section": "pseudo-inputs"
    },
    "id": "49ef86d6ad1739618e17f84a37d967bc"
  },
  {
    "text": "(in-package :training-4)\n\n",
    "metadata": {
      "source": "gornschool-training/t4/source/file-io-example-1.lisp",
      "file_name": "file-io-example-1.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_4_object_definition",
      "chunk_id": 0,
      "section": "header"
    },
    "id": "a8216c7008c4f4280db689804dbf7621"
  },
  {
    "text": "(define-object file-io-example-1 (base-training-sheet)\n  :input-slots\n  (getting-started-url)\n\n  :computed-slots\n  ((hint-1 nil :settable)\n   (hint-2 nil :settable)\n   (hint-3 nil :settable)\n   (index-words (list \"with-open-file\" \"standard-output\"))\n   (body-content (with-cl-who-string()\n\t\t   (:div :class \"main-page-container\" :style \"grid-template-columns: 700px auto;\"\n\t\t\t (:div :class \"main-page-item\"\n\t\t\t       (str (the start-section main-div))\n\t\t\t       (str (the hint-1-section main-div))\n\t\t\t       (str (the hint-2-section main-div)))\n\t\t\t (:div :class \"main-page-item\"\n\t\t\t       (:h2 \"Resources\")\n\t\t\t       (str (the resource-links))))))\n\n   (code-1 (list \"",
    "metadata": {
      "source": "gornschool-training/t4/source/file-io-example-1.lisp",
      "file_name": "file-io-example-1.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_4_object_definition",
      "chunk_id": 0,
      "section": "file-io-example-1"
    },
    "id": "a8216c7008c4f4280db689804dbf7621"
  },
  {
    "text": "(define-object building (box)\"\n\t\t    \"  :input-slots\"\n\t\t    \"  (...\"\n\t\t    \"   ...\"\n\t\t    \"   (output-filename nil))\"\n\t\t    \"  ...\"\n\t\t    \"  ...\"\n\t\t    \"  :functions\"\n\t\t    \"  (...\"\n\t\t    \"   ...\"\n\t\t    \"   (write-bom-file! ()\"\n\t\t    \"                    (with-open-file (s (the output-filename) :direction :output\"\n\t\t    \"                                                          :if-exists :supersede\"\n\t\t    \"                                                          :if-does-not-exist :create)\"\n\t\t    \"                       (format t \\\"Exporting the BOM to ~a~%\\\" (the output-filename))\"\n\t\t    \"                       (format s \\\"~a\\\" (the bom-formatted))\"\n\t\t    \"                       (format t \\\"Exporting complete~%\\\"))))\"\n\t\t \")\"))\n\n   (code-2 (list \"",
    "metadata": {
      "source": "gornschool-training/t4/source/file-io-example-1.lisp",
      "file_name": "file-io-example-1.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_4_object_definition",
      "chunk_id": 1,
      "section": "building"
    },
    "id": "580c276ee340dff86916c779ed18fa3a"
  },
  {
    "text": "(defun building-bom (&key (nominal-height 3000)\" \n\t\t \"                          (nominal-width 3000)\"\n\t\t \"                          (nominal-length 3000)\"\n\t\t \"                          (roof-angle 30)\"\n\t\t \"                          (output-filename nil))\"\n\t\t \"  (let ((obj (make-object 'building\"\n\t\t \"                          :nominal-height nominal-height\"\n\t\t \"                          :nominal-width nominal-width\"\n\t\t \"                          :nominal-length nominal-length\"\n\t\t \"                          :truss-angle roof-angle\"\n\t\t \"                          :output-filename output-filename)))\"\n\t\t \"    (if output-filename (theo obj write-bom-file!)\"\n\t\t \"        (theo obj bom-formatted))))\"))\n\n   (code-3 (list \"Bricks\"\n\t\t \"======\"\n\t\t \"  Full Bricks 2559\"\n\t\t \"  Half Bricks 162\"\n\t\t \"Mortar\"\n\t\t \"======\"\n\t\t \"  Volume 0.550 m^3\"\n\t\t \"Roof Cladding\"\n\t\t \"======\"\n\t\t \"  Qty 2\"\n\t\t \"  Dimensions (L x W x T) 3130 x 1807 x 10\"\n\t\t \"Beams\"\n\t\t \"=====\"\n\t\t \"  Section (H x W x T) 50 x 40 x 3\"\n\t\t \"  Qty 3 Length 875\"\n\t\t \"  Qty 6 Length 1728\"\n\t\t \"  Qty 3 Length 3030\"))\n\n   (repl-1 (list (list :command \"(building-bom :output-filename \\\"c:/temp/building-bom.txt\\\")\"\n\t\t       :output \"Exporting the BOM to c:/temp/building-bom.txt\")\n\t\t (list :output \"Exporting complete\")\n\t\t (list :output \"NIL\"))))\n\t\t\t\t \n :functions\n  ((hint-1! () (the (set-slot! :hint-1 (not (the hint-1)))))\n   (hint-2! () (the (set-slot! :hint-2 (not (the hint-2))))))\n \n  :objects\n  ((start-section :type 'sheet-section\n\t\t  :inner-html (with-cl-who-string()\n\t\t\t\t(:h3 \"Example Brief\")\n\t\t\t\t(:p \"Extend the \"(:span :class \"object\")\" building example developed during the \"\n\t\t\t\t    (if (the getting-started-url) (htm ((:a :href (the getting-started-url))\"Getting Started with GendL\")) \"Getting Started with GendL \")\n\t\t\t\t    \" tutorial to optionally export the Bill of Materials to a file\")\n                                (str (the (hint-button :function-key :hint-1!)))))\n\n   (hint-1-section :type 'sheet-section\n\t\t   :inner-html (with-cl-who-string()\n\t\t\t\t (when (the hint-1)\n\t\t\t\t   (htm (:p \"The first step is to determine how to write the output, bearing in mind we need to be able to export the BoM to a file as well as output it to the screen if required. The current implementation provides a \"\n\t\t\t\t\t    (:span :class \"slot\" \"bom-formatted\")\" slot which it a single formatted string. It would make sense to use this directly. It would also make sense to write a \"\n\t\t\t\t\t    (:span :class \"object-keyword\" \":function\")\" to write the output to a file. The \"\n\t\t\t\t\t    (:span :class \"object-keyword\" \":function\")\" would be pretty simple\"\n\t\t\t\t            (str (code-example (the code-1)))\n\t\t\t\t            \"In the above code, we introduce a new \"\n\t\t\t\t            (:span :class \"object-keyword\" \":input-slot\")\"  \"\n\t\t\t\t            (:span :class \"slot\" \"output-filename\")\" which defaults to nil. We also add a new \"\n\t\t\t\t            (:span :class \"object-keyword\" \":function\")\" \"\n\t\t\t\t            (:span :class \"function\" \"write-bom-file!\")\". This function connects a stream to the file specified in \"\n\t\t\t\t            (:span :class \"slot\" \"output-filename\")\" and writes \"\n\t\t\t\t            (:span :class \"slot\" \"(the bom-formatted)\")\" to that stream using the \"\n\t\t\t\t            (:span :class \"function\" \"format\")\" function. Also included are 2 progress messages which are written to \"\n\t\t\t\t            (:em (:b \"*standard-output*\")))\n\t\t\t\t        (:p \"The next task is to update the function which instantiates the \"\n\t\t\t\t\t    (:span :class \"object\" \"building\")\" object and either write the BoM to the screen or send it to a file\")\n                                        (str (the (hint-button :function-key :hint-2!)))))))\n\n\n   (hint-2-section :type 'sheet-section\n\t\t   :inner-html (with-cl-who-string()\n\t\t\t\t (when (the hint-2)\n\t\t\t\t   (htm (:p \"The existing \"(:span :class \"function\" \"building-bom\")\" function instantiates the \"\n\t\t\t\t\t    (:span :class \"object\" \"building\")\" object and then calls the \"\n\t\t\t\t\t    (:span :class \"slot\" \"bom-formatted\")\" message to generate the output as a string. We need to retain this functionality and add in an option to output the content to a file. The simplest way to do this is provide a further keyword input, \"\n\t\t\t\t\t    (:span :class \"general-keyword\" \":output-filename\")\" to the \"\n\t\t\t\t\t    (:span :class \"function\" \"building-bom\")\" function and defaut it to nil. If \"\n\t\t\t\t\t    (:span :class \"general-keyword\" \":output-filename\")\" is set to a non-nil value then call the \"\n\t\t\t\t\t    (:span :class \"function\" \"write-bom-file!\")\" function, otherwise just call the \"\n\t\t\t\t\t    (:span :class \"slot\" \"bom-formatted\")\" message as previously\"\n\t\t\t\t\t    (str (code-example (the code-2)))\n\t\t\t\t\t    \"If we call the \"\n\t\t\t\t\t    (:span :class \"function\" \"building-bom\")\" function with a value for the \"\n\t\t\t\t\t    (:span :class \"general-keyword\" \":output-filename\")\" keyword input, we get the following\"\n\t\t\t\t\t    (str (repl-example (the repl-1)))\n\t\t\t\t\t    \"and we get a file written with the following content\"\n\t\t\t\t\t    (str (code-example (the code-3))))))))))\n\n",
    "metadata": {
      "source": "gornschool-training/t4/source/file-io-example-1.lisp",
      "file_name": "file-io-example-1.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_4_object_definition",
      "chunk_id": 2,
      "section": "building-bom"
    },
    "id": "e197644f74147a2fd7d24de9c566e757"
  },
  {
    "text": "(in-package :training-4)\n\n",
    "metadata": {
      "source": "gornschool-training/t4/source/writing-to-a-file.lisp",
      "file_name": "writing-to-a-file.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_4_object_definition",
      "chunk_id": 0,
      "section": "header"
    },
    "id": "8a3c318c2c6ef6d4a7d963cec14abac6"
  },
  {
    "text": "(define-object writing-to-a-file (base-training-sheet)\n\n\n  :computed-slots\n  ((index-words (list \"with-open-file\"))\n   (repl-1 (list (list :command (list \"(with-open-file (s \\\"c:/temp/my-file.txt\\\"\"\n\t\t\t\t      \"                   :direction :output\"\n\t\t\t\t      \"                   :if-exists :supersede\"\n\t\t\t\t      \"                   :if-does-not-exist :create)\"\n\t\t\t\t      \"      (format s \\\"Line 1 of text~%\\\")\"\n\t\t\t\t      \"      (format s \\\"Line 1 of text~%\\\")\")\n\t\t       :output \"NIL\")))\n   (code-1 (list \"Line 1 of text\"\n\t\t \"Line 1 of text\"))\n\n   (code-2 (list \"",
    "metadata": {
      "source": "gornschool-training/t4/source/writing-to-a-file.lisp",
      "file_name": "writing-to-a-file.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_4_object_definition",
      "chunk_id": 0,
      "section": "writing-to-a-file"
    },
    "id": "8a3c318c2c6ef6d4a7d963cec14abac6"
  },
  {
    "text": "(define-object my-box (box)\"\n\t\t \" :input-slots\"\n\t\t \" ((output-filename \\\"c:/temp/my-box-report\\\"))\"\n\t\t \"\"\n\t\t \" :computed-slots\"\n\t\t \" ((width 3)\"\n\t\t \"  (height 4)\"\n\t\t \"  (length 6))\"\n\t\t \"\"\n\t\t \" :functions\"\n\t\t \" ((write-report!()\"\n\t\t \"\t(with-open-file (s (the output-filename)\"\n\t\t \"\t\t\t:direction :output\"\n\t\t \"\t\t\t:if-exists :supersede\"\n\t\t \"\t\t\t:if-does-not-exist :create)\"\n\t\t \"\t(let ((i 0))\"\n\t\t \"\t  (format t \\\"Begining output to ~a~%\\\" (the output-filename))\"\n\t\t \"\t  (format s \\\"Box Width ~a~%\\\" (the width))\"\n\t\t \"\t  (incf i)\"\n\t\t \"\t  (format s \\\"Box Length ~a~%\\\" (the length))\"\n\t\t \"\t  (incf i)\"\n\t\t \"\t  (format s \\\"Box Height ~a~%\\\" (the height))\"\n\t\t \"\t  (incf i)\"\n\t\t \"\t  (format s \\\"Box Center ~@{~,1f~^,~}~%\\\"\"\n\t\t \"\t                    (get-x (the center))\"\n\t\t \"\t                    (get-y (the center))\"\n\t\t \"\t                    (get-z (the center)))\"\n\t\t \"\t  (incf i)\"\n\t\t \"\t  (format s \\\"Box Volume ~a~%\\\" (the volume))\"\n\t\t \"\t  (incf i)\"\n\t\t \"\t  (format t \\\"Output written (~a line~:p)~%\\\" i)))))\"\n\t\t \"  ))\"))\n\n   (code-3 (list \"",
    "metadata": {
      "source": "gornschool-training/t4/source/writing-to-a-file.lisp",
      "file_name": "writing-to-a-file.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_4_object_definition",
      "chunk_id": 1,
      "section": "my-box"
    },
    "id": "7b007381460efe23075e69ac2fceb0d8"
  },
  {
    "text": "(defun output-report (fname)\"\n\t\t \"        (let ((obj (make-object 'my-box\"\n\t\t \"\t\t\t           :output-filename fname)))\"\n\t\t \"   (theo obj write-report!)))\"))\n   (repl-2 (list (list :command \"(output-report \\\"c:/temp/report.txt\\\")\"\n\t\t :output \"Begining output to c:/temp/report.txt\")\n\t   (list :output \"Output written (5 lines)\")\n\t\t (list :output \"NIL\")))\n   \n   (code-4 (list \"Box Width 3\"\n\t\t \"Box Length 6\"\n\t\t \"Box Height 4\"\n\t\t \"Box Center 0.0,0.0,0.0\"\n\t\t \"Box Volume 72\"))\t\t\n\n   (body-content (with-cl-who-string()\n\t\t   (:div :class \"main-page-container\" :style \"grid-template-columns: 700px auto;\"\n\t\t\t (:div :class \"main-page-item\"\n\t\t\t       (:p \"In the previous topic, we concluded by recomending that the CL macro \" (:span :class \"macro\" \"with-open-file\")\" was used for any file input or output. So lets have a look at using this macro to write to a file\")\n\t\t\t       (:p \"To write output to a file C:/temp/my-file.txt using \" (:span :class \"macro\" \"with-open-file\")\" woud look like the following\")\n\t\t\t       (str (repl-example (the repl-1)))\n\t\t\t       (:p \"which will produce the following content in the file c:/temp/my-file.txt\")\n\t\t\t       (str (code-example (the code-1)))\n\t\t\t       (:p \"note that the stream \"(:b \"s\")\" only exists within the context of the \" (:span :class \"macro\" \"with-open-file\")\" body of expressions\")\n\t\t\t       (:p \"In many cases, file output is implemented as a :function in a GendL object, although it is perfectly feasible to implement it as a side effect of a :computed-slot. Consider the following simple example\")\n\t\t\t       (str (code-example (the code-2)))\n\t\t\t       (:p \"Here, as well as sending output to the stream connected to the file, we are also sending output to the REPL using the stream T (which defaults to \"(:b \"*standard-output*\")\". This is often a useful technique to assist with development and/or debugging. We could also write a small function which takes a filename as an input and executes the file output by calling the :function Write-report!\")\n\t\t\t       (str (code-example (the code-3)))\n\t\t\t       (:p \"And then in the REPL we would see this\")\n\t\t\t       (str (repl-example (the repl-2)))\n\t\t\t       (:p \"Resulting in the file c:/temp/my-file.txt being written with the following content\")\n\t\t\t       (str (code-example (the code-4))))\n\t\t\t (:div :class \"main-page-item\"\n\t\t\t       (:h2 \"Resources\")\n\t\t\t       (str (the resource-links))))))))\n\t\t\t\t  \n\n",
    "metadata": {
      "source": "gornschool-training/t4/source/writing-to-a-file.lisp",
      "file_name": "writing-to-a-file.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_4_object_definition",
      "chunk_id": 2,
      "section": "output-report"
    },
    "id": "637aa6242116674008576e0b07e56059"
  },
  {
    "text": "(in-package :gdl-user)\n\n(gwl:define-package :training-4\n    (:use :training-common)\n  (:shadow #:*home*)\n  (:export #:assembly))\n\n",
    "metadata": {
      "source": "gornschool-training/t4/source/package.lisp",
      "file_name": "package.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_4_package",
      "chunk_id": 0,
      "section": "header"
    },
    "id": "dd6eaf1ccbd77dd9b9790d9a8547856c"
  },
  {
    "text": "(in-package :training-4)\n\n(defparameter *publish-prefix* \"t4\")  \n\n",
    "metadata": {
      "source": "gornschool-training/t4/source/assembly.lisp",
      "file_name": "assembly.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_4_object_definition",
      "chunk_id": 0,
      "section": "header"
    },
    "id": "ec2d2da9fd135e10b42839bcb52c796f"
  },
  {
    "text": "(define-object assembly (base-tutorial-sheet)\n  :input-slots\n  ((getting-started-url nil)\n   (tutorial-name \"File I/O\"))\n\n  :computed-slots\n  ((introduction (with-cl-who-string ()\n\t\t   (:p \"A basic requirement for most applications is to be able to interface to the outside world. This may be done with a User Interface, but it may also be done by reading inputs from a file and/or writing outputs to a file\"\n\t\t       (:p \"This tutorial covers the basics of file i/o\")))))\n  \n\n  :objects\n  ((file-io-basics :type 'file-io-basics\n\t\t   :pass-down (page-objects)\n\t\t   :publish-prefix *publish-prefix*\n\t\t   :page 1\n\t\t   :getting-started-url (the getting-started-url)\n\t\t   :page-title \"File IO Basics\")\n   \n   (writing-to-a-file :type 'writing-to-a-file\n\t\t      :pass-down (page-objects)\n\t\t      :publish-prefix *publish-prefix*\n\t\t      :page 2\n\t\t      :page-title \"Writing to a file\"\n\t\t      :resources (list \"file-output.lisp\"))\n   \n   (reading-from-a-file :type 'reading-from-a-file\n\t\t\t:pass-down (page-objects)\n\t\t\t:publish-prefix *publish-prefix*\n\t\t\t:page 3\n\t\t\t:page-title \"Reading from a file\"\n\t\t\t:resources (list \"read-input.lisp\" \"report.txt\"))\n   \n   (example-1 :type 'file-io-example-1\n\t      :pass-down (page-objects)\n\t      :publish-prefix *publish-prefix*\n\t      :page 4\n\t      :getting-started-url (the getting-started-url)\n\t      :page-title \"Example - outputting the Tutorial 2 Building BoM to a file\"\n\t      :resources (list \"building-bom-output.lisp\") )\n\n   (example-2 :type 'file-io-example-2\n\t      :pass-down (page-objects)\n\t      :publish-prefix *publish-prefix*\n\t      :page 5\n\t      :getting-started-url (the getting-started-url)\n\t      :read-from-file-url (the reading-from-a-file url)\n\t      :page-title \"Example - instantiating the Tutorial 2 Building example from a file input\"\n\t      :resources (list \"building-bom-input-output.lisp\"))\n\n   )\n  )\n\n\n\n\n\n\n\n\n\n  \n  \n  \n  \n  \n",
    "metadata": {
      "source": "gornschool-training/t4/source/assembly.lisp",
      "file_name": "assembly.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_4_object_definition",
      "chunk_id": 0,
      "section": "assembly"
    },
    "id": "ec2d2da9fd135e10b42839bcb52c796f"
  },
  {
    "text": "(in-package :training-4)\n\n",
    "metadata": {
      "source": "gornschool-training/t4/source/file-io-example-2.lisp",
      "file_name": "file-io-example-2.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_4_object_definition",
      "chunk_id": 0,
      "section": "header"
    },
    "id": "f8b21194e8c958a0ca1503b58bdd1e9f"
  },
  {
    "text": "(define-object file-io-example-2 (base-training-sheet)\n  :input-slots\n  (getting-started-url\n   read-from-file-url)\n  \n  :computed-slots\n  ((hint-1 nil :settable)\n   (hint-2 nil :settable)\n   (hint-3 nil :settable)\n   (index-words (list \"with-open-file\" \"read-safe-string\"))\n   \n   (body-content (with-cl-who-string ()\n\t\t   (:div :class \"main-page-container\" :style \"grid-template-columns: 700px auto;\"\n\t\t\t (:div :class \"main-page-item\"\n\t\t\t       (str (the start-section main-div))\n\t\t\t       (str (the hint-1-section main-div))\n\t\t\t       (str (the hint-2-section main-div))\n\t\t\t       (str (the hint-3-section main-div)))\n\t\t\t (:div :class \"main-page-item\"\n\t\t\t       (:h2 \"Resources\")\n\t\t\t       (str (the resource-links))))))\n   \n   (code-1 (list \"nominal-height 3000\"\n\t\t \"nominal-width 3000\"\n\t\t \"nominal-length 4000\"\n\t\t \"brick-height 45\"\n\t\t \"brick-length 180\"\n\t\t \"brick-width 90\"\n\t\t \"mortar-joint-width 10\"\n\t\t \"truss-angle 30\"\n\t\t \"beam-width 40\"\n\t\t \"beam-height 50\"\n\t\t \"wall-thickness 3\"\n\t\t \"material-density 7800\"\n\t\t \"roof-overhang 50\"\n\t\t \"cladding-thickness 10\"\n\t\t \"max-beam-spacing 1500\"))\n   \n   (code-2 (list \"",
    "metadata": {
      "source": "gornschool-training/t4/source/file-io-example-2.lisp",
      "file_name": "file-io-example-2.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_4_object_definition",
      "chunk_id": 0,
      "section": "file-io-example-2"
    },
    "id": "f8b21194e8c958a0ca1503b58bdd1e9f"
  },
  {
    "text": "(defun import-building-data (file)\"\n\t\t \"  (let* ((raw-data (read-file file))\"\n\t\t \"         (res (mapcar #'(lambda(a) (glisp:split-regexp \\\"\\\\\\\\s+\\\" a)) raw-data)))\"\n\t\t \"    (mapcan #'(lambda(a) (list \"\n\t\t \"                          (make-keyword (first a))\" \n\t\t \"                          (read-safe-string (second a)))) res)))\"))\n\n   (repl-1 (list (list :command \"(import-building-data \\\"c:/temp/building-input.txt\\\")\"\n                       \n\t\t       :output (list \"(:NOMINAL-HEIGHT 3000 :NOMINAL-WIDTH 3000 :NOMINAL-LENGTH 4000\" \n\t\t\t\t     \":BRICK-HEIGHT 45 :BRICK-LENGTH 180 :BRICK-WIDTH 90 \"\n\t\t\t\t     \":MORTAR-JOINT-WIDTH 10 :TRUSS-ANGLE 30 :BEAM-WIDTH 40 \"\n\t\t\t\t     \":BEAM-HEIGHT 50 :WALL-THICKNESS 3 :MATERIAL-DENSITY 7800\"\n\t\t\t\t     \":ROOF-OVERHANG 50 :CLADDING-THICKNESS 10 :MAX-BEAM-SPACING 1500)\"))))\n   \n   (code-3 (list \"",
    "metadata": {
      "source": "gornschool-training/t4/source/file-io-example-2.lisp",
      "file_name": "file-io-example-2.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_4_object_definition",
      "chunk_id": 1,
      "section": "import-building-data"
    },
    "id": "969b5f6ddf7a02eaafd33c9933793274"
  },
  {
    "text": "(defun building-bom (&key (nominal-height nil)\"\n\t\t \"                          (nominal-width nil)\"\n\t\t \"                          (nominal-length nil)\"\n\t\t \"                          (roof-angle nil)\"\n\t\t \"                          (input-filename nil)\"\n\t\t \"                          (output-filename nil))\"\n\t\t \"  (let ((obj (make-object 'building\"\n\t\t \"                          :function-nominal-height nominal-height\"\n\t\t \"                          :function-nominal-width nominal-width\"\n\t\t \"                          :function-nominal-length nominal-length\"\n\t\t \"                          :function-truss-angle roof-angle\"\n\t\t \"                          :output-filename output-filename\"\n\t\t \"                          :input-filename input-filename)))\"\n\t\t \"   (if output-filename (theo obj write-bom-file!)\"\n\t\t \"       (theo obj bom-formatted))))\"))\n\n   (code-4 (list \"",
    "metadata": {
      "source": "gornschool-training/t4/source/file-io-example-2.lisp",
      "file_name": "file-io-example-2.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_4_object_definition",
      "chunk_id": 2,
      "section": "building-bom"
    },
    "id": "fa2cb7afcaa7304971faae2fd24cc461"
  },
  {
    "text": "(define-object building (box)\"\n\t\t \"   :input-slots\"\n\t\t \"   ((function-nominal-height nil)\"\n\t\t \"    (function-nominal-width nil)\"\n\t\t \"    (function-nominal-length nil)\"\n\t\t \"    (function-truss-angle  nil)\"\n\t\t \"    (input-filename nil)\"\n\t\t \"    ...\"\n\t\t \"    ...)\"\n\t\t \"\"\n\t\t \"   :computed-slots\"\n\t\t \"   ((nominal-height (or (the function-nominal-height) 3000))\"\n\t\t \"    (nominal-width (or (the function-nominal-width) 3000))\"\n\t\t \"    (nominal-length (or (the function-nominal-length) 2000))\"\n\t\t \"    (truss-angle (or (the function-truss-angle) 30))\"\n\t\t \"    ...\"\n\t\t \"    ...)\"\n\t\t \"...\"\n\t\t \")\"))\n   (code-5 (list \"",
    "metadata": {
      "source": "gornschool-training/t4/source/file-io-example-2.lisp",
      "file_name": "file-io-example-2.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_4_object_definition",
      "chunk_id": 3,
      "section": "building"
    },
    "id": "704d692f39dbf67bb2a902833daf4eff"
  },
  {
    "text": "(define-object building (box)\"\n\t\t \"  :computed-slots\"\n\t\t \"  ((file-inputs (when (the input-filename) (import-building-data (the input-filename))))\"\n\t\t \"   (nominal-height (or (the function-nominal-height)\"\n\t\t \"                       (getf (the file-inputs) :nominal-height)\"\n\t\t \"                       3000))\"\n\t\t \"   (nominal-width (or (the function-nominal-width)\"\n\t\t \"                      (getf (the file-inputs) :nominal-width)\"\n\t\t \"                      3000))\"\n\t\t \"   (nominal-length (or (the function-nominal-length)\"\n\t\t \"                       (getf (the file-inputs) :nominal-length)\"\n\t\t \"                       4000))\"\n\t\t \"   (truss-angle (or (the function-truss-angle)\"\n\t\t \"                    (getf (the file-inputs) :truss-angle)\"\n\t\t \"                    30))\"\n\t\t \"   ...\"\n\t\t \"   ...)\"\n\t\t \")\"))\n\n   (code-6 (list \"",
    "metadata": {
      "source": "gornschool-training/t4/source/file-io-example-2.lisp",
      "file_name": "file-io-example-2.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_4_object_definition",
      "chunk_id": 4,
      "section": "building"
    },
    "id": "317cac0f43d3a7318aa1804012eba405"
  },
  {
    "text": "(define-object building (box)\"\n\t\t \"  :input-slots\"\n\t\t \"  (...\"\n\t\t \"   ...\"\n\t\t \"   (brick-height (or (getf (the file-inputs) :brick-height) 45))\"\n\t\t \"   (brick-length (or (getf (the file-inputs) :brick-length) 180))\"\n\t\t \"   (brick-width (or (getf (the file-inputs) :brick-width) 90))\"\n\t\t \"   (mortar-joint-width (or (getf (the file-inputs) :mortar-joint-width) 10))\"\n\t\t \"   (beam-width (or (getf (the file-inputs) :beam-width) 40))\"\n\t\t \"   (beam-height (or (getf (the file-inputs) :beam-height) 50))\"\n\t\t \"   (wall-thickness (or (getf (the file-inputs) :wall-thickness) 3))\"\n\t\t \"   (material-density (or (getf (the file-inputs) :material-density) 7800))\"\n\t\t \"   (roof-overhang (or (getf (the file-inputs) :roof-overhang) 50))\"\n\t\t \"   (cladding-thickness (or (getf (the file-inputs) :cladding-thickness) 10))\"\n\t\t \"   (max-beam-spacing (or (getf (the file-inputs) :max-beam-spacing) 1500))\"\n\t\t \"  )\"\n\t\t \"  ...\"\n\t\t \")\"))\n\n   (repl-2 (list (list :command \"(building-bom)\"\n\t\t       :output (list \"\\\"Bricks\"\n\t\t\t\t     \"======\"\n\t\t\t\t     \"  Full Bricks 3109\"\n\t\t\t\t     \"  Half Bricks 162\"\n\t\t\t\t     \"Mortar\"\n\t\t\t\t     \"======\"\n\t\t\t\t     \"  Volume 0.667 m^3\"\n\t\t\t\t     \"Roof Cladding\"\n\t\t\t\t     \"======\"\n\t\t\t\t     \"  Qty 2\"\n\t\t\t\t     \"  Dimensions (L x W x T) 4080 x 1807 x 10\"\n\t\t\t\t     \"Beams\"\n\t\t\t\t     \"=====\"\n\t\t\t\t     \"  Section (H x W x T) 50 x 40 x 3\"\n\t\t\t\t     \"  Qty 3 Length 875\"\n\t\t\t\t     \"  Qty 6 Length 1728\"\n\t\t\t\t     \"  Qty 3 Length 3030\"\n\t\t\t\t     \"\\\"\"))))\n\n   (repl-3 (list (list :command \"(building-bom :nominal-width 4000)\"\n\t\t       :output (list \"\\\"Bricks\"\n\t\t\t\t     \"======\"\n\t\t\t\t     \"  Full Bricks 3384\"\n\t\t\t\t     \"  Half Bricks 162\"\n\t\t\t\t     \"Mortar\"\n\t\t\t\t     \"======\"\n\t\t\t\t     \"  Volume 0.725 m^3\"\n\t\t\t\t     \"Roof Cladding\"\n\t\t\t\t     \"======\"\n\t\t\t\t     \"  Qty 2\"\n\t\t\t\t     \"  Dimensions (L x W x T) 4080 x 2355 x 10\"\n\t\t\t\t     \"Beams\"\n\t\t\t\t     \"=====\"\n\t\t\t\t     \"  Section (H x W x T) 50 x 40 x 3\"\n\t\t\t\t     \"  Qty 3 Length 1149\"\n\t\t\t\t     \"  Qty 6 Length 2276\"\n\t\t\t\t     \"  Qty 3 Length 3980\"\n\t\t\t\t     \"\\\"\"))))\n   (code-7 (list \"nominal-width 5000\"\n\t\t \"truss-angle 40\"\n\t\t \"wall-thickness 4\"))\n   \n   (repl-4 (list (list :command \"(building-bom :input-filename \\\"c:/temp/building-input.txt\\\")\"\n\t\t       :output (list \"\\\"Bricks\"\n\t\t       \"======\"\n\t\t       \"  Full Bricks 3659\"\n\t\t       \"  Half Bricks 162\"\n\t\t       \"Mortar\"\n\t\t       \"======\"\n\t\t       \"  Volume 0.783 m^3\"\n\t\t       \"Roof Cladding\"\n\t\t       \"======\"\n\t\t       \"  Qty 2\"\n\t\t       \"  Dimensions (L x W x T) 4080 x 3281 x 10\"\n\t\t       \"Beams\"\n\t\t       \"=====\"\n\t\t       \"  Section (H x W x T) 50 x 40 x 4\"\n\t\t       \"  Qty 3 Length 2068\"\n\t\t       \"  Qty 6 Length 3199\"\n\t\t       \"  Qty 3 Length 4930\"\n\t\t       \"\\\"\"))))\n\n   (repl-5 (list (list :command \"(building-bom :nominal-width 4000 :input-filename \\\"c:/temp/building-input.txt\\\")\"\n\t\t       :output (list \"\\\"Bricks\"\n\t\t\t\t     \"======\"\n\t\t\t\t     \"  Full Bricks 3384\"\n\t\t\t\t     \"  Half Bricks 162\"\n\t\t\t\t     \"Mortar\"\n\t\t\t\t     \"======\"\n\t\t\t\t     \"  Volume 0.725 m^3\"\n\t\t\t\t     \"Roof Cladding\"\n\t\t\t\t     \"======\"\n\t\t\t\t     \"  Qty 2\"\n\t\t\t\t     \"  Dimensions (L x W x T) 4080 x 2661 x 10\"\n\t\t\t\t     \"Beams\"\n\t\t\t\t     \"=====\"\n\t\t\t\t     \"  Section (H x W x T) 50 x 40 x 4\"\n\t\t\t\t     \"  Qty 3 Length 1670\"\n\t\t\t\t     \"  Qty 6 Length 2579\"\n\t\t\t\t     \"  Qty 3 Length 3980\"\n\t\t\t\t     \"\\\"\"))))\n\n   (repl-6 (list (list :command (list \"(building-bom :nominal-width 4000 \"\n\t\t\t\t      \"              :input-filename \\\"c:/temp/building-input.txt\\\" \"\n\t\t\t\t      \"              :output-filename \\\"c:/temp/building-output.txt\\\")\")\n\t\t       :output (list \"Exporting the BOM to c:/temp/building-output.txt\"\n\t\t\t\t     \"Exporting complete\"\n\t\t\t\t     \"NIL\"))))\n   (code-8 (list \"Bricks\"\n\t\t \"======\"\n\t\t \"  Full Bricks 3384\"\n\t\t \"  Half Bricks 162\"\n\t\t \"Mortar\"\n\t\t \"======\"\n\t\t \"  Volume 0.725 m^3\"\n\t\t \"Roof Cladding\"\n\t\t \"======\"\n\t\t \"  Qty 2\"\n\t\t \"  Dimensions (L x W x T) 4080 x 2661 x 10\"\n\t\t \"Beams\"\n\t\t \"=====\"\n\t\t \"  Section (H x W x T) 50 x 40 x 4\"\n\t\t \"  Qty 3 Length 1670\"\n\t\t \"  Qty 6 Length 2579\"\n\t\t \"  Qty 3 Length 3980\"))\n\n\t   \n   )\n\n  :functions\n  ((hint-1! () (the (set-slot! :hint-1 (not (the hint-1)))))\n   (hint-2! () (the (set-slot! :hint-2 (not (the hint-2)))))\n   (hint-3! () (the (set-slot! :hint-3 (not (the hint-3))))))\n  \n  :objects\n  ((start-section :type 'sheet-section\n\t\t  :inner-html (with-cl-who-string()\n\t\t\t\t(:h3 \"Example Brief\")\n\t\t\t\t(:p \"Extend the \"(:span :class \"object\")\" building example developed during the \"\n\t\t\t\t    (if (the getting-started-url) (htm ((:a :href (the getting-started-url))\"Getting Started with GendL\")) \"Getting Started with GendL \")\n\t\t\t\t    \" tutorial to take any or all of its inputs from an input file\")\n                                (str (the (hint-button :function-key :hint-1!)))))\n\n   (hint-1-section :type 'sheet-section\n\t\t  :inner-html (with-cl-who-string()\n\t\t\t\t(when (the hint-1)\n\t\t\t\t  (htm (:p \"The first task is to develop a strategy which will allow the \"\n\t\t\t\t\t   (:span :class \"object\" \"building\")\" object to be instantiated by taking none, some, or all of its inputs from an input file. If we continue with the concept of using a function (\"\n\t\t\t\t\t   (:span :class \"function\" \"building-bom\")\") to instantiate \"\n\t\t\t\t\t   (:span :class \"object\" \"building\")\" we could imagine a hierarchy of inputs\"\n\t\t\t\t\t   (:ul (:li \"If the \"(:span :class \"function\" \"building-bom\")\" function provides any inputs, these should be used as priority\")\n\t\t\t\t\t\t(:li \"If an input file is given to \"\n\t\t\t\t\t\t     (:span :class \"function\" \"building-bom\")\", any inputs in this file should be used, except where they are already specified in the function inputs. \")\n\t\t\t\t\t\t(:li \"For any other inputs use the \"\n\t\t\t\t\t\t     (:span :class \"object\" \"building\")\" object defaults\"))\n\t\t\t\t\t   \"Having developed this strategy, we now need to think about the format of the input file as it will determine how we need to process it to deliver the data in a format that the building object can use. The simplest option would be to use one word and one value per line, seperated by one or more spaces, to identify the data field and its value.In other words, out input file could mirror the \"\n\t\t\t\t\t   (:span :class \"object-keyword\" \":input-slots\")\" definition\")\n\t\t\t\t       (str (code-example (the code-1)))\n\t\t\t\t       (:p \"We could then use our general purpose \"\n\t\t\t\t\t   (:span :class \"function\" \"read-file\")\" function developed in the \"(:a :href (the read-from-file-url) \"Reading from a File\") \" topic and write a simple function to convert the supplied data into a plist\"\n\t\t\t\t\t   (str (code-example (the code-2))))\n\t\t\t\t       (:p \"Compiling and evaluating this function based on the data shown above would give\")\n\t\t\t\t       (str (repl-example (the repl-1)))\n\t\t\t\t       (:p \"Now we need to consider how we integrate this with the \"\n\t\t\t\t\t   (:span :class \"function\" \"building-bom\")\" function and the \"\n\t\t\t\t\t   (:span :class \"object\" \"building object\"))\n                                       (str (the (hint-button :function-key :hint-2!)))))))\n\n\n   (hint-2-section :type 'sheet-section\n\t\t   :inner-html (with-cl-who-string()\n\t\t\t\t (when (the hint-2)\n\t\t\t\t   (htm (:p \"A few changes are required to the building-bom function. To implement a hierarchy of inputs we need to differentiate where inputs are coming from. Any inputs provided by the function will be renamed so the :nominal-height becomes :function-nominal-height and the default values will be changed to zero. Additionally, we need to provide an input for the input filename, here defined as :input-filename. So the updated \"(:span :class \"function\" \"building-bom\")\" function would look like this\"\n\t\t\t\t       (str (code-example (the code-3)))\n\t\t\t\t       \"and associated changes to the \"(:spac :class \"object\" \"building\")\" object \"(:span :class \"object-keyword\" \":input-slots\")\" would look like this\"\n\t\t\t\t       (str (code-example (the code-4)))\n\t\t\t\t       \"Note that the default values for \"\n\t\t\t\t       (:span :class \"slot\" \"nominal-height\")\", \"\n\t\t\t\t       (:span :class \"slot\" \"nominal-width\")\", \"\n\t\t\t\t       (:span :class \"slot\" \"nominal-length\")\" and \"\n\t\t\t\t       (:span :class \"slot\" \"truss-angle\")\" have been maintained, but will be overwritten by values from the \"\n\t\t\t\t       (:span :class \"function\" \"building-bom\")\" function if those values are supplied\")\n\t\t\t\t        (:p \"Now we need to make changes in the building object to use any of the values provided in the input file\")\n                                        (str (the (hint-button :function-key :hint-3!)))))))\n\n   (hint-3-section :type 'sheet-section\n\t\t   :inner-html (with-cl-who-string()\n\t\t\t\t (when (the hint-3)\n\t\t\t\t   (htm (:p \"Firstly we add a new \"\n\t\t\t\t\t    (:span :class \"object-keyword\" \":computed-slot\")\" which delivers the input file data as a plist and update the \"\n\t\t\t\t\t    (:span :class \"object-keyword\" \":computed-slots\")\" for \"\n\t\t\t\t\t    (:span :class \"slot\" \"nominal-height\")\", \"\n\t\t\t\t\t    (:span :class \"slot\" \"nominal-width\")\", \"\n\t\t\t\t\t    (:span :class \"slot\" \"nominal-length\")\" and \"\n\t\t\t\t\t    (:span :class \"slot\" \"truss-angle\")\". As per our strategy, we should use any function-supplied values if supplied, otherwise we should use values from the input file if present and if neither of those conditions are met we should use the standard default value. So \"\n\t\t\t\t\t    (:span :class \"object-keyword\" \":computed-slots\")\" updates would look like this\")\n\n                                        \n\t\t\t\t\t (str (code-example (the code-5)))\n\n                                        \n\t\t\t\t\t(:p \"Next we need to address the \"\n\t\t\t\t\t    (:span :class \"object-keyword\" \":input-slots\")\". These are not optionally provided by the \"\n\t\t\t\t\t    (:span :class \"function\"\"building-bom\")\" function, so we need to use the value from the input file if provided, otherwise the standard default. Updates to the \"\n\t\t\t\t\t    (:span :class \"object-keyword\" \":input-slots\")\" would therefore look like this\")\n\n                                        \n\t\t\t\t\t (str (code-example (the code-6)))\n\n                                        \n\t\t\t\t\t(:p \"If we evaluate \"(:span :class \"function\" \"building-bom\")\" with no arguments, we should get a BoM for the default values\")\n\n                                        \n\t\t\t\t\t (str (repl-example (the repl-2)))\n\n                                        \n\t\t\t\t\t(:p \"If we evaluate \"\n\t\t\t\t\t    (:span :class \"function\" \"building-bom\")\" with a value specified for \"\n\t\t\t\t\t    (:span :class \"slot\" \"nominal-width\")\", we should see some BoM changes\")\n\n                                        \n\t\t\t\t\t (str (repl-example (the repl-3)))\n                                        \n                                        \n\t\t\t\t\t(:p \"If we now make an input file and evaluate \"\n\t\t\t\t\t    (:span :class \"function\" \"building-bom\")\" with \"\n\t\t\t\t\t    (:span :class \"general-keyword\" \":input-filename\")\" specified, we will again see BoM changes\")\n\n                                        \n\t\t\t\t\t(str (code-example (the code-7)))\n\n                                        \n\t\t\t\t\t(str (repl-example (the repl-4)))\n\n                                        \n\t\t\t\t\t(:p \"With the same input file, but specifying \"\n\t\t\t\t\t    (:span :class \"slot\" \"nominal-width\")\" as an argument to \"\n\t\t\t\t\t    (:span :class \"function\" \"building-bom\")\", we can see that the \"\n\t\t\t\t\t    (:span :class \"slot\" \"nominal-width\")\" value is taking precedence over the value supplied in the input file\")\n\n                                        \n\t\t\t\t\t(str (repl-example (the repl-5)))\n\n                                        \n\t\t\t\t\t(:p \"And finally, if we provide an \"\n\t\t\t\t\t    (:span :class \"general-keyword\" \":output-filename\")\", the bom will be written to that file\")\n\n                                        \n\t\t\t\t\t(str (repl-example (the repl-6)))\n\n                                        \n\t\t\t\t\t(str (code-example (the code-8)))))))\n\t\t\t\t       \n   )\n\n\n   )\n",
    "metadata": {
      "source": "gornschool-training/t4/source/file-io-example-2.lisp",
      "file_name": "file-io-example-2.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_4_object_definition",
      "chunk_id": 5,
      "section": "building"
    },
    "id": "36d7aec37aee4e05908fb2c655ee9bc2"
  },
  {
    "text": "(in-package :training-4)\n\n",
    "metadata": {
      "source": "gornschool-training/t4/source/file-io-basics.lisp",
      "file_name": "file-io-basics.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_4_object_definition",
      "chunk_id": 0,
      "section": "header"
    },
    "id": "4cac2ba9dc846f986d2b066b22d72074"
  },
  {
    "text": "(define-object file-io-basics (base-training-sheet)\n  :input-slots\n  (getting-started-url)\n  \n  :computed-slots\n  ((repl-1 (list (list :command (list \"(defparameter *my-stream* (open \\\"c:/temp/missing-file.txt\\\"\"\n\t\t\t\t      \"                                :direction :output\"\n\t\t\t\t      \"                                :if-does-not-exist :create\")\n\t\t       :output \"*MY-STREAM*\")))\n   (repl-2 (list(list :command \"(format *MY-STREAM* \\\"Writing to a file for the first time\\\")\"\n\t\t      :output \"NIL\")))\n   (repl-3 (list(list :command \"(close *MY-STREAM*)\"\n\t\t      :output \"T\")))\n   (code-1 (list \"Writing to a file for the first time\"))\n   (body-content (with-cl-who-string()\n\t\t   (:div :class \"main-page-container\" :style \"grid-template-columns: 600px auto;\"\n\t\t\t (:div :class \"main-page-item\"\n\t\t\t       (:h3 \"The basics of file I/O\")\n\t\t\t       (:p \"To read and write from or to a file, we do this via a \"\n\t\t\t\t   (:em \"stream\") \" which is connected to the file. The most basic mechanism for connecting a stream to a file is by using the CL function \"\n\t\t\t\t   (:span :class \"function\" \"open\")\", which takes the following arguments\"\n\t\t\t\t   (:ul (:li \"filename - required\")\n\t\t\t\t\t(:li \"keyword argument \"\n\t\t\t\t\t     (:span :class \"general-keyword\" \":direction\")\" which can be either \"\n\t\t\t\t\t     (:span :class \"general-keyword\" \":input\")\" or \"\n\t\t\t\t\t     (:span :class \"general-keyword\" \":output\")\" or \"\n\t\t\t\t\t     (:span :class \"general-keyword\" \":io\")\" (both directions)\")\n\t\t\t\t\t(:li \"keyword argument \"\n\t\t\t\t\t     (:span :class \"general-keyword\" \":if-exists\")\" - what to do if the file exists - the most common values being \"\n\t\t\t\t\t     (:span :class \"general-keyword\" \":overwrite\")\", \"\n\t\t\t\t\t     (:span :class \"general-keyword\" \":append\")\" or \"\n\t\t\t\t\t     (:span :class \"general-keyword\" \":supersede\")\". The difference between \"\n\t\t\t\t\t     (:span :class \"general-keyword\" \":overwrite\")\" and \"\n\t\t\t\t\t     (:span :class \"general-keyword\" \":supersede\")\" is the former causes the existing file to be modified at the beginning of the output, whilst the latter delays the deletion of the original file until the stream is closed\")\n\t\t\t\t\t(:li \"keyword argument \"\n\t\t\t\t\t     (:span :class \"general-keyword\" \":if-does-not-exist\")\" - the most common value is \"\n\t\t\t\t\t     (:span :class \"general-keyword\" \":create\")\" where the \"\n\t\t\t\t\t     (:span :class \"general-keyword\" \":direction\")\" is \"\n\t\t\t\t\t     (:span :class \"general-keyword\" \":output\")\" or \"\n\t\t\t\t\t     (:span :class \"general-keyword\" \":io\")\" and \"\n\t\t\t\t\t     (:span :class \"general-keyword\" \":if-exists\")\" is neither \"\n\t\t\t\t\t     (:span :class \"general-keyword\" \":overwrite\")\" nor \"\n\t\t\t\t\t     (:span :class \"general-keyword\" \":append\")))\n\t\t\t\t   \"There are other keyword arguments and valid values, the above are just the most commonly used.\")\n\t\t\t       (str (repl-example (the repl-1)))\n\t\t\t       (:p \"Once the file is open we can then write to that stream, for example using the format function we covered in the \"\n\t\t\t\t   (if (the getting-started-url)\n\t\t\t\t       (htm ((:a :href (the getting-started-url))\"Getting Started with GendL\"))\n\t\t\t\t       (htm \"Getting Started with GendL \"))\n\t\t\t\t   \"tutorial.\")\n\t\t\t       (str (repl-example (the repl-2)))\n\t\t\t       (:p \"However, whilst the file has been created, we have to close the stream before the the output is seen in the file.\")\n\t\t\t       (str (repl-example (the repl-3)))\n\t\t\t       (str (code-example (the code-1)))\n\t\t\t       (:h3 \"Avoiding issues by using with-open-file\")\n\t\t\t       (:p \"And this leads on to one of the potential issues with \"\n\t\t\t\t   (:span :class \"function\" \"open\")\", the programmer has to remember to \"\n\t\t\t\t   (:em (:b \"always close the stream that gets opened\"))\", and ensure it gets closed even in the event of errors. When streams are left open, results may be unpredictable and performance often suffers.\")\n\t\t\t       (:p \"For this reason, the macro \"\n\t\t\t\t   (:span :class \"macro\" \"with-open-file\")\" is much preferred. It takes a symbol representing a stream and a path to the file as required arguments plus all of the keyword arguments used by \"\n\t\t\t\t   (:span :class \"function\" \"open\")\", plus a body of expressions. \"\n\t\t\t\t   (:span :class \"macro\" \"with-open-file\")\" opens the stream, evaluates the body of expressions (which will invariably refer to the stream), and then closes the stream. The macro wraps all of the code in the CL special operator \"\n\t\t\t\t   (:span :class \"special-operator\" \"unwind-protect\") \" to ensure that the stream will always be closed even in the event of errors being encountered.\")))))))\n\n\t\t\t\t  \n\t\t\t\t  \n",
    "metadata": {
      "source": "gornschool-training/t4/source/file-io-basics.lisp",
      "file_name": "file-io-basics.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_4_object_definition",
      "chunk_id": 0,
      "section": "file-io-basics"
    },
    "id": "4cac2ba9dc846f986d2b066b22d72074"
  },
  {
    "text": "(in-package :training-4)\n\n",
    "metadata": {
      "source": "gornschool-training/t4/source/reading-from-a-file.lisp",
      "file_name": "reading-from-a-file.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_4_object_definition",
      "chunk_id": 0,
      "section": "header"
    },
    "id": "dfaeb5b761884dd5db9e7565069a30ed"
  },
  {
    "text": "(define-object reading-from-a-file (base-training-sheet)\n\n  :computed-slots\n  ((index-words (list \"with-open-file\" \"read-line\" \"regular expressions\" \"split-regexp\" \"mapcan\" \"mapcar\" \"do\" \"cond\" \"read-safe-string\"))\n\n   (code-1 (list \"",
    "metadata": {
      "source": "gornschool-training/t4/source/reading-from-a-file.lisp",
      "file_name": "reading-from-a-file.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_4_object_definition",
      "chunk_id": 0,
      "section": "reading-from-a-file"
    },
    "id": "dfaeb5b761884dd5db9e7565069a30ed"
  },
  {
    "text": "(defun read-file (file))\"\n\t\t \"   (let ((result))\"\n\t\t \"      (with-open-file (str file :direction :input)\"\n\t\t \"            (do ((line (read-line str nil 'eof)\"\n\t\t \"\t\t         (read-line str nil 'eof)))\"\n\t\t \"\t          ((eql line 'eof) result)\"\n\t\t \"\t(setq result (append result (list line)))))))\"))\n\n   (code-2 (list \"",
    "metadata": {
      "source": "gornschool-training/t4/source/reading-from-a-file.lisp",
      "file_name": "reading-from-a-file.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_4_object_definition",
      "chunk_id": 1,
      "section": "read-file"
    },
    "id": "d8b1db6865ea17e7cf3bab46f4b8a045"
  },
  {
    "text": "(defun import-data (file)\"\n\t\t \"(let*\"\n\t\t \"  ((raw-data (read-file file))\"\n\t\t \"   (res (mapcar #'(lambda(a) (glisp:split-regexp \\\"\\\\\\\\s+\\\" a)) raw-data))\"\n\t\t \"   (res-1 (mapcan #'(lambda(a) (list (make-keyword (second a)) (third a))) res))\"\n\t\t \"   (keywords (remove nil res-1 :key #'(lambda(a) (keywordp a))))\"\n\t\t \"   (r nil))\"\n\t\t \" (dolist (k keywords r)\"\n\t\t \"    (cond ((or (eq k :width) (eq k :length) (eq k :height))\"\n\t\t \"           (setq r (append r (list k (read-safe-string (getf res-1 k))))))\"\n\t\t \"          ((eq k :center)\"\n\t\t \"           (let ((co-ord (glisp:split-regexp \\\",\\\" (getf res-1 k))))\"\n\t\t \"\t       (setq r (append\"\n\t\t \"                       r\"\n\t\t \"                       (list k (make-point (read-safe-string (first co-ord))\"\n\t\t \"                                           (read-safe-string (second co-ord))\"\n\t\t \"                                           (read-safe-string (third co-ord))))))))))))\"))\n   \n   (repl-1 (list (list :command \"(read-file \\\"c:/temp/report.txt\\\")\"\n\t\t       :output \"(\\\"Box Width 3\\\" \\\"Box Length 6\\\" \\\"Box Height 4\\\" \\\"Box Center 0.0,0.0,0.0\\\" \\\"Box Volume 72\\\")\")))\n   (repl-2 (list (list :command \"(import-data \\\"c:/temp/report.txt\\\")\"\n\t\t       :output \"(:WIDTH 3 :LENGTH 6 :HEIGHT 4 :CENTER #(0.0 0.0 0.0))\")))\n\n   (body-content (with-cl-who-string()\n\t\t   (:div :class \"main-page-container\" :style \"grid-template-columns: 700px auto;\"\n\t\t\t (:div :class \"main-page-item\"\n\t\t\t       (:p \"Compared with writing to a file, reading from a file is a much more involved process. As with writing a file, a stream is opened and connected to the file. But then the file contents need to be read, line by line, until the end of the file. In general we will not know how many lines are to be read. Once the data has been read, it needs to be converted or conditioned into a format that the application can use. This implies \"\n\t\t\t\t   (:ul (:li \"We know something about the format of the data being supplied\")\n\t\t\t\t        (:li \"The data is supplied in that known format\"))\n\t\t\t\t   \"It is often the achilles heel of many applications which take data from the outside world and effort in making this interface as robust as possible is always time well spent\")\n\t\t\t       (:p \"A general purpose function to read data from a text file may look something like this\")\n\t\t\t       (str (code-example (the code-1)))\n\t\t\t       (:p \"We have introduced the use of the CL macro \"\n\t\t\t\t   (:span :class \"macro\" \"do\")\" as part of the body of expressions wrapped in \"\n\t\t\t\t   (:span :class \"macro\" \"with-open-file\"))\n\t\t\t       (:p (:span :class \"macro\" \"do\")\" accepts a list of variable expressions in the form \"\n\t\t\t\t   (:em \"(variable initial-iteration subsequent-iterations\")\"). The \"\n\t\t\t\t   (:em \"initial-iteration\")\" is an expression which is evaluated on the first iteration and \"\n\t\t\t\t   (:em \"subsequent-iterations\")\" is an expression evaluated on all subsequent iterations. In our case we are using the CL function \"\n\t\t\t\t   (:span :class \"function\" \"read-line\")\" The first argument is the stream which comes from \"\n\t\t\t\t   (:span :class \"macro\" \"with-open-file\")\", the second argument determines if an end of file error should be signalled, in this case nil, and the third argument is the value returned when end of file is encountered. The output of read-line is set to the variable line which is appended into the result variable. The second list in \"\n\t\t\t\t   (:span :class \"macro\" \"do\")\" defines the condition to be met to end iteration (in this case, the value of line is the end of file value) and the value to be returned when this condition is T, in this case \"\n\t\t\t\t   (:span :class \"slot\" \"result\"))\n\t\t\t       (:p \"Evaluating this function against the file created in the previous topic gives the following\")\n\t\t\t       (str (repl-example (the repl-1)))\n\t\t\t       (:p \"The next task when reading a data file is generally parsing it to convert it into a format that our application can use. The following function, making use of our read-file function will do that and return an appropriate plist\")\n\t\t\t       (str (code-example (the code-2)))\n\t\t\t       (:p \"Working through the function\"\n\t\t\t\t   (:ul (:li \"We first read the data into a variable \"(:em (:b \"raw-data\"))\". This is a list of strings, where each string is a separate line from the file\")\n\t\t\t\t        (:li \"The we use the function \"\n\t\t\t\t\t     (:span :class \"function\" \"glisp:split-regexp\")\" to split each string into separate words, breaking where there is one or more whitespaces (the regular-expression \\\"\\\\\\\\s+\\\")\")\n\t\t\t\t        (:li \"Because we know the structure of the data, we can comfortably discarded the first word from each line and convert the second word into a keyword. By using \"(:span :class \"function\" \"mapcan\")\" the local variable \"(:em (:b \"res-1\")\" becomes a plist of keyword and value, although each value is still a string\")\n\t\t\t\t\t     (:li \"We need to convert the values into the correct data types, but it's different depending on what value we are considering. \"\n\t\t\t\t\t          (:span :class \"general-keyword\" \"length\")\", \"\n\t\t\t\t\t          (:span :class \"general-keyword\" \"width\")\" and \"\n\t\t\t\t\t          (:span :class \"general-keyword\" \"height\")\" will all be numbers, whilst \"\n\t\t\t\t\t          (:span :class \"general-keyword\" \"center\")\" will be a point (vector).\")\n\t\t\t\t             (:li \"Finally, we use the keywords to determine how to process the data and return a plist. A key point to note here is that we are not using the CL function \"(:span :class \"function\" \"read-string\")\" as it does have some security vulnerabilities; to prevent this we use the GendL function \"(:span :class \"function\" \"read-safe-string\")\" to convert the numbers as strings into real numbers\"))\n\t\t\t\t        \"Evaluating the function in the REPL we get\")\n\t\t\t\t   (str (repl-example (the repl-2)))\n\t\t\t\t   (:p \"One final point to note in the example code; there is virtually no error handling. Given the data file is one we generated automatically and are therefore in full control of, this is probably acceptable, but in general the interface functions like shown above need to be extreemly robust\")))\n\t\t\t (:div :class \"main-page-item\"\n\t\t\t       (:h2 \"Resources\")\n\t\t\t       (str (the resource-links))))))))\n\n",
    "metadata": {
      "source": "gornschool-training/t4/source/reading-from-a-file.lisp",
      "file_name": "reading-from-a-file.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_4_object_definition",
      "chunk_id": 2,
      "section": "import-data"
    },
    "id": "eb0f90472dcb78589f44d1ae111ba0b1"
  },
  {
    "text": "(in-package :gdl-user)\n\n",
    "metadata": {
      "source": "gornschool-training/t4/resources/source/building-bom-input-output.lisp",
      "file_name": "building-bom-input-output.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_4_object_definition",
      "chunk_id": 0,
      "section": "header"
    },
    "id": "26bb8e32428adfa1e773278313cb129a"
  },
  {
    "text": "(defun read-file (file )\n  (let ((result))\n    (with-open-file (str file :direction :input)\n      (do ((line (read-line str nil 'eof)\n\t\t (read-line str nil 'eof)))\n\t  ((eql line 'eof) result)\n\t(setq result (append result (list line)))))))\n\n",
    "metadata": {
      "source": "gornschool-training/t4/resources/source/building-bom-input-output.lisp",
      "file_name": "building-bom-input-output.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_4_object_definition",
      "chunk_id": 0,
      "section": "read-file"
    },
    "id": "26bb8e32428adfa1e773278313cb129a"
  },
  {
    "text": "(defun import-building-data (file)\n  (let* ((raw-data (read-file file))\n\t (res (mapcar #'(lambda(a) (glisp:split-regexp \"\\\\s+\" a)) raw-data)))\n    (mapcan #'(lambda(a) (list\n\t\t\t  (make-keyword (first a))\n\t\t\t  (read-safe-string (second a)))) res)))\n       \n\n",
    "metadata": {
      "source": "gornschool-training/t4/resources/source/building-bom-input-output.lisp",
      "file_name": "building-bom-input-output.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_4_object_definition",
      "chunk_id": 1,
      "section": "import-building-data"
    },
    "id": "5dcbaa81befeb7eb04785ad8474b4f3f"
  },
  {
    "text": "(defun building-bom (&key (nominal-height nil) \n\t\t       (nominal-width nil)\n\t\t       (nominal-length nil)\n\t\t       (roof-angle nil)\n\t\t       (input-filename nil)\n\t\t       (output-filename nil))\n  (let ((obj (make-object 'building\n\t\t\t  :function-nominal-height nominal-height\n\t\t\t  :function-nominal-width nominal-width\n\t\t\t  :function-nominal-length nominal-length\n\t\t\t  :function-truss-angle roof-angle\n\t\t\t  :output-filename output-filename\n\t\t\t  :input-filename input-filename)))\n    (if output-filename (theo obj write-bom-file!)\n\t(theo obj bom-formatted))))\n\n",
    "metadata": {
      "source": "gornschool-training/t4/resources/source/building-bom-input-output.lisp",
      "file_name": "building-bom-input-output.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_4_object_definition",
      "chunk_id": 2,
      "section": "building-bom"
    },
    "id": "8d9b53fcbf3db2ef8b5aa79d0d0e6374"
  },
  {
    "text": "(define-object building (box)\n  :input-slots\n  ((function-nominal-height nil)\n   (function-nominal-width nil)\n   (function-nominal-length nil)\n   (function-truss-angle  nil)\n   (input-filename nil)\n   (output-filename nil)\n   \n   (brick-height (or (getf (the file-inputs) :brick-height) 45))\n   (brick-length (or (getf (the file-inputs) :brick-length) 180))\n   (brick-width (or (getf (the file-inputs) :brick-width) 90))\n   (mortar-joint-width (or (getf (the file-inputs) :mortar-joint-width) 10))\n   (beam-width (or (getf (the file-inputs) :beam-width) 40))\n   (beam-height (or (getf (the file-inputs) :beam-height) 50))\n   (wall-thickness (or (getf (the file-inputs) :wall-thickness) 3))\n   (material-density (or (getf (the file-inputs) :material-density) 7800))\n   (roof-overhang (or (getf (the file-inputs) :roof-overhang) 50))\n   (cladding-thickness (or (getf (the file-inputs) :cladding-thickness) 10))\n   (max-beam-spacing (or (getf (the file-inputs) :max-beam-spacing) 1500))\n   )\n\n  :computed-slots\n  ((file-inputs (when (the input-filename) (import-building-data (the input-filename))))\n   (nominal-height (or (the function-nominal-height)\n\t\t       (getf (the file-inputs) :nominal-height)\n\t\t       3000))\n   (nominal-width (or (the function-nominal-width)\n\t\t      (getf (the file-inputs) :nominal-width)\n\t\t      3000))\n   (nominal-length (or (the function-nominal-length)\n\t\t       (getf (the file-inputs) :nominal-length)\n\t\t       4000))\n   (truss-angle (or (the function-truss-angle)\n\t\t    (getf (the file-inputs) :truss-angle)\n\t\t    30))\n\n   \n   \n   (length (the left-wall length))\n   (width (the rear-wall length))\n   (height (+ (the left-wall height) (the (roof-truss 0) height)))\n\n   (number-of-roof-trusses (let ((trusses (ceiling (the left-wall length) 1500)))\n\t\t\t     (max trusses 2)))\n\n   (truss-spacing (div (- (the left-wall length) (the beam-width))\n\t\t       (- (the number-of-roof-trusses) 1)))\n   (truss-offsets (let ((res nil))\n\t\t    (dotimes (n (the number-of-roof-trusses) (nreverse res))\n\t\t      (push (+ (half (the beam-width))\n\t\t\t       (* n (the truss-spacing))) res))))\n\n   (roof-length (+ (the left-wall length) (twice (the roof-overhang))))\n   (roof-width (the cladding-thickness))\n   (roof-height (let ((apex (the (roof-truss 0) apex-point))\n\t\t      (gutter (the (roof-truss 0) front-gutter-point)))\n\t\t  (+ (3d-distance apex gutter) (the roof-overhang))))\n\n   ;; building properties\n   (walls (remove nil (mapcar #'(lambda(a) (when (typep a 'wall) a)) (the children))))\n   (full-bricks (apply '+ (mapsend (the walls) :full-bricks)))\n   (half-bricks (apply '+ (mapsend (the walls) :half-bricks)))\n   (mortar-volume (apply '+ (mapsend (the walls) :mortar-volume)))\n   (cladding-dimensions (list :length (the roof-length)\n\t\t\t      :width (the roof-height)))\n   (beam-properties (the (roof-truss 0) beam-properties))\n   (beam-qty-by-size (let ((res nil))\n\t\t       (dolist (plis (the beam-properties) )\n\t\t\t (let* ((trusses (the number-of-roof-trusses))\n\t\t\t\t(l (getf plis :length-mm))\n\t\t\t\t(p (position l res :key #'(lambda(a) (getf a :length-mm))))\n\t\t\t\t(qty (when p (getf (nth p res) :qty))))\n\t\t\t   (if p (setf (getf (nth p res) :qty) (+ qty trusses))\n\t\t\t       (setq res (append (list (list :length-mm l :qty trusses)) res)))))\n\t\t       (safe-sort res '< :key #'(lambda(a) (getf a :length-mm)))))\n\t\t       \n\n   (roof-truss-mass (* (apply '+ (mapcar #'(lambda(a) (getf a :mass-kg))\n\t\t\t\t\t (the beam-properties)))\n\t\t       (the number-of-roof-trusses)))\n\n   (building-materials (list :full-bricks (the full-bricks)\n\t\t\t     :half-bricks (the half-bricks)\n\t\t\t     :mortar-volume-m3 (div (the mortar-volume) 1000000000)\n\t\t\t     :beams (the beam-qty-by-size)\n\t\t\t     :roof-cladding (append (the cladding-dimensions) (list :qty 2))))\n\n  (bom-formatted (let* ((bom (the building-materials))\n\t\t\t(cladding (getf bom :roof-cladding))\n\t\t\t(bricks (format nil \"Bricks~%======~%  Full Bricks ~a~%  Half Bricks ~a~%\" \n\t\t\t\t\t(getf bom :full-bricks) \n\t\t\t\t\t(getf bom :half-bricks)))\n\t\t\t(mortar (format nil \"Mortar~%======~%  Volume ~,3f m^3~%\" \n\t\t\t\t\t(getf bom :mortar-volume-m3)))\n\t\t\t(l (round-to-nearest (getf cladding :length) 1))\n\t\t\t(w (round-to-nearest (getf cladding :width) 1))\n\t\t\t(roof (format nil \"Roof Cladding~%======~%  Qty ~a~%  Dimensions (L x W x T) ~d x ~d x ~d~%\" \n\t\t\t\t      (getf cladding :qty)\n\t\t\t\t      l w (the cladding-thickness)))\n\t\t\t(beams (getf (the building-materials) :beams))\n\t\t\t(beams-list (flatten\n\t\t\t\t     (mapcar #'(lambda(a)\n\t\t\t\t\t\t (list (getf a :qty) (round-to-nearest (getf a :length-mm) 1)))\n\t\t\t\t\t     beams)))\n\t\t\t\n\t\t\t(beams-header (format nil \"Beams~%=====~%  Section (H x W x T) ~a x ~a x ~a~%\"\n\t\t\t\t\t\t (the beam-height) (the beam-width) (the wall-thickness)))\n\t\t\t(beam-lengths (format nil \"~{  Qty ~a Length ~a~%~}\" beams-list)))\n\t\t   (format nil \"~@{~a~}\" bricks mortar roof beams-header beam-lengths))) \n   \n\t\t\n   )\n\n  :functions\n  ((write-bom-file! ()\n\t\t    (with-open-file (s (the output-filename) :direction :output\n\t\t\t\t\t\t:if-exists :supersede\n\t\t\t\t\t\t:if-does-not-exist :create)\n\t\t      (format t \"Exporting the BOM to ~a~%\" (the output-filename))\n\t\t      (format s \"~a\" (the bom-formatted))\n\t\t      (format t \"Exporting complete~%\")))\n\n\n\n   (get-roof-mid-point! (first-gutter last-gutter last-index)\n\t\t       (let*((mid-gutter (midpoint first-gutter last-gutter))\n\t\t\t     (first-apex (the (roof-truss 0) apex-point))\n\t\t\t     (last-apex (the (roof-truss last-index) apex-point))\n\t\t\t     (mid-apex (midpoint first-apex last-apex))\n\t\t\t     (vec (subtract-vectors mid-gutter mid-apex))\n\t\t\t     (mid-edge (translate-along-vector mid-gutter vec (the roof-overhang))))\n\t\t\t (midpoint mid-apex mid-edge))) )\n  \n  :objects\n  ((left-wall :type 'wall\n\t      :pass-down (brick-height\n\t\t\t  brick-length\n\t\t\t  brick-width\n\t\t\t  mortar-joint-width)\n\t      :center (translate-along-vector\n\t\t       (translate-along-vector (the (edge-center :bottom :left))\n\t\t\t\t\t       (the (face-normal-vector :right))\n\t\t\t\t\t       (half (the-child width)))\n\t\t       (the (face-normal-vector :top))\n\t\t       (half (the-child height)))\n\t      :wall-length (the nominal-length)\n\t      :wall-height (the nominal-height))\n\n   (right-wall :type 'wall\n\t       :pass-down (brick-height\n\t\t\t   brick-length\n\t\t\t   brick-width\n\t\t\t   mortar-joint-width)\n\t       :center (translate-along-vector\n\t\t\t(translate-along-vector (the (edge-center :bottom :right))\n\t\t\t\t\t\t(the (face-normal-vector :left))\n\t\t\t\t\t\t(half (the-child width)))\n\t\t\t(the (face-normal-vector :top))\n\t\t\t(half (the-child height)))\n\t       :wall-length (the nominal-length)\n\t       :wall-height (the nominal-height))\n\n   (rear-wall :type 'wall\n\t      :pass-down (brick-height\n\t\t\t  brick-length\n\t\t\t  brick-width\n\t\t\t  mortar-joint-width)\n\t      :center (translate-along-vector\n\t\t\t(translate-along-vector (the (edge-center :bottom :rear))\n\t\t\t\t\t\t(the (face-normal-vector :front))\n\t\t\t\t\t\t(half (the-child width)))\n\t\t\t(the (face-normal-vector :top))\n\t\t\t(half (the-child height)))\n\t      :orientation (alignment :rear (the (face-normal-vector :right)))\n\t      :wall-length (the nominal-width)\n\t      :wall-height (the nominal-height))\n\n   (roof-truss :type 'truss\n\t       :sequence (:size (the number-of-roof-trusses))\n\t       :truss-length (the rear-wall length)\n\t       :center (translate-along-vector\n\t\t\t(translate-along-vector (the (edge-center :front :top))\n\t\t\t\t\t\t(the (face-normal-vector :bottom))\n\t\t\t\t\t\t(half (the-child height)))\n\t\t\t(the (face-normal-vector :rear))\n\t\t\t(nth (the-child index) (the truss-offsets)))\n\t       :orientation (alignment :rear (the (face-normal-vector :right))\n\t\t\t\t       )\t\t\n\t       :pass-down (truss-angle\n\t\t\t   beam-width\n\t\t\t   beam-height\n\t\t\t   wall-thickness\n\t\t\t   material-density))\n   \n   (roof-cladding-left\n    :type 'box\n    :length (the roof-length)\n    :height (the roof-height)\n    :width (the cladding-thickness)\n    :orientation (alignment :left (the (roof-truss 0) front-slope-normal))\n    :center (let* ((last-index (- (the number-of-roof-trusses) 1))\n\t\t   (first-gutter (the (roof-truss 0) front-gutter-point))\n\t\t   (last-gutter (the (roof-truss last-index) front-gutter-point))\n\t\t   (mid-ctr (the (get-roof-mid-point! first-gutter last-gutter last-index))))\n\t      (translate-along-vector mid-ctr\n\t\t\t\t      (the (roof-truss 0) front-slope-normal)\n\t\t\t\t      (half (the cladding-thickness)))))\n   \n   (roof-cladding-right :type 'box\n\t\t\t:length (the roof-length)\n\t\t\t:height (the roof-height)\n\t\t\t:width (the cladding-thickness)\n\t\t\t:orientation (alignment :left (the (roof-truss 0) rear-slope-normal))\n\t\t\t :center (let* ((last-index (- (the number-of-roof-trusses) 1))\n\t\t\t\t\t(first-gutter (the (roof-truss 0) rear-gutter-point))\n\t\t\t\t\t(last-gutter (the (roof-truss last-index) rear-gutter-point))\n\t\t\t\t\t(mid-ctr (the (get-roof-mid-point! first-gutter last-gutter last-index))))\n\t\t\t\t (translate-along-vector mid-ctr\n\t\t\t\t\t\t\t (the (roof-truss 0) rear-slope-normal)\n\t\t\t\t\t\t\t (half (the cladding-thickness)))))\n   )\n\n  \n\t\t       \n  )\n\n\n",
    "metadata": {
      "source": "gornschool-training/t4/resources/source/building-bom-input-output.lisp",
      "file_name": "building-bom-input-output.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_4_object_definition",
      "chunk_id": 3,
      "section": "building"
    },
    "id": "faf2fa160d3f1d5b08a55e10fae118a9"
  },
  {
    "text": "(define-object wall(box)\n  :input-slots\n  ((brick-height 45)\n   (brick-length 180)\n   (brick-width 90)\n   (mortar-joint-width 10)\n   (wall-length 3700)\n   (wall-height 900)\n   (first-row :start-full)\n   (front-edge :full)\n   (rear-edge :full))\n\n  :computed-slots\n  ((row-height (+ (the brick-height) (the mortar-joint-width)))\n   (number-of-rows (round-to-nearest (div (the wall-height) (the row-height)) 1))\n   (actual-wall-height (* (the row-height) (the number-of-rows)))\n   \n   ;; for the wall-length we need the number of full bricks\n   ;; if there are n full bricks then there will be (n-1) mortar joints\n   ;; so n*brick-length + n-1*mortar-joint-width = overall-length\n   ;; or n(brick-length + mortar-join-width) - mortar-joint-width = overall-length\n   ;; or n = (overall-length - mortar-joint-width)/(brick-length + mortar-joint-width)\n   (number-of-bricks (round-to-nearest (div (- (the wall-length) (the mortar-joint-width))\n\t\t\t\t\t    (+ (the brick-length) (the mortar-joint-width)))\n\t\t\t\t       1))\n   (actual-wall-length (+ (* (the number-of-bricks) (the brick-length))\n\t\t\t  (* (- (the number-of-bricks) 1) (the mortar-joint-width))))\n\n   ;; box inputs - gives the wall bounding box\n   (height (the actual-wall-height))\n   (width (the brick-width))\n   (length (the actual-wall-length))\n\n   (full-bricks (apply '+ (list-elements (the row) (the-element full-bricks))))\n   (half-bricks (apply '+ (list-elements (the row) (the-element half-bricks))))\n   (mortar-volume (apply '+ (list-elements (the row) (the-element mortar-volume))))\n   (mortar-density 2162)\n   (mortar-mass (* (the mortar-density) (div (the mortar-volume) 1000000000)))\n   )\n   \n     \n  :objects\n  ((row :type 'row\n     :sequence (:size (the number-of-rows))\n     :center (translate-along-vector (the (face-center :bottom))\n\t\t\t\t     (the (face-normal-vector :top))\n\t\t\t\t     (+ (half (the-child height))\n\t\t\t\t\t(* (the-child index) (the-child height))))\n     :height (+ (the brick-height) (the mortar-joint-width))\n     :full-bricks-per-row (the number-of-bricks)\n     :pass-down (brick-height\n\t\t brick-length\n\t\t brick-width\n\t\t mortar-joint-width\n\t\t length\n\t\t width\n\t\t first-row\n\t\t front-edge\n\t\t rear-edge))))\n\n",
    "metadata": {
      "source": "gornschool-training/t4/resources/source/building-bom-input-output.lisp",
      "file_name": "building-bom-input-output.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_4_object_definition",
      "chunk_id": 4,
      "section": "wall"
    },
    "id": "534a8cf39f8d1cd06a0c205871ec19fe"
  },
  {
    "text": "(define-object row (box)\n  :input-slots\n  (full-bricks-per-row\n   brick-height\n   brick-length\n   brick-width\n   mortar-joint-width\n   first-row\n   front-edge\n   rear-edge )\n\n  :computed-slots\n  ((full-brick-row? (cond ((eq (the first-row) :start-full)\n\t\t\t   (or (zerop (the index)) (evenp (the index))))\n\t\t\t  ((eq (the first-row) :start-half)\n\t\t\t   (not (or (zerop (the index)) (evenp (the index)))))))\n\t\t    \n   (full-bricks (the bricks-and-mortar full-bricks))\n   (half-bricks (the bricks-and-mortar half-bricks))\n   (mortar-volume (+ (the bricks-and-mortar mortar-joint-volume)\n\t\t     (the mortar-bed volume))))\n\n  :objects\n  ((bricks-and-mortar :type 'bricks-and-mortar\n\t\t      :height (the brick-height)\n\t\t      :center (translate-along-vector (the mortar-bed (face-center :top))\n\t\t\t\t\t\t      (the mortar-bed (face-normal-vector :top))\n\t\t\t\t\t\t      (half (the-child height)))\n\t\t      :pass-down (width\n\t\t\t\t  length\n\t\t\t\t  full-brick-row?\n\t\t\t\t  brick-height\n\t\t\t\t  brick-length\n\t\t\t\t  brick-width\n\t\t\t\t  mortar-joint-width\n\t\t\t\t  full-bricks-per-row\n\t\t\t\t  front-edge\n\t\t\t\t  rear-edge))\n   (mortar-bed :type 'box\n\t       :height (the mortar-joint-width)\n\t       :center (translate-along-vector (the (face-center :bottom))\n\t\t\t\t\t       (the (face-normal-vector :top))\n\t\t\t\t\t       (half (the-child height)))\n\t       :pass-down (width\n\t\t\t   length))))\n\n",
    "metadata": {
      "source": "gornschool-training/t4/resources/source/building-bom-input-output.lisp",
      "file_name": "building-bom-input-output.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_4_object_definition",
      "chunk_id": 5,
      "section": "row"
    },
    "id": "776499583799cc104383da1e76a72077"
  },
  {
    "text": "(define-object bricks-and-mortar (box)\n  :input-slots\n  (full-brick-row?\n   full-bricks-per-row\n   brick-height\n   brick-length\n   brick-width\n   mortar-joint-width\n   front-edge\n   rear-edge)\n\n  :computed-slots\n  ((first-full-brick-start-point (if (the full-brick-row?)\n\t\t\t\t     (the (face-center :front))\n\t\t\t\t     (the (mortar-joint 0) (face-center :rear))))\n   \n   (first-mortar-joint-start-point (cond ((the full-brick-row?) (the (full-brick 0) (face-center :rear)))\n\t\t\t\t\t ((eq (the front-edge) :full) (the (half-brick 0) (face-center :rear)))\n\t\t\t\t\t ((eq (the front-edge) :keyed) (translate-along-vector (the (face-center :front))\n\t\t\t\t\t\t\t\t\t\t\t       (the (face-normal-vector :rear))\n\t\t\t\t\t\t\t\t\t\t\t       (half (the brick-length))))))\n\n   (number-of-full-bricks (if (the full-brick-row?)\n\t\t\t      (the full-bricks-per-row)\n\t\t\t      (- (the full-bricks-per-row) 1)))\n\n   (number-of-half-bricks (cond ((the full-brick-row?) 0)\n\t\t\t\t((and (eq (the front-edge) :full)(eq (the rear-edge) :full)) 2)\n\t\t\t\t((and (eq (the front-edge) :keyed) (eq (the rear-edge) :full)) 1)\n\t\t\t\t((and (eq (the front-edge) :full) (eq (the rear-edge) :keyed)) 1)\n\t\t\t\t((and (eq (the front-edge) :keyed) (eq (the rear-edge) :keyed)) 0)))\n\n   ;; whether or not the ends are :full or :keyed, the number of mortar joints remains the same since the mortar joint\n   ;; when it is :keyed is used to connect to the full brick of the other wall\n   (number-of-mortar-joints (if (the full-brick-row?)\n\t\t\t\t(- (the number-of-full-bricks) 1)\n\t\t\t\t(+ (the number-of-full-bricks) 1)))\n\n   ;; if it isn't a full brick row then there will be an extra joint because one\n   ;; full brick is replaced with 2 half bricks so without correcting the\n   ;; mortar-joint-width the ends of a full brick row and one starting and\n   ;; finishing with half bricks won't align. So we need to correct\n   ;; the mortar-joint-width\n   (corrected-joint-width (if (the full-brick-row?)\n\t\t\t\t     (the mortar-joint-width)\n\t\t\t\t     (let ((total-gap (* (- (the number-of-mortar-joints) 1)\n\t\t\t\t\t\t\t\t\t(the mortar-joint-width))))\n\t\t\t\t       (div total-gap (the number-of-mortar-joints)))))\n   ;; collating the output. We could do this analytically, but for this example we'll use the geometry\n   (full-bricks (length (list-elements (the full-brick))))\n   (half-bricks (length (list-elements (the half-brick))))\n   (mortar-joint-volume (apply '+ (list-elements (the mortar-joint)\n\t\t\t\t\t\t (the-element volume))))\n   )\n  \n  :functions\n  ((first-full-brick-center!\n    ()\n    (translate-along-vector (the first-full-brick-start-point)\n\t\t\t    (the (face-normal-vector :rear))\n\t\t\t    (half (the brick-length))))\n   \n   (other-full-brick-center!\n    (index)\n    ;; if its a full brick row, (full-brick 1) is positioned relative to (joint 0)\n    ;; if its a half brick row, (full-brick 1) is positioned relative to (joint 1)\n    (let ((ind (if (the full-brick-row?) (- index 1) index)))\n\t  (translate-along-vector (the (mortar-joint ind) (face-center :rear))\n\t\t\t\t  (the (face-normal-vector :rear))\n\t\t\t\t  (half (the brick-length)))))\n   \n    (first-joint-center!\n     ()\n     (translate-along-vector (the first-mortar-joint-start-point)\n\t\t\t     (the (face-normal-vector :rear))\n\t\t\t     (half (the corrected-joint-width))))\n   (other-joint-center!\n    (index)\n    ;; if its a full brick row, (joint 1) is positioned relative to (full-brick 1)\n    ;; if its a half brick row, (joint 1) is positioned relative to (full-brick 0)\n    (let ((ind (if (the full-brick-row?) index (- index 1))))\n      (translate-along-vector (the (full-brick ind) (face-center :rear))\n\t\t\t      (the (face-normal-vector :rear))\n\t\t\t      (half (the corrected-joint-width)))))\n\n    (first-half-brick-center!\n     ()\n     (translate-along-vector (the (face-center :front))\n\t\t\t     (the (face-normal-vector :rear))\n\t\t\t     (half (half (the brick-length)))))\n   \n   (last-half-brick-center!\n     ()\n     (translate-along-vector (theo (the mortar-joint last) (face-center :rear))\n\t\t\t     (the (face-normal-vector :rear))\n\t\t\t     (half (half (the brick-length))))))\n \t\t\t     \n  \n  :objects\n  ((full-brick :type 'box\n\t       :sequence (:size (the number-of-full-bricks))\n\t       :center (if (= (the-child index) 0)\n\t\t\t   (the first-full-brick-center!)\n\t\t\t   (the (other-full-brick-center! (the-child index))))\n\t       :length (the brick-length)\n\t       :height (the brick-height)\n\t       :width (the brick-width))\n\n   (half-brick :type 'box\n\t       :sequence (:size (the number-of-half-bricks))\n\t       :center (cond ((and (= (the-child index) 0)\n\t\t\t\t   (eq (the front-edge) :full)) (the first-half-brick-center!))\n\t\t\t     ((and (= (the-child index) 0)\n\t\t\t\t   (eq (the front-edge) :keyed)\n\t\t\t\t   (eq (the rear-edge) :full)) (the last-half-brick-center!))\n\t\t\t     ((eq (the rear-edge) :full) (the last-half-brick-center!)))\n\t       :length (half (the brick-length))\n\t       :height (the brick-height)\n\t       :width (the brick-width))\n\n   (mortar-joint :type 'box\n\t\t :sequence (:size (the number-of-mortar-joints))\n\t\t :center (if (= (the-child index) 0)\n\t\t\t     (the first-joint-center!)\n\t\t\t  (the (other-joint-center! (the-child index))))   \n\t\t :height (the brick-height)\n\t\t :width (the brick-width)\n\t\t :length (the corrected-joint-width))))\n\n\n",
    "metadata": {
      "source": "gornschool-training/t4/resources/source/building-bom-input-output.lisp",
      "file_name": "building-bom-input-output.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_4_object_definition",
      "chunk_id": 6,
      "section": "bricks-and-mortar"
    },
    "id": "0fbf70471922ef2b8c20dd7d25822520"
  },
  {
    "text": "(defun degrees-to-radians (degrees)\n  (div (* degrees pi) 180))\n\n\n",
    "metadata": {
      "source": "gornschool-training/t4/resources/source/building-bom-input-output.lisp",
      "file_name": "building-bom-input-output.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_4_object_definition",
      "chunk_id": 7,
      "section": "degrees-to-radians"
    },
    "id": "769db3c854b65aa3fe558745cba2ebfd"
  },
  {
    "text": "(define-object truss (box)\n  :input-slots\n  ((truss-length 2000)\n   (truss-height nil)\n   (truss-angle 30)\n\n   (beam-width 30)\n   (beam-height 50)\n   (wall-thickness 3)\n\n   (material-density 7800)\n   (tonne-rate 450))\n\n  :computed-slots\n  ((length (the truss-length))\n   (height (cond ((the truss-height)(the truss-height))\n\t\t ((the truss-angle) (+ (* (half (the truss-length))\n\t\t\t\t\t  (tan (degrees-to-radians (the truss-angle))))\n\t\t\t\t       (the beam-height)))))\n   (width (the beam-width))\n  \n   (truss-front-slope-vector (the (get-slope-vector! :front)))\n   (truss-rear-slope-vector (the (get-slope-vector! :rear)))\n\n   (front-slope-length (the (get-slope-length! :front)))\n   (rear-slope-length (the (get-slope-length! :rear)))\n   \n   (front-slope-center (the (get-slope-center! :front)))\n   (rear-slope-center (the (get-slope-center! :rear)))\n   \n\n   (beam-properties (mapsend (the children) :beam-properties))\n   (total-mass (round-to-nearest\n\t\t(apply '+\n\t\t       (mapcar #'(lambda(a) (getf a :mass-kg))\n\t\t\t       (the beam-properties)))\n\t\t0.001))\n   (total-cost (round-to-nearest\n\t\t(apply '+\n\t\t       (mapcar #'(lambda(a) (getf a :cost-gbp))\n\t\t\t       (the beam-properties)))\n\t\t0.01))\n\n   ;; messages to support roof cladding sizing and positioning\n   (apex-point (inter-line-plane (the rear-slope-construction-line end)\n\t\t\t   (the truss-rear-slope-vector)\n\t\t\t   (the lower-beam center)\n\t\t\t\t (the (face-normal-vector :rear))))\n   (front-gutter-point (the front-slope-construction-line start))\n   (rear-gutter-point (the rear-slope-construction-line start))\n   (front-slope-normal (the front-slope-beam (face-normal-vector :top)))\n   (rear-slope-normal (the rear-slope-beam (face-normal-vector :top)))\n   )\n\n  :functions\n  ((get-slope-vector! (beam-side)\n\t\t      (let ((v-key (the (get-v-key! beam-side)))\n\t\t\t    (l-key (the (get-l-key! beam-side))))\n\t\t      (subtract-vectors (the vertical-beam (edge-center :rear v-key))\n\t\t\t\t\t(the lower-beam (edge-center l-key :top)))))\n   (get-slope-length! (beam-side)\n\t\t      (let ((v-key (the (get-v-key! beam-side)))\n\t\t\t    (l-key (the (get-l-key! beam-side))))\n\t\t\t(3d-distance (the vertical-beam (edge-center :rear v-key))\n\t\t\t\t     (the lower-beam (edge-center l-key :top)))))\n   (get-slope-center!\n    (beam-side)\n    (let ((pt (case beam-side\n\t\t(:front (the front-slope-construction-line center))\n\t\t(:rear  (the rear-slope-construction-line center))))\n\t  (norm-vector (case beam-side\n\t\t\t (:front (the front-slope-beam (face-normal-vector :bottom)))\n\t\t\t (:rear (the rear-slope-beam (face-normal-vector :bottom))))))\n      (translate-along-vector pt\n\t\t\t      norm-vector\n\t\t\t      (half (the beam-height)))))\n   (get-v-key! (beam-side)\n\t       (case beam-side\n\t\t (:front :top)\n\t\t (:rear :bottom)))\n   (get-l-key! (beam-side)\n\t       (case beam-side\n\t\t (:front :front)\n\t\t (:rear :rear)))\n\n   \n   )\n   \n  \n  \n  :objects\n  ((lower-beam :type 'beam\n\t       :pass-down (:beam-height :beam-width :wall-thickness :material-density :tonne-rate)\n\t       :beam-length (the truss-length)\n\t       :center (translate-along-vector (the (face-center :bottom))\n\t\t\t\t\t       (the (face-normal-vector :top))\n\t\t\t\t\t       (half (the beam-height))))\n   (vertical-beam :type 'beam\n\t\t  :pass-down (:beam-height :beam-width :wall-thickness :material-density :tonne-rate)\n\t\t  \n\t\t  :beam-length (- (the height) (the beam-height))\n\t\t  :orientation (alignment :rear (the (face-normal-vector :top))\n\t\t\t\t\t  :right (the (face-normal-vector :right)))  \n\t\t  :center (translate-along-vector (the lower-beam (face-center :top))\n\t\t\t\t\t\t  (the lower-beam (face-normal-vector :top))\n\t\t\t\t\t\t  (half (the-child beam-length))))\n   (front-slope-beam :type 'beam\n\t\t     :pass-down (:beam-height :beam-width :wall-thickness :material-density :tonne-rate)\n\t\t     :beam-length (the front-slope-length)\n\t\t     :center (the front-slope-center)\n\t\t     :orientation (alignment :rear (the truss-front-slope-vector)\n\t\t\t\t\t     :right (the (face-normal-vector :right))))\n\n   (rear-slope-beam :type 'beam\n\t\t    :pass-down (:beam-height :beam-width :wall-thickness :material-density :tonne-rate)\n\t\t    :beam-length (the rear-slope-length)\n\t\t    :center (the rear-slope-center)\n\t\t    :orientation (alignment :rear (the truss-rear-slope-vector)\n\t\t\t\t\t    :left (the (face-normal-vector :right))))\n   \n   )\n\n  :hidden-objects\n  ((apex-pt :type 'sphere\n\t    :radius 5\n\t    :display-controls (list :color :green)\n\t    :center (the apex-point))\n   (front-slope-construction-line :type 'line\n\t\t\t\t  :start (the lower-beam (edge-center :front :top))\n\t\t\t\t  :end (the vertical-beam (edge-center :rear :top)))\n   (rear-slope-construction-line :type 'line\n\t\t\t\t :start (the lower-beam (edge-center :rear :top))\n\t\t\t\t :end (the vertical-beam (edge-center :rear :bottom)))\n   \n   (front-mid-pt :type 'sphere\n\t\t :display-controls (list :color :blue)\n\t\t :radius 5\n\t\t :center (the front-slope-construction-line center))\n   (rear-mid-pt :type 'sphere\n\t\t:display-controls (list :color :blue)\n\t\t:center (the rear-slope-construction-line center)\n\t\t:radius 5)\n   (pt-1 :type 'sphere\n\t :radius 5\n\t :display-controls (list :color :green)\n\t :center (the lower-beam (edge-center :rear :top)))\n   (pt-2 :type 'sphere\n\t :radius 5\n\t :display-controls (list :color :red)\n\t :center (the vertical-beam (edge-center :rear :bottom)) )\n\n   \n\n   (vector-line :type 'vector-line\n\t\t:start-point (the rear-slope-construction-line center)\n\t\t:vector (the rear-slope-beam (face-normal-vector :bottom))\n\t\t:length 150)\n   \n   ))\n\n",
    "metadata": {
      "source": "gornschool-training/t4/resources/source/building-bom-input-output.lisp",
      "file_name": "building-bom-input-output.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_4_object_definition",
      "chunk_id": 8,
      "section": "truss"
    },
    "id": "2fd6780958850cf2a30b3a227ccd8bf0"
  },
  {
    "text": "(define-object vector-line (box)\n  :input-slots\n  ((start-point (make-point 0 0 0))\n   (vector (make-vector 1 0 1))\n   (length 50)\n   (width 1))\n  :computed-slots\n  ((height (div (the length) 5)))\n  :objects\n  ((v-line :type 'line\n\t   :start (the start-point)\n\t   :display-controls (list :color :red)\n\t   :end (translate-along-vector (the start-point)\n\t\t\t\t\t(the vector)\n\t\t\t\t\t(the length)))\n   (arrow :type 'cone\n\t  :radius-1 0\n\t  :radius-2 (div (the length) 50)\n\t  :length (div (the length) 5)\n\t  :display-controls (list :color :red)\n\t  :center (translate-along-vector (the v-line end)\n\t\t\t\t\t  (the vector)\n\t\t\t\t\t  (half (the-child length)))\n\t  :orientation (alignment :front (the vector)))))\n\n\t\t\t \n\t\t  \n",
    "metadata": {
      "source": "gornschool-training/t4/resources/source/building-bom-input-output.lisp",
      "file_name": "building-bom-input-output.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_4_object_definition",
      "chunk_id": 9,
      "section": "vector-line"
    },
    "id": "dd3791004a8432d0c64f0009e7281037"
  },
  {
    "text": "(define-object beam (box)\n  :input-slots\n  ((beam-length 1000)\n   (beam-width 40)\n   (beam-height 50)\n   (wall-thickness 2)\n   (material-density 7800)\n   (tonne-rate 500))\n\n  :computed-slots\n  ((length (the beam-length))\n   (width (the beam-width))\n   (height (the beam-height))\n\n   (beam-volume (- (the outer volume) (the inner volume)))\n   (beam-mass (* (div (the beam-volume) 1000000000) (the material-density)))\n   (beam-cost (* (the tonne-rate) (div (the beam-mass) 1000)))\n   (beam-properties (list :volume-mm3 (the beam-volume)\n\t\t\t  :mass-kg (round-to-nearest (the beam-mass) 0.01)\n\t\t\t  :cost-gbp (round-to-nearest (the beam-cost) 0.01)\n\t\t\t  :length-mm (the beam-length)\n\t\t\t  :width-mm (the beam-width)\n\t\t\t  :height-mm (the beam-height)\n\t\t\t  :thickness-mm (the wall-thickness))))\n   \n  :objects\n  ((outer :type 'box\n\t  :length (the beam-length)\n\t  :width (the beam-width)\n\t  :height (the beam-height))\n\n   (inner :type 'box\n\t  :length (the beam-length)\n\t  :width (- (the beam-width) (twice (the wall-thickness)))\n\t  :height (- (the beam-height) (twice (the wall-thickness)))))\n  )\n\n\n\n\n\n\n\n\n\n",
    "metadata": {
      "source": "gornschool-training/t4/resources/source/building-bom-input-output.lisp",
      "file_name": "building-bom-input-output.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_4_object_definition",
      "chunk_id": 10,
      "section": "beam"
    },
    "id": "acc59396d754d1791ecadb5579b28dd0"
  },
  {
    "text": "(in-package :gdl-user)\n\n",
    "metadata": {
      "source": "gornschool-training/t4/resources/source/file-output.lisp",
      "file_name": "file-output.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_4_object_definition",
      "chunk_id": 0,
      "section": "header"
    },
    "id": "516feef163844776f2dcf42c98cb597a"
  },
  {
    "text": "(defun output-report (fname)\n  (let ((obj (make-object 'my-box\n\t\t\t  :output-filename fname)))\n    (theo obj write-report!)))\n\t\t\t\n\n",
    "metadata": {
      "source": "gornschool-training/t4/resources/source/file-output.lisp",
      "file_name": "file-output.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_4_object_definition",
      "chunk_id": 0,
      "section": "output-report"
    },
    "id": "516feef163844776f2dcf42c98cb597a"
  },
  {
    "text": "(define-object my-box (box)\n  :input-slots\n  ((output-filename \"c:/temp/my-box-report\"))\n  \n  :computed-slots\n  ((width 3)\n   (height 4)\n   (length 6))\n\n  :functions\n  ((write-report!()\n\t\t (with-open-file (s (the output-filename)\n\t\t\t\t    :direction :output\n\t\t\t\t    :if-exists :supersede\n\t\t\t\t    :if-does-not-exist :create)\n\t\t   (let ((i 0))\n\t\t     (format t \"Begining output to ~a~%\" (the output-filename))\n\t\t     (format s \"Box Width ~a~%\" (the width))\n\t\t     (incf i)\n\t\t     (format s \"Box Length ~a~%\" (the length))\n\t\t     (incf i)\n\t\t     (format s \"Box Height ~a~%\" (the height))\n\t\t     (incf i)\n\t\t     (format s \"Box Center ~@{~,1f~^, ~}~%\"\n\t\t\t     (get-x (the center))\n\t\t\t     (get-y (the center))\n\t\t\t     (get-z (the center)))\n\t\t     (incf i)\n\t\t     (format s \"Box Volume ~a~%\" (the volume))\n\t\t     (incf i)\n\t\t     (format t \"Output written (~a line~:p)~%\" i)))))\n  ))\n",
    "metadata": {
      "source": "gornschool-training/t4/resources/source/file-output.lisp",
      "file_name": "file-output.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_4_object_definition",
      "chunk_id": 1,
      "section": "my-box"
    },
    "id": "baee70c6ff6b584b1f9241f39af690e5"
  },
  {
    "text": "(in-package :gdl-user)\n\n",
    "metadata": {
      "source": "gornschool-training/t4/resources/source/read-input.lisp",
      "file_name": "read-input.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_4",
      "chunk_id": 0,
      "section": "header"
    },
    "id": "f33bd4d132d72894ba480f9261975872"
  },
  {
    "text": "(defun read-file (file )\n  (let ((result))\n    (with-open-file (str file :direction :input)\n      (do ((line (read-line str nil 'eof)\n\t\t (read-line str nil 'eof)))\n\t  ((eql line 'eof) result)\n\t(setq result (append result (list line)))))))\n\n",
    "metadata": {
      "source": "gornschool-training/t4/resources/source/read-input.lisp",
      "file_name": "read-input.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_4",
      "chunk_id": 0,
      "section": "read-file"
    },
    "id": "f33bd4d132d72894ba480f9261975872"
  },
  {
    "text": "(defun import-data (file)\n  (let*\n      ((raw-data (read-file file))\n       (res (mapcar #'(lambda(a) (glisp:split-regexp \"\\\\s+\" a)) raw-data))\n       (res-1 (mapcan #'(lambda(a) (list (make-keyword (second a)) (third a))) res))\n       (keywords (remove nil res-1 :key #'(lambda(a) (keywordp a))))\n       (r nil))\n    (dolist (k keywords r)\n      (cond ((or (eq k :width) (eq k :length) (eq k :height))\n\t     (setq r (append r (list k (read-safe-string (getf res-1 k))))))\n\t    ((eq k :center)\n\t     (let ((co-ord (glisp:split-regexp \",\" (getf res-1 k))))\n\t       (setq r (append\n\t\t\tr\n\t\t\t(list k (make-point (read-safe-string (first co-ord))\n\t\t\t\t\t    (read-safe-string (second co-ord))\n\t\t\t\t\t    (read-safe-string (third co-ord))))))))))))\n\t\n",
    "metadata": {
      "source": "gornschool-training/t4/resources/source/read-input.lisp",
      "file_name": "read-input.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_4",
      "chunk_id": 1,
      "section": "import-data"
    },
    "id": "4a6326ad38e5b6f39b7efd75adecbd8c"
  },
  {
    "text": "(in-package :gdl-user)\n\n",
    "metadata": {
      "source": "gornschool-training/t4/resources/source/building-bom-output.lisp",
      "file_name": "building-bom-output.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_4_object_definition",
      "chunk_id": 0,
      "section": "header"
    },
    "id": "7020d31cbccf8ee06fe5ad3dc8aef33a"
  },
  {
    "text": "(defun building-bom (&key (nominal-height 3000) \n\t\t       (nominal-width 3000)\n\t\t       (nominal-length 3000)\n\t\t       (roof-angle 30)\n\t\t       (output-filename nil))\n  (let ((obj (make-object 'building\n\t\t\t  :nominal-height nominal-height\n\t\t\t  :nominal-width nominal-width\n\t\t\t  :nominal-length nominal-length\n\t\t\t  :truss-angle roof-angle\n\t\t\t  :output-filename output-filename)))\n    (if output-filename (theo obj write-bom-file!)\n\t(theo obj bom-formatted))))\n\n",
    "metadata": {
      "source": "gornschool-training/t4/resources/source/building-bom-output.lisp",
      "file_name": "building-bom-output.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_4_object_definition",
      "chunk_id": 0,
      "section": "building-bom"
    },
    "id": "7020d31cbccf8ee06fe5ad3dc8aef33a"
  },
  {
    "text": "(define-object building (box)\n  :input-slots\n  ((nominal-height 3000)\n   (nominal-width 3000)\n   (nominal-length 4000)\n   (brick-height 45)\n   (brick-length 180)\n   (brick-width 90)\n   (mortar-joint-width 10)\n   (truss-angle 30)\n   (beam-width 40)\n   (beam-height 50)\n   (wall-thickness 3)\n   (material-density 7800)\n   (roof-overhang 50)\n   (cladding-thickness 10)\n   (max-beam-spacing 1500)\n   (output-filename nil))\n\n  :computed-slots\n  ((length (the left-wall length))\n   (width (the rear-wall length))\n   (height (+ (the left-wall height) (the (roof-truss 0) height)))\n\n   (number-of-roof-trusses (let ((trusses (ceiling (the left-wall length) 1500)))\n\t\t\t     (max trusses 2)))\n\n   (truss-spacing (div (- (the left-wall length) (the beam-width))\n\t\t       (- (the number-of-roof-trusses) 1)))\n   (truss-offsets (let ((res nil))\n\t\t    (dotimes (n (the number-of-roof-trusses) (nreverse res))\n\t\t      (push (+ (half (the beam-width))\n\t\t\t       (* n (the truss-spacing))) res))))\n\n   (roof-length (+ (the left-wall length) (twice (the roof-overhang))))\n   (roof-width (the cladding-thickness))\n   (roof-height (let ((apex (the (roof-truss 0) apex-point))\n\t\t      (gutter (the (roof-truss 0) front-gutter-point)))\n\t\t  (+ (3d-distance apex gutter) (the roof-overhang))))\n\n   ;; building properties\n   (walls (remove nil (mapcar #'(lambda(a) (when (typep a 'wall) a)) (the children))))\n   (full-bricks (apply '+ (mapsend (the walls) :full-bricks)))\n   (half-bricks (apply '+ (mapsend (the walls) :half-bricks)))\n   (mortar-volume (apply '+ (mapsend (the walls) :mortar-volume)))\n   (cladding-dimensions (list :length (the roof-length)\n\t\t\t      :width (the roof-height)))\n   (beam-properties (the (roof-truss 0) beam-properties))\n   (beam-qty-by-size (let ((res nil))\n\t\t       (dolist (plis (the beam-properties) )\n\t\t\t (let* ((trusses (the number-of-roof-trusses))\n\t\t\t\t(l (getf plis :length-mm))\n\t\t\t\t(p (position l res :key #'(lambda(a) (getf a :length-mm))))\n\t\t\t\t(qty (when p (getf (nth p res) :qty))))\n\t\t\t   (if p (setf (getf (nth p res) :qty) (+ qty trusses))\n\t\t\t       (setq res (append (list (list :length-mm l :qty trusses)) res)))))\n\t\t       (safe-sort res '< :key #'(lambda(a) (getf a :length-mm)))))\n\t\t       \n\n   (roof-truss-mass (* (apply '+ (mapcar #'(lambda(a) (getf a :mass-kg))\n\t\t\t\t\t (the beam-properties)))\n\t\t       (the number-of-roof-trusses)))\n\n   (building-materials (list :full-bricks (the full-bricks)\n\t\t\t     :half-bricks (the half-bricks)\n\t\t\t     :mortar-volume-m3 (div (the mortar-volume) 1000000000)\n\t\t\t     :beams (the beam-qty-by-size)\n\t\t\t     :roof-cladding (append (the cladding-dimensions) (list :qty 2))))\n\n  (bom-formatted (let* ((bom (the building-materials))\n\t\t\t(cladding (getf bom :roof-cladding))\n\t\t\t(bricks (format nil \"Bricks~%======~%  Full Bricks ~a~%  Half Bricks ~a~%\" \n\t\t\t\t\t(getf bom :full-bricks) \n\t\t\t\t\t(getf bom :half-bricks)))\n\t\t\t(mortar (format nil \"Mortar~%======~%  Volume ~,3f m^3~%\" \n\t\t\t\t\t(getf bom :mortar-volume-m3)))\n\t\t\t(l (round-to-nearest (getf cladding :length) 1))\n\t\t\t(w (round-to-nearest (getf cladding :width) 1))\n\t\t\t(roof (format nil \"Roof Cladding~%======~%  Qty ~a~%  Dimensions (L x W x T) ~d x ~d x ~d~%\" \n\t\t\t\t      (getf cladding :qty)\n\t\t\t\t      l w (the cladding-thickness)))\n\t\t\t(beams (getf (the building-materials) :beams))\n\t\t\t(beams-list (flatten\n\t\t\t\t     (mapcar #'(lambda(a)\n\t\t\t\t\t\t (list (getf a :qty) (round-to-nearest (getf a :length-mm) 1)))\n\t\t\t\t\t     beams)))\n\t\t\t\n\t\t\t(beams-header (format nil \"Beams~%=====~%  Section (H x W x T) ~a x ~a x ~a~%\"\n\t\t\t\t\t\t (the beam-height) (the beam-width) (the wall-thickness)))\n\t\t\t(beam-lengths (format nil \"~{  Qty ~a Length ~a~%~}\" beams-list)))\n\t\t   (format nil \"~@{~a~}\" bricks mortar roof beams-header beam-lengths))) \n   \n\t\t\n   )\n\n  :functions\n  ((write-bom-file! ()\n\t\t    (with-open-file (s (the output-filename) :direction :output\n\t\t\t\t\t\t:if-exists :supersede\n\t\t\t\t\t\t:if-does-not-exist :create)\n\t\t      (format t \"Exporting the BOM to ~a~%\" (the output-filename))\n\t\t      (format s \"~a\" (the bom-formatted))\n\t\t      (format t \"Exporting complete~%\")))\n\n\n\n   (get-roof-mid-point! (first-gutter last-gutter last-index)\n\t\t       (let*((mid-gutter (midpoint first-gutter last-gutter))\n\t\t\t     (first-apex (the (roof-truss 0) apex-point))\n\t\t\t     (last-apex (the (roof-truss last-index) apex-point))\n\t\t\t     (mid-apex (midpoint first-apex last-apex))\n\t\t\t     (vec (subtract-vectors mid-gutter mid-apex))\n\t\t\t     (mid-edge (translate-along-vector mid-gutter vec (the roof-overhang))))\n\t\t\t (midpoint mid-apex mid-edge))) )\n  \n  :objects\n  ((left-wall :type 'wall\n\t      :pass-down (brick-height\n\t\t\t  brick-length\n\t\t\t  brick-width\n\t\t\t  mortar-joint-width)\n\t      :center (translate-along-vector\n\t\t       (translate-along-vector (the (edge-center :bottom :left))\n\t\t\t\t\t       (the (face-normal-vector :right))\n\t\t\t\t\t       (half (the-child width)))\n\t\t       (the (face-normal-vector :top))\n\t\t       (half (the-child height)))\n\t      :wall-length (the nominal-length)\n\t      :wall-height (the nominal-height))\n\n   (right-wall :type 'wall\n\t       :pass-down (brick-height\n\t\t\t   brick-length\n\t\t\t   brick-width\n\t\t\t   mortar-joint-width)\n\t       :center (translate-along-vector\n\t\t\t(translate-along-vector (the (edge-center :bottom :right))\n\t\t\t\t\t\t(the (face-normal-vector :left))\n\t\t\t\t\t\t(half (the-child width)))\n\t\t\t(the (face-normal-vector :top))\n\t\t\t(half (the-child height)))\n\t       :wall-length (the nominal-length)\n\t       :wall-height (the nominal-height))\n\n   (rear-wall :type 'wall\n\t      :pass-down (brick-height\n\t\t\t  brick-length\n\t\t\t  brick-width\n\t\t\t  mortar-joint-width)\n\t      :center (translate-along-vector\n\t\t\t(translate-along-vector (the (edge-center :bottom :rear))\n\t\t\t\t\t\t(the (face-normal-vector :front))\n\t\t\t\t\t\t(half (the-child width)))\n\t\t\t(the (face-normal-vector :top))\n\t\t\t(half (the-child height)))\n\t      :orientation (alignment :rear (the (face-normal-vector :right)))\n\t      :wall-length (the nominal-width)\n\t      :wall-height (the nominal-height))\n\n   (roof-truss :type 'truss\n\t       :sequence (:size (the number-of-roof-trusses))\n\t       :truss-length (the rear-wall length)\n\t       :center (translate-along-vector\n\t\t\t(translate-along-vector (the (edge-center :front :top))\n\t\t\t\t\t\t(the (face-normal-vector :bottom))\n\t\t\t\t\t\t(half (the-child height)))\n\t\t\t(the (face-normal-vector :rear))\n\t\t\t(nth (the-child index) (the truss-offsets)))\n\t       :orientation (alignment :rear (the (face-normal-vector :right))\n\t\t\t\t       )\t\t\n\t       :pass-down (truss-angle\n\t\t\t   beam-width\n\t\t\t   beam-height\n\t\t\t   wall-thickness\n\t\t\t   material-density))\n   \n   (roof-cladding-left\n    :type 'box\n    :length (the roof-length)\n    :height (the roof-height)\n    :width (the cladding-thickness)\n    :orientation (alignment :left (the (roof-truss 0) front-slope-normal))\n    :center (let* ((last-index (- (the number-of-roof-trusses) 1))\n\t\t   (first-gutter (the (roof-truss 0) front-gutter-point))\n\t\t   (last-gutter (the (roof-truss last-index) front-gutter-point))\n\t\t   (mid-ctr (the (get-roof-mid-point! first-gutter last-gutter last-index))))\n\t      (translate-along-vector mid-ctr\n\t\t\t\t      (the (roof-truss 0) front-slope-normal)\n\t\t\t\t      (half (the cladding-thickness)))))\n   \n   (roof-cladding-right :type 'box\n\t\t\t:length (the roof-length)\n\t\t\t:height (the roof-height)\n\t\t\t:width (the cladding-thickness)\n\t\t\t:orientation (alignment :left (the (roof-truss 0) rear-slope-normal))\n\t\t\t :center (let* ((last-index (- (the number-of-roof-trusses) 1))\n\t\t\t\t\t(first-gutter (the (roof-truss 0) rear-gutter-point))\n\t\t\t\t\t(last-gutter (the (roof-truss last-index) rear-gutter-point))\n\t\t\t\t\t(mid-ctr (the (get-roof-mid-point! first-gutter last-gutter last-index))))\n\t\t\t\t (translate-along-vector mid-ctr\n\t\t\t\t\t\t\t (the (roof-truss 0) rear-slope-normal)\n\t\t\t\t\t\t\t (half (the cladding-thickness)))))\n   )\n\n  \n\t\t       \n  )\n\n\n",
    "metadata": {
      "source": "gornschool-training/t4/resources/source/building-bom-output.lisp",
      "file_name": "building-bom-output.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_4_object_definition",
      "chunk_id": 1,
      "section": "building"
    },
    "id": "ac5bb5fadd5972c36008a7b1fdaaf4c9"
  },
  {
    "text": "(define-object wall(box)\n  :input-slots\n  ((brick-height 45)\n   (brick-length 180)\n   (brick-width 90)\n   (mortar-joint-width 10)\n   (wall-length 3700)\n   (wall-height 900)\n   (first-row :start-full)\n   (front-edge :full)\n   (rear-edge :full))\n\n  :computed-slots\n  ((row-height (+ (the brick-height) (the mortar-joint-width)))\n   (number-of-rows (round-to-nearest (div (the wall-height) (the row-height)) 1))\n   (actual-wall-height (* (the row-height) (the number-of-rows)))\n   \n   ;; for the wall-length we need the number of full bricks\n   ;; if there are n full bricks then there will be (n-1) mortar joints\n   ;; so n*brick-length + n-1*mortar-joint-width = overall-length\n   ;; or n(brick-length + mortar-join-width) - mortar-joint-width = overall-length\n   ;; or n = (overall-length - mortar-joint-width)/(brick-length + mortar-joint-width)\n   (number-of-bricks (round-to-nearest (div (- (the wall-length) (the mortar-joint-width))\n\t\t\t\t\t    (+ (the brick-length) (the mortar-joint-width)))\n\t\t\t\t       1))\n   (actual-wall-length (+ (* (the number-of-bricks) (the brick-length))\n\t\t\t  (* (- (the number-of-bricks) 1) (the mortar-joint-width))))\n\n   ;; box inputs - gives the wall bounding box\n   (height (the actual-wall-height))\n   (width (the brick-width))\n   (length (the actual-wall-length))\n\n   (full-bricks (apply '+ (list-elements (the row) (the-element full-bricks))))\n   (half-bricks (apply '+ (list-elements (the row) (the-element half-bricks))))\n   (mortar-volume (apply '+ (list-elements (the row) (the-element mortar-volume))))\n   (mortar-density 2162)\n   (mortar-mass (* (the mortar-density) (div (the mortar-volume) 1000000000)))\n   )\n   \n     \n  :objects\n  ((row :type 'row\n     :sequence (:size (the number-of-rows))\n     :center (translate-along-vector (the (face-center :bottom))\n\t\t\t\t     (the (face-normal-vector :top))\n\t\t\t\t     (+ (half (the-child height))\n\t\t\t\t\t(* (the-child index) (the-child height))))\n     :height (+ (the brick-height) (the mortar-joint-width))\n     :full-bricks-per-row (the number-of-bricks)\n     :pass-down (brick-height\n\t\t brick-length\n\t\t brick-width\n\t\t mortar-joint-width\n\t\t length\n\t\t width\n\t\t first-row\n\t\t front-edge\n\t\t rear-edge))))\n\n",
    "metadata": {
      "source": "gornschool-training/t4/resources/source/building-bom-output.lisp",
      "file_name": "building-bom-output.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_4_object_definition",
      "chunk_id": 2,
      "section": "wall"
    },
    "id": "8fdd4d2ab9eccac0ad08290b35930b69"
  },
  {
    "text": "(define-object row (box)\n  :input-slots\n  (full-bricks-per-row\n   brick-height\n   brick-length\n   brick-width\n   mortar-joint-width\n   first-row\n   front-edge\n   rear-edge )\n\n  :computed-slots\n  ((full-brick-row? (cond ((eq (the first-row) :start-full)\n\t\t\t   (or (zerop (the index)) (evenp (the index))))\n\t\t\t  ((eq (the first-row) :start-half)\n\t\t\t   (not (or (zerop (the index)) (evenp (the index)))))))\n\t\t    \n   (full-bricks (the bricks-and-mortar full-bricks))\n   (half-bricks (the bricks-and-mortar half-bricks))\n   (mortar-volume (+ (the bricks-and-mortar mortar-joint-volume)\n\t\t     (the mortar-bed volume))))\n\n  :objects\n  ((bricks-and-mortar :type 'bricks-and-mortar\n\t\t      :height (the brick-height)\n\t\t      :center (translate-along-vector (the mortar-bed (face-center :top))\n\t\t\t\t\t\t      (the mortar-bed (face-normal-vector :top))\n\t\t\t\t\t\t      (half (the-child height)))\n\t\t      :pass-down (width\n\t\t\t\t  length\n\t\t\t\t  full-brick-row?\n\t\t\t\t  brick-height\n\t\t\t\t  brick-length\n\t\t\t\t  brick-width\n\t\t\t\t  mortar-joint-width\n\t\t\t\t  full-bricks-per-row\n\t\t\t\t  front-edge\n\t\t\t\t  rear-edge))\n   (mortar-bed :type 'box\n\t       :height (the mortar-joint-width)\n\t       :center (translate-along-vector (the (face-center :bottom))\n\t\t\t\t\t       (the (face-normal-vector :top))\n\t\t\t\t\t       (half (the-child height)))\n\t       :pass-down (width\n\t\t\t   length))))\n\n",
    "metadata": {
      "source": "gornschool-training/t4/resources/source/building-bom-output.lisp",
      "file_name": "building-bom-output.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_4_object_definition",
      "chunk_id": 3,
      "section": "row"
    },
    "id": "60c35549fa771159c3c2b0dab7b2fc55"
  },
  {
    "text": "(define-object bricks-and-mortar (box)\n  :input-slots\n  (full-brick-row?\n   full-bricks-per-row\n   brick-height\n   brick-length\n   brick-width\n   mortar-joint-width\n   front-edge\n   rear-edge)\n\n  :computed-slots\n  ((first-full-brick-start-point (if (the full-brick-row?)\n\t\t\t\t     (the (face-center :front))\n\t\t\t\t     (the (mortar-joint 0) (face-center :rear))))\n   \n   (first-mortar-joint-start-point (cond ((the full-brick-row?) (the (full-brick 0) (face-center :rear)))\n\t\t\t\t\t ((eq (the front-edge) :full) (the (half-brick 0) (face-center :rear)))\n\t\t\t\t\t ((eq (the front-edge) :keyed) (translate-along-vector (the (face-center :front))\n\t\t\t\t\t\t\t\t\t\t\t       (the (face-normal-vector :rear))\n\t\t\t\t\t\t\t\t\t\t\t       (half (the brick-length))))))\n\n   (number-of-full-bricks (if (the full-brick-row?)\n\t\t\t      (the full-bricks-per-row)\n\t\t\t      (- (the full-bricks-per-row) 1)))\n\n   (number-of-half-bricks (cond ((the full-brick-row?) 0)\n\t\t\t\t((and (eq (the front-edge) :full)(eq (the rear-edge) :full)) 2)\n\t\t\t\t((and (eq (the front-edge) :keyed) (eq (the rear-edge) :full)) 1)\n\t\t\t\t((and (eq (the front-edge) :full) (eq (the rear-edge) :keyed)) 1)\n\t\t\t\t((and (eq (the front-edge) :keyed) (eq (the rear-edge) :keyed)) 0)))\n\n   ;; whether or not the ends are :full or :keyed, the number of mortar joints remains the same since the mortar joint\n   ;; when it is :keyed is used to connect to the full brick of the other wall\n   (number-of-mortar-joints (if (the full-brick-row?)\n\t\t\t\t(- (the number-of-full-bricks) 1)\n\t\t\t\t(+ (the number-of-full-bricks) 1)))\n\n   ;; if it isn't a full brick row then there will be an extra joint because one\n   ;; full brick is replaced with 2 half bricks so without correcting the\n   ;; mortar-joint-width the ends of a full brick row and one starting and\n   ;; finishing with half bricks won't align. So we need to correct\n   ;; the mortar-joint-width\n   (corrected-joint-width (if (the full-brick-row?)\n\t\t\t\t     (the mortar-joint-width)\n\t\t\t\t     (let ((total-gap (* (- (the number-of-mortar-joints) 1)\n\t\t\t\t\t\t\t\t\t(the mortar-joint-width))))\n\t\t\t\t       (div total-gap (the number-of-mortar-joints)))))\n   ;; collating the output. We could do this analytically, but for this example we'll use the geometry\n   (full-bricks (length (list-elements (the full-brick))))\n   (half-bricks (length (list-elements (the half-brick))))\n   (mortar-joint-volume (apply '+ (list-elements (the mortar-joint)\n\t\t\t\t\t\t (the-element volume))))\n   )\n  \n  :functions\n  ((first-full-brick-center!\n    ()\n    (translate-along-vector (the first-full-brick-start-point)\n\t\t\t    (the (face-normal-vector :rear))\n\t\t\t    (half (the brick-length))))\n   \n   (other-full-brick-center!\n    (index)\n    ;; if its a full brick row, (full-brick 1) is positioned relative to (joint 0)\n    ;; if its a half brick row, (full-brick 1) is positioned relative to (joint 1)\n    (let ((ind (if (the full-brick-row?) (- index 1) index)))\n\t  (translate-along-vector (the (mortar-joint ind) (face-center :rear))\n\t\t\t\t  (the (face-normal-vector :rear))\n\t\t\t\t  (half (the brick-length)))))\n   \n    (first-joint-center!\n     ()\n     (translate-along-vector (the first-mortar-joint-start-point)\n\t\t\t     (the (face-normal-vector :rear))\n\t\t\t     (half (the corrected-joint-width))))\n   (other-joint-center!\n    (index)\n    ;; if its a full brick row, (joint 1) is positioned relative to (full-brick 1)\n    ;; if its a half brick row, (joint 1) is positioned relative to (full-brick 0)\n    (let ((ind (if (the full-brick-row?) index (- index 1))))\n      (translate-along-vector (the (full-brick ind) (face-center :rear))\n\t\t\t      (the (face-normal-vector :rear))\n\t\t\t      (half (the corrected-joint-width)))))\n\n    (first-half-brick-center!\n     ()\n     (translate-along-vector (the (face-center :front))\n\t\t\t     (the (face-normal-vector :rear))\n\t\t\t     (half (half (the brick-length)))))\n   \n   (last-half-brick-center!\n     ()\n     (translate-along-vector (theo (the mortar-joint last) (face-center :rear))\n\t\t\t     (the (face-normal-vector :rear))\n\t\t\t     (half (half (the brick-length))))))\n \t\t\t     \n  \n  :objects\n  ((full-brick :type 'box\n\t       :sequence (:size (the number-of-full-bricks))\n\t       :center (if (= (the-child index) 0)\n\t\t\t   (the first-full-brick-center!)\n\t\t\t   (the (other-full-brick-center! (the-child index))))\n\t       :length (the brick-length)\n\t       :height (the brick-height)\n\t       :width (the brick-width))\n\n   (half-brick :type 'box\n\t       :sequence (:size (the number-of-half-bricks))\n\t       :center (cond ((and (= (the-child index) 0)\n\t\t\t\t   (eq (the front-edge) :full)) (the first-half-brick-center!))\n\t\t\t     ((and (= (the-child index) 0)\n\t\t\t\t   (eq (the front-edge) :keyed)\n\t\t\t\t   (eq (the rear-edge) :full)) (the last-half-brick-center!))\n\t\t\t     ((eq (the rear-edge) :full) (the last-half-brick-center!)))\n\t       :length (half (the brick-length))\n\t       :height (the brick-height)\n\t       :width (the brick-width))\n\n   (mortar-joint :type 'box\n\t\t :sequence (:size (the number-of-mortar-joints))\n\t\t :center (if (= (the-child index) 0)\n\t\t\t     (the first-joint-center!)\n\t\t\t  (the (other-joint-center! (the-child index))))   \n\t\t :height (the brick-height)\n\t\t :width (the brick-width)\n\t\t :length (the corrected-joint-width))))\n\n\n",
    "metadata": {
      "source": "gornschool-training/t4/resources/source/building-bom-output.lisp",
      "file_name": "building-bom-output.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_4_object_definition",
      "chunk_id": 4,
      "section": "bricks-and-mortar"
    },
    "id": "e57d058f672b1161c7312622ec930b0f"
  },
  {
    "text": "(defun degrees-to-radians (degrees)\n  (div (* degrees pi) 180))\n\n\n",
    "metadata": {
      "source": "gornschool-training/t4/resources/source/building-bom-output.lisp",
      "file_name": "building-bom-output.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_4_object_definition",
      "chunk_id": 5,
      "section": "degrees-to-radians"
    },
    "id": "432a4e4e2917ab5fc40f787ae77f92e9"
  },
  {
    "text": "(define-object truss (box)\n  :input-slots\n  ((truss-length 2000)\n   (truss-height nil)\n   (truss-angle 30)\n\n   (beam-width 30)\n   (beam-height 50)\n   (wall-thickness 3)\n\n   (material-density 7800)\n   (tonne-rate 450))\n\n  :computed-slots\n  ((length (the truss-length))\n   (height (cond ((the truss-height)(the truss-height))\n\t\t ((the truss-angle) (+ (* (half (the truss-length))\n\t\t\t\t\t  (tan (degrees-to-radians (the truss-angle))))\n\t\t\t\t       (the beam-height)))))\n   (width (the beam-width))\n  \n   (truss-front-slope-vector (the (get-slope-vector! :front)))\n   (truss-rear-slope-vector (the (get-slope-vector! :rear)))\n\n   (front-slope-length (the (get-slope-length! :front)))\n   (rear-slope-length (the (get-slope-length! :rear)))\n   \n   (front-slope-center (the (get-slope-center! :front)))\n   (rear-slope-center (the (get-slope-center! :rear)))\n   \n\n   (beam-properties (mapsend (the children) :beam-properties))\n   (total-mass (round-to-nearest\n\t\t(apply '+\n\t\t       (mapcar #'(lambda(a) (getf a :mass-kg))\n\t\t\t       (the beam-properties)))\n\t\t0.001))\n   (total-cost (round-to-nearest\n\t\t(apply '+\n\t\t       (mapcar #'(lambda(a) (getf a :cost-gbp))\n\t\t\t       (the beam-properties)))\n\t\t0.01))\n\n   ;; messages to support roof cladding sizing and positioning\n   (apex-point (inter-line-plane (the rear-slope-construction-line end)\n\t\t\t   (the truss-rear-slope-vector)\n\t\t\t   (the lower-beam center)\n\t\t\t\t (the (face-normal-vector :rear))))\n   (front-gutter-point (the front-slope-construction-line start))\n   (rear-gutter-point (the rear-slope-construction-line start))\n   (front-slope-normal (the front-slope-beam (face-normal-vector :top)))\n   (rear-slope-normal (the rear-slope-beam (face-normal-vector :top)))\n   )\n\n  :functions\n  ((get-slope-vector! (beam-side)\n\t\t      (let ((v-key (the (get-v-key! beam-side)))\n\t\t\t    (l-key (the (get-l-key! beam-side))))\n\t\t      (subtract-vectors (the vertical-beam (edge-center :rear v-key))\n\t\t\t\t\t(the lower-beam (edge-center l-key :top)))))\n   (get-slope-length! (beam-side)\n\t\t      (let ((v-key (the (get-v-key! beam-side)))\n\t\t\t    (l-key (the (get-l-key! beam-side))))\n\t\t\t(3d-distance (the vertical-beam (edge-center :rear v-key))\n\t\t\t\t     (the lower-beam (edge-center l-key :top)))))\n   (get-slope-center!\n    (beam-side)\n    (let ((pt (case beam-side\n\t\t(:front (the front-slope-construction-line center))\n\t\t(:rear  (the rear-slope-construction-line center))))\n\t  (norm-vector (case beam-side\n\t\t\t (:front (the front-slope-beam (face-normal-vector :bottom)))\n\t\t\t (:rear (the rear-slope-beam (face-normal-vector :bottom))))))\n      (translate-along-vector pt\n\t\t\t      norm-vector\n\t\t\t      (half (the beam-height)))))\n   (get-v-key! (beam-side)\n\t       (case beam-side\n\t\t (:front :top)\n\t\t (:rear :bottom)))\n   (get-l-key! (beam-side)\n\t       (case beam-side\n\t\t (:front :front)\n\t\t (:rear :rear)))\n\n   \n   )\n   \n  \n  \n  :objects\n  ((lower-beam :type 'beam\n\t       :pass-down (:beam-height :beam-width :wall-thickness :material-density :tonne-rate)\n\t       :beam-length (the truss-length)\n\t       :center (translate-along-vector (the (face-center :bottom))\n\t\t\t\t\t       (the (face-normal-vector :top))\n\t\t\t\t\t       (half (the beam-height))))\n   (vertical-beam :type 'beam\n\t\t  :pass-down (:beam-height :beam-width :wall-thickness :material-density :tonne-rate)\n\t\t  \n\t\t  :beam-length (- (the height) (the beam-height))\n\t\t  :orientation (alignment :rear (the (face-normal-vector :top))\n\t\t\t\t\t  :right (the (face-normal-vector :right)))  \n\t\t  :center (translate-along-vector (the lower-beam (face-center :top))\n\t\t\t\t\t\t  (the lower-beam (face-normal-vector :top))\n\t\t\t\t\t\t  (half (the-child beam-length))))\n   (front-slope-beam :type 'beam\n\t\t     :pass-down (:beam-height :beam-width :wall-thickness :material-density :tonne-rate)\n\t\t     :beam-length (the front-slope-length)\n\t\t     :center (the front-slope-center)\n\t\t     :orientation (alignment :rear (the truss-front-slope-vector)\n\t\t\t\t\t     :right (the (face-normal-vector :right))))\n\n   (rear-slope-beam :type 'beam\n\t\t    :pass-down (:beam-height :beam-width :wall-thickness :material-density :tonne-rate)\n\t\t    :beam-length (the rear-slope-length)\n\t\t    :center (the rear-slope-center)\n\t\t    :orientation (alignment :rear (the truss-rear-slope-vector)\n\t\t\t\t\t    :left (the (face-normal-vector :right))))\n   \n   )\n\n  :hidden-objects\n  ((apex-pt :type 'sphere\n\t    :radius 5\n\t    :display-controls (list :color :green)\n\t    :center (the apex-point))\n   (front-slope-construction-line :type 'line\n\t\t\t\t  :start (the lower-beam (edge-center :front :top))\n\t\t\t\t  :end (the vertical-beam (edge-center :rear :top)))\n   (rear-slope-construction-line :type 'line\n\t\t\t\t :start (the lower-beam (edge-center :rear :top))\n\t\t\t\t :end (the vertical-beam (edge-center :rear :bottom)))\n   \n   (front-mid-pt :type 'sphere\n\t\t :display-controls (list :color :blue)\n\t\t :radius 5\n\t\t :center (the front-slope-construction-line center))\n   (rear-mid-pt :type 'sphere\n\t\t:display-controls (list :color :blue)\n\t\t:center (the rear-slope-construction-line center)\n\t\t:radius 5)\n   (pt-1 :type 'sphere\n\t :radius 5\n\t :display-controls (list :color :green)\n\t :center (the lower-beam (edge-center :rear :top)))\n   (pt-2 :type 'sphere\n\t :radius 5\n\t :display-controls (list :color :red)\n\t :center (the vertical-beam (edge-center :rear :bottom)) )\n\n   \n\n   (vector-line :type 'vector-line\n\t\t:start-point (the rear-slope-construction-line center)\n\t\t:vector (the rear-slope-beam (face-normal-vector :bottom))\n\t\t:length 150)\n   \n   ))\n\n",
    "metadata": {
      "source": "gornschool-training/t4/resources/source/building-bom-output.lisp",
      "file_name": "building-bom-output.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_4_object_definition",
      "chunk_id": 6,
      "section": "truss"
    },
    "id": "db15d6e07825c090de16f50a14f6e54f"
  },
  {
    "text": "(define-object vector-line (box)\n  :input-slots\n  ((start-point (make-point 0 0 0))\n   (vector (make-vector 1 0 1))\n   (length 50)\n   (width 1))\n  :computed-slots\n  ((height (div (the length) 5)))\n  :objects\n  ((v-line :type 'line\n\t   :start (the start-point)\n\t   :display-controls (list :color :red)\n\t   :end (translate-along-vector (the start-point)\n\t\t\t\t\t(the vector)\n\t\t\t\t\t(the length)))\n   (arrow :type 'cone\n\t  :radius-1 0\n\t  :radius-2 (div (the length) 50)\n\t  :length (div (the length) 5)\n\t  :display-controls (list :color :red)\n\t  :center (translate-along-vector (the v-line end)\n\t\t\t\t\t  (the vector)\n\t\t\t\t\t  (half (the-child length)))\n\t  :orientation (alignment :front (the vector)))))\n\n\t\t\t \n\t\t  \n",
    "metadata": {
      "source": "gornschool-training/t4/resources/source/building-bom-output.lisp",
      "file_name": "building-bom-output.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_4_object_definition",
      "chunk_id": 7,
      "section": "vector-line"
    },
    "id": "78b801a038bc3189affcff0824e56c97"
  },
  {
    "text": "(define-object beam (box)\n  :input-slots\n  ((beam-length 1000)\n   (beam-width 40)\n   (beam-height 50)\n   (wall-thickness 2)\n   (material-density 7800)\n   (tonne-rate 500))\n\n  :computed-slots\n  ((length (the beam-length))\n   (width (the beam-width))\n   (height (the beam-height))\n\n   (beam-volume (- (the outer volume) (the inner volume)))\n   (beam-mass (* (div (the beam-volume) 1000000000) (the material-density)))\n   (beam-cost (* (the tonne-rate) (div (the beam-mass) 1000)))\n   (beam-properties (list :volume-mm3 (the beam-volume)\n\t\t\t  :mass-kg (round-to-nearest (the beam-mass) 0.01)\n\t\t\t  :cost-gbp (round-to-nearest (the beam-cost) 0.01)\n\t\t\t  :length-mm (the beam-length)\n\t\t\t  :width-mm (the beam-width)\n\t\t\t  :height-mm (the beam-height)\n\t\t\t  :thickness-mm (the wall-thickness))))\n   \n  :objects\n  ((outer :type 'box\n\t  :length (the beam-length)\n\t  :width (the beam-width)\n\t  :height (the beam-height))\n\n   (inner :type 'box\n\t  :length (the beam-length)\n\t  :width (- (the beam-width) (twice (the wall-thickness)))\n\t  :height (- (the beam-height) (twice (the wall-thickness)))))\n  )\n\n\n\n\n\n\n\n\n\n",
    "metadata": {
      "source": "gornschool-training/t4/resources/source/building-bom-output.lisp",
      "file_name": "building-bom-output.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_4_object_definition",
      "chunk_id": 8,
      "section": "beam"
    },
    "id": "2c1c9995eef5d7e522c7bd963a4b3279"
  },
  {
    "text": "(in-package :quiz)\n\n;;\n;; Following was generated by ChatGPT (after much prompting):\n;;\n\n(defparameter *bad-chars* (mapcar #'code-char\n\t\t\t\t  '(#x093e #x093f #x0940 #x0941 #x0942 #x0943 #x0944 #x0900\n\t\t\t\t    #x0945 #x0946 #x0947 #x0948 #x0949 #x094a #x094b #x094c\n\t\t\t\t    #x094d #x094e #x094f #x0955 #x0956 #x0957 #x0962 #x0963\n\t\t\t\t    #x0901 #x0902 #x0903\n\t\t\t\t    #x093a #x093b #x093c #x093e #x093f #x0940 #x0941)))\n\n",
    "metadata": {
      "source": "gornschool-training/quiz/source/utilities.lisp",
      "file_name": "utilities.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "general",
      "chunk_id": 0,
      "section": "header"
    },
    "id": "0df3c404f669ea30328d1735eb946725"
  },
  {
    "text": "(defun scramble-string (string)\n  (let* ((string-list (coerce string 'list))\n         (string-length (length string-list)))\n    (dotimes (i (1- string-length))\n      (let* ((j (+ i (random (- string-length i))))\n             (scramble-prob (/ i (1- string-length))))\n        (when (and (/= i j)\n                   (not (char= (nth i string-list)(nth j string-list)))\n                   (not (char= #\\Space (nth i string-list)))\n                   (not (char= #\\Space (nth j string-list)))\n                   (< (random 1.0) scramble-prob))\n          (rotatef (nth i string-list)\n                   (nth j string-list)))))\n\n    (setq string-list (remove-if #'(lambda(char) (member char *bad-chars*)) string-list))\n    \n    (let ((result (coerce string-list 'string)))\n      (if (string= string result)\n          (subseq string 0 (max 0 (1- (length string))))\n          result))))\n\n",
    "metadata": {
      "source": "gornschool-training/quiz/source/utilities.lisp",
      "file_name": "utilities.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "general",
      "chunk_id": 0,
      "section": "scramble-string"
    },
    "id": "0df3c404f669ea30328d1735eb946725"
  },
  {
    "text": "(in-package :cl-user)\n\n(gwl:define-package :quiz (:export #:*vocab-pathname* #:publish-endpoints))\n\n",
    "metadata": {
      "source": "gornschool-training/quiz/source/package.lisp",
      "file_name": "package.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "general",
      "chunk_id": 0,
      "section": "header"
    },
    "id": "f2addd055919b7df2ce2b5caaa76d25c"
  },
  {
    "text": "(in-package :quiz)\n\n(defparameter *vocab-pathname*\n  (make-pathname\n   :type nil :name nil :defaults (merge-pathnames \"../../sanskrit/vocab/\" (glisp:source-pathname))))\n",
    "metadata": {
      "source": "gornschool-training/quiz/source/defparameters.lisp",
      "file_name": "defparameters.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "general",
      "chunk_id": 0,
      "section": "header"
    },
    "id": "636437870c5adaeace32e58f54dc1d5a"
  },
  {
    "text": "(in-package :gdl-user)\n\n(gwl:define-package :training-common\n    (:export #:*home*\n             #:*initializers*\n             #:initialize-all\n             #:base-site-mixin\n             #:repl-example\n\t     #:code-example\n\t     #:index-page\n\t     #:base-training-sheet\n\t     #:base-tutorial-sheet))\n\n\n(load (compile-file (merge-pathnames \"../../t6/resources/source/gwl-patches.lisp\" (glisp:source-pathname))))\n",
    "metadata": {
      "source": "gornschool-training/common/source/package.lisp",
      "file_name": "package.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "general",
      "chunk_id": 0,
      "section": "header"
    },
    "id": "5e3ba23698f4d781b4ac5886d657cbc2"
  },
  {
    "text": "(in-package :gwl)\n\n\n(defvar *snap-home* nil)\n\n\n",
    "metadata": {
      "source": "gornschool-training/common/source/patches.lisp",
      "file_name": "patches.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "general",
      "chunk_id": 0,
      "section": "header"
    },
    "id": "c021cccde18e0c7edb86559d05967989"
  },
  {
    "text": "(defun find-lost-session (req ent &key (snap-home *snap-home*))\n  (let (url)\n    (with-http-response (req ent) (setq url (lost-session-finder req :snap-home snap-home)))\n    (if url (with-http-response (req ent :response *response-found*)\n              (setf (reply-header-slot-value req :cache-control) \"no-cache\")\n              (setf (reply-header-slot-value req :pragma) \"no-cache\")\n              (setf (reply-header-slot-value req :location) (format nil \"~a\" url))\n              (setf (reply-header-slot-value req :response) *response-found*)\n              (with-http-body (req ent)))\n        (with-http-response (req ent)\n          (with-http-body (req ent)\n            (format *html-stream* \"Sorry, session was not found.~%\"))))))\n\n\n",
    "metadata": {
      "source": "gornschool-training/common/source/patches.lisp",
      "file_name": "patches.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "general",
      "chunk_id": 0,
      "section": "find-lost-session"
    },
    "id": "c021cccde18e0c7edb86559d05967989"
  },
  {
    "text": "(defun  lost-session-finder (req &key (snap-home *snap-home*))\n  (let* ((components (glisp:split-regexp \"/\" (uri-path (request-uri req))))\n         (root-path (gwl::compute-root-path (reverse (rest (rest (rest components))))))\n         (session-id (nth (1+ (position \"sessions\" components :test #'string-equal)) components))\n         (new-session (restore-session! session-id :snap-home snap-home)))\n    (if new-session (theo new-session (follow-root-path root-path) url))))\n\n",
    "metadata": {
      "source": "gornschool-training/common/source/patches.lisp",
      "file_name": "patches.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "general",
      "chunk_id": 1,
      "section": "lost-session-finder"
    },
    "id": "54a70d5d3fbc53e36bb1cc262cb4121c"
  },
  {
    "text": "(defun restore-session! (session-id &key (snap-home *snap-home*))\n  (when snap-home\n    (let ((filename (merge-pathnames (format nil \"~a.snap\" session-id) snap-home)))\n      (when (probe-file filename)\n        (read-snapshot :filename filename)))))\n\n",
    "metadata": {
      "source": "gornschool-training/common/source/patches.lisp",
      "file_name": "patches.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "general",
      "chunk_id": 2,
      "section": "restore-session!"
    },
    "id": "fa546e7d4eb1218dcbf15876abf2f6ad"
  },
  {
    "text": "(defun write-snap (self &key (snap-home *snap-home*))\n  (when snap-home\n    (let ((filename (merge-pathnames (format nil \"~a.snap\" (the instance-id)) snap-home)))\n      (the root (write-snapshot :filename filename)))))\n\n\n;; FLAG -make this work only for requests from the local machine.\n;;\n#+nil\n",
    "metadata": {
      "source": "gornschool-training/common/source/patches.lisp",
      "file_name": "patches.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "general",
      "chunk_id": 3,
      "section": "write-snap"
    },
    "id": "912d0693c256b8387b58273cdebfda45"
  },
  {
    "text": "(defun activate-poison-pill ()\n  (publish :path \"/terminate-code-108\"\n           :function #'(lambda(req ent)\n                         (bt:make-thread #'(lambda()\n                                             (sleep 5) (net.aserve:shutdown)\n                                             #+ccl (ccl:quit)\n                                             #+allegro (excl:exit 0 :no-unwind t)\n                                             #-(or ccl allegro) (error \"Need quit function for ~a.~%\" (lisp-implementation-type)))\n                                         :name \"terminate-code-108\")\n                         (with-http-response (req ent)\n                           (with-http-body (req ent)\n                             (format *html-stream* \"Terminating in five seconds...\"))))))\n\n\n",
    "metadata": {
      "source": "gornschool-training/common/source/patches.lisp",
      "file_name": "patches.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "general",
      "chunk_id": 4,
      "section": "activate-poison-pill"
    },
    "id": "fd768bc3d1d703855c2b11022fc2e0ea"
  },
  {
    "text": "(defun clear-all-instances ()\n  \"Void. Clears all instances from GWL's master table of root-level instances.\nThe instance IDs are the numbers you see in published GWL URIs, and are available\nas the \\\"instance-id\\\" message within each GWL object which inherit from base-html-sheet.\n\nClearing all the instances makes available for garbage collection all memory used by\nthe object hierarchies rooted at the instances, as well as all associated published URIs.\n\n:example <pre>\n  (clear-all-instance)\n  </pre>\"\n  (maphash #'(lambda(key val)\n               (declare (ignore val))\n               (unless (member key gwl::*keys-to-preserve*)\n                 (clear-instance key))) *instance-hash-table*)\n  \n  (maphash #'(lambda(key val)\n               (declare (ignore val))\n               (unless (member key gwl::*keys-to-preserve*)\n                 (gwl::unpublish-instance-urls key))) *url-hash-table*))\n",
    "metadata": {
      "source": "gornschool-training/common/source/patches.lisp",
      "file_name": "patches.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "general",
      "chunk_id": 5,
      "section": "clear-all-instances"
    },
    "id": "a16ea5f498ceae08a9ee1cacb23aac1d"
  },
  {
    "text": "(define-object-amendment base-html-sheet ()\n  :computed-slots\n  ((compute-urls (let ((url-base (format nil \"~{~(~a~)~^/~}\"\n\t\t\t\t\t (mapcar #'(lambda(component)\n\t\t\t\t\t\t     (if (listp component)\n\t\t\t\t\t\t\t (format nil \"~a/~a\" (first component) (second component))\n\t\t\t\t\t\t\t component))\n\t\t\t\t\t\t (reverse (the root-path))))))\n\t\t   (append (mapcar #'(lambda(extension)\n\t\t\t\t       (string-append url-base (if (zerop (length url-base)) \"\" \"/\")  extension))\n\t\t\t\t   (the url-extensions))\n\t\t\t   (list url-base (the descriptive-url)))))))\n\n;;\n;; FLAG -- merge with  GDL 1598 \n;;\n\n(#+allegro excl:without-package-locks #-allegro progn\n (#+allegro excl:without-redefinition-warnings #-allegro progn\n  ",
    "metadata": {
      "source": "gornschool-training/common/source/patches.lisp",
      "file_name": "patches.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "general",
      "chunk_id": 6,
      "section": "base-html-sheet"
    },
    "id": "3ba92900895a967e72ab1bfc81080daf"
  },
  {
    "text": "(defun crawl-anchor (anchor host port output-root visited-urls)\n    (let ((uri (net.uri:parse-uri (getf (rest (first anchor)) :href))))\n      (let ((scheme (net.uri:uri-scheme uri))\n\t    (uri-host (net.uri:uri-host uri))\n\t    (uri-port (net.uri:uri-port uri))\n\t    (path (net.uri:uri-path uri)))\n        (unless (or (null path) ;; empty path - likely hash mark anchor.\n                    (not (string-equal (pathname-type path) \"html\")) ;; punt on non-html urls\n\t\t    scheme uri-host uri-port ;; this is external - don't crawl.\n\t\t    (gethash path visited-urls)) ;; already crawled - don't crawl\n\t  (crawl-url path host port output-root visited-urls)))))))\n\n\n",
    "metadata": {
      "source": "gornschool-training/common/source/patches.lisp",
      "file_name": "patches.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "general",
      "chunk_id": 7,
      "section": "crawl-anchor"
    },
    "id": "8f5f45d05ad4d1a193303e9b478673a7"
  },
  {
    "text": "(defun publish-gwl-app (path string-or-symbol &key publish-args make-object-args host headers (server *http-server*))\n  \"Void. Publishes an application, optionally with some initial arguments to be passed in as input-slots.\n\n:arguments (path \\\"String. The URL pathname component to be published.\\\"\n            string-or-symbol \\\"String or symbol. The object type to insantiate.\\\")\n\n:&key (make-object-args \\\"Plist. Extra arguments to pass to make-object.\\\")\n\"\n\n  (apply #'publish\n\t :path path\n\t :server server\n         :host host\n         :headers headers\n\t :function #'(lambda(req ent)\n\t\t       (gwl-make-object req ent \n\t\t\t\t\t(format nil (if (stringp string-or-symbol) \"~a\" \"~s\")\n\t\t\t\t\t\tstring-or-symbol)\n\t\t\t\t\t:make-object-args make-object-args))\n\t publish-args))\n\n\n\n\n",
    "metadata": {
      "source": "gornschool-training/common/source/patches.lisp",
      "file_name": "patches.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "general",
      "chunk_id": 8,
      "section": "publish-gwl-app"
    },
    "id": "c8ffb8130b9d8f7a549789c48e91ed55"
  },
  {
    "text": "(define-object-amendment skeleton-form-control ()\n  :input-slots\n  ((required? nil) (autocomplete nil)))\n\n\n",
    "metadata": {
      "source": "gornschool-training/common/source/patches.lisp",
      "file_name": "patches.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "general",
      "chunk_id": 9,
      "section": "skeleton-form-control"
    },
    "id": "134354a876c7f0c1bd6580e7da42eb94"
  },
  {
    "text": "(defmacro with-expanded-html-output ((var &key stream prologue) &body body)\n  (let ((new-body\n          (mapcar #'(lambda(form)\n                      (cond ((and (listp form)\n                                  (listp (first form))\n                                  (member (first (first form)) '(:input :select :textarea :button)))\n                             (cons (append (first form)\n                                           `(:required\n                                             (the required?)\n                                             :autocomplete (the autocomplete)\n\n\n                                             :disabled \n                                             (if (the disabled?) t nil)\n                                             ;;\n                                             ;; The new HTML5 stuff:\n                                             ;;\n                                             :placeholder (the placeholder)\n                                            \n                                            \n                                             :class (the class)\n                                             :readonly (if (the readonly?) t nil)\n                                             :ismap (if (the ismap?) t nil)\n                                             :size  (the size)\n                                             :maxlength (the maxlength)\n                                             :src (the src)\n                                             :alt (the alt)\n                                             :usemap (the usemap)\n                                             :tabindex (the tabindex)\n                                             :accesskey (the accesskey)\n                                             :onfocus (the onfocus)\n                                             :onblur (the onblur)\n                                             :onselect (the onselect)\n                                             :onchange (the onchange)\n                                             :ondblclick (the ondblclick)\n                                             :onclick (the onclick)\n                                             :onmousedown (the onmousedown)\n                                             :onmouseup (the onmouseup)\n                                             :onmouseover (the onmouseover)\n                                             :onmousemove (the onmousemove)\n                                             :onmouseout (the onmouseout)\n                                             :onkeypress (the onkeypress)\n                                             :onkeydown (the onkeydown)\n                                             :onkeyup (the onkeyup)\n                                             :accept (the accept)\n                                             :lang (the lang)\n                                             :title (the title)\n                                             :style (the style)\n                                             :align (the align)))\n                                   (rest form)))\n                            (t form))) body)))\n    `(with-html-output (,var ,stream :prologue ,prologue :indent :indent)\n       ,@new-body)))\n\n\n\n;;\n;; Just to add the max-id-value input\n;;\n",
    "metadata": {
      "source": "gornschool-training/common/source/patches.lisp",
      "file_name": "patches.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "general",
      "chunk_id": 10,
      "section": "with-expanded-html-output"
    },
    "id": "cae48c17192726bcaa31e9850434d3fb"
  },
  {
    "text": "(defun %gwl-make-object% (part &key make-object-args share? skin (max-id-value 9999999999999999999999999))\n  (let* ((instance-id (if share? \"share\" (make-new-instance-id :max-value max-id-value)))\n         (current (gethash (make-keyword-sensitive instance-id) *instance-hash-table*))\n         (skin (if skin (make-instance skin) t))\n         (root-part-and-version \n          (if (or (not share?) (not current))\n              (list (apply #'make-object (read-safe-string part)\n                           :instance-id instance-id\n                           make-object-args) *dummy-version*) current)))\n    (setf (gethash (first root-part-and-version) *weak-objects*) t)\n    (setq root-part-and-version (append root-part-and-version (list skin)))\n    (when (or (not share?) (not current))\n      (setf (gethash (make-keyword-sensitive instance-id) *instance-hash-table*) root-part-and-version))\n    (first root-part-and-version)))\n\n\n\n(defparameter *user-name* nil)\n\n\n",
    "metadata": {
      "source": "gornschool-training/common/source/patches.lisp",
      "file_name": "patches.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "general",
      "chunk_id": 11,
      "section": "%gwl-make-object%"
    },
    "id": "4e46d1804582043570e0f3f8708fca8a"
  },
  {
    "text": "(defun set-user-name ()\n  (setq *user-name*\n\t#+linux\n        (multiple-value-bind (name error code)\n            (uiop:run-program (format nil \"id -nu ~a\" (glisp:getuid))\n                              :output :string\n                              :ignore-error-status t\n                              :error-output :string)\n          (if (zerop code) (glisp:replace-regexp name \"\\\\s\" \"\")\n              (error \"setting username resulted in code ~a with error: ~a~%\" code error)))\n\t#+windows\n\t(lastcar (pathname-directory (user-homedir-pathname))))\n  *user-name*)\n\n\n",
    "metadata": {
      "source": "gornschool-training/common/source/patches.lisp",
      "file_name": "patches.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "general",
      "chunk_id": 12,
      "section": "set-user-name"
    },
    "id": "5fdbab5c51b056d1708f34e9148341ae"
  },
  {
    "text": "(defun publish-sessions-catchall (&key (server *https-server*) host snap-home)\n  (publish-prefix  :server server :host host :prefix \"/sessions\"\n                   :function #'(lambda(req ent) (find-lost-session  req ent :snap-home snap-home))))\n\n",
    "metadata": {
      "source": "gornschool-training/common/source/patches.lisp",
      "file_name": "patches.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "general",
      "chunk_id": 13,
      "section": "publish-sessions-catchall"
    },
    "id": "182150d450282bbd386300809f4b96f0"
  },
  {
    "text": "(defun publish-http-catchall (&key (server *http-server*) host)\n  \"Redirect all requests to the equivalent request on the *https-server*\"\n  (publish-prefix :server server :prefix \"/\"\n                  :host host\n                  :function #'(lambda(req ent) (redirect-to-https req ent))))\n\n",
    "metadata": {
      "source": "gornschool-training/common/source/patches.lisp",
      "file_name": "patches.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "general",
      "chunk_id": 14,
      "section": "publish-http-catchall"
    },
    "id": "612cfda262b1c32cb835abd690507061"
  },
  {
    "text": "(defun redirect-to-https (req ent)\n  (let ((https-host-port (or (uiop:getenv \"HTTPS_HOST_PORT\") *https-port*)))\n    (unless (and *https-server* https-host-port)\n      (error \"redirect-to-https: *https-server* and environment HTTPS_HOST_PORT must be set\"))\n    (let* ((port (let ((try (parse-integer (format nil \"~a\" https-host-port))))\n                   (unless (= try 443) try)))\n           (scheme \"https\")\n           (uri (slot-value req 'uri))\n           (host (uri-host uri))\n           (path (uri-path uri)))\n      (with-http-response (req ent :response *response-found*)\n        (setf (reply-header-slot-value req :cache-control) \"no-cache\")\n        (setf (reply-header-slot-value req :pragma) \"no-cache\")\n        (let ((target (format nil \"~a://~a~a~a\"\n                              scheme host (if port (format nil \":~a\" port) \"\") path)))\n          (format t \"Redirecting to: ~a~%\" target)\n          (setf (reply-header-slot-value req :location) target))\n        (with-http-body (req ent))))))\n\n\n\n",
    "metadata": {
      "source": "gornschool-training/common/source/patches.lisp",
      "file_name": "patches.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "general",
      "chunk_id": 15,
      "section": "redirect-to-https"
    },
    "id": "69ac79f874f018a4b9437479fbd08e4a"
  },
  {
    "text": "(in-package :training-common)\n\n\n;;\n;; \n;; command-no-prefix  -- class name listed here for purgeCSS to keep it in our CSS.\n;;\n\n",
    "metadata": {
      "source": "gornschool-training/common/source/repl-example.lisp",
      "file_name": "repl-example.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "general",
      "chunk_id": 0,
      "section": "header"
    },
    "id": "1f9e892934ea02d915a72e923f48642f"
  },
  {
    "text": "(defun repl-example (command-and-output &key (class \"repl-example\"))\n  (with-cl-who-string()\n    ((:div :class class)\n     (:pre (dolist (plis command-and-output)\n             (destructuring-bind (&key prompt comment command output error) plis\n\t       (let ((prompt (if prompt (string-append prompt \"&nbsp;\") \"GDL-USER>&nbsp;\"))\n\t\t     (out (if (stringp output) (glisp::replace-regexp output \"<\" \"&#60;\") output))\n\t\t     (cmt (if (stringp comment) (glisp::replace-regexp comment \"<\" \"&#60;\") comment))\n\t\t     (err (if (stringp error) (glisp::replace-regexp error \"<\" \"&#60;\") error)))\n\t         (when cmt (htm ((:span :class \"comment\") (str cmt))))\n                 (when command (if (listp command)\n                                   (let ((prefix t))\n                                     (dolist (string command)\n                                       (htm (str (indented-html string :class \"command\" :prefix prefix :prompt prompt)))\n                                       (setq prefix nil)))\n                                   (htm  ((:p :style \"display: inline;\")\n\t\t\t\t          ((:span :class \"prompt\" :style \"display: inline;\") (str prompt))\n\t\t\t\t          ((:span :class \"command\" :style \"display: inline;\") (str command))))))\n\t         (when out  (if (listp out) (dolist (str out) (htm ((:span :class \"output\") (str (glisp::replace-regexp str \"<\" \"&#60;\")))))\n\t\t\t        (htm ((:span :class \"output\") (str out)))))\n\t         (when err (htm ((:span :class \"error\") (str err)))))))))))\n\n\n\n",
    "metadata": {
      "source": "gornschool-training/common/source/repl-example.lisp",
      "file_name": "repl-example.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "general",
      "chunk_id": 0,
      "section": "repl-example"
    },
    "id": "1f9e892934ea02d915a72e923f48642f"
  },
  {
    "text": "(in-package :training-common)\n\n",
    "metadata": {
      "source": "gornschool-training/common/source/base-site-mixin.lisp",
      "file_name": "base-site-mixin.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "general",
      "chunk_id": 0,
      "section": "header"
    },
    "id": "10be3e28f16668d8b088b22759b0023b"
  },
  {
    "text": "(define-object base-site-mixin (base-html-page)\n\n  :input-slots\n  ((title \"The Gorn School\")\n   (body-content nil) (page-header nil)\n   (dont-write-snap (not (search \"sessions\" (the url))))\n   ;;(dont-write-snap t)\n   )\n  \n  :computed-slots\n  ((additional-header-content (with-lhtml-string ()\n                                (:meta :name \"viewport\"\n                                       :content \"width=device-width, initial-scale=1.0\")\n                                (:link :rel \"stylesheet\" :href \"/css/training-style.css\")))\n\n   (favicon-type \"image/png\")(favicon-path \"/gorn.png\")\n   (include-default-favicon? nil)\n\n   (body (with-lhtml-string()\n\t   (when gwl:*developing?* (str (the development-links)))\n\t   (:div :class \"container mx-auto\"\n\t\t (:div :class \"main-page-item\"\n                       (:div :class \"mt-1 ml-2 mr-5\"\n                             (str (the page-header))\n                             (str (the body-content))))))))\n\n  :functions\n  (;;\n   ;; FLAG - style this a bit differently if the section is open vs closed. \n   ;;\n   (hint-button\n    (&key function-key arguments)\n    (with-lhtml-string ()\n      ((:div :class \"flex space-y-2\")\n       (:input :type :button :class \"gs-button-blue\" :name \"Hint\" :value \"Hint\"\n\t       :onclick (the (gdl-ajax-call :bashee (the) ;; FLAG why is this needed?\n\t\t\t\t\t    :function-key function-key\n                                            :arguments arguments))))))\n   (after-present! () (unless (the dont-write-snap)\n\t\t\t(gwl::write-snap self :snap-home gwl::*snap-home*)))))\n\n\n   \n\n\n\n",
    "metadata": {
      "source": "gornschool-training/common/source/base-site-mixin.lisp",
      "file_name": "base-site-mixin.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "general",
      "chunk_id": 0,
      "section": "base-site-mixin"
    },
    "id": "10be3e28f16668d8b088b22759b0023b"
  },
  {
    "text": "(in-package :training-common)\n\n",
    "metadata": {
      "source": "gornschool-training/common/source/index-page.lisp",
      "file_name": "index-page.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "general",
      "chunk_id": 0,
      "section": "header"
    },
    "id": "6d4366b5fce01c8358eda872c691863a"
  },
  {
    "text": "(define-object index-page (base-ajax-sheet)\n  :input-slots\n  (index-list-hash page-title page)\n\n  :computed-slots\n  ((index-words nil)\n   (additional-header-content (with-cl-who-string()\n\t\t\t\t((:link :rel \"stylesheet\" :href \"/tw-css-build/training-style-tw.css\"))\n\t\t\t\t(:title (str (the page-title)))))\n   (index-list (let ((res nil)\n\t\t     (specials (list \"*\" \"+\" \"-\" \"/\" \"'\" \"\\<\" \"\\<=\" \"=\" \">\" \">=\" \"~a\" \"~f\" \"~d\" \"~r\" \"~p\" \"~$\" \"~{ ~}\" \"~[ ~]\" \"~( ~)\")))\n\t\t (maphash  #'(lambda(k v) (setq res (append res (let* ((key (glisp::replace-regexp (string-downcase k) \":|&\" \"\"))\n\t\t\t\t\t\t\t\t       (index (if (member key specials :test 'string-equal)\n\t\t\t\t\t\t\t\t\t\t  \"Special Characters\"\n\t\t\t\t\t\t\t\t\t\t  (string-upcase (aref key 0)))))\n\t\t\t\t\t\t\t\t  (list (list :key key\n\t\t\t\t\t\t\t\t\t      :index index\n\t\t\t\t\t\t\t\t\t      :word k\n\t\t\t\t\t\t\t\t\t      :links v)))))) (the index-list-hash))\n\t\t (safe-sort res\n\t\t\t    #'string<\n\t\t\t    :key #'(lambda(a) (getf a :key)))))\n\t\t\t     \n   (main-sheet-body (with-cl-who-string()\n\t\t      (when gwl:*developing?* (str (the development-links)))\n\t\t      (:h2 (str (the page-title)))\n\t\t      \n\t\t      ((:a :href (the root url)) \"Home\")\n\t\t      (str (the index-items main-div)))))\n\n  :objects\n  ((index-select-fc :type 'menu-form-control\n\t\t    :size (length (the-child choice-list))\n\t\t    :choice-list (list \"Special Characters\" \"A\" \" B\" \"C\" \"D\" \"E\" \"F\" \"G\" \"H\" \"I\" \"J\" \"K\" \"L\" \"M\" \"N\" \"O\" \"P\" \"Q\" \"R\" \"S\" \"T\" \"U\" \"V\" \"W\" \"X\" \"Y\" \"Z\" \"All Index\")\n\t\t    :default \"Special Characters\"\n\t\t    :ajax-submit-on-change? t)\n\n   (index-items :type 'index-items\n\t\n\t\t:menu-fc (the index-select-fc)\n\t\t:index-value (the index-select-fc value)\n\t\t:index-list (the index-list))))\n\n\n",
    "metadata": {
      "source": "gornschool-training/common/source/index-page.lisp",
      "file_name": "index-page.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "general",
      "chunk_id": 0,
      "section": "index-page"
    },
    "id": "6d4366b5fce01c8358eda872c691863a"
  },
  {
    "text": "(define-object index-items (sheet-section)\n  :input-slots\n  (index-value\n   index-list\n   menu-fc)\n\n  :computed-slots\n  ((inner-html (with-cl-who-string ()\n\t\t ((:div :class \"main-page-container\")\n\t\t  ((:div :class \"main-page-item\")\n\t\t   (str (theo (the menu-fc) form-control)))\n\t\t  ((:div :class \"main-page-item\")\n\t\t   (:table (let ((index (the index-value))\n\t\t\t\t (index-values nil))\n\t\t\t     (dolist (lis (the index-list))\n\t\t\t       (let ((index-val (getf lis :index)))\n\t\t\t\t (when (or (string-equal index \"All Index\")\n\t\t\t\t\t   (string-equal index index-val))\n\t\t\t\t   (setq index-values T)\n\t\t\t\t   (let ((links (getf lis :links)))\n\t\t\t\t     (htm (:tr \n\t\t\t\t\t   (:td (str (getf lis :word)))\n\t\t\t\t\t   (:td (str (car (getf lis :links)))))\n\t\t\t\t\t  (if (> (length links) 1)\n\t\t\t\t\t      (dolist (link (cdr links))\n\t\t\t\t\t\t(htm (:tr (:td)\n\t\t\t\t\t\t\t  (:td (str link)))))))))))\n\t\t\t     (unless index-values (htm (:tr (:td \"No content for this value\"))))))))))))\n",
    "metadata": {
      "source": "gornschool-training/common/source/index-page.lisp",
      "file_name": "index-page.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "general",
      "chunk_id": 1,
      "section": "index-items"
    },
    "id": "edfb3800bc51d0b4b5ddfa30d2c02079"
  },
  {
    "text": "(in-package :training-common)\n\n\n",
    "metadata": {
      "source": "gornschool-training/common/source/base-tutorial-sheet.lisp",
      "file_name": "base-tutorial-sheet.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "general",
      "chunk_id": 0,
      "section": "header"
    },
    "id": "c66d9e336a386a830143c1331b1175ae"
  },
  {
    "text": "(define-object base-tutorial-sheet (base-site-mixin)\n\n  :documentation\n  (:author \"Mike Twelves\"  :description \"Mixin to be used for tutorial assembly. Assumes all child\nobjects are tutorial topics with the exception of the index\npage, and that each topic has a page number\")\n  \n  :input-slots\n  (tutorial-index\n   tutorial-name\n   previous-page\n   next-page)\n\n\n  :computed-slots\n  ((title (the tutorial-name))  ;; for standard inclusion of title in header by base-ajax-sheet.\n\n   (introduction nil)\n\n   (page-header (with-lhtml-string ()\n                  (:h2 :class \"text-red-900\"  \"Tutorial: \" (str (the tutorial-name)))\n                  (when (the previous-page)\n                    (htm (:a :class \"text-red-500\" :href (the previous-page url) \"<-Previous\")))\n                  \" | \"\n                  (when (the parent)\n                    (htm  (:a :class \"text-neutral-800\" :href (the parent url) \"^UP^\")))\n                  \" | \"\n                  (when (the next-page)\n                    (htm  (:a :class \"text-green-500\" :href (the next-page url) \"Next->\")))))\n   \n   \n   \n   (body-content (with-lhtml-string ()\n\t\t   (when (the introduction) (str (the introduction)))\n                   ((:div :class \"pl-5\")\n                    ((:ol :class \"list-decimal\")\n\t\t     (dolist (plis (the page-objects))\n\t\t       (htm (:li ((:a :href (getf plis :url)) (str (getf plis :title))) (:br))))))))\n\n   (page-objects (safe-sort\n\t\t  (remove nil (mapcar #'(lambda(obj)\n                                          (when (theo obj page)\n                                            (list :object obj :page (theo obj page) :index-words (theo obj index-words)\n                                                  :title (theo obj page-title) :url (theo obj url))))\n                                      (remove-if-not #'(lambda(child)(or (typep child 'base-training-sheet)\n                                                                         (typep child 'index-page)))\n                                                     (the children)))) #'< :key #'(lambda(a) (getf a :page))))\n\n   (index-list-hash (let ((hash (make-hash-table :test #'equalp)))\n\t\t      (dolist (page (the page-objects) hash)\n                        (destructuring-bind (&key url title index-words &allow-other-keys) page\n                          (let ((link (with-lhtml-string () ((:a :href url) (str title)))))\n\t\t            (dolist (word index-words)\n\t\t              (setf (gethash word hash) (append (gethash word hash) (list link))))))))))\n\n  :objects\n  ((index-page :type 'index-page :pass-down (index-list-hash) :page 99 :page-title \"Index\")))\n\n\n\n",
    "metadata": {
      "source": "gornschool-training/common/source/base-tutorial-sheet.lisp",
      "file_name": "base-tutorial-sheet.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "general",
      "chunk_id": 0,
      "section": "base-tutorial-sheet"
    },
    "id": "c66d9e336a386a830143c1331b1175ae"
  },
  {
    "text": "(in-package :training-common)\n\n",
    "metadata": {
      "source": "gornschool-training/common/source/code-example.lisp",
      "file_name": "code-example.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "general",
      "chunk_id": 0,
      "section": "header"
    },
    "id": "76c7969c2c192ef94181af20fdcbe57e"
  },
  {
    "text": "(defun code-example (code-strings &key (class \"code-example\"))\n  (with-cl-who-string()\n    ((:div :class class)\n     (:pre (dolist (code-str code-strings)\n\t     (htm (str (indented-html code-str ))))))))\n\n\n#+nil\n(let* ((str-len (length code-str))\n\t      (trimmed-str (glisp::replace-regexp code-str \"^[ /t]+\" \"\"))\n\t      (trimmed-str-len (length trimmed-str))\n\t      (spaces (- str-len trimmed-str-len))\n\t      (style (format nil \"margin-left: ~apx;\" (* spaces 7))))\n\t (htm ((:span :class \"code\" :style style) (str trimmed-str))))\n\n",
    "metadata": {
      "source": "gornschool-training/common/source/code-example.lisp",
      "file_name": "code-example.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "general",
      "chunk_id": 0,
      "section": "code-example"
    },
    "id": "76c7969c2c192ef94181af20fdcbe57e"
  },
  {
    "text": "(defun indented-html (code-str &key (class \"code\") (prefix nil) (prompt \"GDL-USER> \"))\n  (with-cl-who-string()\n    (let* ((str-len (length code-str))\n\t   (trimmed-str (glisp::replace-regexp code-str \"^[ \\\\t]+\" \"\"))\n\t   (trimmed-str-len (length trimmed-str))\n\t   (class-val (cond ((string-equal class \"code\")\n\t\t\t\t  (if (glisp::match-regexp \"^;\" trimmed-str) \"code-comment\" \"code\"))\n\t\t\t    ((not prefix) (format nil \"~a-no-prefix\" class))\n\t\t\t    (T class)))\n\t   (offset (if (or (string-equal class \"code\") prefix) 0 9))\n\t   (spaces (- str-len trimmed-str-len))\n\t   (style (format nil \"margin-left: ~apx;\" (+ (* offset 7) (* spaces 7)))))\n      (when prefix\n\t(htm ((:span :class \"prompt\" :style \"display: inline;\") (str (string-append prompt \"&nbsp;\")))))\n      (htm ((:span :class class-val :style style) (str trimmed-str))))))\n",
    "metadata": {
      "source": "gornschool-training/common/source/code-example.lisp",
      "file_name": "code-example.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "general",
      "chunk_id": 1,
      "section": "indented-html"
    },
    "id": "bf4fefb64f399c3714a1d06581b562a8"
  },
  {
    "text": "(in-package :training-common)\n\n(defparameter *publish-prefix* \"common\")\n(defparameter *initializers* nil)\n\n\n(defparameter *home*\n  (merge-pathnames \"../../\" (make-pathname :name nil :type nil :defaults (glisp:source-pathname))))\n\n\n",
    "metadata": {
      "source": "gornschool-training/common/source/publish.lisp",
      "file_name": "publish.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "general",
      "chunk_id": 0,
      "section": "header"
    },
    "id": "201e8e94f38705c4044b9b5d7dfaef68"
  },
  {
    "text": "(defun set-snap-home (user-name)\n  (setq gwl::*snap-home*\n        (ensure-directories-exist\n         (merge-pathnames \"tutorial-sessions/\"\n                          (if user-name\n                              #+linux\n                              (merge-pathnames (format nil \"~a/\" user-name) \"/home/\")\n                              #-linux\n                              (user-homedir-pathname)\n                              (user-homedir-pathname))))))\n\n\n",
    "metadata": {
      "source": "gornschool-training/common/source/publish.lisp",
      "file_name": "publish.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "general",
      "chunk_id": 0,
      "section": "set-snap-home"
    },
    "id": "201e8e94f38705c4044b9b5d7dfaef68"
  },
  {
    "text": "(defun initialize ()\n\n\n  (setq gwl:*bypass-security-check?* t)\n\n  (let ((user-name (when (glisp:featurep :linux) (gwl::set-user-name)))) (set-snap-home user-name))\n\n  (unless (probe-file *home*) (error \"Common home not found at ~A,\nplease arrange to have it set properly before calling ~s.\" *home* 'initialize))\n\n\n  (let ((hostname (uiop:hostname))\n        (https-server *https-server*)\n        (http-server *http-server*))\n\n \n    (unless http-server (error \"No *http-server* found in training-common::initialize.\nYou may want to do `(gdl::initialize)` or `(gdl:start-gdl!)` before loading this code.~%\"))\n    \n    \n    (gwl::publish-http-catchall :server *http-server*)\n    \n    (unless https-server (error \"No *https-server* found in training-common::initialize.\nYou may want to do `(gdl::initialize)` or `(gdl:start-gdl!)` before loading this code.~%\"))\n\n\n    (setq *start-https?* t)(setq *start-http?* t)\n    \n    (dolist (host (if (string-equal hostname \"gornschool.com\")\n                      (list hostname (format nil \"www.~a\" hostname)\n                            \"localhost\" \"127.0.0.1\"\n                            \"school.genworks.com\" \"school.gen.works\")\n                      (list nil)))\n      \n      (let ((server https-server)) ;;with-all-servers (server)\n\n        \n        \n        ;; a cute favicon (need to get it designed).\n        (publish-file :path \"/gorn.png\" :server server :host host  :content-type \"image/png\"\n                      :file (namestring\n                             (merge-pathnames \"images/gorn-icon.png\" *home*)))\n\n        ;; the email gateway\n        (publish-gwl-app \"/\" \"email-gateway:assembly\" :server server :host host)\n\n        ;;\n        ;; site-specific GWL config:\n        ;;\n\n        (gwl::publish-sessions-catchall :server server :host host :snap-home gwl::*snap-home*)\n\n\n        ;;\n        ;; And now the Application-level publishings\n        ;;\n        (publish-gwl-app \"/gendl-self-start-backdoor\" \"training-home:assembly\" :server server :host host)\n\n        (publish-shared \"training-home:assembly\" :path \"/shared\" :server server :host host)\n\n        (publish-file :server server :host host\n                      :path \"/css/training-style.css\"\n                      :file (namestring (merge-pathnames \"css/training-style.css\" *home*)))\n\n\n        (let ((common-images (merge-pathnames \"images/\" *home*)))\n          (print-variables common-images)\n          (publish-directory :server server :host host\n                             :prefix \"/common-images/\"\n                             :destination (namestring common-images)))\n\n        (mapc #'(lambda (publish-prefix object-type-string)\n                  (format t \"** Publishing an App as follows:~%~%\")\n                  (let ((path (format nil \"/~a-backdoor\" publish-prefix)))\n                    (print-variables server host path)\n                    (publish-gwl-app  path object-type-string :server server :host host))\n                  ;;\n                  ;; FLAG -- the below function is a mess because of mismatches between stored file paths and published prefixes. Fix it.\n                  ;;\n                  (dolist (subdir (list \"images\" \"resources\" \"resources/images\"))\n                    (let ((path (merge-pathnames (format nil \"~a/~a/~a\" publish-prefix subdir (if (string-equal subdir \"resources\") \"source/\" \"\")) *home*)))\n                      (when (probe-file path)\n                        (let ((prefix (if (string-equal subdir \"/resources/images\") \"resource-images\"\n                                          (format nil \"/~a-~a\" publish-prefix subdir))))\n\n                          (format t \"** Publishing a Directory as follows:~%~%\")\n                          (print-variables prefix (namestring path))\n                          (publish-directory :prefix prefix\n                                             :destination (namestring path)\n                                             :server server :host host))))))\n              (list \"home\" \"t1\" \"t2\" \"t3\" \"t4\" \"t5\" \"t6\")\n              (list \"training-home:assembly\" \"training-1:assembly\" \"training-2:assembly\" \"training-3:assembly\"\n                    \"training-4:assembly\" \"training-5:assembly\" \"training-6:assembly\")))))\n\n  (force-output))\n\n\n\n(pushnew 'initialize *initializers*)\n\n",
    "metadata": {
      "source": "gornschool-training/common/source/publish.lisp",
      "file_name": "publish.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "general",
      "chunk_id": 1,
      "section": "initialize"
    },
    "id": "532f49f0a97801468ca3ac3de8d5ef10"
  },
  {
    "text": "(defun initialize-all () (mapc #'funcall (reverse *initializers*)))  ;; reverse is important because the above body must run first to set up e.g. *snap-home*.\n\n\n;; (initialize)\n",
    "metadata": {
      "source": "gornschool-training/common/source/publish.lisp",
      "file_name": "publish.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "general",
      "chunk_id": 2,
      "section": "initialize-all"
    },
    "id": "b7e33078a14746245f77af51c1b2018d"
  },
  {
    "text": "(in-package :training-common)\n\n",
    "metadata": {
      "source": "gornschool-training/common/source/base-training-sheet.lisp",
      "file_name": "base-training-sheet.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "general",
      "chunk_id": 0,
      "section": "header"
    },
    "id": "f8d680295473f71e3fa2fdd441248308"
  },
  {
    "text": "(define-object base-training-sheet (base-site-mixin)\n\n  :input-slots\n  (publish-prefix page page-title page-objects (resources nil) (body-content nil))\n                  \n\n  :computed-slots\n  ((title (the page-title)) ;; for standard inclusion of title in header by base-ajax-sheet.\n\n   (index-words nil)\n\n\n\n   ;;\n   ;; FLAG -- make following 3 generic so they can be in base-site-mixin. \n   ;;\n   (current-page-ind (position (the page) (the page-objects) :key #'(lambda(a) (getf a :page))))\n\n   (next-page (let ((next-index (1+ (the current-page-ind))))\n                (when (< next-index (length (the page-objects)))\n                  (nth next-index (the page-objects)))))\n\n   (previous-page (when (> (the current-page-ind) 0)\n                    (nth (1- (the current-page-ind)) (the page-objects))))\n\n   ;;\n   ;; FLAG make this generic so it can be in base-site-mixin.\n   ;;\n   (page-header (with-lhtml-string ()\n                  (:h2 (str (the page-title)))\n                  (:p\n                   (when (the previous-page) (htm ((:a :class \"text-red-500\" :href (getf (the previous-page) :url)) \"&lt;-Previous\")))\n                   (:span :class \"font-bold\" \" | \")\n                   ((:a :class \"text-blue-500\" :href (the parent url)) \"^UP^\")\n                   (:span :class \"font-bold\" \" | \")\n                   (when (the next-page) (htm ((:a :class \"text-green-500\" :href (getf (the next-page) :url)) \"Next-&gt;\"))))))\n\n\n\n   (resource-links (with-lhtml-string()\n\n\t\t     (:table\n\t\t\t (dolist (resource (the resources))\n\t\t\t   (let* ((fname (if (listp resource) (getf resource :url) resource))\n\t\t\t\t  (href (if (listp resource) fname (format nil \"/~a-resources/~a\" (the publish-prefix) fname)))\n\t\t\t\t  (target (when (listp resource) \"_new\"))\n\t\t\t\t  (ftype (pathname-type fname))\n\t\t\t\t  (label (if (listp resource) (getf resource :title) resource))\n\t\t\t\t  (icon (cond ((string-equal ftype \"html\") \"/common-images/html-file.png\")\n\t\t\t\t\t      ((string-equal ftype \"htm\") \"/common-images/html-file.png\")\n\t\t\t\t\t      ((string-equal ftype \"lisp\") \"/common-images/lisp-file.png\")\n                                              ((string-equal ftype \"gendl\") \"/common-images/lisp-file.png\")\n                                              ((string-equal ftype \"gdl\") \"/common-images/lisp-file.png\")\n\t\t\t\t\t      ((string-equal ftype \"pdf\") \"/common-images/pdf-file.png\")\n\t\t\t\t\t      ((string-equal ftype \"txt\") \"/common-images/txt-file.png\")\n\t\t\t\t\t      ((string-equal ftype \"css\") \"/common-images/css-file.png\")\n\t\t\t\t\t      ((string-equal ftype \"png\") \"/common-images/png-file.png\")\n\t\t\t\t\t      (t nil))))\n\t\t\t     (htm (:tr (when icon\n\t\t\t\t\t (htm (:td ((:a :href href :target target) ((:img :src icon :style \"width: 40px; height: auto;\"))))))\n\t\t\t\t       (:td ((:a :href href :target target) (str label))))))))))))\n\n\n",
    "metadata": {
      "source": "gornschool-training/common/source/base-training-sheet.lisp",
      "file_name": "base-training-sheet.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "general",
      "chunk_id": 0,
      "section": "base-training-sheet"
    },
    "id": "f8d680295473f71e3fa2fdd441248308"
  },
  {
    "text": "(in-package :email-gateway)\n\n(defvar *user-hash* (make-hash-table :size 100 :test 'equalp))\n(defvar *user-hash-path* nil)\n(defvar *robot-log-path* nil)\n\n",
    "metadata": {
      "source": "gornschool-training/email-gateway/source/utilities.lisp",
      "file_name": "utilities.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "general",
      "chunk_id": 0,
      "section": "header"
    },
    "id": "ce9e4a7515e0d7df2e1cf9d8b3c6c0f8"
  },
  {
    "text": "(defun add-user (email-address session-id)\n  (setf (gethash email-address *user-hash*) session-id)\n  (let ((filename *user-hash-path*))\n    (with-open-file (out filename :direction :output :if-exists :supersede :if-does-not-exist :create)\n      (print (list-hash *user-hash*) out))))\n\n",
    "metadata": {
      "source": "gornschool-training/email-gateway/source/utilities.lisp",
      "file_name": "utilities.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "general",
      "chunk_id": 0,
      "section": "add-user"
    },
    "id": "ce9e4a7515e0d7df2e1cf9d8b3c6c0f8"
  },
  {
    "text": "(defun retrieve-object (email-address)\n  (let ((instance-id  (gethash email-address *user-hash*)))\n    (when instance-id\n      ;;\n      ;; FLAG Applicaton name  bleeding through the authemtication process here. Needs to but is there a better way to do this?\n      ;;\n      (let ((object (read-snapshot :filename (merge-pathnames (format nil \"~a.snap\" instance-id) gwl::*snap-home*))))\n        object))))\n\n\n",
    "metadata": {
      "source": "gornschool-training/email-gateway/source/utilities.lisp",
      "file_name": "utilities.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "general",
      "chunk_id": 1,
      "section": "retrieve-object"
    },
    "id": "cc6adafd4a1e34dcd0d8d7b2cf16cc44"
  },
  {
    "text": "(defun restore-saved-users  ()\n  (let ((filename *user-hash-path*))\n    (when (probe-file filename)\n      (with-open-file (in filename)\n        (let ((user-plist (read in))) ;; FLAG -- change strategy if more than 1,0000 users\n          (mapc #'(lambda(key val) (setf (gethash key *user-hash*) val))\n                (plist-keys user-plist) (plist-values user-plist)))))))\n\n",
    "metadata": {
      "source": "gornschool-training/email-gateway/source/utilities.lisp",
      "file_name": "utilities.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "general",
      "chunk_id": 2,
      "section": "restore-saved-users"
    },
    "id": "bcafa1682013d3aad98e88b6729dee90"
  },
  {
    "text": "(defun set-user-hash-path ()\n  (setq *user-hash-path*\n        (ensure-directories-exist\n         (merge-pathnames \"user-hash.sexp\" gwl::*snap-home*))))\n\n",
    "metadata": {
      "source": "gornschool-training/email-gateway/source/utilities.lisp",
      "file_name": "utilities.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "general",
      "chunk_id": 3,
      "section": "set-user-hash-path"
    },
    "id": "52919fe2324026611f9387f29879437d"
  },
  {
    "text": "(defun set-robot-log-path ()\n  (setq *robot-log-path*\n        (ensure-directories-exist\n         (merge-pathnames \"robot-log.sexps\" gwl::*snap-home*))))\n\n\n;;\n;; FLAG Applicaton name  bleeding through the authemtication process here. Needs to but is there a better way to do this?\n;;\n(pushnew 'set-user-hash-path training-common:*initializers*)\n(pushnew 'restore-saved-users training-common:*initializers*)\n(pushnew 'set-robot-log-path training-common:*initializers*)\n",
    "metadata": {
      "source": "gornschool-training/email-gateway/source/utilities.lisp",
      "file_name": "utilities.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "general",
      "chunk_id": 4,
      "section": "set-robot-log-path"
    },
    "id": "7556fe9771172fe9b49774f4673a57d1"
  },
  {
    "text": "(in-package :gdl-user)\n\n(gwl:define-package :email-gateway\n    (:export #:assembly))\n\n\n\n",
    "metadata": {
      "source": "gornschool-training/email-gateway/source/package.lisp",
      "file_name": "package.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "general",
      "chunk_id": 0,
      "section": "header"
    },
    "id": "343476bb376b0fa5cedd40c70549b6aa"
  },
  {
    "text": "(in-package :training-2)\n\n",
    "metadata": {
      "source": "gornschool-training/t2/source/iteration-and-mapping.lisp",
      "file_name": "iteration-and-mapping.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 0,
      "section": "header"
    },
    "id": "f516b21dda38db0cc29c2933f7aa977c"
  },
  {
    "text": "(define-object iteration-and-mapping (base-training-sheet)\n\n  :computed-slots\n  ((index-words (list \"dolist\" \"dotimes\" \"mapcar\" \"mapcan\" \"mapc\" \"lambda function\" \"anonymous function\"))\n   (repl-1 (list (list :command \"(setq a (list 1 2 3 4 5 6))\"\n\t\t       :output \"1 2 3 4 5 6)\")\n\t\t (list :command (list \"(setq b (let ((res nil))\"\n\t\t\t\t      \"                 (dolist (var a res)\"\n\t\t\t\t      \"                    (push (* var 5) res))))\")\n\t\t       :output \"(30 25 20 15 10 5)\")\n\t\t (list :command (list \"(setq b (let ((res nil))\"\n\t\t\t\t      \"                 (dolist (var a (nreverse res))\"\n\t\t\t\t      \"                    (push (* var 5) res))))\")\n\t\t       :output \"(5 10 15 20 25 30)\")))\n\n   (repl-2 (list (list :command (list \"(setq c (let ((len 0))\"\n\t\t\t\t      \"                  (dolist (var a)\"\n\t\t\t\t      \"                     (setf len (+ len 1)))\"\n\t\t\t\t      \"                   len))\")\n\t\t       :output 6)\n\t\t (list :command (list \"(setq c (let ((len 0))\"\n\t\t\t\t      \"                  (dolist (var a)\"\n\t\t\t\t      \"                     (incf len)\"\n\t\t\t\t      \"                  len))\")\n\t\t       :output 6)))\n\n   (repl-3 (list (list :command \"(setq a (list 1 2 3 4 5))\"\n\t\t       :output \"(1 2 3 4 5)\")\n\t\t (list :command \"(setq b (list \\\"a\\\" \\\"b\\\" \\\"c\\\" \\\"d\\\" \\\"e\\\"))\"\n\t\t       :output \"(\\\"a\\\" \\\"b\\\" \\\"c\\\" \\\"d\\\" \\\"e\\\")\")\n\t\t (list :command (list \"(let ((res nil))\"\n\t\t\t\t      \"       (dotimes (n (length a) (nreverse res))\"\n\t\t\t\t      \"         (push (nth n a) res)\"\n\t\t\t\t      \"         (push (nth n b) res)))\")\n\t\t       :output \"(1 \\\"a\\\" 2 \\\"b\\\" 3 \\\"c\\\" 4 \\\"d\\\" 5 \\\"e\\\")\")\n\n\t\t (list :command (list \"(setq b (let ((res nil))\"\n\t\t\t\t      \"               (dotimes (n (length a) (nreverse res))\"\n\t\t\t\t      \"                 (push (* (nth n a) 5) res))))))\")\n\t\t       :output \"(5 10 15 20 25)\")))\n   \n   (body-content (with-cl-who-string()\n\t\t   (:p \"Common Lisp provides a number of iteration and mapping macros and functions which enable us to process the\ncontents of lists, the most commonly used being\"\n\t\t       (:ul (:li \"Iteration - the macros \"\n\t\t\t\t ((:span :class \"macro\")\"dolist\")\" and \"\n\t\t\t\t ((:span :class \"macro\")\"dotimes\"))\n\t\t\t    (:li \"Mapping - the functions \"\n\t\t\t\t ((:span :class \"function\")\"mapcar\")\", \"\n\t\t\t\t ((:span :class \"function\")\"mapcan\")\" and \"\n\t\t\t\t ((:span :class \"function\")\"mapc\")))\n\t\t       \"Common Lisp also defines 2 powerful and more general iteration macros, \"\n\t\t       ((:span :class \"macro\")\"do/do*\")\" and \"\n\t\t       ((:span :class \"macro\")\"loop\")\", but they are outside the scope of this tutorial\")\n\t\t   (:h3 \"Iteration Macros\")\n\t\t   (:ul ((:div :class \"grid-container-2\")\n\t\t\t ((:div :class \"main-page-item\")\n\t\t\t  (:li ((:span :class \"macro\")\"dolist\")\" - takes a list of a \"\n\t\t\t       (:em \"variable\")\" and an \"\n\t\t\t       (:em \"expression\")\" which returns a \"\n\t\t\t       (:em \"list\")\", followed by a \"\n\t\t\t       (:em \"body of expressions\")\". Optionally \"\n\t\t\t       ((:span :class \"macro\")\"dolist\")\n                               \" can take a third element for its list, which is an expression which\nwill be evaluated and its value returned from the \"\n                               (:span :class \"macro\" \"dolist\")\n                               \" expression once the \"\n\t\t\t       ((:span :class \"macro\") \"dolist\") \" iteration has completed. The \"\n\t\t\t       (:em \"body of expressions\") \" is evaluated with the \"\n\t\t\t       (:em \"variable\")\" bound to successive elements in the list.\"\n\t\t\t       (:br) \"The example on the right first sets a return variable  \"\n\t\t\t       (:em \"res\") \" to \"\n                               (:span :class \"value\" \"nil\") \". It then iterates through the list \"\n\t\t\t       (:em \"a\")\", multiplying each value by \"\n                               (:span :class \"value\" \"5\")\n                               \" and pushing the result onto \"\n\t\t\t       (:em \"res\") \". Finally \"\n\t\t\t       (:em \"res\") \" is returned from the \"\n\t\t\t       (:span :class \"macro\" \"dolist\") \" and set to \"\n\t\t\t       (:em \"b\")\".\"\n\t\t\t       (:br) \"If you wanted to return the resultant list values in the same order as they\noccur in the input list, you would need to wrap the dolist return value \"\n\t\t\t       (:em \"res\")\" in a call to the function \"\n\t\t\t       ((:span :class \"function\")\"reverse\") \". But because \"\n\t\t\t       (:em \"res\")\" is locally bound and will never be used after \"\n\t\t\t       (:em \"b\") \" has been evaluated, you could use the destructive function \"\n\t\t\t       ((:span :class \"function\") \"nreverse\") \", which is slightly more efficient than \"\n\t\t\t       ((:span :class \"function\")\"reverse\" )))\n\t\t\t ((:div :class \"main-page-item\")\n\t\t\t  (str (repl-example (the repl-1))))\n\t\t\t ((:div :class \"main-page-item\")\n\t\t\t  (:p \"It is also possible to use \"\n\t\t\t      ((:span :class \"macro\") \"dolist\")\" without any return value argument, in which case you'd be relying on \"\n\t\t\t      (:em (:b \"side-effecting\") \" within the body. The two examples shown are different ways of returning the length of a list\")))\n\t\t\t ((:div :class \"main-page-item\")\n\t\t\t  (str (repl-example (the repl-2))))\n\t\t\t ((:div :class \"main-page-item\")\n\t\t\t  (:li (:span :class \"macro\" \"dotimes\") \" - takes two required inputs, a \"\n\t\t\t       (:em \"variable\")\" and an \"\n\t\t\t       (:em \"integer\")\", followed by a \"\n\t\t\t       (:em \"body of expressions\")\". As with \"\n                               (:span :class \"macro\" \"dolist\") \", the list at the start of \"\n                               (:span :class \"macro\" \"dotimes\") \"'s argument list can optionally \"\n\t\t\t       ((:span :class \"macro\")\"dotimes\")\" have a third element, an expression which will \"\n\t\t\t       \" be evaluated and the resulting value returned once the \"\n\t\t\t       ((:span :class \"macro\")\"dotimes\")\" has completed. The \"\n\t\t\t       (:em \"body of expressions\")\" are evaluated with the \"\n\t\t\t       (:em \"variable\")\" bound to successive integers between 0 and \"(:em \"integer\") \" minus 1\"\n\t\t\t       (:p \"In contrast to \"\n\t\t\t\t   ((:span :class \"macro\")\"dolist\")\" which is generally used to iterate through a single list, using \"\n\t\t\t\t   ((:span :class \"macro\")\"dotimes\")\" with the function \"\n\t\t\t\t   ((:span :class \"function\") \"nth\")\" permits iteration on multiple lists\")\n\t\t\t       (:p \"The first example shows \"((:span :class \"macro\")\"dotimes\")\" being used to splice together 2 lists. The second example is the first \"\n\t\t\t\t   ((:span :class \"macro\")\"dolist\")\" example converted to a \"\n\t\t\t\t   ((:span :class \"macro\")\"dotimes\")\" implementation\")))\n\t\t\t ((:div :class \"main-page-item\")\n\t\t\t  (str (repl-example (the repl-3))))))\n\t\t   (:h3 \"Mapping Functions\")\n\t\t   (:ul ((:div :class \"grid-container-2\")\n\t\t\t ((:div :class \"main-page-item\")\n\t\t\t  (:li ((:span :class \"function\") \"mapcar\")\" - one of the most heavily used mapping functions, it takes a \"\n\t\t\t       (:em \"function\")\" and one or more \"\n\t\t\t       (:em \"lists\")\" and calls the \"\n\t\t\t       (:em \"function\")\" on successive elements of the \"\n\t\t\t       (:em \"lists\")))\n\t\t\t ((:div :class \"main-page-item\")\n\t\t\t  (str (repl-example (the repl-4))))\n\t\t\t ((:div :class \"main-page-item\")\n\t\t\t  (:p ((:span :class \"function\")\"mapcar\")\" is very commonly used with a \"\n\t\t\t      (:em (:b \"lambda\"))\" or anonymous function. This effectively allows functions to be defined on the fly and they can be used\nto map across multiple lists. The first example is an alternative to the \"\n\t\t\t      ((:span :class \"macro\")\"dotimes\")\" example for splicing 2 lists together. Successive elements from the 2 input lists are bound to the \"\n\t\t\t      (:em (:b \"lambda\"))\" vailables \"\n\t\t\t      (:em \"x\")\" and \"\n\t\t\t      (:em \"y\")\" and the return value from the \"\n\t\t\t      (:em (:b \"lambda\"))\" expression appended to the return list. The second example replaces the \"\n\t\t\t      ((:span :class \"function\")\"LIST-PRODUCT\")\" function with a \"\n\t\t\t      (:em (:b \"lambda\")\" function to achieve the same result\")\n\t\t\t      (:p ((:span :class \"function\")\"mapcar\")\" can often be used to accomplish the same thing as \"\n\t\t\t\t  ((:span :class \"macro\")\"dolist\")\" and may be less verbose. However, when the list processing becomes more complex \"\n\t\t\t\t  ((:span :class \"macro\")\"dolist\")\" may have some advantage in clarity and debugging\")))\n\t\t\t ((:div :class \"main-page-item\")\n\t\t\t  (str (repl-example (the repl-5))))\n\t\t\t ((:div :class \"main-page-item\")\n\t\t\t  (:li ((:span :class \"function\")\"mapcan\")\" - takes a \"\n\t\t\t       (:em \"function\")\" and one or more \"\n\t\t\t       (:em\"lists\")\" like \"\n\t\t\t       ((:span :class \"function\")\"mapcar\")\" but splices together the values returned by the \" (:em\"function\")))\n\t\t\t ((:div :class \"main-page-item\")\n\t\t\t  (str (repl-example (the repl-6))))\n\t\t\t ((:div :class \"main-page-item\")\n\t\t\t  (:li ((:span :class \"function\")\"mapc\")\" is like \"\n\t\t\t       ((:span :class \"function\")\"mapcar\")\" but it doesn't accumulate any data to return so the only reason to use it is for side-effecting. \"\n\t\t\t       ((:span :class \"function\")\"mapc\")\" always returns is second argument (the first list provided). When only side-effecting is required \"\n\t\t\t       ((:span :class \"function\")\"mapc\")\" may be a better option than \"((:span :class \"macro\")\"dolist\")\" because is can traverse multiple lists in parallel\"))\n\t\t\t ((:div :class \"main-page-item\")\n\t\t\t  (str (repl-example (the repl-7))))))))\n\t\t\t     \n\n   (repl-4 (list (list :command (list \"",
    "metadata": {
      "source": "gornschool-training/t2/source/iteration-and-mapping.lisp",
      "file_name": "iteration-and-mapping.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 0,
      "section": "iteration-and-mapping"
    },
    "id": "f516b21dda38db0cc29c2933f7aa977c"
  },
  {
    "text": "(defun plus2(i)\"\n\t\t\t\t      \"        (+ i 2))\")\n\t\t       :output \"PLUS2\")\n\t\t (list :command \"(mapcar #'plus2 (list 1 2 3))\"\n\t\t       :output \"(3 4 5)\")\n\t\t (list :command (list \"",
    "metadata": {
      "source": "gornschool-training/t2/source/iteration-and-mapping.lisp",
      "file_name": "iteration-and-mapping.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 1,
      "section": "plus2"
    },
    "id": "22057bd8311320a04a2ce90c7ddb6934"
  },
  {
    "text": "(defun list-product (a b)\"\n\t\t\t\t      \"        (* a b))\")\n\t\t      :output \"LIST-PRODUCT\")\n\t\t (list :command \"(mapcar #'list-product (list 1 2 3) (list 4 5 6))\"\n\t\t       :output \"(4 10 18)\")))\n   \n   (repl-5 (list (list :command (list \"(flatten\" \n\t\t\t\t      \"       (mapcar\"\n\t\t\t\t      \"         #'(lambda(x y) (list x y))\"\n\t\t\t\t      \"            (list 1 2 3 4 5)\"\n\t\t\t\t      \"            (list \\\"a\\\" \\\"b\\\" \\\"c\\\" \\\"d\\\" \\\"e\\\")))\")\n\t\t       :output \"(1 \\\"a\\\" 2 \\\"b\\\" 3 \\\"c\\\" 4 \\\"d\\\" 5 \\\"e\\\")\")\n\t\t (list :command \"mapcar #'(lambda(x y) (* x y) (list 1 2 3) (list 4 5 6))\"\n\t\t       :output \"(4 10 18)\")))\n\n   (repl-6 (list (list :command \"(mapcan #'list (list 1 2 3 4 5) (list \\\"a\\\" \\\"b\\\" \\\"c\\\" \\\"d\\\" \\\"e\\\"))\"\n\t\t :output \"(1 \\\"a\\\" 2 \\\"b\\\" 3 \\\"c\\\" 4 \\\"d\\\" 5 \\\"e\\\")\")))\n\n   (repl-7 (list (list :command (list \"(let ((x 0))\"\n\t\t\t\t      \"          (mapc #'(lambda(a) (setf x (+ x a))) (list 1 2 3))\"\n\t\t\t\t      \"       x)\")\n\t\t       :output 6)\n\t\t (list :command (list \"(let ((x 0))\"\n\t\t\t\t      \"         (mapc #'(lambda(a b c) (setf x (+ x a b c)))\" \n\t\t\t\t      \"             (list 1 2 3) \"\n\t\t\t\t      \"             (list 4 5 6)\" \n\t\t\t\t      \"             (list 7 8 9))\"\n\t\t\t\t      \"       x)\")\n\t\t       :output 45)))))\n\t\t      \n\n",
    "metadata": {
      "source": "gornschool-training/t2/source/iteration-and-mapping.lisp",
      "file_name": "iteration-and-mapping.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 2,
      "section": "list-product"
    },
    "id": "eca2551ca7956c5a84e870c0b6340e64"
  },
  {
    "text": "(in-package :training-2)\n\n",
    "metadata": {
      "source": "gornschool-training/t2/source/equality.lisp",
      "file_name": "equality.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 0,
      "section": "header"
    },
    "id": "407662438d12bf088973878f8e01aa86"
  },
  {
    "text": "(define-object equality (base-training-sheet)\n  :computed-slots\n  ((index-words (list \"eq\" \"eql\" \"equal\" \"equalp\" \"numberp\" \"floatp\" \"characterp\" \"floatp\" \"stringp\" \"zerop\" \"plusp\" \"minusp\" \">\" \">=\" \"=\" \"\\<=\" \"\\<\"\n\t\t\"string\\<\" \"string-lessp\" \"string=\" \"string-equal\" \"string>\" \"string-greaterp\" \"string/=\" \"string-not-equal\"))\n\n   (repl-1 (list (list :command \"((eq 1 1)\"\n\t\t       :output T)\n\t\t (list :command \"(eq #\\\\a #\\\\a)\"\n\t\t       :output \"T\")))\n\t\t \n\n   (repl-2 (list (list :command \"(eq 1.0 1.0)\"\n\t\t       :output \"NIL\")\n\t\t (list :command \"(eq \\\"a\\\" \\\"a\\\")\"\n\t\t       :output \"NIL\")\n\t\t (list :command \"(eq (list 1 2 3) (list 1 2 3))\"\n\t\t       :output \"NIL\")\n\t\t (list :command \"(eq 1 1.0)\"\n\t\t       :output \"NIL\")))\n   \n   (repl-3 (list (list :command \"(eql 1.0 1.0)\"\n\t\t       :output \"T\")\t\t \n\t\t (list :command \"(eql \\\"a\\\" \\\"a\\\")\"\n\t\t       :output \"NIL\")\n\t\t (list :command \"(eql (list 1 2 3) (list 1 2 3))\"\n\t\t       :output \"NIL\")\n\t\t (list :command \"(eql 1 1.0)\"\n\t\t       :output \"NIL\")))\n\n   (repl-4 (list (list :command \"(equal \\\"a\\\" \\\"a\\\")\"\n\t\t       :output \"T\")\n\t\t (list :command \"(equal (list 1 2 3) (list 1 2 3))\"\n\t\t       :output \"T\")\n\t\t (list :command \"(equal 1 1.0)\"\n\t\t       :output \"NIL\")\n\t\t (list :command \"(equal \\\"A\\\" \\\"a\\\")\"\n\t\t       :output \"NIL\")\n\t\t (list :command \"(equal (list 1 2 3) (list 1 2 3.0))\"\n\t\t       :output \"NIL\")))\n\n   (repl-5 (list (list :command \"(equalp 1 1.0)\"\n\t\t       :output \"T\")\n\t\t (list :command \"(equalp \\\"A\\\" \\\"a\\\")\"\n\t\t       :output \"T\")\n\t\t (list :command \"(equalp (list 1 2 3) (list 1 2 3.0))\"\n\t\t       :output \"T\")))\n\n   (repl-6 (list (list :command \"(> 5 4 3)\"\n\t\t       :output \"T\")\n\t\t (list :command\"(> 5 4 5)\"\n\t\t       :output \"NIL\")\n\t\t (list :command\"(/= 1 2 3 4)\"\n\t\t       :output \"T\")\n\t\t (list :command\"(/= 1 1 4 1)\"\n\t\t       :output \"NIL\")))\n\t\t \n   (body-content (with-cl-who-string()\n\t\t   (:p \"Lisp defines 4 generic equality predicates. In order of \\\"strictness\\\" they are:\"\n\t\t       (:ul (:li (:span :class \"macro\" \"eq\"))\n\t\t\t    (:li (:span :class \"macro\" \"eql\"))\n\t\t\t    (:li (:span :class \"macro\" \"equal\"))\n\t\t\t    (:li (:span :class \"macro\" \"equalp\")))\n\n                       \"When we say \"\n                       (:span :class \"macro\" \"eq\")\n                       \" is the strictest test, we mean that it is most likely to return \"\n                       (:span :class \"value\" \"NIL\")\n                       \".  So any two items which compare as \"\n                       (:span :class \"value\" \"T\")\n                       \" with \"\n                       (:span :class \"macro\" \"eq\")\n                       \" will certainly compare as \"\n                       (:span :class \"value\" \"T\")\n                       \" with \"\n                       (:span :class \"macro\" \"eql\")\n                       \" and with all the other equality predicates below \"\n                       (:span :class \"macro\" \"eql\")\n                       \" in the stack. A similar relationship may be drawn between \"\n                       (:span :class \"macro\" \"eql\") \" and \"\n                       (:span :class \"macro\" \"equal\") \", and likewise between \"\n                       (:span :class \"macro\" \"equal\") \" and \"\n                       (:span :class \"macro\" \"equalp\") \". Now we will show some examples and describe\nthe characteristics of each of these equality predicates.\")\n\n\t\t   (:h3 (:span :class \"macro\" \"eq\"))\n\t\t   (:p (:em (:b \"eq\")) \" takes 2 objects as arguments and returns t if they are identical\" (:br)\n\t\t       \"Integers and Characters have the same symbol-name and value, so when comparing Integers and Characters, whilst it may appear \"\n\t\t       (:span :class \"macro\" \"eq\") \" is testing for value equality, it is in fact testing for object equality.\" (:br)\n\t\t       (:span :class \"macro\" \"eq\") \" is fast but is only safe to use when the types (i.e. classes) of the objects being tested are known in advance\")\n\t\t   (str (repl-example (the repl-1)))\n\t\t\t\t \n\t\t   (:p \"Floats, lists, and strings however are just pointers to the actual objects containing the value in memory, so \"\n\t\t       (:span :class \"macro\" \"eq\")\n                       \" will generally return NIL if either of the objects being tested is a float, list or string. This is because\ntwo floats, lists, or strings, even though they may appear to be identical, typically are existing in two different places in memory.\")\n\t\t   (str (repl-example (the repl-2)))\n\t\t\t\n\t\t   (:h3 (:span :class \"macro\" \"eql\"))\n\t\t   (:p (:em (:b \"eql\"))\" behaves as \"\n\t\t       (:em (:b \"eq\"))\" except it guarantees to consider 2 objects of the same class representing the same \"\n\t\t       (:em \"numeric or character\")\" value to be equal\")\n\t\t   (str (repl-example (the repl-3)))\n\n\t\t   (:h3 (:span :class \"macro\" \"equal\"))\n\t\t   (:p (:span :class \"macro\" \"equal\") \" behaves as \"\n\t\t       (:span :class \"macro\" \"eql\")  \" except different objects may be considered equivalent if their values look the same.\nThis is particularly useful when testing for equality between two strings or two lists\")\n\t\t   (str (repl-example (the repl-4)))\n\n\t\t   (:h3 (:span :class \"macro\" \"equalp\"))\n\t\t   (:p (:span :class \"macro\" \"equalp\") \" behaves as \"\n\t\t       (:span :class \"macro\" \"equal\") \", except numbers are considered equal if they are mathematically equal,\n and string equality is not case-sensitive\")\n                        \n\t\t   (str (repl-example (the repl-5)))\n\n\t\t\t\n                        \n\t\t   (:p \"In addition to the above, Lisp defines specific equality tests (predicates) for numbers and strings\")\n\n\t\t   (:h3 \"Number Comparison\")\n\t\t   (:ul (:li (:span :class \"macro\" \"&lt;\") \" - less than\")\n\t\t\t(:li (:span :class \"macro\" \"&lt;=\") \" - less than or equal\")\n\t\t\t(:li (:span :class \"macro\" \"=\") \" - equal\")\n\t\t\t(:li (:span :class \"macro\" \"&gt;=\") \" - greater than or equal\")\n\t\t\t(:li (:span :class \"macro\" \"&gt;\") \" - greater than\")\n\t\t\t(:li (:span :class \"macro\" \"/=\") \" - not equal\"))\n\t\t   (:p \"All of these functions take one or more arguments, and with the exception of \"\n                       (:span :class \"macro\" \"/=\")\n                       \", all make their comparisons between consecutive pairs. With \"\n                       (:span :class \"macro\" \"/=\")\n                       \", it compares all posible combinations of the arguments\")\n\t\t   (str (repl-example (the repl-6)))\n\t\t   (:p \"Specific tests for number values are also avaliable\"\n\t\t       (:ul (:li (:span :class \"function\" \"zerop\") \" - the number is zero\")\n\t\t\t    (:li (:span :class \"function\" \"plusp\") \" - the number is greater than zero\")\n\t\t\t    (:li (:span :class \"function\" \"minusp\") \" - the number is less than zero\")))\n\t\t   (:p \"When comparing Float numbers, it is better to use the GendL functions \"\n\t\t       ((:span :class \"function\") \"near-to?\") \" and \"\n\t\t       ((:span :class \"function\") \"near-zero?\") \". These return \" (:span :class \"value\" \"T\") \" if the two arguments are within \"\n                       (:span :class \"variable-name\" \"*ZERO-EPSILON*\") \" of each other\")\n\t\t   (:h3 \"String Comparison\")\n\t\t   (:p \"string comparison is similar number comparison, except there is one variant (the first shown below)\nwhich is case-sensitive and one (the second) which is case-insentitive. These functions accept two string arguments.\")\n\t\t   (:ul (:li (:span :class \"macro\" \"string<\") \", \"\n                             (:span :class \"macro\" \"string-lessp\")\n                             \" - one string less than another\")\n\t\t\t(:li (:span :class \"macro\" \"string=\") \", \"\n                             (:span :class \"macro\" \"string-equal\")\n                             \" - one string equal to another\")\n\t\t\t(:li (:span :class \"macro\" \"string>\") \", \"\n                             (:span :class \"macro\" \"string-greaterp\")\n                             \" - one string greater than another\")\n\t\t\t(:li (:span :class \"macro\" \"string/=\") \", \"\n                             (:span :class \"macro\" \"string-not-equal\")\n                             \" - strings are not equal\"))\n\t\t   (:p \" These functions  also have keyword inputs \"\n                       (:span :class \"general-keyword\" \"(:start1 :end1 :start2 and :end2)\")\n                       \" to enable substrings of the supplied strings to be compared\")\n\n                   (:h3 \"Object Type\")\n\t\t   (:p \"Finally, Lisp defines predicates to test for object type\"\n\t\t       (:ul (:li (:span :class \"macro\" \"numberp\") \" - returns \" (:span  :class \"value\" \"T\") \" if the object is a number.\")\n\t\t\t    (:li (:span :class \"macro\" \"floatp\") \" - returns \" (:span :class \"value\" \"T\") \" if the object is a float.\")\n\t\t\t    (:li (:span :class \"macro\" \"stringp\") \" - returns \" (:span :class \"value\" \"T\") \" if the object is a string.\")\n\t\t\t    (:li (:span :class \"macro\" \"characterp\") \" - returns \" (:span :class \"value\" \"T\") \" if the object is a character.\")\n\t\t\t    (:li (:span :class \"macro\" \"listp\")  \" - returns \" (:span :class \"value\" \"T\") \" if the object is a list.\")))\n\n\t\t    (:h2 \"Resources\")\n\t\t    (str (the resource-links))))))\n",
    "metadata": {
      "source": "gornschool-training/t2/source/equality.lisp",
      "file_name": "equality.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 0,
      "section": "equality"
    },
    "id": "407662438d12bf088973878f8e01aa86"
  },
  {
    "text": "(in-package :training-2)\n\n",
    "metadata": {
      "source": "gornschool-training/t2/source/tutorial-intro.lisp",
      "file_name": "tutorial-intro.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 0,
      "section": "header"
    },
    "id": "28fbe14ffee0734993b1a8b462104bb7"
  },
  {
    "text": "(define-object tutorial-intro (base-training-sheet)\n  :input-slots\n  (index-url)\n  \n  :computed-slots\n  ((setq-repl (list (list :command \"(setq a 1)\"\n\t\t\t  :output 1)\n\t\t    (list :command \"(setq b 2 c \\\"three\\\" d nil)\"\n\t\t\t  :output \"NIL\")\n\t\t    (list :command \"b\"\n\t\t\t  :output 2)\n\t\t    (list :command \"c\"\n\t\t\t  :output \"three\")\n\t\t    (list :command \"d\"\n\t\t\t  :output \"NIL\")))\n\n   (code-1 (list\n\t    \"",
    "metadata": {
      "source": "gornschool-training/t2/source/tutorial-intro.lisp",
      "file_name": "tutorial-intro.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 0,
      "section": "tutorial-intro"
    },
    "id": "28fbe14ffee0734993b1a8b462104bb7"
  },
  {
    "text": "(define-object my-box-1 (box)\"\n\t    \" :input-slots\"\n\t    \" ((length 2)\"\n\t    \"  (width 3)\"\n\t    \"  (height 4)))\"))\n\n\n   (body-content (with-cl-who-string ()\n\t\t\n                   (wmd \"This tutorial aims to get you started with GendL.\nIt assumes a standard GendL installation and setup which provides\nEmacs and will start the GendL web server on localhost port 9000.\n\nThe tutorial makes use of GendL's built-in wireframe geometry (the\n`geom-base` package) to demonstrate some of the basic concepts of\nGendL. It also covers most of the Common Lisp (CL) basics that you\nwill need to master in order to work with GendL effectively. What you\nwill _not_ need is to become a CL expert or specialist in order to\nexcel as a GendL user, as GendL does much of the language \\\"heavy\nlifting\\\" for you.\n\nMost of the topics covered in this tutorial have either `.lisp` or PDF\nfiles which you can download and/or use. These are presented in the\nReferences section on the right-hand sidebar of each page. Any `.lisp`\nfiles with valid ANSI Common Lisp (CL) code sould be compileable in GendL\")\n\n\n                   (:p \"This tutorial uses the following color-coding and font convention for\nidentifying categories of Lisp symbols when they occur in the narrative portion of the text (don't worry if\nyou don't understand the meaning of all these terms yet):\"\n                       (:ul (:li (:span :class \"function\" \"Function\") \" - a CL or GendL Function name\")\n\t\t\t    (:li (:span :class \"macro\" \"Macro\") \" - a CL or GendL Macro name\")\n                            (:li (:span :class \"object\" \"Object Definition name\")\n                                 \" - a symbol being used to name a Gendl object definition\")\n\t\t\t    (:li (:span :class \"object-keyword\" \"Object Definition Keyword\")\n                                 \" - one of the valid Keywords which can be used in any GendL object definitions\")\n\t\t\t    (:li (:span :class \"slot\" \"Slot Name\")\n                                 \" - a name of a slot specified in a particular GendL object definition\")\n\t\t\t    (:li (:span :class \"special-operator\" \"Special Operator\") \" - CL special operators\")\n                            (:li (:span :class \"variable-name\" \"Variable Name\") \" - symbol being used as a variable name\")\n                            (:li (:span :class \"package-name\" \"Package Name\") \" - symbol being used to name a CL Package\")\n                            (:li (:span :class \"general-keyword\" \"General Keyword\") \" - keyword symbol used for its name only\")\n                            (:li (:span :class \"value\" \"Value\")\n                                 \" Any Lisp data value, e.g. a Number, String, List, or Gendl Object\ninstance. Such values are typically obtained by calling a function or\nsending a message to an object.\")))\n\n                        \n\t\t   (:p \"Examples in the CL Read-Eval-Print-Loop are shown in sections of the screen as shown below\")\n\t\t      \n\t\t       \n\t\t   (str (repl-example (the setq-repl)))\n\t\t      \n\t\t   (:p \"Code examples are shown in sections of the screen as shown below and will generally be downloadable from the References, as shown on this page\")\n\n\t\t   (str (code-example (the code-1)))\n\t\t      \n\t\t   (:p \"Each topic page has Previous and Next navigation links as well as a link back to the Home page which contains a list of all topics in this tutorial. Note that most pages topics build on what was covered in previous topics so its recomended to work through the pages sequentially\")\n\t\t   (:p \"Finally an index is provided with links to indexed words reference in each topic. The index may be accessed from the home page. To view the index now click \"\n\t\t       ((:a :href (the index-url)) \"here\"))\n                   \n\t\t (:div :class \"main-page-item\"\n\t\t       (:h2 \"Resources\")\n\t\t       (str (the resource-links)))))))\n\n  \n",
    "metadata": {
      "source": "gornschool-training/t2/source/tutorial-intro.lisp",
      "file_name": "tutorial-intro.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 1,
      "section": "my-box-1"
    },
    "id": "4a3c51c2fe5727ac7919c87f983868dc"
  },
  {
    "text": "(in-package :training-2)\n\n",
    "metadata": {
      "source": "gornschool-training/t2/source/wall-example.lisp",
      "file_name": "wall-example.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 0,
      "section": "header"
    },
    "id": "8e9003ed5d7dff0132cb56e243c658bb"
  },
  {
    "text": "(define-object wall-example (base-training-sheet)\n  :computed-slots\n  ((index-words (list \":pass-down\" \"list-elements\" \"the-element\" \"the-object\" \"theo\" \"apply\" \"+\" \"apply '+\" \"zerop\" \"evenp\" \"last (sequence)\"\n\t\t      \"let\" \"local binding\" \"translate-along-vector\" \"face-center\" \"face-normal-vector\" \":functions\" \"debugging\" \"code maintenance\" \"code readability\"))\n\n   (hint-1 nil :settable)\n   (hint-2 nil :settable)\n   (hint-3 nil :settable)\n   (hint-4 nil :settable)\n   (hint-5 nil :settable)\n   (hint-6 nil :settable)\n   (hint-7 nil :settable)\n\n   \n   \n   (code-1 (list \"",
    "metadata": {
      "source": "gornschool-training/t2/source/wall-example.lisp",
      "file_name": "wall-example.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 0,
      "section": "wall-example"
    },
    "id": "8e9003ed5d7dff0132cb56e243c658bb"
  },
  {
    "text": "(define-object wall()\"\n\t\t \"  :objects\"\n\t\t \"  ((row :type 'row))\"\n\t\t \" )\"\n\t\t \"\"\n\t\t \"",
    "metadata": {
      "source": "gornschool-training/t2/source/wall-example.lisp",
      "file_name": "wall-example.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 1,
      "section": "wall"
    },
    "id": "0d69f0c6746cdee62bddf1dd4552906c"
  },
  {
    "text": "(define-object row ()\"\n\t\t \"  :objects\"\n\t\t \"  ((bricks-and-mortar :type 'bricks-and-mortar)\"\n\t\t \"   (mortar-bed :type 'box)))\"\n\t\t \"\"\n\t\t \"",
    "metadata": {
      "source": "gornschool-training/t2/source/wall-example.lisp",
      "file_name": "wall-example.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 2,
      "section": "row"
    },
    "id": "058598ecf562578775e99ac5e6ecf9d8"
  },
  {
    "text": "(define-object bricks-and-mortar ()\"\n\t\t \"  :objects\"\n\t\t \"  ((full-brick :type 'box)\"\n\t\t \"   (half-brick :type 'box)\"\n\t\t \"   (mortar-joint :type 'box)))\"))\n\n   (code-2 (list \"",
    "metadata": {
      "source": "gornschool-training/t2/source/wall-example.lisp",
      "file_name": "wall-example.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 3,
      "section": "bricks-and-mortar"
    },
    "id": "3ecdc31f36fa18f9de3f1e1acf8f3977"
  },
  {
    "text": "(define-object bricks-and-mortar ()\"\n\t\t \"  :input-slots\"\n\t\t \"  (brick-height\"\n\t\t \"   brick-length\"\n\t\t \"   brick-width\"\n\t\t \"   mortar-joint-width)\"\n\t\t \"\"\n\t\t \"  :objects\"\n\t\t \"  ((full-brick :type 'box\"\n\t\t \"\t           :length (the brick-length)\"\n\t\t \"\t           :height (the brick-height)\"\n\t\t \"\t           :width (the brick-width))\"\n\t\t \"   (half-brick :type 'box\"\n\t\t \"\t           :length (half (the brick-length))\"\n\t\t \"\t           :height (the brick-height)\"\n\t\t \"\t           :width (the brick-width))\"\n\t\t \"   (mortar-joint :type 'box\"\n\t\t \"\t\t     :height (the brick-height)\"\n\t\t \"\t\t     :width (the brick-width)\"\n\t\t \"\t\t     :length (the mortar-joint-width))))\"))\n\n   (code-3 (list \"",
    "metadata": {
      "source": "gornschool-training/t2/source/wall-example.lisp",
      "file_name": "wall-example.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 4,
      "section": "bricks-and-mortar"
    },
    "id": "f750bb2b29f3cc1ab78ac74c6b8a9f11"
  },
  {
    "text": "(define-object row ()\"\n\t\t \"  :input-slots\"\n\t\t \"  (brick-height\"\n\t\t \"   brick-length\"\n\t\t \"   brick-width\"\n\t\t \"   mortar-joint-width)\"\n\t\t \"\"\n\t\t \"  :objects\"\n\t\t \"  ((bricks-and-mortar :type 'bricks-and-mortar\"\n\t\t \"  \t\t        :brick-height (the brick-height)\"\n\t\t \"  \t\t        :brick-length (the brick-length)\"\n\t\t \"  \t\t        :brick-width (the brick-width)\"\n\t\t \"  \t\t        :mortar-joint-width (the mortar-joint-width))\"\n\t\t \"   (mortar-bed :type 'box\"\n\t\t \"\t         :height (the mortar-joint-width))))\"))\n\n   (code-4 (list \"",
    "metadata": {
      "source": "gornschool-training/t2/source/wall-example.lisp",
      "file_name": "wall-example.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 5,
      "section": "row"
    },
    "id": "64ec105373c4f42b2a31ecb2a0e94fa1"
  },
  {
    "text": "(define-object wall()\"\n\t\t \"  :input-slots\"\n\t\t \"  ((brick-height 45)\"\n\t\t \"   (brick-length 180)\"\n\t\t \"   (brick-width 90)\"\n\t\t \"   (mortar-joint-width 10)\"\n\t\t \"   (wall-length 3700)\"\n\t\t \"   (wall-height 900))\"\n\t\t \"   \"\n\t\t \"  :objects\"\n\t\t \"  ((row :type 'row\"\n\t\t \"        :brick-height(the brick-height)\"\n\t\t \"        :brick-length (the brick-length)\"\n\t\t \"        :brick-width (the brick-width)\"\n\t\t \"        :mortar-joint-width (the mortar-joint-width))))\"))\n\n   (code-5 (list \"",
    "metadata": {
      "source": "gornschool-training/t2/source/wall-example.lisp",
      "file_name": "wall-example.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 6,
      "section": "wall"
    },
    "id": "f7aa858bf59e4da6f7c5f0ed8a06f786"
  },
  {
    "text": "(define-object wall(box)\"\n\t\t \":input-slots\"\n\t\t \"((brick-height 45)\"\n\t\t \" (brick-length 180)\"\n\t\t \" (brick-width 90)\"\n\t\t \" (mortar-joint-width 10)\"\n\t\t \" (wall-length 3700)\"\n\t\t \" (wall-height 900))\"\n\t\t \"\"\n\t\t \":computed-slots\"\n\t\t \"((row-height (+ (the brick-height) (the mortar-joint-width)))\"\n\t\t \" (number-of-rows (round-to-nearest (div (the wall-height) (the row-height)) 1))\"\n\t\t \" (actual-wall-height (* (the row-height) (the number-of-rows)))\"\n\t\t \"\"\n\t\t \" ;; for the wall-length we need the number of full bricks\"\n\t\t \" ;; if there are n full bricks then there will be (n-1) mortar joints\"\n\t\t \" ;; so n*brick-length + n-1*mortar-joint-width = overall-length\"\n\t\t \" ;; or n(brick-length + mortar-join-width) - mortar-joint-width = overall-length\"\n\t\t \" ;; or n = (overall-length - mortar-joint-width)/(brick-length + mortar-joint-width)\"\n\t\t \" (number-of-bricks (round-to-nearest \"\n\t\t \"                       (div (- (the wall-length) (the mortar-joint-width))\"\n\t\t \"\t\t\t      (+ (the brick-length) (the mortar-joint-width)))\"\n\t\t \"\t\t\t 1))\"\n\t\t \" (actual-wall-length (+ (* (the number-of-bricks) (the brick-length))\"\n\t\t \"\t\t\t  (* (- (the number-of-bricks) 1) (the mortar-joint-width))))\"\n\t\t \"\"\n\t\t \" ;; box inputs - gives the wall bounding box\"\n\t\t \" (height (the actual-wall-height))\"\n\t\t \" (width (the brick-width))\"\n\t\t \" (length (the actual-wall-length)))\"\n\t\t \" \"\n\t\t \":objects\"\n\t\t \"((row :type 'row\"\n\t\t \"      :sequence (:size (the number-of-rows))\"\n\t\t \"      :bricks-per-row (the number-of-bricks)\"\n\t\t \"      :length (the length)\"\n\t\t \"      :width (the width)\"\n\t\t \"      :brick-height(the brick-height)\"\n\t\t \"      :brick-length (the brick-length)\"\n\t\t \"      :brick-width (the brick-width)\"\n\t\t \"      :mortar-joint (the mortar-joint-width))))\"))\n\n   (code-6 (list \"",
    "metadata": {
      "source": "gornschool-training/t2/source/wall-example.lisp",
      "file_name": "wall-example.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 7,
      "section": "wall"
    },
    "id": "afd81650510db1184925e9f0763902a7"
  },
  {
    "text": "(define-object wall(box)\"\n\t\t \"...\"\n\t\t \"...\"\n\t\t \"...\"\n\t\t \":objects\"\n\t\t \"((row :type 'row\"\n\t\t \"      :sequence (:size (the number-of-rows))\"\n\t\t \"      :center (translate-along-vector (the (face-center :bottom))\"\n\t\t \"\t\t\t\t       (the (face-normal-vector :top))\"\n\t\t \"\t\t\t\t       (+ (half (the-child height))\"\n\t\t \"\t\t\t\t\t  (* (the-child index) (the-child height))))\"\n\t\t \"      :length (the length)\"\n\t\t \"      :width (the width)\"\n\t\t \"      :height (+ (the brick-height) (the mortar-joint-width)))\"\n\t\t \"      :bricks-per-row (the number-of-bricks)\"\n\t\t \"      :brick-height(the brick-height)\"\n\t\t \"      :brick-length (the brick-length)\"\n\t\t \"      :brick-width (the brick-width)\"\n\t\t \"      :mortar-joint-width (the mortar-joint-width))\"))\n\n   (code-7 (list \"",
    "metadata": {
      "source": "gornschool-training/t2/source/wall-example.lisp",
      "file_name": "wall-example.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 8,
      "section": "wall"
    },
    "id": "7f155e3212c4e143c40b99cb2a4a487b"
  },
  {
    "text": "(define-object row (box)\"\n\t\t \":input-slots\"\n\t\t \"(brick-height\"\n\t\t \" brick-length\"\n\t\t \" brick-width\"\n\t\t \" mortar-joint-width)\"\n\t\t \"\"\n\t\t \":objects\"\n\t\t \"((bricks-and-mortar :type 'bricks-and-mortar\"\n\t\t \"\t\t      :width (the width)\"\n\t\t \"\t\t      :length (the length)\"\n\t\t \"\t\t      :height (the brick-height)\"\n\t\t \"\t\t      :center (translate-along-vector \"\n\t\t \"                               (the mortar-bed (face-center :top))\"\n\t\t \"\t\t\t\t (the mortar-bed (face-normal-vector :top))\"\n\t\t \"\t\t\t\t (half (the-child height)))\"\n\t\t \"\t\t      :brick-height (the brick-height)\"\n\t\t \"\t\t      :brick-length (the brick-length)\"\n\t\t \"\t\t      :brick-width (the brick-width)\"\n\t\t \"\t\t      :mortar-joint-width (the mortar-joint-width))\"\n\t\t \" (mortar-bed :type 'box\"\n\t\t \"\t       :height (the mortar-joint-width)\"\n\t\t \"\t       :width (the width)\"\n\t\t \"\t       :length (the length)\"\n\t\t \"\t       :center (translate-along-vector (the (face-center :bottom))\"\n\t\t \"\t\t\t\t\t       (the (face-normal-vector :top))\"\n\t\t \"\t\t\t\t\t       (half (the-child height))))))\"))\n\n\n   (code-8 (list \"",
    "metadata": {
      "source": "gornschool-training/t2/source/wall-example.lisp",
      "file_name": "wall-example.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 9,
      "section": "row"
    },
    "id": "8c773d6d68d3d843c45198a2a542c142"
  },
  {
    "text": "(define-object row (box)\"\n\t\t \":input-slots\"\n\t\t \"(full-bricks-per-row\"\n\t\t \" brick-height\"\n\t\t \" brick-length\"\n\t\t \" brick-width\"\n\t\t \" mortar-joint-width)\"\n\t\t \"\"\n\t\t \":computed-slots\"\n\t\t \" ((full-brick-row? (or (zerop (the index)) (evenp (the index)))))\"\n\t\t \"\"\n\t\t \":objects\"\n\t\t \"((bricks-and-mortar :type 'bricks-and-mortar\"\n\t\t \"\t\t      :height (the brick-height)\"\n\t\t \"\t\t      :center (translate-along-vector \"\n\t\t \"                                     (the mortar-bed (face-center :top))\"\n\t\t \"\t\t\t\t       (the mortar-bed (face-normal-vector :top))\"\n\t\t \"\t\t\t\t       (half (the-child height)))\"\n\t\t \"\t\t      :pass-down (width\"\n\t\t \"\t\t\t\t  length\"\n\t\t \"\t\t\t\t  full-brick-row?\"\n\t\t \"\t\t\t\t  brick-height\"\n\t\t \"\t\t\t\t  brick-length\"\n\t\t \"\t\t\t\t  brick-width\"\n\t\t \"\t\t\t\t  mortar-joint-width\"\n\t\t \"\t\t\t\t  full-bricks-per-row))\"\n\t\t \"  \" \n\t\t \" (mortar-bed :type 'box\"\n\t\t \"\t       :height (the mortar-joint-width)\"\n\t\t \"\t       :center (translate-along-vector (the (face-center :bottom))\"\n\t\t \"\t\t\t\t\t       (the (face-normal-vector :top))\"\n\t\t \"\t\t\t\t\t       (half (the-child height)))\"\n\t\t \"\t       :pass-down (width\"\n\t\t \"\t\t\t   length))))\"))\n\n   (code-9 (list \"",
    "metadata": {
      "source": "gornschool-training/t2/source/wall-example.lisp",
      "file_name": "wall-example.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 10,
      "section": "row"
    },
    "id": "5a81518fa5c6758232010156d64738e6"
  },
  {
    "text": "(define-object bricks-and-mortar (box)\"\n\t\t \"...\"\n\t\t \"...\"\n\t\t \"...\"\n\t\t \":computed-slots\"\n\t\t \"((first-full-brick-start-point (if (the full-brick-row?)\"\n\t\t \"\t\t\t\t     (the (face-center :front))\"\n\t\t \"\t\t\t\t     (the (mortar-joint 0) (face-center :rear))))\"\n\t\t \"\"\n\t\t \" (first-mortar-joint-start-point (if (the full-brick-row?)\"\n\t\t \"\t\t\t\t       (the (full-brick 0) (face-center :rear))\"\n\t\t \"\t\t\t\t       (the (half-brick 0) (face-center :rear))))\"\n\t\t \"\"\n\t\t \" (number-of-full-bricks (if (the full-brick-row?)\"\n\t\t \"\t\t\t      (the full-bricks-per-row)\"\n\t\t \"\t\t\t      (- (the full-bricks-per-row) 1)))\"\n\t\t \"\"\n\t\t \" (number-of-mortar-joints (if (the full-brick-row?)\"\n\t\t \"\t\t\t\t(- (the number-of-full-bricks) 1)\"\n\t\t \"\t\t\t\t(+ (the number-of-full-bricks) 1)))\"\n\t\t \"\"\n\t\t \"   ;; if it isn't a full brick row then there will be an extra joint because one \"\n\t\t \"   ;; full brick is replaced with 2 half bricks so without correcting the \"\n\t\t \"   ;; mortar-joint-width the ends of a full brick rowand one startng and\"\n\t\t \"   ;;  finishing with half bricks won't align. So we need to correct \"\n\t\t \"   ;; the mortar-joint-width\"\n\t\t \" (corrected-joint-width (if (the full-brick-row?)\"\n\t\t \"\t\t              (the mortar-joint-width)\"\n\t\t \"\t\t              (let ((total-gap (* (- (the number-of-mortar-joints) 1)\"\n\t\t \"\t\t\t\t\t          (the mortar-joint-width))))\"\n\t\t \"                                 (div total-gap (the number-of-mortar-joints))))))\"\n\t\t \"...\"\n\t\t \"...\"\n\t\t \")\"))\n\n   (code-10 (list \"",
    "metadata": {
      "source": "gornschool-training/t2/source/wall-example.lisp",
      "file_name": "wall-example.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 11,
      "section": "bricks-and-mortar"
    },
    "id": "6981e25be10434c18f712d8311e7c791"
  },
  {
    "text": "(define-object bricks-and-mortar (box)\"\n\t\t  \"...\"\n\t\t  \"...\"\n\t\t  \"...\"\n\t\t  \":functions\"\n\t\t  \"((first-full-brick-center!\"\n\t\t  \"   ()\"\n\t\t  \"   (translate-along-vector (the first-full-brick-start-point)\"\n\t\t  \"\t\t\t   (the (face-normal-vector :rear))\"\n\t\t  \"\t\t\t   (half (the brick-length))))\"\n\t\t  \"\"\n\t\t  \" (other-full-brick-center!\"\n\t\t  \"   (index)\"\n\t\t  \"   ;; if its a full brick row, (full-brick 1) is positioned relative to (joint 0)\"\n\t\t  \"   ;; if its a half brick row, (full-brick 1) is positioned relative to (joint 1)\"\n\t\t  \"   (let ((ind (if (the full-brick-row?) (- index 1) index)))\"\n\t\t  \"      (translate-along-vector (the (mortar-joint ind) (face-center :rear))\"\n\t\t  \"\t\t\t      (the (face-normal-vector :rear))\"\n\t\t  \"\t\t\t      (half (the brick-length)))))\"\n\t\t  \"\"\n\t\t  \" (first-joint-center!\"\n\t\t  \"   ()\"\n\t\t  \"   (translate-along-vector (the first-mortar-joint-start-point)\"\n\t\t  \"\t\t\t    (the (face-normal-vector :rear))\"\n\t\t  \"\t\t\t    (half (the corrected-joint-width))))\"\n\t\t  \"\"\n\t\t  \" (other-joint-center!\"\n\t\t  \"   (index)\"\n\t\t  \"   ;; if its a full brick row, (joint 1) is positioned relative to (full-brick 1)\"\n\t\t  \"   ;; if its a half brick row, (joint 1) is positioned relative to (full-brick 0)\"\n\t\t  \"   (let ((ind (if (the full-brick-row?) index (- index 1))))\"\n\t\t  \"      (translate-along-vector (the (full-brick ind) (face-center :rear))\"\n\t\t  \"\t\t\t      (the (face-normal-vector :rear))\"\n\t\t  \"\t\t\t      (half (the corrected-joint-width)))))\"\n\t\t  \"\"\n\t\t  \" (first-half-brick-center!\"\n\t\t  \"   ()\"\n\t\t  \"   (translate-along-vector (the (face-center :front))\"\n\t\t  \"\t\t\t   (the (face-normal-vector :rear))\"\n\t\t  \"\t\t\t   (half (half (the brick-length)))))\"\n\t\t  \"\"\n\t\t  \"  (last-half-brick-center!\"\n\t\t  \"    ()\"\n\t\t  \"    (translate-along-vector (theo (the mortar-joint last) (face-center :rear))\"\n\t\t  \"\t\t\t    (the (face-normal-vector :rear))\"\n\t\t  \"\t\t\t    (half (half (the brick-length))))))\"\n\t\t  \"...\"\n\t\t  \"...\"\n\t\t  \")\" ))\n   \n   (code-11 (list \"",
    "metadata": {
      "source": "gornschool-training/t2/source/wall-example.lisp",
      "file_name": "wall-example.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 12,
      "section": "bricks-and-mortar"
    },
    "id": "9e5a9aca7b8646534d27b7fb76f80634"
  },
  {
    "text": "(define-object bricks-and-mortar (box)\"\n\t\t  \"...\"\n\t\t  \"...\"\n\t\t  \"...\"\n\t\t  \" :objects\"\n\t\t  \" ((full-brick :type 'box\"\n\t\t  \"\t         :sequence (:size (the number-of-full-bricks))\"\n\t\t  \"\t         :center (if (= (the-child index) 0)\"\n\t\t  \"\t\t\t   (the first-full-brick-center!)\"\n\t\t  \"\t\t\t   (the (other-full-brick-center! (the-child index))))\"\n\t\t  \"              :length (the brick-length)\"\n\t\t  \"              :height (the brick-height)\"\n\t\t  \"\t         :width (the brick-width))\"\n\t\t  \"\"\n\t\t  \"  (half-brick :type 'box\"\n\t\t  \"\t         :sequence (:size (if (the full-brick-row?) 0 2))\"\n\t\t  \"\t         :center (if (= (the-child index) 0)\"\n\t\t  \"\t\t   \t     (the first-half-brick-center!)\"\n\t\t  \"\t\t\t     (the last-half-brick-center!))\"\n\t\t  \"\t         :length (half (the brick-length))\"\n\t\t  \"\t         :height (the brick-height)\"\n\t\t  \"\t         :width (the brick-width))\"\n\t\t  \"\"\n\t\t  \"  (mortar-joint :type 'box\"\n\t\t  \"\t\t   :sequence (:size (the number-of-mortar-joints))\"\n\t\t  \"\t\t   :center (if (= (the-child index) 0)\"\n\t\t  \"\t\t\t       (the first-joint-center!)\"\n\t\t  \"\t\t\t       (the (other-joint-center! (the-child index))))  \" \n\t\t  \"\t\t   :height (the brick-height)\"\n\t\t  \"\t\t   :width (the brick-width)\"\n\t\t  \"\t\t   :length (the corrected-joint-width))))\"))\n\n   (code-12 (list \"",
    "metadata": {
      "source": "gornschool-training/t2/source/wall-example.lisp",
      "file_name": "wall-example.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 13,
      "section": "bricks-and-mortar"
    },
    "id": "cfb5c74b162d8699adbf6640bc447605"
  },
  {
    "text": "(define-object wall(box)\"\n\t\t  \"  :computed-slots\"\n\t\t  \"  ((full-bricks (apply '+ (list-elements (the row) (the-element full-bricks))))\"\n\t\t  \"   (half-bricks (apply '+ (list-elements (the row) (the-element half-bricks))))\"\n\t\t  \"   (mortar-volume (apply '+ (list-elements (the row) (the-element mortar-volume))))\"\n\t\t  \"   (mortar-density 2162)\"\n\t\t  \"   (mortar-mass (* (the mortar-density) (div (the mortar-volume) 1000000000)))))\"\n\t\t  \"\"\n\t\t  \"",
    "metadata": {
      "source": "gornschool-training/t2/source/wall-example.lisp",
      "file_name": "wall-example.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 14,
      "section": "wall"
    },
    "id": "186e4e0e153d56fcdd446e11a9beb361"
  },
  {
    "text": "(define-object row (box)\"\n\t\t  \"  :computed-slots\"\n\t\t  \"  ((full-bricks (the bricks-and-mortar full-bricks))\"\n\t\t  \"   (half-bricks (the bricks-and-mortar half-bricks))\"\n\t\t  \"   (mortar-volume (+ (the bricks-and-mortar mortar-joint-volume)\"\n\t\t  \"\t\t     (the mortar-bed volume)))))\"\n\t\t  \"\"\n\t\t  \"",
    "metadata": {
      "source": "gornschool-training/t2/source/wall-example.lisp",
      "file_name": "wall-example.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 15,
      "section": "row"
    },
    "id": "0714c7accb18faa2afa0eae8ffdbc8db"
  },
  {
    "text": "(define-object bricks-and-mortar (box)\"\n\t\t  \"  :computed-slots\"\n\t\t  \"  (\"\n\t\t  \"   ;; collating the output. We could do this analytically,\"\n\t\t  \"   ;; but for this example we'll use the geometry\"\n\t\t  \"   (full-bricks (length (list-elements (the full-brick))))\"\n\t\t  \"   (half-bricks (length (list-elements (the half-brick))))\"\n\t\t  \"   (mortar-joint-volume (apply '+ (list-elements (the mortar-joint)\"\n\t\t  \"                                              (the-element volume))))))\"))\n\n   (repl-1 (list (list :command \"(setq self (make-object 'wall))\"\n\t\t       :output \"#<GDL-USER::WALL #x210582B91D>\")\n\t\t \n\t\t (list :command \"(the full-bricks)\"\n\t\t       :output 296)\n\t\t (list :command \"(the half-bricks)\"\n\t\t       :output 16)\n\t\t (list :command \"(the mortar-volume)\"\n\t\t       :output 6.3504E+7)\n\t\t (list :command \"(the mortar-mass)\"\n\t\t       :output 137.295648)))\n\n\n   (body-content (with-cl-who-string()\n\t\t      \n\t\t   ((:div :class \"main-page-container\")\n\t\t    ((:div :class \"main-page-item\")\n\t\t     (str (the start-section main-div))\n\t\t     (str (the hint-1-section main-div))\n\t\t     (str (the hint-2-section main-div))\n\t\t     (str (the hint-3-section main-div))\n\t\t     (str (the hint-4-section main-div))\t\t\n\t\t     (str (the hint-5-section main-div))\n\t\t     (str (the hint-6-section main-div))\n\t\t     (str (the hint-7-section main-div)))\n\t\t    \n\t\t    ((:div :class \"main-page-item\")\n\t\t     (:h2 \"Resources\")\n\t\t     (str (the resource-links-section main-div)))))))\n\n  :functions\n  (\n   ;;\n   ;; FLAG - reduce these repetitive slots somehow.\n   ;;\n   (hint-1! () (the (set-slot! :hint-1 (not (the hint-1)))))\n   (hint-2! () (the (set-slot! :hint-2 (not (the hint-2)))))\n   (hint-3! () (the (set-slot! :hint-3 (not (the hint-3)))))\n   (hint-4! () (the (set-slot! :hint-4 (not (the hint-4)))))\n   (hint-5! () (the (set-slot! :hint-5 (not (the hint-5)))))\n   (hint-6! () (the (set-slot! :hint-6 (not (the hint-6)))))\n   (hint-7! () (the (set-slot! :hint-7 (not (the hint-7)))))\n\n\n   )\n\n  :objects\n  ((start-section\n    :type 'sheet-section\n    :inner-html (with-cl-who-string ()\n\t\t  (:div :class \"grid-container-2-650px\"\n\t\t\t(:div :class \"grid-item\"\n\t\t\t      (:p \"Up to now we have covered the basics of \"\n\t\t\t          (:ul\n                                   (:li \"Defining & Instantiating GendL objects\")\n\t\t\t\t   (:li \"Positioning and orienting geometry\")\n\t\t\t\t   (:li \"Defining child objects and sequences of child objects\")\n\t\t\t\t   (:li \"Dealing with numbers and lists\")\n\t\t\t\t   (:li \"Defining standard CL functions and GendL object functions\"))\n\t\t\t          \"This tutorial aims to bring the above concepts together with a\ntangible example. Starting with the example briefing below, you can\neither try to develop your own solution or build up a solution in a\nguided step-by-step manner by clicking the Hint button\")\n\t\t\t      (:h3 \"Example Briefing\")\n\t\t\t      (:p \"Imagine a wall is built from bricks which\nare 180mm long, 45mm high and 90mm wide. Each course (i.e. row) of\nbricks sits on a bed of mortar which is 10mm thick, and each brick is\njoined to its lateral neighbor(s) with mortar having a nominal joint\nthickness of 10mm. While a wall instance can be specified using\nnominal dimensions for length and height, the actual dimensions may\nvary slightly in order to use a whole number of bricks per\nrow. Vertically adjacent rows of bricks are offset by half a\nbrick with respect to the row below and so will consist of a\nhalf-brick at the beginning and a half-brick at the end of the\nrow (i.e. row).\")\n\n                              (:p \"Define and instantiate a GendL model of a wall which has a default\nnominal height of 900mm and a nominal length of 3700mm, and report\nthe number of full bricks and number of half bricks used. Assuming the\ndensity of mortar is 2182kg/m\"(:sup \"3\") \" determine also the mass of\nmortar used\")))\n                  \n\t\t  (:p (str (the (hint-button :function-key :hint-1!))))))\n                  \n   (hint-1-section\n    :type 'sheet-section\n    :inner-html (with-cl-who-string()\n\t\t  (when (the hint-1)\n\t\t    (htm\n\t\t     (:div :class \"grid-container-2-650px\"\n\t\t\t   (:div :class \"grid-item\"\n\t\t\t\t (:p \"Start by thinking of the structure\"\n\t\t\t\t     (:ul (:li \"A wall has rows of bricks and mortar.\")\n\t\t\t\t\t  (:li \"A row of bricks and morter has a row of bricks seperated by mortar joints, sat on a bed of mortar\")\n\t\t\t\t\t  (:li \"A row of bricks seperated by mortar joints is made of full bricks and half bricks and mortar\")\n\t\t\t\t\t  (:li \"A bed of mortar sits below every row of bricks separated by mortar joints\"))\n\t\t\t\t     \"And from that conceptual description, lay down a definition for an\noutline object structure. Note that while as yet it contains neither dimensions\nnor mixins, at its leaf level it is already using GendL wireframe geometry primitives\")))\n                     \n\t\t     (str (code-example (the code-1)))\n                     \n\t\t     (str (the (hint-button :function-key :hint-2!)))))))\n                                            \n   (hint-2-section\n    :type 'sheet-section\n    :inner-html (with-cl-who-string()\n\t\t  (when (the hint-2)\n\t\t    (htm\n\t\t     (:div :class \"grid-container-2-650px\"\n\t\t\t   (:div :class \"grid-item\"\n\t\t\t\t (:p \"Working from the bottom with the GendL leaf instances of \"\n\t\t\t\t     ((:span :class \"object\")\"brick\")\", \"\n\t\t\t\t     ((:span :class \"object\")\"half-brick\")\" and \"\n\t\t\t\t     ((:span :class \"object\")\"mortar-joint\")\" (all standard \"\n                                     (:span :class \"object\" \"box\") \"es), determine appropriate referencing expressions for their\ndimensional inputs. This will also inform as to what \"\n                                     (:span :class \"object-keyword\" \":input-slots\")\n                                     \" you will need coming into the \"\n                                     ((:span :class \"object\") \"bricks-and-mortar\")\" parent object.\")\n\t\t\t\t (str (code-example (the code-2)))\n\t\t\t\t (:p \"Then move up to the \"((:span :class \"object\") \"row\")\" object and repeat\")\n\t\t\t\t (str (code-example (the code-3)))\n\t\t\t\t (:p \"Then move up to the \"\n\t\t\t\t     ((:span :class \"object\")\"wall\")\" object and repeat, but with this object add the default values for \"\n\t\t\t\t     ((:span :class \"object-keyword\")\":input-slots\")\", and the other 2 known inputs \"\n\t\t\t\t     ((:span :class \"slot\")\"wall-height\")\" and \"\n\t\t\t\t     ((:span :class \"slot\")\"wall-length\"))\n\t\t\t\t (str (code-example (the code-4)))))\n                     \n\t\t     (:p (str (the (hint-button :function-key :hint-3!))))))))\n\n   (hint-3-section :type 'sheet-section\n\t\t   :inner-html (with-cl-who-string()\n\t\t\t\t (when (the hint-3)\n\t\t\t\t   (htm\n\t\t\t\t    (:div :class \"grid-container-2-650px\"\n\t\t\t\t\t  (:div :class \"grid-item\"\n\t\t\t\t\t\t(:p \"Now working from the top down you need to determine the actual overall dimensions of the \"\n\t\t\t\t\t    ((:span :class \"object\")\"wall\")\" and from the the number of \"\n\t\t\t\t\t    ((:span :class \"object\")\"rows\")\". If you use a \"\n\t\t\t\t\t    ((:span :class \"object\")\"box\")\" mixin for the \"\n\t\t\t\t\t    ((:span :class \"object\")\"wall\")\n                                            \" object and specify its \"\n                                            (:span :class \"slot\" \"width\") \", \"\n                                            (:span :class \"slot\" \"length\") \", and \"\n                                            (:span :class \"slot\" \"height\")                                             \n                                            \" appropriately (and leaving \"\n                                            (:span :class \"slot\" \"center\") \" and \"\n                                            (:span :class \"slot\" \"orientation\")\n                                            \" to their default values for now), then you can probe and display its reference box i.e. bounding-box. Having calculated the \"\n\t\t\t\t\t    ((:span :class \"slot\")\"number-of-rows\")\", you can also set the \"\n\t\t\t\t\t    ((:span :class \"object-keyword\")\":sequence (:size )\")\" for the \"\n\t\t\t\t\t    ((:span :class \"object\")\"row\")\" object and additionally pass in the \"\n\t\t\t\t\t    ((:span :class \"slot\")\"bricks-per-row\")\", \"\n\t\t\t\t\t    ((:span :class \"slot\")\"width\")\" and \"\n\t\t\t\t\t    ((:span :class \"slot\")\"length\")\". Compiling \"\n\t\t\t\t\t    ((:span :class \"object\")\"wall\")\" and displaying in Geysr, you can show the overall bounding box and see the sequence of \"\n\t\t\t\t\t    ((:span :class \"object\")\"row\")\" objects\"))\n\t\t\t\t\t (:div :class \"grid-item\") \n\t\t\t\t\t(:div :class \"grid-item\"\n\t\t\t\t\t  (str (code-example (the code-5))))\n\t\t\t\t\t(:div :class \"grid-item\"\n\t\t\t\t\t  (:img :src (format nil \"/~a-images/geysr-wall-1.png\" (the publish-prefix)) :style \"width: auto; height: 300px; margin: 1em 0 1em 3% ;\" )))\n\t\t\t\t    (:p (str (the (hint-button :function-key :hint-4!))))))))\n                                                               \n   (hint-4-section :type 'sheet-section\n\t\t   :inner-html (with-cl-who-string()\n\t\t\t\t (when (the hint-4)\n\t\t\t\t   (htm\n\t\t\t\t    (:div :class \"grid-container-2-650px\"\n\t\t\t\t\t  (:div :class \"grid-item\"\n\t\t\t\t\t\t(:p \"The next task is to position each row of bricks, first by positioning the bounding box for each \"\n\t\t\t\t\t    ((:span :class \"object\")\"row\")\". Each \"\n\t\t\t\t\t    ((:span :class \"object\")\"row\")\" is \"\n\t\t\t\t\t    ((:span :class \"slot\")\"(the brick-height)\")\" + \"\n\t\t\t\t\t    ((:span :class \"slot\")\"(the mortar-jpint-width)\")\" high. The center of the first \"\n\t\t\t\t\t    ((:span :class \"object\")\"row\")\" is half of this dimension above the bottom of the \"\n\t\t\t\t\t    ((:span :class \"object\")\"wall\")\", and the center of each subsequent \"\n\t\t\t\t\t    ((:span :class \"object\")\"row\")\" is the \"\n\t\t\t\t\t    ((:span :class \"object\")\"row\")\" height above the center of the previous \"\n\t\t\t\t\t    ((:span :class \"object\")\"row\")\". Updating the definition of \"\n\t\t\t\t\t    ((:span :class \"object\")\"row\")\" to use \"\n\t\t\t\t\t    ((:span :class \"object\")\"box\")\" as its mixin and then specifying \"\n\t\t\t\t\t    ((:span :class \"object-keyword\")\":center\")\" and \"\n\t\t\t\t\t    ((:span :class \"object-keyword\")\":height\")\" is sufficient to define and position each \"\n\t\t\t\t\t    ((:span :class \"object\")\"row\")\" of the \"\n\t\t\t\t\t    ((:span :class \"object\")\"wall\")\". The code below shows just the update to the definition of the \"\n\t\t\t\t\t    ((:span :class \"object\")\"row\")\" child object of \"\n\t\t\t\t\t    ((:span :class \"object\")\"wall\")))\n\t\t\t\t\t (:div :class \"grid-item\") \n\t\t\t\t\t(:div :class \"grid-item\"\n\t\t\t\t\t  (str (code-example (the code-6))))\n\t\t\t\t\t (:div :class \"grid-item\"\n\t\t\t\t\t  (:img :src (format nil \"/~a-images/geysr-wall-2.png\"  (the publish-prefix)):style \"width: auto; height: 300px; margin: 1em 0 1em 3% ;\" )))\n\t\t\t\t\t(:p (str (the (hint-button :function-key :hint-5!))))))))\n\n   (hint-5-section :type 'sheet-section\n\t\t   :inner-html (with-cl-who-string()\n\t\t\t\t (when (the hint-5)\n\t\t\t\t   (htm\n\t\t\t\t    (:div :class \"grid-container-2-650px\"\n\t\t\t\t\t  (:div :class \"grid-item\"\n\t\t\t\t\t\t(:p \"Now you can move down to the \"\n\t\t\t\t\t    ((:span :class \"object\")\"row\")\" level and position the \"\n\t\t\t\t\t    ((:span :class \"object\")\"bricks-and-mortar\")\" object plus the \"\n\t\t\t\t\t    ((:span :class \"object\")\"mortar-bed\")\" object. The \"\n\t\t\t\t\t    ((:span :class \"object\")\"mortar-bed\")\" is positioned relative to the \"\n\t\t\t\t\t    ((:span :class \"object-keyword\")\":bottom\")\" face of the \"\n\t\t\t\t\t    ((:span :class \"object\")\"row\")\" and the \"\n\t\t\t\t\t    ((:span :class \"object\")\"bricks-and-mortar\")\" is positioned relative to the \"\n\t\t\t\t\t    ((:span :class \"object-keyword\")\"top\")\" face of the \"\n\t\t\t\t\t    ((:span :class \"object\")\"mortar-bed\")))\n\t\t\t\t\t  (:div :class \"grid-item\")\n\t\t\t\t\t(:div :class \"grid-item\"\n\t\t\t\t\t  (str (code-example (the code-7))))\n\t\t\t\t\t (:div :class \"grid-item\"\n\t\t\t\t\t  (:img :src (format nil \"/~a-images/geysr-wall-3.png\" (the publish-prefix)) :style \"width: auto; height: 200px; margin: 1em 0 1em 3% ;\" )))\n\t\t\t\t    (:p (str (the (hint-button :function-key :hint-6!))))))))\n   \n   (hint-6-section :type 'sheet-section\n\t\t   :inner-html (with-cl-who-string()\n\t\t\t\t (when (the hint-6)\n\t\t\t\t   (htm\n\t\t\t\t    (:div :class \"grid-container-2-650px\"\n\t\t\t\t\t  (:div :class \"grid-item\"\n\t\t\t\t\t\t(:p \"Moving on to the actual \"\n\t\t\t\t\t    ((:span :class \"object\") \"bricks-and-mortar\")\n                                            \", you first need to determine if the row of bricks is made of full bricks only or starts and ends\nwith half bricks. You can do this using the Lisp predicates \"\n\t\t\t\t\t    ((:span :class \"function\")\"zerop\")\" and \"\n\t\t\t\t\t    ((:span :class \"function\")\"evenp\")\" to test the \"\n\t\t\t\t\t    ((:span :class \"object\")\"row\")\" object index number. If it is zero or an even number then the \"\n\t\t\t\t\t    ((:span :class \"object\")\"row\")\" will be made of full bricks only. One other change made to the \"\n\t\t\t\t\t    ((:span :class \"object\")\"row\")\" definition is to use \"\n\t\t\t\t\t    ((:span :class \"object-keyword\")\":pass-down\")\" in the object definitions for \"\n\t\t\t\t\t    ((:span :class \"object\")\"bricks-and-morter\")\" and \"\n\t\t\t\t\t    ((:span :class \"object\")\"morter-bed\")\". When a parent slot has the same name as a child objects \"\n\t\t\t\t\t    ((:span :class \"object-keyword\")\":input-slot\")\" you can use \"\n\t\t\t\t\t    ((:span :class \"object-keyword\")\":pass-down\")\" and just provide a list of the slot names avoiding having to map the \"\n\t\t\t\t\t    ((:span :class \"object-keyword\")\":input-slot\")\" to the parents slot with the \"\n\t\t\t\t\t    ((:span :class \"macro\")\"the\")\" macro\")\n\t\t\t\t\t(str (code-example (the code-8)))\n\t\t\t\t\t(:p \"you need to add the input-slot full-brick-row? to the bricks-and-morter object and start to thnk about positioning the full-brick, half-brick and mortar-joint objects. If you consider a row of full bricks\"))\n\t\t\t\t\t  (:div :class \"grid-item\")\n\t\t\t\t\t  (:div :class \"grid-item\"\n\t\t\t\t\t  (str (code-example (the code-9))))\n\t\t\t\t\t (:div :class \"grid-item\"\n\t\t\t\t\t  (:p \"This section of code for \"\n\t\t\t\t\t      ((:span :class \"object\")\"bricks-and-mortar\")\" covers just the \"\n\t\t\t\t\t      ((:span :class \"object-keyword\")\":computed-slots\")\". They could quite easily be defined as part of the child object definitions but defining them as \"\n\t\t\t\t\t      ((:span :class \"object-keyword\")\":computed-slots\")\" helps with debugging and makes the code more maintainable. There may be a slight performance hit in doing this but that can be dealt with later if required. Its one of the great things about GendL and Lisp, start of by writing code fast, then if theres and issue transform it to fast code. A detail to consider is the width of the mortar joint. In a full brick row, with N full bricks there are N-1 joints, but if the row starts and ends with half bricks an extra joint will be included. If you maintain the joint width, the end of a row starting and ending with half bricks will not be alligned with the end of a full brick row, so you have to reduce the mortar joint for rows starting and ending with half bricks. In the \"\n\t\t\t\t\t      ((:span :class \"object-keyword\")\":computed-slot\")\" \"\n\t\t\t\t\t      ((:span :class \"slot\")\"corrected-joint-width\")\" the Lisp special operator \"\n\t\t\t\t\t      ((:span :class \"special-operator\")\"let\")\" has been used to enable a local binding to be created. We'll cover local bindings in a later tutorial, but for now its just like a temporary variable only available to the slot its defined in\"))\n\t\t\t\t\t(:div :class \"grid-item\"\n\t\t\t\t\t  (str (code-example (the code-10))))\n\t\t\t\t\t(:div :class \"grid-item\"\n\t\t\t\t\t  (:p \"This section of code for \"\n\t\t\t\t\t      ((:span :class \"object\")\"bricks-and-mortar\")\" covers just the \"\n\t\t\t\t\t      ((:span :class \"object-keyword\")\":functions\")\". These \"\n\t\t\t\t\t      ((:span :class \"object-keyword\")\":functions\")\" are used in the child objects to define the \"\n\t\t\t\t\t      ((:span :class \"object-keyword\")\":center\")\" of \"\n\t\t\t\t\t      ((:span :class \"object\")\"full-brick\")\", \"\n\t\t\t\t\t      ((:span :class \"object\")\"half-brick\")\" and \"\n\t\t\t\t\t      ((:span :class \"object\")\"mortar-joint\")\". As above, this is implemented more for convenience and code managability than technical requirement\"\n\t\t\t\t\t      (:ul (:li \"The first \"\n\t\t\t\t\t\t\t((:span :class \"object\")\"full-brick\")\" (index = 0) will be positioned relative to the front face of the parents (\"\n\t\t\t\t\t\t\t((:span :class \"object\")\"bricks-and-mortar\")\") bounding box.\")\n\t\t\t\t\t\t   (:li \"The first \"\n\t\t\t\t\t\t\t((:span :class \"object\")\"mortar-joint\")\" (index = 0) will be positioned relative to the rear face of the first (nth = 0) \"\n\t\t\t\t\t\t\t((:span :class \"object\")\"full-brick\")\".\")\n\t\t\t\t\t\t   (:li \"The second \"\n\t\t\t\t\t\t\t((:span :class \"object\")\"full-brick\")\" (index = 1) will be positioned relative to the rear face of the first \"\n\t\t\t\t\t\t\t((:span :class \"object\")\"mortar-joint\")\" (index=0).\")\n\t\t\t\t\t\t   (:li \"The second \"\n\t\t\t\t\t\t\t((:span :class \"object\")\"mortar-joint\")\" (index = 1) will be positioned relative to the rear face of the second \"\n\t\t\t\t\t\t\t((:span :class \"object\")\"full-brick\")\" (nth = 1).\")\n\t\t\t\t\t\t   (:li \"The third \"\n\t\t\t\t\t\t\t((:span :class \"object\")\"full-brick\")\" (index = 2) will be positioned relative to the rear face of the second \"\n\t\t\t\t\t\t\t((:span :class \"object\")\"mortar-joint\")\" (index = 1).\")\n\t\t\t\t\t\t   (:li \"And so on... You can see a pattern emerging that you can use to code the positioning\"))\n\t\t\t\t\t      \"When the row starts with a \"\n\t\t\t\t\t      ((:span :class \"object\")\"half-brick\")\" its slightly different\"\n\t\t\t\t\t      (:ul (:li \"The first \"\n\t\t\t\t\t\t        ((:span :class \"object\")\"half-brick\")\" (index = 0) will be positioned relative to the front face of the parents (\"\n\t\t\t\t\t\t        ((:span :class \"object\")\"bricks-and-mortar\")\") bounding box.\")\n\t\t\t\t\t\t   (:li \"The first \"\n\t\t\t\t\t\t        ((:span :class \"object\")\"mortar-joint\")\" (index = 0) will be positioned relative to the rear face of the first (nth = 0) \"\n\t\t\t\t\t\t        ((:span :class \"object\")\"half-brick\")\".\")\n\t\t\t\t\t\t   (:li \"The first \"\n\t\t\t\t\t\t        ((:span :class \"object\")\"full-brick\")\" (index = 0) will be positioned relative to the rear face of the first  \"\n\t\t\t\t\t\t        ((:span :class \"object\")\"mortar-joint\")\" (index = 0).\")\n\t\t\t\t\t\t   (:li \"The second \"\n\t\t\t\t\t\t        ((:span :class \"object\")\"mortar-joint\")\" (index = 1) will be positioned relative to the rear face of the first \"\n\t\t\t\t\t\t        ((:span :class \"object\")\"full-brick\")\" (nth = 0).\")\n\t\t\t\t\t\t   (:li \"The second \"\n\t\t\t\t\t\t        ((:span :class \"object\")\"full-brick\")\" (index = 1) will be positioned relative to the rear face of the second \"\n\t\t\t\t\t\t        ((:span :class \"object\")\"mortar-joint\")\" (index = 1).\")\n\t\t\t\t\t\t   (:li \"And so on.. Again you can see a pattern emerging that you can use to code the positioning\")))\n\t\t\t\t\t  (:p \"Some points to note\"\n\t\t\t\t\t      (:ul (:li \"The \"\n\t\t\t\t\t\t\t((:span :class \"object-keyword\")\":functions\")\" \"\n\t\t\t\t\t\t\t((:span :class \"function\")\"other-brick-center!\")\" and \"\n\t\t\t\t\t\t\t((:span :class \"function\")\"other-joint-center!\")\" use the special operator \"\n\t\t\t\t\t\t\t((:span :class \"special-operator\")\"let\")\" to create a local binding again, just to make the calculation easier to understand\")\n\t\t\t\t\t\t   (:li \"When calculating the reference point for the second \"\n\t\t\t\t\t\t\t((:span :class \"object\")\"half-brick\")\" (\"\n\t\t\t\t\t\t\t((:span :class \"function\")\"last-half-brick-center!\")\"), you send the message \"\n\t\t\t\t\t\t\t((:span :class \"slot\")\"last\")\" to the \"\n\t\t\t\t\t\t\t((:span :class \"object\")\"mortar-joint\")\" sequence to return the last \"\n\t\t\t\t\t\t\t((:span :class \"object\")\"mortar-joint\")\" in the sequence. As this returns an object, to get the \"\n\t\t\t\t\t\t\t((:span :class \"function\")\"(face-center :rear)\")\" value you need to use the \"\n\t\t\t\t\t\t\t((:span :class \"macro\")\"the-object\")\" or \"\n\t\t\t\t\t\t\t((:span :class \"macro\")\"theo\")\" macro instead of \"\n\t\t\t\t\t\t\t((:span :class \"macro\")\"the\")\n\t\t\t\t\t\t\t(:li \"As discussed in the Functions and :functions tutorial, the \"\n\t\t\t\t\t\t\t     ((:span :class \"object-keyword\")\":function\")\" names all end with the ! character. This is out of convention for readability rather than and technical need\")))))\n\t\t\t\t\t(:div :class \"grid-item\"\n\t\t\t\t\t  (str (code-example (the code-11))))\n\t\t\t\t\t(:div :class \"grid-item\"\n\t\t\t\t\t  (:p \"Finally, if you look at the \"((:span :class \"object\")\":objects\")\" definition, you can see that the use of the \"\n\t\t\t\t\t      ((:span :class \"function\")\":functions\")\" has enabled the readability of this section to be maintained. An interesting point to note is the definition of \"\n\t\t\t\t\t      ((:span :class \"object\")\"half-brick\")\", particularly the \"\n\t\t\t\t\t      ((:span :class \"general-keyword\")\":sequence (:size )\")\" value. When the row is a full brick row (ie no half bricks), the size is zero which means that this sequence contains no objects. This will need to be borne in mind when you come to collecting information about the number of \"\n\t\t\t\t\t      ((:span :class \"object\")\"full-bricks\")\" and \"\n\t\t\t\t\t      ((:span :class \"object\")\"half-bricks\")\" in the \"\n\t\t\t\t\t      ((:span :class \"object\")\"wall\")))\n\t\t\t\t\t(:div :class \"grid-item\"\n\t\t\t\t\t(:p \"You can now inspect the model in Geysr, first by drawing the first 2 \"\n\t\t\t\t\t    ((:span :class \"object\")\"full-bricks\")\" and \"\n\t\t\t\t\t    ((:span :class \"object\")\"mortar-joints\")\" from the bottom \"\n\t\t\t\t\t    ((:span :class \"object\")\"row\")\", then the whole bottom \"\n\t\t\t\t\t    ((:span :class \"object\")\"row\")\" of bricks, then the bottom \"\n\t\t\t\t\t    ((:span :class \"object\")\"row\")\" with the \"\n\t\t\t\t\t    ((:span :class \"object\")\"morter-bed\")\", then add the second \"\n\t\t\t\t\t    ((:span :class \"object\")\"row\")\" (showing the \"\n\t\t\t\t\t    ((:span :class \"object\")\"half-bricks\")\" to get the brick offset) and then finally the full \"\n\t\t\t\t\t    ((:span :class \"object\")\"wall\"))\n\t\t\t\t\t(:img :src (format nil \"/~a-images/geysr-wall-4.png\" (the publish-prefix)) :style \"width: auto; height: 200px; margin: 1em 0 1em 3% ;\" ) (:br)\n\t\t\t\t\t(:img :src (format nil \"/~a-images/geysr-wall-5.png\" (the publish-prefix)) :style \"width: auto; height: 200px; margin: 1em 0 1em 3% ;\" )(:br)\n\t\t\t\t\t(:img :src (format nil \"/~a-images/geysr-wall-6.png\" (the publish-prefix)) :style \"width: auto; height: 200px; margin: 1em 0 1em 3% ;\" )(:br)\n\t\t\t\t\t(:img :src (format nil \"/~a-images/geysr-wall-7.png\" (the publish-prefix)) :style \"width: auto; height: 200px; margin: 1em 0 1em 3% ;\" )\n\t\t\t\t\t(:p \"The final task is to use the geometry to determine how many full bricks and half bricks and what volume of morter are required \")))\n\t\t\t\t\t\n\t\t\t\t\t(:p (str (the (hint-button :function-key :hint-7!))))))))\n\n   (hint-7-section :type 'sheet-section\n\t\t   :inner-html (with-cl-who-string()\n\t\t\t\t (when (the hint-7)\n\t\t\t\t   (htm\n\t\t\t\t    (:div :class \"grid-container-2-650px\"\n\t\t\t\t\t  (:div :class \"grid-item\"\n\t\t\t\t\t\t(:p \"You now need to gather the outputs. You can do this at the lowest (\"\n\t\t\t\t\t    ((:span :class \"object\")\"bricks-and-morter\")\") level and then collate them from the object sequences. Whilst\nyou could re-do the calculation explicitly, the model is already calculating these values implicitly anyway and you can use this fact to your advantage\nby probing the model directly for the number of objects (for \"\n\t\t\t\t\t    ((:span :class \"object\")\"full-bricks\")\" and \"\n\t\t\t\t\t    ((:span :class \"object\")\"half-bricks\")\") in each \"\n\t\t\t\t\t    ((:span :class \"object\")\"row\")\" and getting a total \"\n\t\t\t\t\t    ((:span :class \"slot\")\"volume\")\" for the \"\n\t\t\t\t\t    ((:span :class \"object\")\"mortar-joint\")\" and \"\n\t\t\t\t\t    ((:span :class \"object\")\"mortar-bed\")\". The code extract below just shows the additional \"\n\t\t\t\t\t    ((:span :class \"object-keywords\")\":computed-slots\")\" required in each object to achieve this.\")\n\t\t\t\t\t(:p \"Note the use of the \"\n\t\t\t\t\t    ((:span :class \"function\")\"apply\")\" function to sum the \"\n\t\t\t\t\t    ((:span :class \"slot\")\"mortar-joint-volume\")\" in \"\n\t\t\t\t\t    ((:span :class \"object\")\"bricks-and-mortar\")\" and to sum \"\n\t\t\t\t\t    ((:span :class \"slot\")\"full-bricks\")\", \"\n\t\t\t\t\t    ((:span :class \"slot\")\"half-bricks\")\" and \"\n\t\t\t\t\t    ((:span :class \"slot\")\"mortar-volume\")\" in \"\n\t\t\t\t\t    ((:span :class \"object\")\"wall\")\". We use \"\n\t\t\t\t\t    ((:span :class \"function\")\"apply\")\" in conjunction with the \"\n\t\t\t\t\t    ((:span :class \"function\")\"+\")\" function to sum the elements of the list returned by (\"\n\t\t\t\t\t    ((:span :class \"macro\") \"list-elements\")\" [object] (\"((:span :class \"macro\")\"the-element\")\n                                            \" [slot])). There are more efficient ways of summing and otherwise summarizing values from sequences and trees of GendL\nobjects, but the \"\n                                            (:span :class \"function\" \"apply\")\n                                            \" technique shown here has the advantage of being simple and generally applicable.\"))\n\t\t\t\t\t  (:div :class \"grid-item\")\n\t\t\t\t\t  (:div :class \"grid-item\"\n\t\t\t\t          (str (code-example (the code-12))))\n\t\t\t\t        (:div :class \"grid-item\"\n\t\t\t\t          (str (repl-example (the repl-1)))))))))\n\n   (resource-links-section :type 'sheet-section\n\t\t\t   :inner-html (with-cl-who-string()\n\t\t\t\t\t (:table\n\t\t\t\t\t     (let ((icon \"/common-images/lisp-file.png\"))\n\t\t\t\t\n\t\t\t\t\t       (htm (:tr (when (the hint-1)\n\t\t\t\t\t\t\t   (htm (:td (:a :href (format nil \"/~a-resources/wall-hint-1.lisp\" *publish-prefix*)\n\t\t\t\t\t\t\t\t\t (:img :src icon :style \"width: 40px; height: auto;\")))\n\t\t\t\t\t\t\t\t(:td (:a :href (format nil \"/~a-resources/wall-hint-1.lisp\" *publish-prefix*)\n\t\t\t\t\t\t\t\t\t \"wall-hint-1.lisp\")))))\n\t\t\t\t\t\t    (:tr (when (the hint-2)\n\t\t\t\t\t\t\t   (htm (:td (:a :href (format nil \"/~a-resources/wall-hint-2.lisp\" *publish-prefix*) \n\t\t\t\t\t\t\t\t\t (:img :src icon :style \"width: 40px; height: auto;\")))\n\t\t\t\t\t\t\t\t(:td (:a :href (format nil \"/~a-resources/wall-hint-2.lisp\" *publish-prefix*)\n\t\t\t\t\t\t\t\t\t \"wall-hint-2.lisp\")))))\n\t\t\t\t\t\t    (:tr (when (the hint-3)\n\t\t\t\t\t\t\t   (htm (:td (:a :href (format nil \"/~a-resources/wall-hint-3.lisp\" *publish-prefix*)\n\t\t\t\t\t\t\t\t\t (:img :src icon :style \"width: 40px; height: auto;\")))\n\t\t\t\t\t\t\t\t(:td (:a :href (format nil \"/~a-resources/wall-hint-3.lisp\" *publish-prefix*)\n\t\t\t\t\t\t\t\t\t \"wall-hint-3.lisp\")))))\n\t\t\t\t\t\t    (:tr (when (the hint-4)\n\t\t\t\t\t\t\t   (htm (:td (:a :href (format nil \"/~a-resources/wall-hint-4.lisp\" *publish-prefix*)\n\t\t\t\t\t\t\t\t\t (:img :src icon :style \"width: 40px; height: auto;\")))\n\t\t\t\t\t\t\t\t(:td (:a :href (format nil \"/~a-resources/wall-hint-4.lisp\" *publish-prefix*)\n\t\t\t\t\t\t\t\t\t \"wall-hint-4.lisp\")))))\n\t\t\t\t\t\t    (:tr (when (the hint-5)\n\t\t\t\t\t\t\t   (htm (:td (:a :href (format nil \"/~a-resources/wall-hint-5.lisp\" *publish-prefix*)\n\t\t\t\t\t\t\t\t\t (:img :src icon :style \"width: 40px; height: auto;\")))\n\t\t\t\t\t\t\t\t(:td (:a :href (format nil \"/~a-resources/wall-hint-5.lisp\" *publish-prefix*)\n\t\t\t\t\t\t\t\t\t \"wall-hint-5.lisp\")))))\n\t\t\t\t\t\t    (:tr (when (the hint-6)\n\t\t\t\t\t\t\t   (htm (:td (:a :href (format nil \"/~a-resources/wall-hint-6.lisp\" *publish-prefix*)\n\t\t\t\t\t\t\t\t\t (:img :src icon :style \"width: 40px; height: auto;\")))\n\t\t\t\t\t\t\t\t(:td (:a :href (format nil \"/~a-resources/wall-hint-6.lisp\" *publish-prefix*)\n\t\t\t\t\t\t\t\t\t \"wall-hint-6.lisp\")))))\n\t\t\t\t\t\t    (:tr (when (the hint-7)\n\t\t\t\t\t\t\t   (htm (:td (:a :href (format nil \"/~a-resources/wall-hint-7.lisp\" *publish-prefix*)\n\t\t\t\t\t\t\t\t\t (:img :src icon :style \"width: 40px; height: auto;\")))\n\t\t\t\t\t\t\t\t(:td (:a :href (format nil \"/~a-resources/wall-hint-7.lisp\" *publish-prefix*)\n\t\t\t\t\t\t\t\t\t \"wall-hint-7.lisp\"))))))))))\n\n   )\n\t\t\t\t   \n\t\t\t\t       \n  )\n",
    "metadata": {
      "source": "gornschool-training/t2/source/wall-example.lisp",
      "file_name": "wall-example.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 16,
      "section": "bricks-and-mortar"
    },
    "id": "7c807318e22284b53621851dd28b2219"
  },
  {
    "text": "(in-package :gdl-user)\n\n(gwl:define-package :training-2\n    (:use :training-common)\n  (:shadow #:*home*)\n  (:export #:assembly))\n\n",
    "metadata": {
      "source": "gornschool-training/t2/source/package.lisp",
      "file_name": "package.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_package",
      "chunk_id": 0,
      "section": "header"
    },
    "id": "b037215c72927448a208ae7a15a4ae88"
  },
  {
    "text": "(in-package :training-2)\n\n(defparameter *publish-prefix* \"t2\")\n\n",
    "metadata": {
      "source": "gornschool-training/t2/source/assembly.lisp",
      "file_name": "assembly.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 0,
      "section": "header"
    },
    "id": "3a83d92c9ce0480cd8af618b8548ebfd"
  },
  {
    "text": "(define-object assembly (base-tutorial-sheet)\n  :input-slots\n  (\n  (tutorial-name \"Getting started with GendL\"))\n  \n  :computed-slots\n  ((introduction (with-cl-who-string ()\n\t\t   (:p \"This tutorial should equip you with the basics to get you started using GendL including\"\n\t\t (:ul (:li \"Development tools\")\n\t\t      (:li \"An introduction to some of the commonly used Common Lisp functionality\")\n\t\t      (:li \"Using GendL's built in primitives, and extending them for your own specific needs\")\n\t\t      (:li \"Examples on building applications\")\n\t\t      (:li \"Practical guidance on designing code structures\"))))))\n  :objects\n  ((intro :type 'tutorial-intro\n\t\t :pass-down (page-objects)\n\t\t :page 1\n\t\t :page-title \"Getting started with GendL\"\n\t\t :resources (list \"my-box-1.lisp\")\n\t\t :publish-prefix *publish-prefix*\n\t\t :index-url (the index-page url))\n   (gendl-intro :type 'gendl-intro\n\t\t:pass-down (page-objects)\n\t\t:page 2\n\t\t:publish-prefix *publish-prefix*\n\t\t:page-title \"GendL Introduction\"\n\t\t:resources (list \"Useful-Emacs-Key-Combinations.pdf\"))\n   (instantiate-repl :type 'instantiate-repl\n\t\t     :pass-down (page-objects)\n\t\t     :page 3\n\t\t     :publish-prefix *publish-prefix*\n\t\t     :page-title \"Instantiating objects in the REPL\"\n\t\t     :resources (list \"my-box-1.lisp\"))\n   (instantiate-geysr :type 'instantiate-geysr\n\t\t      :pass-down (page-objects)\n\t\t      :page 4\n\t\t      :publish-prefix *publish-prefix*\n\t\t      :page-title \"Instantiating objects in Geysr\"\n\t\t      :resources (list \"my-box-1.lisp\"))\n\n   (object-definition :type 'object-definition\n\t\t      :pass-down (page-objects)\n\t\t      :page 5\n\t\t      :publish-prefix *publish-prefix*\n\t\t      :page-title \"Defining Objects\"\n\t\t      :resources (list \"define-object.lisp\"))\n\n   (numbers-and-arithmetic :type 'numbers-and-arithmetic\n\t\t\t   :pass-down (page-objects)\n\t\t\t   :page 6\n\t\t\t   :publish-prefix *publish-prefix*\n\t\t\t   :page-title \"Numbers and Arithmetic\"\n\t\t\t   :resources (list \"numbers.lisp\"))\n\n   (positioning-and-orientation :type 'positioning-and-orientation\n\t\t\t\t:pass-down (page-objects)\n\t\t\t\t:page 7\n\t\t\t\t:publish-prefix *publish-prefix*\n\t\t\t\t:page-title \"Positioning and Orientation\"\n\t\t\t\t:resources (list \"axis-system.pdf\" \"positioning-and-orientation.lisp\" \"point-and-vector-examples.lisp\"))\n\n   (object-sequences :type 'object-sequences\n\t\t     :pass-down (page-objects)\n\t\t     :page 8\n\t\t     :publish-prefix *publish-prefix*\n\t\t     :page-title \"Sequences of Objects\"\n\t\t     :resources (list \"sequences.lisp\"))\n   \n   (lists :type 'lists\n\t  :pass-down (page-objects)\n\t  :page 9\n\t  :publish-prefix *publish-prefix*\n\t  :page-title \"Lists\"\n\t  :resources (list \"lists.lisp\" \"using-lists.lisp\"))\n\n   (functions-and-functions :type 'functions-and-functions\n\t\t\t    :pass-down (page-objects)\n\t\t\t    :page 10\n\t\t\t    :publish-prefix *publish-prefix*\n\t\t\t    :page-title \"Functions and :functions\"\n\t\t\t    :resources (list \"functions.lisp\"))\n\n   (equality :type 'equality\n\t\t\t      :pass-down (page-objects)\n\t     :page 11\n\t     :publish-prefix *publish-prefix*\n\t     :page-title \"Equality\"\n\t     :resources (list \"equality.lisp\"))\n   \n   (conditionals :type 'conditionals\n\t\t\t      :pass-down (page-objects)\n\t\t :page 12\n\t\t :publish-prefix *publish-prefix*\n\t\t :page-title \"Conditionals\"\n\t\t :resources (list \"using-conditionals.lisp\"))\n   (wall-example :type 'wall-example\n\t\t :pass-down (page-objects)\n\t\t :page 13\n\t\t :publish-prefix *publish-prefix*\n\t\t :page-title \"Wall example - sequences, positioning and collating outputs\")\n   (more-on-lists :type 'more-on-lists\n\t\t  :pass-down (page-objects)\n\t\t  :prior-tutorial-url (the lists url)\n\t\t  :page 14\n\t\t  :publish-prefix *publish-prefix*\n\t\t  :page-title \"More on Lists\"\n\t\t  :resources (list \"more-on-lists.lisp\"))\n\n   (iteration-and-mapping :type 'iteration-and-mapping\n\t\t\t  :pass-down (page-objects)\n\t\t\t  :page 15\n\t\t\t  :publish-prefix *publish-prefix*\n\t\t\t  :page-title \"Iteration and Mapping\"\n\t\t\t  :resources (list \"itteration-and-mapping.lisp\"))\n\n   (truss-example :type 'truss-example\n\t\t  :pass-down (page-objects)\n\t\t  :page 16\n\t\t  :publish-prefix *publish-prefix*\n\t\t  :page-title \"Truss example - positioning and orientation\")\n\n   (building-example :type 'building-example\n\t\t     :pass-down (page-objects)\n\t\t     :page 17\n\t\t     :publish-prefix *publish-prefix*\n\t\t     :page-title \"Assembling objects\")\n   (strings :type 'strings\n\t    :pass-down (page-objects)\n\t    :page 18\n\t    :publish-prefix *publish-prefix*\n\t    :page-title \"Characters and strings\"\n\t    :resources (list \"strings.lisp\"))\n\n   (formatted-output :type 'formatted-output\n\t\t     :pass-down (page-objects)\n\t\t     :page 19\n\t\t     :publish-prefix *publish-prefix*\n\t\t       :page-title \"Formatted output\"\n\t\t     :resources (list (list :title \"Format Recipes\" :url \"https://gigamonkeys.com/book/a-few-format-recipes.html\")\n\t\t\t\t      \"format.lisp\"))\n   \n   (building-example-2 :type 'building-example-2\n\t\t       :pass-down (page-objects)\n\t\t       :page 20\n\t\t       :publish-prefix *publish-prefix*\n\t\t       :page-title \"Generating a formatted BoM\"\n\t\t       :resources (list \"building-hint-6\"))\n\n   )\n  )\n\n\n\n\n",
    "metadata": {
      "source": "gornschool-training/t2/source/assembly.lisp",
      "file_name": "assembly.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 0,
      "section": "assembly"
    },
    "id": "3a83d92c9ce0480cd8af618b8548ebfd"
  },
  {
    "text": "(in-package :training-2)\n\n",
    "metadata": {
      "source": "gornschool-training/t2/source/object-sequences.lisp",
      "file_name": "object-sequences.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 0,
      "section": "header"
    },
    "id": "ec4aadeac55f6db25bb951ee3540026b"
  },
  {
    "text": "(define-object object-sequences (base-training-sheet)\n\n  :computed-slots\n  ((index-words (list \":sequence\" \"standard sequence\" \"radial sequence\"\n                      \"variable sequence\" \"matrix sequence\" \":lateral\"\n                      \":longitudinal\" \":vertical\" \"index\" \"the-child\" \":size\" \":radial\"))\n\n   (code-1 (list \"",
    "metadata": {
      "source": "gornschool-training/t2/source/object-sequences.lisp",
      "file_name": "object-sequences.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 0,
      "section": "object-sequences"
    },
    "id": "ec4aadeac55f6db25bb951ee3540026b"
  },
  {
    "text": "(define-object assembly-2 (base-object)\"\n\t\t \" :objects\"\n\t\t \" ((box-1 :type 'box\"\n\t\t \"         :length 5\"\n\t\t \"         :width 1\"\n\t\t \"         :height 1)\"\n\t\t \"  (box-2 :type 'box\"\n\t\t \"         :length 10\"\n\t\t \"         :height 5\"\n\t\t \"         :width 3\"\n\t\t \"         :center (make-point 2 2 2))\"\n\t\t \"  (box-3 :type 'box\"\n\t\t \"         :length 5\"\n\t\t \"         :height 5\"\n\t\t \"         :width 5\"\n\t\t \"         :center (translate-along-vector (the box-2 center)\"\n\t\t \"                                         (make-vector 1 1 0)\"\n\t\t \"                                          5)))\"\n\t\t \" )\"))\n   \n   (code-2 (list \"",
    "metadata": {
      "source": "gornschool-training/t2/source/object-sequences.lisp",
      "file_name": "object-sequences.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 1,
      "section": "assembly-2"
    },
    "id": "9b8eb3df3b50f9da0143fc0f7c55f0d7"
  },
  {
    "text": "(define-object assembly-6 (base-object)\"\n\t\t \" \"\n\t\t \" :input-slots\"\n\t\t \" ((number-of-boxes 3))\"\n\t\t \" \"\n\t\t \" :computed-slots\"\n\t\t \" ((first-box-volume-1 (the (boxes 0) volume))\"\n\t\t \"  (first-box-volume-2 (the-object (the boxes last) volume))\"\n\t\t \"  (second-box-volume (the (boxes 1) volume))\"\n\t\t \"  (last-box-volume-1 (the (boxes (- (the number-of-boxes)) volume)))\"\n\t\t \"  (last-box-volume-1 (the-object (the boxes last) volume)))\"\n\t\t \" \"\n\t\t \" :objects\"\n\t\t \" ((boxes :type 'box\"\n\t\t \"\t    :sequence (:size (the number-of-boxes))\"\n\t\t \"\t    :length (+ 2 (* (the-child index) 3))\"\n\t\t \"\t    :width 2\"\n\t\t \"\t    :height 1\"\n\t\t \"\t    :center (make-point (* (the-child index) 6) 0 0))))\"))\n\n   \n   (code-3 (list \"",
    "metadata": {
      "source": "gornschool-training/t2/source/object-sequences.lisp",
      "file_name": "object-sequences.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 2,
      "section": "assembly-6"
    },
    "id": "9541a7f61a1e803a0cf4b65ffaa89a72"
  },
  {
    "text": "(define-object assembly-7 (base-object)\"\n\t\t \" \"\n\t\t \" :input-slots\"\n\t\t \" ((number-of-boxes 3))\"\n\t\t \" \"\n\t\t \" :objects\"\n\t\t \" ((boxes :type 'box\"\n\t\t \"\t    :sequence (:radial (the number-of-boxes))\"\n\t\t \"\t    :length (+ 2 (* (the-child index) 3))\"\n\t\t \"\t    :width 2\"\n\t\t \"\t    :height 1\"))\n   \n   (repl-1 (list (list :command \"(setq self (make-object 'assembly-6))\"\n\t\t       :output \"#<ASSEMBLY-6 #x21045E42CD>\")\n\t\t (list :command \"(the boxes)\"\n\t\t       :output \"#<GENDL::STANDARD-SEQUENCE #x21045E3E9D>\")\n\t\t (list :command \"(the (boxes 0))\"\n\t\t       :output \"#<BOX #x21046CBA5D>\")\n                 (list :command \"(the boxes first)\"\n                       :output \"#<BOX #x21046CBA5D>\")\n                 (list :command \"(the boxes last)\"\n                       :output \"#<BOX #x21082334D8>\")\n                 (list :command \"(the (boxes 1) previous)\"\n                       :output \"#<BOX #x21046CBA5D>\")))\n\n\n\n   (body-content (with-cl-who-string ()\n                    (:p \"In many cases you may have child objects which are of the same type\nand only differ in the values of inputs they are given. If you know how\nmany objects there are (and assuming not too many), you could define\nthem independently and give each its own name, as we did for example\nin assembly-2\")\n                    \n                    (str (code-example (the code-1)))\n                    \n\t\t    (:p \"However, there may be times when you do not know in advance how many\nobjects there will be, or you may want to compute the properties of each object\nbased on its identity (e.g. based on its numerical \"\n                        (:span :class \"slot\" \"index\") \"). In either of these cases, a \"\n\t\t\t(:span :class \"general-keyword\" \":sequence\") \" of objects may be appropriate.\")\n\t\t    (:p \"A \"\n\t\t\t(:span :class \"general-keyword\" \":sequence\")\" defines an ordered group of objects.\nThere are four types of \"\n\t\t\t(:span :class \"general-keyword\" \":sequence\") \"s:\"\n\t\t\t(:ul (:li \"A standard sequence - the object specification is defined with the input \"\n\t\t\t\t  (:span :class \"general-keyword\"\n                                         (esc \":sequence (:size <number-expression>)\"))\n                                  \" and a number of objects equal to the value of \"\n\t\t\t\t  (:em (esc \"<number-expression>\"))\" will be created\")\n\t\t\t     (:li \"A radial sequence -  the object specification is defined with the input \"\n\t\t\t\t  (:span :class \"general-keyword\"\n                                         (esc \":sequence (:radial <number-expression>)\"))\n                                  \" and a number of objects equal to the value of \"\n\t\t\t\t  (:em (esc \"<number-expression>\"))\" will be created\")\n\t\t\t     (:li \"A variable sequence - Allows objects in the groups to be\nprogramatically added and deleted. The object specification is defined with the input \"\n\t\t\t\t  (:span :class \"general-keyword\"\n                                         (esc \":sequence (:indices <list-of-indices>)\")))\n\t\t\t     (:li \"A matrix sequence - quantification is generated\nas a result of specifying \"\n\t\t\t\t  ((:span :class \"general-keyword\")\n                                   (esc \":sequence (:matrix <direction-keyword-1> <number-1>\n<direction-keyword-2><number-2>)\"))\n                                  \" in an \"\n                                  (:span :class \"object-keyword\" \":objects\")\n                                  \" specification. The direction-keywords can be one of: \"\n\t\t\t          (:span :class \"general-keyword\" \":lateral\")\", \"\n\t\t\t\t  (:span :class \"general-keyword\" \":longitudinal\")\", or \"\n\t\t\t\t  (:span :class \"general-keyword\" \":vertical\")\".\")))\n                    \n\t\t    (:p \"In this tutorial we will cover only standard and radial sequences.\")\n\t\t    (:p \"When a sequence is generated, each object is assigned a zero-based \"\n\t\t\t(:span :class \"slot\" \"index\")\n                        \" number. When referencing the object from \" (:em \"outside\") \" the \"\n                        (:span :class \"object-keyword\" \":objects\")\n                        \" specification, its \"\n                        (:span :class \"slot\" \"index\")\n                        \" number must be included with the object name between parentheses.\nLikewise, from \"\n                        (:em \"inside\")\n                        \" the \"\n                        (:span :class \"object-keyword\" \":objects\")\n                        \" specification, each child can reference its own \"\n                        (:span :class \"slot\" \"index\") \" slot (or any other of its slots) by\nusing the reference macro \"\n                        (:span :class \"macro\" \"the-child\") \". \")\n                    \n                    (:h3 \"Standard Sequence\")\n                    \n                    (:p \"So consider the following code which defines a sequence of three boxes,\neach of which has its \"\n\t\t\t(:span :class \"slot\" \"length\") \" and \"\n\t\t\t(:span :class \"slot\" \"center\") \" defined based on its \"\n                        (:span :class \"slot\" \"index\") \" number.\")\n                    \n                    (str (code-example (the code-2)))\n                  \n\t\t    (:img :src (format nil \"/~a-images/sequence-1.png\"\n                                       (the publish-prefix))\n                          :style \"width: auto; height: 300px; margin: 1em 0 1em 3% ;\" )\n   \n\n                    (:p \"Note in the Geysr tree, the the names of the child instances include\nthe index number of each.\")\n                    (:p \"Also note in the code example the diferent ways to access\nthe object instances and their messages:\"\n\t\t        (:ul (:li \"Using an index - \"\n                                  (:code (esc \"(the (boxes <index-number>) volume)\"))\n                                  \", where \"\n                                  (:code (esc \"(boxes <index-number>)\"))\n                                  \", i.e. the combination of object name and \"\n\t\t\t\t  (:span :class \"slot\" \"index\") \" enclosed in parentheses,\nevaluates to the object instance which is the desired element of the sequence.\")\n\t\t\t     (:li \"Using \"\n\t\t\t\t  (:span :class \"slot\" \"first\") \" and \"\n\t\t\t\t  (:span :class \"slot\" \"last\") \" - these are \"\n\t\t\t\t  (:span :class \"object-keyword\" \":computed-slots\")\" in the sequence definition which return the first and last objects in the sequence.\")))\n\t\t    (:p \"To review:  \"\n\t\t        (:ul (:li (:code (:b \"(the boxes)\"))\" refers to the whole \"\n\t\t\t\t  (:em (:b \"sequence\")) \".\")\n\t\t\t     (:li (:code (:b (esc \"(the (boxes <index>))\")))\" refers to a \"\n\t\t\t\t  (:em (:b \"specific element\"))\" within that \"(:em (:b \"sequence\")))))\n\t            (str (repl-example (the repl-1)))\n                    (:h3 \"Radial Sequence\")\n\t\t    (:p \"Consider the following code, identical to the standard sequence\nexample except the \"\n\t\t        (:span :class \"general-keyword\" \":sequence\") \" definition is changed to \"\n\t\t        (:span :class \"general-keyword\" \":radial\") \" and the \"\n\t\t        (:span :class \"slot\" \":center\") \" definition is removed.\")\n                    \n\t\t    (str (code-example (the code-3)))\n                    \n                    (:img :src (format nil \"/~a-images/radial-sequence.png\"  (the publish-prefix))\n                          :style \"width: auto; height: 300px; margin: 1em 0 1em 3% ;\" )\n                    (:div :class \"main-page-item\"\n\t\t\t  (:p \"The Geysr image is with \"\n\t\t\t      (:em (:b \"View..Perspective..Top\")) \" enabled to show the effect of the \"\n\t\t\t      (:span :class \"general-keyword\" \":radial\") \" definition. Essentially a \"\n\t\t\t      (:span :class \"general-keyword\" \":radial\")\n                              \" sequence orients each obect so it is rotated \"\n\t\t\t      (:em (:b \"360/[number-expression]\"))\n                              \" degrees compared to its predecessor. You can of course override this\ndefault behavior by feeding an explicit \"\n                              (:span :class \"slot\" \"center\") \" and/or \"\n                              (:span :class \"slot\" \"orientation\") \" into each element.\"))\n                    \n                    (:h2 \"Resources\") (str (the resource-links))))))\n  \n  \n",
    "metadata": {
      "source": "gornschool-training/t2/source/object-sequences.lisp",
      "file_name": "object-sequences.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 3,
      "section": "assembly-7"
    },
    "id": "2b52f951315fc8737c8c9bd6771f547f"
  },
  {
    "text": "(in-package :training-2)\n\n",
    "metadata": {
      "source": "gornschool-training/t2/source/formatted-output.lisp",
      "file_name": "formatted-output.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 0,
      "section": "header"
    },
    "id": "21ca75d410eda2606fd0f6aecbe2557e"
  },
  {
    "text": "(define-object formatted-output (base-training-sheet)\n  :computed-slots\n  ((index-words (list \"~a\" \"~d\" \"~f\" \"~$\" \"~p\" \"~r\" \"~( ~)\" \"~{ ~}\" \"~[ ~]\" \"format\" \"format directive\" \"format directive modifier\"\n\t\t      \"format prefix parameter\" \"format conditional\" \"format iteration\" \"integer directive (format)\"\n\t\t      \"floating point directive (format)\" \"english language directive (format)\" \"case control (format)\"\n\t\t      \"iteration (format)\" \"conditional control (format)\"))\n   \n   (repl-1 (list (list :command \"(setq text \\\"Hello\\\")\"\n\t\t       :output \"\\\"Hello\\\"\")\n\t\t (list :command \"(setq number 123.456)\"\n\t\t       :output 123.456)\n\t\t (list :command \"(setq my-list (list 1 2 3))\"\n\t\t       :output \"(1 2 3)\")\n\t\t (list :command \"(format nil \\\"~a\\\" text)\"\n\t\t       :output \"\\\"Hello\\\"\")\n\t\t (list :command \"(format nil \\\"~a\\\" number)\"\n\t\t        :output \"\\\"123.456\\\"\")\n\t\t (list :command \"(format nil \\\"~a\\\" my-list)\"\n\t\t       :output \"\\\"(1 2 3)\\\"\")\n\t\t (list :command \"(format nil \\\"Line 1~%Line2\\\")\"\n\t\t       :output (list \"\\\"Line 1\" \"Line 2\\\"\"))\n\t\t (list :command \"(format nil \\\"Line 1~%Line2\\\")\"\n\t\t       :output (list \"\\\"Line 1\" \"\" \"Line 2\\\"\"))))\n   \n   (repl-2 (list (list :command \"(format nil \\\"~d\\\" 1234567)\"\n\t\t       :output \"\\\"1234567\\\"\")\n\t\t (list :command \"(format nil \\\"~:d\\\" 1234567)\"\n\t\t       :output \"\\\"1,234,567\\\"\")\n\t\t (list :command \"(format nil \\\"~@d\\\" 1234567)\"\n\t\t       :output \"\\\"+1234567\\\"\")\n\t\t (list :command \"(format nil \\\"~:@d\\\" 1234567)\"\n\t\t       :output \"\\\"+1,234,567\\\"\")\n\t\t (list :command \"(format nil \\\"~12d\\\" 1234567)\"\n\t\t       :output \"\\\"     1234567\\\"\")\n\t\t (list :command \"(format nil \\\"~12,'0d\\\" 1234567)\"\n\t\t       :output \"\\\"000001234567\\\"\")\n\t\t (list :command \"(format nil \\\"~2,'0d-~2,'0d-~d\\\" 31 7 2022)\"\n\t\t       :output \"\\\"31-07-2022\\\"\")))\n\n   (repl-3 (list (list :command \"(format nil \\\"~f\\\" pi)\"\n\t\t       :output \"\\\"3.141592653589793\\\"\")\n\t\t (list :command \"(format nil \\\"~,3f\\\" pi)\"\n\t\t       :output \"3.142\")\n\t\t (list :command \"(format nil \\\"~e\\\" pi)\"\n\t\t       :output \"\\\"3.141592653589793E+0\\\"\")\n\t\t (list :command \"(format nil \\\"~$\\\" pi)\"\n\t\t       :output \"3.14\")))\n\n   (repl-4 (list (list :command \"(format nil \\\"computer~p\\\" 1)\"\n\t\t       :output \"\\\"computer\\\"\")\n\t\t (list :command \"(format nil \\\"~r computer~:p\\\" 1)\"\n\t\t       :output \"\\\"one computer\\\"\")\n\t\t (list :command \"(format nil \\\"~r computer~:p\\\" 2)\"\n\t\t       :output \"\\\"two computers\\\"\")\n\t\t (list :command \"(format nil \\\"~r fl~:@p\\\" 1)\"\n\t\t       :output \"\\\"one fly\\\"\")\n\t\t (list :command \"(format nil \\\"~r fl~:@p\\\" 2)\"\n\t\t       :output \"\\\"two flies\\\"\")))\n   \n   (repl-5 (list (list :command \"(setq txt \\\"sOme RANdom TexT\\\")\"\n\t\t       :output \"\\\"sOme RANdom TexT\\\"\")\n\t\t (list :command \"(format nil \\\"~(~a~)\\\" txt)\"\n\t\t       :output \"\\\"some random text\\\"\")\n\t\t (list :command \"(format nil \\\"~@(~a~)\\\" txt)\"\n\t\t       :output \"\\\"Some random text\\\"\")\n\t\t (list :command \"(format nil \\\"~:(~a~)\\\" txt)\"\n\t\t       :output \"\\\"Some Random Text\\\"\")\n\t\t (list :command \"(format nil \\\"~:@(~a~)\\\" txt)\"\n\t\t       :output \"\\\"SOME RANDOM TEXT\\\"\")))\n\n   (repl-6 (list (list :command \"(format nil \\\"~{~a, ~}\\\" (list 1 2 3))\"\n\t\t       :output \"\\\"1 2 3 \\\"\")\n\t\t (list :command \"(format nil \\\"~{~a ~}\\\" (list 1 2 3))\"\n\t\t       :output \"\\\"1, 2, 3, \\\"\")\n\t\t (list :command \"(format nil \\\"~{~a~^,~}\\\" (list 1 2 3))\"\n\t\t       :output \"\\\"1, 2, 3\\\"\")\n\t\t (list :command \"(format nil \\\"~@{~a~^,~}\\\" 1 2 3)\"\n\t\t       :output \"\\\"1, 2, 3\\\"\")))\n   \n   (repl-7 (list (list :command \"(format nil \\\"~[Peter~;Paul~;John~]\\\" 0)\"\n\t\t       :output \"\\\"Peter\\\"\")\n\t\t (list :command \"(format nil \\\"~[Peter~;Paul~;John~]\\\" 4)\"\n\t\t       :output \"\\\"\\\"\")\n\t\t (list :command \"(format nil \\\"~[Peter~;Paul~;;John~]\\\" 4)\"\n\t\t       :output \"\\\"John\\\"\")\n\t\t (list :command \"(format nil \\\"~@[~r cat~:p ~]~@[~r dog~:p~]\\\" nil 2)\"\n\t\t       :output \"\\\"two dogs\\\"\")\n\t\t (list :command \"(format nil \\\"~@[~r cat~:p ~]~@[~r dog~:p~]\\\" 3 nil)\"\n\t\t       :output \"\\\"three cats \\\"\")\n\t\t (list :command \"(format nil \\\"~@[~r cat~:p ~]~@[~r dog~:p~]\\\" 3 1)\"\n\t\t       :output \"\\\"three cats one dog\\\"\")))\n   \n   (body-content (with-cl-who-string()\n\t\t   ((:div :class \"main-page-container\")\n\t\t    ((:div :class \"main-page-item\")\n\t\t     (:div :class \"grid-container-2-650px\"\n\t\t\t   (:div :class \"grid-item\"\n\t\t      \n\t\t\t         (:p \"When we want more control, flexibility and sophistication with text output we use the \"\n\t\t\t             ((:span :class \"function\")\"format\")\" function\")\n\t\t\t         (:p \"below are some of the most commonly used and useful features of \"((:span :class \"function\")\"format\")\n                                     \", but it can sometimes be difficult to understand or read, due to its compactness and its \nnon-Lispy syntax. A great resource on the Internet is an article by Peter Seibel, called a few FORMAT recipes\nwhich provides a detailed discussion on the features and uses of \"\n                                     ((:span :class \"function\") \"format\")\n                                     \" and some very useful examples. See the link in the resources section\")\n\t\t\t         (:p ((:span :class \"function\")\"Format\")\" takes 2 required arguments\"\n\t\t\t             (:ul (:li \"A \"(:em \"destination\")\" for its output\")\n\t\t\t\t          (:li \"A \"(:em \"control string\")\" that will generally contain literal text, but will always contain format\"\n\t\t\t\t               (:em (:b \"directives\")))) \". \"\n\t\t\t             ((:span :class \"function\")\"Format\")\" will also generally be provided with extra arguments which are used by the \"\n\t\t\t             (:em (:i \"directives\")) \" in the control string.\")\n\t\t                 (:h3 \"Output Destination\")\n\t\t                 (:p \"The \"(:em (:b \"output destination\"))\" is the first argument to format. There are 4 types of output destination, but we'll discuss just the first 3\"\n\t\t\t             (:ul (:li \"If the value is \"\n\t\t\t\t               (:em (:span :class \"general-keyword\"  \"T\"))\", the output destination is the \"\n\t\t\t\t               (:span :class \"variable-name\"  \"*standard-output*\")\" stream\")\n\t\t\t\t          (:li \"If the value is \"\n\t\t\t\t               (:em (:span :class \"value\"  \"NIL\"))\", the output is generated as a string and returned by \"\n\t\t\t\t               ((:span :class \"function\") \"format\"))\n\t\t\t\t          (:li \"If the destination is a stream, the output will be written to that stream\")))\n\t\t\t         (:h3 \"Control String\")\n\t\t\t         (:p \"The \"(:em \"control string\")\" may look complex because it is based on characters, not s-expressions,\nand is optimised for compactness. In many ways it is another \nmini-programming language within Lisp. As well as containing literal text,\nthe control string contains format \"\n\t\t\t             (:em (:b\"directives\")) \". \"\n\t\t\t             (:ul (:li \"All \"\n\t\t\t\t               (:em (:b\"directives\"))\" start with a tilde (~) character, and end with a single character.\nThis character can be either upper of lower case\")\n\t\t\t\t          (:li \"Some \"\n\t\t\t\t               (:em (:b\"directives\"))\" take \"\n\t\t\t\t               (:em \"prefix parameters\")\", between the tilde and the character. If more than one \"\n\t\t\t\t               (:em \"prefix parameter\")\" is used they are separated by commas (,). \"\n\t\t\t\t               (:em \"Prefix parameters\")\" give additional output control\")\n\t\t\t\t          (:li \"Some \"\n\t\t\t\t               (:em (:b \"directives\") \" use either the colon (:) or at-sign (@) \"\n\t\t\t\t\t            (:em (:b \"modifiers\")) \" which change the behavior of the \"\n\t\t\t\t\t            (:em (:b\"directive\"))\" in small ways\"))\n\t\t\t\t          (:li \"There are also some special \"\n\t\t\t\t               (:em (:b\"directives\"))\" which are used in pairs and can be wrapped around other \"\n\t\t\t\t               (:em (:b\"directives\"))\", e.g. to control capitalisation ( \"\n\t\t\t\t               (:span :class \"format-directive\"  \"~( ~)\")\" ), conditional formatting (\"\n\t\t\t\t               (:span :class \"format-directive\"  \"~[ ~]\")\") or iteration (\"\n\t\t\t\t               (:span :class \"format-directive\"  \"~{ ~}\")\")\"))\n\t\t\t             \"This list isn't exhaustive, but contains the most frequently used principles.\")\n\t\t\t         (:h3 \"Basic Formatting\")\n\t\t\t\n\t\t\t         (:p \"The most basic \"\n\t\t\t             (:em (:b \"directive\"))\" is \"\n\t\t\t             ((:span :class \"format-directive\") \"~a\") \". It consumes one of the \"\n                                     ((:span :class \"function\") \"format\")\n                                     \" arguments and outputs it in human-readable form. Note that because we are using \"\n                                     (:span :class \"value\" \"NIL\") \" as the \"\n\t\t\t             (:em (:b \"output destination\"))\", \"\n\t\t\t             ((:span :class \"function\")\"format\") \" is returning a string as return-value and not outputting anywhere.\")\n\t\t\t         \"Another basic \"(:em (:b \"directive\"))\" is \"\n\t\t\t         (:span :class \"format-directive\" \"~%\")\", which causes a newline to be emitted. It optionally takes a single \"\n\n\t\t\t         (:em \"prefix parameter\")\" that defines how many newlines to be emitted\"\n                         \n\t\t\t         (str (repl-example (the repl-1)))\n\t\t\t\n\t\t\t         (:h3 \"Integer Directives\")\n\t\t\t\n\t\t\t         (:p \"Whist the \"\n\t\t\t             (:em (:b\"directive\"))\" \"\n\t\t\t             ((:span :class \"format-directive\")\"~a\")\" can be used to output numbers, the \"\n\t\t\t             (:em (:b\"directive\"))\" \"\n\t\t\t             ((:span :class \"format-directive\")\"~d\")\n\t\t\t             \" offers more control for outputting integers (d standing for decimal, or base 10). There are 2 \"\n\t\t\t             (:em \"modifiers\")\":\"\n\t\t\t             (:ul (:li \"A colon (\"\n                                               (:span :class \"format-directive\" \":\")\n                                               \") adds commas separating the number into groups of 3 integers\")\n\t\t\t\t          (:li \"An at-sign (\"\n                                               (:span :class \"format-directive\" \"@\")\n                                               \") always prints a sign before the number\")\n\t\t\t\t          (:li \"These 2 modifiers may be combined\"))\n\t\t\t\t     \"It can also take 2 \"\n\t\t\t\t     (:em \"prefix parameters\")\":\"\n\t\t\t\t     (:ul (:li \"The first \"\n\t\t\t\t\t       (:em \"prefix parameter\")\" specifies the minimum width for the output\")\n\t\t\t\t\t  (:li \"The second \"\n\t\t\t\t\t       (:em \"prefix parameter\")\" specifies the padding character. By default this is a space. Padding characters must be quoted are always inserted before the number\")))\n\t\t\t         (str (repl-example (the repl-2)))\n\t\t\t         (:h3 \"Floating Point Directives\")\n\t\t\t\n\t\t\t         (:p \"The 2 principle \"\n\t\t\t             (:em (:b\"directives\"))\" handling floating point numbers are \"\n\t\t\t             ((:span :class \"format-directive\")\"~f\")\" and \"\n\t\t\t             ((:span :class \"format-directive\")\"~e\")\". The difference is \"\n\t\t\t             ((:span :class \"format-directive\")\"~f\")\" is alowed to use scientific notation if the number is large enough or small enough, whilst \"\n\t\t\t             ((:span :class \"format-directive\")\"~e\")\" will always emit the number argument in scientific notation. \")\n\t\t\t         (:p\" There are a number of \"\n\t\t\t            (:em \"prefix parameters\")\", but the only one of real significance is the second, which specifies the  number of digits to output after the decimal point. Note that, if this \"\n\t\t\t            (:em \"prefix parameter\")\" is less than the number of decimal digits in the argument, the argument will be mathematically rounded.\")\n\t\t\t         (:p \"A third floating point number \"\n\t\t\t\t     (:em (:b\"directive\"))\" is \"\n\t\t\t\t     ((:span :class \"format-directive\")\"~$\")\" which is a monetary directive. It is basically equivalent to \"\n\t\t\t\t     ((:span :class \"format-directive\")\"~f\")\" with the second prefix parameter dafaulting to 2\")\n\t\t\t         (str (repl-example (the repl-3)))\n\n\t\t\t         (:h3 \"English Language Directives\")\n\t\t\t\t\n\t\t\t\t (:p \"These directives are useful for converting number to english language, outputting plurals and performing case conversions\"\n\t\t\t\t     (:ul (:li ((:span :class \"format-directive\")\"~r\") \" prints numbers as english words. With the \"\n\t\t\t\t\t       (:span :class \"format-directive\"  \":\")\" \"\n\t\t\t\t\t       (:em \"modifier\")\" it prints the number as an ordinal\")\n\t\t\t\t\t  (:li ((:span :class \"format-directive\")\"~p\") \" pluralises a word, emitting an \"\n\t\t\t\t\t       (:em (:span :class \"general-keyword\"  \"s\"))\" character when the argument is anything but 1. It is often used with the \"\n\t\t\t\t\t       (:em (:span :class \"format-directive\"  \":\"))\" \"\n\t\t\t\t\t       (:em \"modifier\")\" which makes it reprocess the previous format argument. Using the \"\n\t\t\t\t\t       (:em (:span :class \"format-directive\"  \"@\"))\" \"\n\t\t\t\t\t       (:em \"modifier\")\" causes a \"\n\t\t\t\t\t       (:em (:span :class \"general-keyword\"  \"y\"))\" character to be emitted when the format argument is 1, or \"\n\n\t\t\t\t\t       (:em (:span :class \"general-keyword\"  \"ies\"))\" to be emitted for other values\")))\n\t\t\t\t (str (repl-example (the repl-4)))\n\t\t\t\t \n\n\t\t\t\t (:p \"To control case we use the \"\n\t\t\t\t     ((:span :class \"format-directive\")\"~(\")\" directive paired with a \"\n\t\t\t\t     ((:span :class \"format-directive\")\"~)\")\" in conjunction with the 2 \"\n\t\t\t\t     (:em \"modifiers\")\" \"\n\t\t\t\t     (:em (:span :class \"format-directive\"  \":\"))\" and \"\n\t\t\t\t     (:em (:span :class \"format-directive\"  \"@\"))\n\t\t\t\t     (:ul (:li \"Without either modifier the output is all lower case\")\n\t\t\t\t\t  (:li \"With the \"\n\t\t\t\t\t       (:em (:span :class \"format-directive\"  \"@\"))\" \"\n\t\t\t\t\t       (:em \"modifier\")\" the first word is the string between the \"\n\t\t\t\t\t       ((:span :class \"format-directive\")\"~(\")\" and \"\n\t\t\t\t\t       ((:span :class \"format-directive\")\"~)\")\" directives is capitalised\")\n\t\t\t\t\t  (:li \"With the \"\n\t\t\t\t\t       (:em (:span :class \"format-directive\"  \":\"))\" \"\n\t\t\t\t\t       (:em \"modifier\")\" all words is the string between the \"\n\t\t\t\t\t       ((:span :class \"format-directive\")\"~(\")\" and \"\n\t\t\t\t\t       ((:span :class \"format-directive\")\"~)\")\" directives are capitalised\")\n\t\t\t\t\t  (:li \"With both \"\n\n\t\t\t\t\t       (:em \"modifiers\")\" the output is all upper case\")))\n\t\t\t\t (str (repl-example (the repl-5)))\n\t\t\t         (:h3 \"Iteration\")\n\t\t\t         (:p \"The \"\n\t\t\t             ((:span :class \"format-directive\")\"~{\")\" directive paired with\"\n\t\t\t             ((:span :class \"format-directive\")\"~}\")\" makes \"\n\t\t\t             ((:span :class \"function\")\"format\")\" itterate over the elements of a list. The control string between these 2 \"\n\t\t\t             (:em (:b \"directives\"))\" will be repeatedly processed as long as there are elements left in the list.\")\n\t\t\t         (:p \"In many cases we may wish to add some text seperators, for example a comma between the elements in the list, but avoid a final seperator. To do this we use the \"\n\t\t\t             ((:span :class \"format-directive\")\"~^\")\" directive before the seperator. By using the \"\n\t\t\t             (:em (:span :class \"format-directive\"  \"~@\"))\" modifier, any remaining \"\n\n\t\t\t             ((:span :class \"function\")\"format\")\" arguments are treated as a list\")\n\t\t\t         (str (repl-example (the repl-6)))\n\t\t\t\n\t\t                 (:h3 \"Conditionals\")\n\t\t                 (:p \"The \"\n\t\t\t             ((:span :class \"format-directive\")\"~[\")\" directive paired with\"\n\t\t\t             ((:span :class \"format-directive\")\"~]\")\" provides a simple control construct. Inbetween these directive are a number of clauses seperated by \"\n\t\t\t             (:em (:span :class \"format-directive\"  \"~;\"))\" and the argument supplied represents the index number (0 based) of the clasue to be used. If the index number is bigger then the number of clauses nothing is printed, unless the last clause is seperated by \"(:em (:span :class \"format-directive\"  \"~:;\"))\" in which case this clause is used as the default if no match is found\"\n\t\t\t             (:p \"With the \"\n\t\t\t                 (:em (:span :class \"format-directive\" \"~@\"))\" modifier the control string between \"\n\t\t\t                 ((:span :class \"format-directive\")\"~[\")\" and \"\n\t\t\t                 ((:span :class \"format-directive\")\"~]\")\" is only emitted if the \"\n\t\t\t                 ((:span :class \"function\")\"format\")\" argument is non-NIL\"))\n\t\t\t         (str (repl-example (the repl-7))))))\n\t\t\t\t \n\t\t    ((:div :class \"main-page-item\")\n\t\t     (:h2 \"Resources\")\n\t\t     (str (the resource-links))))))))\n  \n\n",
    "metadata": {
      "source": "gornschool-training/t2/source/formatted-output.lisp",
      "file_name": "formatted-output.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 0,
      "section": "formatted-output"
    },
    "id": "21ca75d410eda2606fd0f6aecbe2557e"
  },
  {
    "text": "(in-package :training-2)\n\n",
    "metadata": {
      "source": "gornschool-training/t2/source/building-example.lisp",
      "file_name": "building-example.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 0,
      "section": "header"
    },
    "id": "01755b8ce51e4bf85ccb3ff74efea76b"
  },
  {
    "text": "(define-object building-example (base-training-sheet)\n\n  :functions\n  ((hint-1! () (the (set-slot! :hint-1 (not (the hint-1)))))\n   (hint-2! () (the (set-slot! :hint-2 (not (the hint-2)))))\n   (hint-3! () (the (set-slot! :hint-3 (not (the hint-3)))))\n   (hint-4! () (the (set-slot! :hint-4 (not (the hint-4)))))\n   (hint-5! () (the (set-slot! :hint-5 (not (the hint-5))))))\n\n  :computed-slots\n  ((hint-1 nil :settable)\n   (hint-2 nil :settable)\n   (hint-3 nil :settable)\n   (hint-4 nil :settable)\n   (hint-5 nil :settable)\n   \n   \n   (code-1 (list \"",
    "metadata": {
      "source": "gornschool-training/t2/source/building-example.lisp",
      "file_name": "building-example.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 0,
      "section": "building-example"
    },
    "id": "01755b8ce51e4bf85ccb3ff74efea76b"
  },
  {
    "text": "(define-object full-start-wall (wall)\"\n\t\t \"  :input-slots\"\n\t\t \"  ((first-row :start-full)))\"\n\t\t \"\"\n\t\t \"",
    "metadata": {
      "source": "gornschool-training/t2/source/building-example.lisp",
      "file_name": "building-example.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 1,
      "section": "full-start-wall"
    },
    "id": "4703679e2ccd90a071cecc4288c6ea98"
  },
  {
    "text": "(define-object half-start-wall (wall)\"\n\t\t \"  :input-slots\"\n\t\t \"  ((first-row :start-half)))\"\n\t\t \"\"\n\t\t \"",
    "metadata": {
      "source": "gornschool-training/t2/source/building-example.lisp",
      "file_name": "building-example.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 2,
      "section": "half-start-wall"
    },
    "id": "c7e869b116ccbbe0f88cc4e67d05f669"
  },
  {
    "text": "(define-object wall(box)\"\n\t\t \"  :input-slots\"\n\t\t \"  (...\"\n\t\t \"   ...\"\n\t\t \"   (first-row :start-full))\"\n\t\t \"  ...\"\n\t\t \"  ...\"\n\t\t \"  :objects\"\n\t\t \"  ((row :type 'row\"\n\t\t \"    ...\"\n\t\t \"    ...\"\n\t\t \"    :pass-down (...\"\n\t\t \"                ...\"\n\t\t \"                first-row))))\"\n\t\t \"\"\n\t\t \"",
    "metadata": {
      "source": "gornschool-training/t2/source/building-example.lisp",
      "file_name": "building-example.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 3,
      "section": "wall"
    },
    "id": "e03eee67a89b383c6e38834e018795be"
  },
  {
    "text": "(define-object row (box)\"\n\t\t \"  :input-slots\"\n\t\t \"  (...\"\n\t\t \"   ...\"\n\t\t \"   first-row)\"\n\t\t \"\"\n\t\t \"  :computed-slots\"\n\t\t \"  ((full-brick-row? (cond ((eq (the first-row) :start-full)\"\n\t\t \"                           (or (zerop (the index)) (evenp (the index))))\"\n\t\t \"                          ((eq (the first-row) :start-half)\"\n\t\t \"                           (not (or (zerop (the index)) (evenp (the index)))))))\"\n\t\t \"    ...\"\t\t \n\t\t \"    ...\"\n\t\t \"  )\"\n\t\t \")\"))\n\n   (code-2 (list \"",
    "metadata": {
      "source": "gornschool-training/t2/source/building-example.lisp",
      "file_name": "building-example.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 4,
      "section": "row"
    },
    "id": "2f6d5d46207dd8ec739fffb000ee003e"
  },
  {
    "text": "(define-object half-start-wall-front-key (wall)\"\n\t\t \"  :input-slots\"\n\t\t \"  ((first-row :start-half)\"\n\t\t \"   (front-edge :keyed)))\"\n\t\t \"\"\n\t\t \"",
    "metadata": {
      "source": "gornschool-training/t2/source/building-example.lisp",
      "file_name": "building-example.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 5,
      "section": "half-start-wall-front-key"
    },
    "id": "c5a60841a5cbc16635a8ad9446fba8e8"
  },
  {
    "text": "(define-object half-start-wall-rear-key (wall)\"\n\t\t \"  :input-slots\"\n\t\t \"  ((first-row :start-half)\"\n\t\t \"   (rear-edge :keyed)))\"\n\t\t \"\"\n\t\t \"",
    "metadata": {
      "source": "gornschool-training/t2/source/building-example.lisp",
      "file_name": "building-example.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 6,
      "section": "half-start-wall-rear-key"
    },
    "id": "825b5ee220c408d09080b108d6d2edc8"
  },
  {
    "text": "(define-object half-start-wall-both-key (wall)\"\n\t\t \"  :input-slots\"\n\t\t \"  ((first-row :start-half)\"\n\t\t \"   (front-edge :keyed)\"\n\t\t \"   (rear-edge :keyed)))\"\n\t\t \"\"\n\t\t \"",
    "metadata": {
      "source": "gornschool-training/t2/source/building-example.lisp",
      "file_name": "building-example.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 7,
      "section": "half-start-wall-both-key"
    },
    "id": "0584b3ec4e83b39821403d2f3a249e21"
  },
  {
    "text": "(define-object wall(box)\"\n\t\t \"  :input-slots\"\n\t\t \"  (...\"\n\t\t \"   ...\"\n\t\t \"   (front-edge :full)\"\n\t\t \"   (rear-edge :full))\"\n\t\t \"  :objects\"\n\t\t \"  ((row :type 'row\"\n\t\t \"        ...\"\n\t\t \"        :pass-down (...\"\n\t\t \"                    ...\"\n\t\t \"                    front-edge\"\n\t\t \"                    rear-edge))))\"\n\t\t \"\"\n\t\t \"",
    "metadata": {
      "source": "gornschool-training/t2/source/building-example.lisp",
      "file_name": "building-example.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 8,
      "section": "wall"
    },
    "id": "8c4d5873927111f16ab8c1cfe92c89ed"
  },
  {
    "text": "(define-object row (box)\"\n\t\t \"  :input-slots\"\n\t\t \"  (...\"\n\t\t \"   ...\"\t\t \n\t\t \"   front-edge\"\n\t\t \"   rear-edge )\"\n\t\t \"  :objects\"\n\t\t \"  ((bricks-and-mortar :type 'bricks-and-mortar\"\n\t\t \"                     ...\"\n\t\t \"                     :pass-down (...\"\n\t\t \"                                ...\"\n\t\t \"                                front-edge\"\n\t\t \"                                rear-edge)))\"\n\t\t \"\"\n\t\t \"",
    "metadata": {
      "source": "gornschool-training/t2/source/building-example.lisp",
      "file_name": "building-example.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 9,
      "section": "row"
    },
    "id": "53a9aeabe7023c9dfa9e44fbb41dd573"
  },
  {
    "text": "(define-object bricks-and-mortar (box)\"\n\t\t \"  :input-slots\"\n\t\t \"  (...\"\n\t\t \"   ...\"\n\t\t \"   front-edge\"\n\t\t \"   rear-edge)\"\n\t\t \"\"\n\t\t \"  :computed-slots\"\n\t\t \"  (...\"\n\t\t \"   ...\"\t   \n\t\t \"   (first-mortar-joint-start-point (cond ((the full-brick-row?)\"\n\t\t \"                                        (the (full-brick 0) (face-center :rear)))\"\n\t\t \"                                       ((eq (the front-edge) :full)\"\n\t\t \"                                        (the (half-brick 0) (face-center :rear)))\"\n\t\t \"                                       ((eq (the front-edge) :keyed)\"\n\t\t \"                                        (translate-along-vector \"\n\t\t \"                                           (the (face-center :front))\"\n\t\t \"\t                                      (the (face-normal-vector :rear))\"\n\t\t \"\t                                      (half (the brick-length))))))\"\n\t\t \"   (number-of-half-bricks (cond ((the full-brick-row?) 0)\"\n\t\t \"                              ((and (eq (the front-edge) :full)\"\n\t\t \"                                    (eq (the rear-edge) :full)) 2)\"\n\t\t \"                              ((and (eq (the front-edge) :keyed)\"\n\t\t \"                                    (eq (the rear-edge) :full)) 1)\"\n\t\t \"                              ((and (eq (the front-edge) :full)\"\n\t\t \"                                    (eq (the rear-edge) :keyed)) 1)\"\n\t\t \"                              ((and (eq (the front-edge) :keyed)\"\n\t\t \"                                    (eq (the rear-edge) :keyed)) 0)))\"\n\t\t \" :objects\"\n\t\t \" (...\"\n\t\t \"  ...\"\n\t\t \"  (half-brick :type 'box\"\n\t\t \"              :sequence (:size (the number-of-half-bricks))\"\n\t\t \"              :center (cond ((and (= (the-child index) 0)\"\n\t\t \"\t\t\t           (eq (the front-edge) :full)) \"\n\t\t \"                            (the first-half-brick-center!))\"\n\t\t \"\t                     ((and (= (the-child index) 0)\"\n\t\t \"\t                           (eq (the front-edge) :keyed)\"\n\t\t \"\t                           (eq (the rear-edge) :full)) \"\n\t\t \"                            (the last-half-brick-center!))\"\n\t\t \"                           ((eq (the rear-edge) :full) \"\n\t\t \"                            (the last-half-brick-center!)))\"\n\t       \t \"               ...)))\"))\n\n   (code-3 (list \"",
    "metadata": {
      "source": "gornschool-training/t2/source/building-example.lisp",
      "file_name": "building-example.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 10,
      "section": "bricks-and-mortar"
    },
    "id": "037db75ae8add95464ec7823305ace41"
  },
  {
    "text": "(define-object building (box)\"\n\t\t \"  :input-slots\"\n\t\t \"  (...\"\n\t\t \"   ...\"\n\t\t \"   (max-beam-spacing 1500))\"\n\t\t \"  :computed-slots\"\n\t\t \"  (...\"\n\t\t \"   ...\"\n\t\t \"   (number-of-roof-trusses (let ((trusses (ceiling (the left-wall-length) 1500)))\"\n\t\t \"\t\t\t      (max trusses 2)))\"\n\t\t \"  ))\"))\n\n   (code-4 (list \"",
    "metadata": {
      "source": "gornschool-training/t2/source/building-example.lisp",
      "file_name": "building-example.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 11,
      "section": "building"
    },
    "id": "f47c5a1f8cab15c96086e9b9a5c670a0"
  },
  {
    "text": "(define-object truss (box)\"\n\t\t \" ...\"\n\t\t \" ...\"\n\t\t \" :computed-slots\"\n\t\t \"  (...\"\n\t\t \"   ...\"\n\t\t \"   ;;messages to support roof cladding sizing and positioning \"\n\t\t \"   (apex-point (inter-line-plane (the rear-slope-construction-line end)\"\n\t\t \"                                 (the truss-rear-slope-vector)\"\n\t\t \"                                 (the lower-beam center)\"\n\t\t \"                                 (the (face-normal-vector :rear))))\"\n\t\t \"   (front-gutter-point (the front-slope-construction-line start))\"\n\t\t \"   (rear-gutter-point (the rear-slope-construction-line start))\"\n\t\t \"   (front-slope-normal (the front-slope-beam (face-normal-vector :top)))\"\n\t\t \"   (rear-slope-normal (the rear-slope-beam (face-normal-vector :top))))\"\n\t\t \" )\"))\n   (code-5 (list \"",
    "metadata": {
      "source": "gornschool-training/t2/source/building-example.lisp",
      "file_name": "building-example.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 12,
      "section": "truss"
    },
    "id": "00645a4471f60d6f18b9258ea0854aad"
  },
  {
    "text": "(define-object building (box)\"\n\t\t \"  :input-slots\"\n\t\t \"   (...\"\n\t\t \"    ...\"\n\t\t \"    (roof-overhang 50)\"\n\t\t \"    (cladding-thickness 10))\"\n\t\t \"\"\n\t\t \"  :computed-slots\"\n\t\t \"   (...\"\n\t\t \"    ...\"\n\t\t \"    (roof-length (+ (the left-wall length) (twice (the roof-overhang))))\"\n\t\t \"    (roof-width (the cladding-thickness))\"\n\t\t \"    (roof-height (let ((apex (the (roof-truss 0) apex-point))\"\n\t\t \"                       (gutter (the (roof-truss 0) front-gutter-point)))\"\n\t\t \"                  (+ (3d-distance apex gutter) (the roof-overhang))))\"))\n\n   (code-6 (list \"",
    "metadata": {
      "source": "gornschool-training/t2/source/building-example.lisp",
      "file_name": "building-example.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 13,
      "section": "building"
    },
    "id": "4996cb164d7a15cb74fee749433c80d6"
  },
  {
    "text": "(define-object building (box)\"\n\t\t \" ...\"\n\t\t \" ...\"\n\t\t \" :functions\"\n\t\t \"  ((get-roof-mid-point! (first-gutter last-gutter last-index)\"\n\t\t \"                          (let*((mid-gutter (midpoint first-gutter last-gutter))\"\n\t\t \"                                (first-apex (the (roof-truss 0) apex-point))\"\n\t\t \"                                (last-apex (the (roof-truss last-index) apex-point))\"\n\t\t \"                                (mid-apex (midpoint first-apex last-apex))\"\n\t\t \"                                (vec (subtract-vectors mid-gutter mid-apex))\"\n\t\t \"                                (mid-edge (translate-along-vector \"\n\t\t \"                                                   mid-gutter \"\n\t\t \"                                                   vec \"\n\t\t \"                                                   (the roof-overhang))))\"\n\t\t \"                         (midpoint mid-apex mid-edge))))\"\n\t\t \" :objects\"\n\t\t \"  (...\"\n\t\t \"   ...\"\n\t\t \"   (roof-cladding-left \"\n\t\t \"     :type 'box\"\n\t\t \"     :length (the roof-length)\"\n\t\t \"     :height (the roof-height)\"\n\t\t \"     :width (the cladding-thickness)\"\n\t\t \"     :orientation (alignment :left (the (roof-truss 0) front-slope-normal))\"\n\t\t \"     :center (let* ((last-index (- (the number-of-roof-trusses) 1))\"\n\t\t \"\t\t      (first-gutter (the (roof-truss 0) front-gutter-point))\"\n\t\t \"\t\t      (last-gutter (the (roof-truss last-index) front-gutter-point))\"\n\t\t \"\t\t      (mid-ctr (the (get-roof-mid-point! \"\n\t\t \"                                            first-gutter \"\n\t\t \"                                            last-gutter \"\n\t\t \"                                            last-index))))\"\n\t\t \"\t\t  (translate-along-vector \"\n\t\t \"                             mid-ctr\"\n\t\t \"\t\t\t       (the (roof-truss 0) front-slope-normal)\"\n\t\t \"\t\t\t       (half (the cladding-thickness)))))\"))\n\n   (code-7 (list \"",
    "metadata": {
      "source": "gornschool-training/t2/source/building-example.lisp",
      "file_name": "building-example.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 14,
      "section": "building"
    },
    "id": "c408f3967b23357517c83a9610c7f8ec"
  },
  {
    "text": "(define-object building (box)\"\n\t\t \" ...\"\n\t\t \n\t\t \":computed-slots\"\n\t\t \"(...\"\n\t\t \" ...\"\n\t\t \" ;; building properties\"\n\t\t \" (walls (remove nil (mapcar #'(lambda(a) (when (typep a 'wall) a)) (the children))))\"\n\t\t \" (full-bricks (apply '+ (mapsend (the walls) :full-bricks)))\"\n\t\t \" (half-bricks (apply '+ (mapsend (the walls) :half-bricks)))\"\n\t\t \" (mortar-volume (apply '+ (mapsend (the walls) :mortar-volume)))\"\n\t\t \" (cladding-dimensions (list :length (the roof-length)\"\n\t\t \"\t\t\t    :width (the roof-height)))\"\n\t\t \" (beam-properties (the (roof-truss 0) beam-properties))\"\n\t\t \" (beam-qty-by-size \"\n\t\t \"    (let ((res nil))\"\n\t\t \"\t(dolist (plis (the beam-properties) )\"\n\t\t \"\t  (let* ((trusses (the number-of-roof-trusses))\"\n\t\t \"\t\t (l (getf plis :length-mm))\"\n\t\t \"                (p (position l res :key #'(lambda(a) (getf a :length-mm))))\"\n\t\t \"                (qty (when p (getf (nth p res) :qty))))\"\n\t\t \"          (if p (setf (getf (nth p res) :qty) (+ qty trusses))\"\n\t\t \"              (setq res (append (list (list :length-mm l :qty trusses)) res)))))\"\n\t\t \"      (safe-sort '< res :key #'(lambda(a) (getf a :length-mm)))))\"\n\t\t \"\"\n\t\t \" (roof-truss-mass (* (apply '+ (mapcar #'(lambda(a) (getf a :mass-kg)) \"\n\t\t \"                                       (the beam-properties)))\"\n\t\t \"\t\t       (the number-of-roof-trusses)))\"\n\t\t \"\"\n\t\t \" (building-materials \"\n\t\t \"   (list :full-bricks (the full-bricks)\"\n\t\t \"\t :half-bricks (the half-bricks)\"\n\t\t \"\t :mortar-volume-m3 (div (the mortar-volume) 1000000000)\"\n\t\t \"\t :beams (the beam-qty-by-size)\"\n\t\t \"\t :roof-cladding (append (the cladding-dimensions) (list :qty 2))))\"))\n   (repl-1 (list (list :command \"(setq self (make-object 'building)\"\n\t\t       :output \"#<BUILDING #x21045DF6AD>\")\n\t\t  (list :command \"(the building-materials)\"\n\t\t\t:output (list \"(:FULL-BRICKS 3109\"\n\t\t\t\t      \" :HALF-BRICKS 162\"\n\t\t\t\t      \" :MORTAR-VOLUME-M3 0.6665175\"\n\t\t\t\t      \" :BEAMS ((:LENGTH-MM 874.685657822283\"\n\t\t\t\t      \"          :QTY 3)\"\n\t\t\t\t      \"         (:LENGTH-MM 1727.7658984943535 \"\n\t\t\t\t      \"          :QTY 6)\"\n\t\t\t\t      \"         (:LENGTH-MM 3030 \"\n\t\t\t\t      \"          :QTY 3))\"\n\t\t\t\t      \" :ROOF-CLADDING (:LENGTH 4080 \"\n\t\t\t\t      \"                 :WIDTH 1806.755259207346 \"\n\t\t\t\t      \"                 :QTY 2))\"))))\n   \n   (body-content (with-cl-who-string()\n\t\t   ((:div :class \"main-page-container\")\n\t\t    ((:div :class \"main-page-item\")\n\t\t     (str (the start-section main-div))\n\t\t     (str (the hint-1-section main-div))\n\t\t     (str (the hint-2-section main-div))\n\t\t     (str (the hint-3-section main-div))\n\t\t     (str (the hint-4-section main-div))\n\t\t     (str (the hint-5-section main-div)))\n\t\t    ((:div :class \"main-page-item\")\n\t\t     (:h2 \"Resources\")\n\t\t     (str (the resource-links-section main-div)))))))\n\n  :objects\n  ((resource-links-section :type 'sheet-section\n\t\t\t   :inner-html (with-cl-who-string()\n\t\t\t\t\t (:table\n\t\t\t\t\t     (let ((icon \"/common-images/lisp-file.png\")\n\t\t\t\t\t\t   (lis (list (list :available (the hint-1) :file \"building-hint-1.lisp\")\n\t\t\t\t\t\t\t      (list :available (the hint-2) :file \"building-hint-2.lisp\")\n\t\t\t\t\t\t\t      (list :available (the hint-3) :file \"building-hint-3.lisp\")\n\t\t\t\t\t\t\t      (list :available (the hint-4) :file \"building-hint-4.lisp\")\n\t\t\t\t\t\t\t      (list :available (the hint-5) :file \"building-hint-5.lisp\"))))\n\t\t\t\t\t       (dolist (l lis)\n\t\t\t\t\t\t (let* ((f (getf l :file))\n\t\t\t\t\t\t       (link (format nil \"/t2-resources/~a\" f)))\n\t\t\t\t\t\t   (htm (:tr (when (getf l :available)\n\t\t\t\t\t\t\t     (htm (:td ((:a :href link) ((:img :src icon :style \"width: 40px; height: auto;\"))))\n\t\t\t\t\t\t\t\t  (:td ((:a :href link) (str f)))))))))))))\n\n   \n   (start-section :type 'sheet-section\n\t\t  :inner-html (with-cl-who-string()\n\n\t\t\t\t(:div :class \"grid-container-2-650px\"\n\t\t\t\t      (:div :class \"grid-item\"\n\t\t\t\t\t    (:p \"In our two worked examples we have made a wall and a roof truss.\n\nIn this worked example, using these objects we now want to create a building\")\n\t\t\t\t(:h2 \"Brief\")\n\t\t\t\t(:p \"Using the wall and truss objects, and modifying where necessary,\ngenerate a model of a three-sided structure (4th side is open) with a\npitched roof. The 3 sides of the structure are brick walls and should\nbe keyed together where they join and have a flush face at the open\nedge. The brick structure should be 3m wide, 4m long and 3m\nhigh (nominal dimension), the roof slope should be 30 degrees. The\nroof truss beams are 40mm wide and 50mm tall, with a wall thickness of\n3mm and a density of 7800 kg/m\" (:sup \"3\")\". They should be equally\nspaced, no more than 1.5m apart and the minimum number of roof trusses\nshould be used subject to there being at least 2. Cladding should be\nadded to the roof, such that it touches on the apex and overhangs at\nthe front, rear and sides by 50mm. The cladding is 10mm\nthick. Determine the size of the cladding panels, the mass of the roof\ntrusses and the lengths of the individual beams, the number of bricks\nand half-bricks required and the volume of morter. Bricks are the\nstandard size - 180mm long, 45mm high and 90mm wide\") (str (the (hint-button :function-key :hint-1!)))))))\n\n\n   (hint-1-section :type 'sheet-section\n\t\t   :inner-html (with-cl-who-string()\n\t\t\t\t (when (the hint-1)\n\t\t\t\t   (htm\n\t\t\t\t    (:div :class \"grid-container-2-650px\"\n\t\t\t\t\t(:div :class \"grid-item\"\n\t\t\t\t    \n\t\t\t\t\t  (:p \"The first stage in the process is to define the object structure of the model. We will have\"\n\t\t\t\t\t      (:ul (:li \"A left wall\")\n\t\t\t\t\t\t   (:li \"A right wall\")\n\t\t\t\t\t\t   (:li \"A rear wall\")\n\t\t\t\t\t\t   (:li \"A number of roof trusses\")\n\t\t\t\t\t\t   (:li \"A left side roof cladding\")\n\t\t\t\t\t\t   (:li \"A right side roof cladding\")))\n\t\t\t\t\t  (:p \"Then we pass the nominal structure dimensions into the wall objects\"\n\t\t\t\t\t      (:ul (:li \"Right and Left wall \"\n\t\t\t\t\t\t\t((:span :class \"slot\")\":wall-length\")\" and \"\n\t\t\t\t\t\t\t((:span :class \"slot\")\":wall-height\")\" are nominal height and length respectively\")\n\t\t\t\t\t\t   (:li \"Rear wall \"\n\t\t\t\t\t\t\t((:span :class \"slot\")\":wall-length\")\" is the nominal width and \"\n\t\t\t\t\t\t((:span :class \"slot\")\":wall-height\")\" is the nominal height\"))\n\t\t\t\t\t      \"The wall objects provide \"\n\t\t\t\t\t      ((:span :class \"slot\")\":length\")\" and \"\n\t\t\t\t\t      ((:span :class \"slot\")\":height\")\" messages which are the actual dimensions, based on the supplied nominal dimensions. We use these values to specify\"\n\t\t\t\t\t      (:ul (:li \"The Truss \"\n\t\t\t\t\t\t\t((:span :class \"slot\")\":truss-length\")\" (equal to the rear wall \"\n\t\t\t\t\t\t\t((:span :class \"slot\")\":length\")\")\")\n\t\t\t\t\t\t   (:li \"The building length (equal to the left/right wall \"\n\t\t\t\t\t\t\t((:span :class \"slot\")\":length\")\"\")\n\t\t\t\t\t\t   (:li \"The building width (equal to the rear wall \"\n\t\t\t\t\t\t\t((:span :class \"slot\")\":length\")\")\")\n\t\t\t\t\t\t   (:li \"The building height (equal to the Truss \"\n\t\t\t\t\t\t\t((:span :class \"slot\")\":height\")\" plus any of the walls \"\n\t\t\t\t\t\t\t((:span :class \"slot\")\":height\")\"\"))\n\t\t\t\t\t      \"We have now defined the bounding boxes of the 3 walls, the trusses and the overall building\")\n\t\t\t\t\t  (:p \"Next we need to position the objects. First the positioning of the walls:\"\n\t\t\t\t\t      (:ul (:li \"The left and right walls are positioned relative to the \"\n\t\t\t\t\t\t\t((:span :class \"function\")\"(edge-center :left :bottom)\")\" and the \"\n\t\t\t\t\t\t\t((:span :class \"function\")\"(edge-center :right :bottom)\")\" points of the main bounding box\")\n\t\t\t\t\t\t   (:li \"The rear wall is positioned relative to the \"\n\t\t\t\t\t\t\t((:span :class \"function\")\"(edge-center :rear :bottom)\")\" of the main bounding box\"))\n\t\t\t\t\t      \"Positioning of the trusses will be relative to the \"\n\t\t\t\t\t      ((:span :class \"function\")\"(edge-center :front :top)\")\" of the main bounding box, but we need to calculate the\noffsets of the trusses from this point based on the overall length and the number of trusses. In the first instance we will hard-code the number of trusses,\ncalculate these points and then apply them t the sequence of trusses based on the index number of the truss\")\n\t\t\t\t\t  (:p \"Orientation is relatively straight forward\"\n\t\t\t\t\t      (:ul (:li \"The right and left walls do not need any change to orientation\")\n\t\t\t\t\t\t   (:li \"The rear wall has its \"((:span :class \"object-keyword\")\":rear\")\" axis aligned with the main bounding box \"\n\t\t\t\t\t\t\t((:span :class \"function\")\"(face-normal-vector :right)\")\"\")\n\t\t\t\t\t\t   (:li \"Each of the trusses has their \"((:span :class \"object-keyword\")\":rear\")\" axis aligned with the main bounding box \"\n\t\t\t\t\t\t\t((:span :class \"function\")\"(face-normal-vector :right)\")\"\")))\n\t\t\t\t\t  (:p \"With all of these calculations implemented, the bounding boxes of each object may now be viewed in Geysr to ensure everything aligns correctly\")\n\t\t\t\t\t  (:p \"The next step is to modify the wall object to enable the left to rear and right to rear joints to key together\")\n\t\t\t\t\t  (str (the (hint-button :function-key :hint-2!)))))\n\t\t\t\t    (:div :class \"grid-item\"\n\t\t\t\t\t  (:img :src (format nil \"/~a-images/geysr-building-1.png\" (the publish-prefix))\n                                                :style \"width: auto; height: 300px; margin: 1em 0 1em 3% ;\" ))))))\n\n   (hint-2-section :type 'sheet-section\n\t\t   :inner-html (with-cl-who-string()\n\t\t\t\t (when (the hint-2)\n\t\t\t\t   (htm ((:div :class \"main-page-container\")\n\t\t\t\t\t ((:div :class \"main-page-item\")\n\t\t\t\t\t  (:p \"To key 2 walls together we need 2 conditions\"\n\t\t\t\t\t      (:ul (:li \"For 2 adjoining walls, the first row in one must start with full bricks and the first row in the other must start with half bricks\")\n\t\t\t\t\t\t   (:li \"On the joining edge, the half bricks must be left out, so the gap can be filled by the full brick of the adjoining wall\"))\n\t\t\t\t\t      \"We will deal with these seperately\")\n\t\t\t\t\t  (:h2 \"Full or Half brick starting row\")\n\t\t\t\t\t  (:ul (:li \"Add an \"\n\t\t\t\t\t\t    ((:span :class \"object-keyword\")\":input-slot\")\" \"\n\t\t\t\t\t\t    ((:span :class \"slot\")\"first-row\")\" to the \"\n\t\t\t\t\t\t    ((:span :class \"object\")\"wall\")\" object\")\n\t\t\t\t\t       (:li \"Its values are \"\n\t\t\t\t\t\t    ((:span :class \"object-keyword\")\":full-start\")\" for the first row to be started with full bricks, and \"\n\t\t\t\t\t\t    ((:span :class \"object-keyword\")\":half-start\")\" for the first row to be started with half bricks\")\n\t\t\t\t\t       (:li \"Pass this variable into the \"\n\t\t\t\t\t\t    ((:span :class \"object\")\"row\")\" object\")\n\t\t\t\t\t  (:li \"Modify the \"\n\t\t\t\t\t       ((:span :class \"object-keyword\")\":computed-slot\")\" \"\n\t\t\t\t\t       ((:span :class \"slot\")\"full-brick-row?\")\" in the \"\n\t\t\t\t\t       ((:span :class \"object\")\"row\")\" object to include the value of this slot in its logic\"))\n\t\t\t\t\t (:p \"A simple way to test this is to create 2 test objects, say \"\n\t\t\t\t\t     ((:span :class \"object\")\"full-start-wall\")\" and \"\n\t\t\t\t\t     ((:span :class \"object\")\"half-start-wall\")\". Both mixin the \"\n\t\t\t\t\t     ((:span :class \"object\")\"wall\")\" object and whilst \"\n\t\t\t\t\t     ((:span :class \"object\")\"full-start-wall\")\" sets the \"\n\t\t\t\t\t     ((:span :class \"object-keyword\")\":input-slot\")\" \"\n\t\t\t\t\t     ((:span :class \"slot\")\"first-row\")\" to \"\n\t\t\t\t\t     ((:span :class \"object-keyword\")\":full-start\")\", \"\n\t\t\t\t\t     ((:span :class \"object\")\"half-start-wall\")\" sets the \"\n\t\t\t\t\t     ((:span :class \"object-keyword\")\":input-slot\")\" \"\n\t\t\t\t\t     ((:span :class \"slot\")\"first-row\")\" to \"\n\t\t\t\t\t     ((:span :class \"object-keyword\")\":half-start\")\". (Note that strictly, because wall defaults \"\n\t\t\t\t\t     ((:span :class \"slot\")\"first-row\")\" to \"\n\t\t\t\t\t     ((:span :class \"object-keyword\")\":full-start\")\" we don't need to provide any \"\n\t\t\t\t\t     ((:span :class \"object-keyword\")\":input-slot\")\" values for \"\n\t\t\t\t\t     ((:span :class \"object\")\"full-start-wall\")\", its just simpler to see what the 2 different values are) We can then instantiate both objects in Geysr and test that one starts with full bricks on the first row whilst the other starts with half bricks on the first row\"))\n\t\t\t\t\t ((:div :class \"main-page-item\"))\n\t\t\t\t\t ((:div :class \"main-page-item\")\n\t\t\t\t\t  (str (code-example (the code-1))))\n\t\t\t\t\t ((:div :class \"main-page-item\")\n\t\t\t\t\t  (:img :src (format nil \"/~a-images/geysr-building-2.png\" (the publish-prefix)) :style \"width: auto; height: 300px; margin: 1em 0 1em 3% ;\" )\n\t\t\t\t\t  (:img :src (format nil \"/~a-images/geysr-building-3.png\" (the publish-prefix)) :style \"width: auto; height: 290px; margin: 1em 0 1em 3% ;\" ))\n\t\t\t\t\t ((:div :class \"main-page-item\")\n\t\t\t\t\t  (:h2 \"Full or Keyed edges\")\n\t\t\t\t\t  (:ul (:li \"Add 2 \"\n\t\t\t\t\t\t    ((:span :class \"object-keyword\")\":input-slots\")\", \"\n\t\t\t\t\t\t    ((:span :class \"slot\")\"front-edge\")\" and \"\n\t\t\t\t\t\t    ((:span :class \"slot\")\"rear-edge\")\" to the wall object. Keyword values will be \"\n\t\t\t\t\t\t    ((:span :class \"object-keyword\")\":full\")\" for a flush edge, \"\n\t\t\t\t\t\t    ((:span :class \"object-keyword\")\":keyed\")\" for a keyed edge\")\n\t\t\t\t\t       (:li \"Pass these values down through the \"\n\t\t\t\t\t\t    ((:span :class \"object\")\"row\")\" object into the \"\n\t\t\t\t\t\t    ((:span :class \"object\")\"bricks-and-mortar\")\" object\")\n\t\t\t\t\t       (:li \"Update the \"\n\t\t\t\t\t\t    ((:span :class \"object-keyword\")\":computed-slot\")\" \"\n\t\t\t\t\t\t    ((:span :class \"slot\")\"first-mortar-joint-start-point\")\". The original definition located the first mortar joint off the back face of the firt half brick when it was a half-brick row. An extra condition is added to calculate the location point when the front edge of the row is \"\n\t\t\t\t\t\t    ((:span :class \"object-keyword\")\":keyed\")\"\")\n\t\t\t\t\t       (:li \"Add a new \"\n\t\t\t\t\t\t    ((:span :class \"object-keyword\")\":computed-slot\")\" \"\n\t\t\t\t\t\t    ((:span :class \"slot\")\"number-of-half-bricks\")\" which defines how many half bricks are present depending on whether the row is a full brick row or whether the front, rear or both edges are \"\n\t\t\t\t\t\t    ((:span :class \"object-keyword\")\":keyed\"))\n\t\t\t\t\t       (:li \"Update the definition of the \"((:span :class \"object\")\"half-brick\")\" child object, such that the \"\n\t\t\t\t\t\t    ((:span :class \"object-keyword\")\":sequence (:size)\")\" refers to \"\n\t\t\t\t\t\t    ((:span :class \"slot\")\" (the number-of-half-bricks)\")\" and the \"\n\t\t\t\t\t\t    ((:span :class \"object-keyword\")\":center\")\" position depends on whether it is the front or rear half brick and whether or not this is \"\n\t\t\t\t\t\t    ((:span :class \"object-keyword\")\":full\")\" or \"\n\t\t\t\t\t\t    ((:span :class \"object-keyword\")\":keyed\")))\n\t\t\t\t\t  (:p \"Again, we can create some simple test objects to test the different \"\n\t\t\t\t\t      ((:span :class \"object-keyword\")\":keyed\")\" or \"\n\t\t\t\t\t      ((:span :class \"object-keyword\")\":full\")\" combinations\"))\n\t\t\t\t\t ((:div :class \"main-page-item\"))\n\t\t\t\t\t ((:div :class \"main-page-item\")\n\t\t\t\t\t  (str (code-example (the code-2))))\n\t\t\t\t\t ((:div :class \"main-page-item\")\n\t\t\t\t\t  (:img :src (format nil \"/~a-images/geysr-building-4.png\" (the publish-prefix)) :style \"width: auto; height: 300px; margin: 1em 0 1em 3% ;\" )\n\t\t\t\t\t  (:img :src (format nil \"/~a-images/geysr-building-5.png\" (the publish-prefix)) :style \"width: auto; height: 270px; margin: 1em 0 1em 3% ;\" )\n\t\t\t\t\t  (:img :src (format nil \"/~a-images/geysr-building-6.png\" (the publish-prefix)) :style \"width: auto; height: 285px; margin: 1em 0 1em 3% ;\" )))\n\t\t\t\t\t(:p \"Up to now, the number of trusses has been hard coded, we now need to make that dependant on the structure length\")\n\t\t\t\t\t(str (the (hint-button :function-key :hint-3!))) ))))\n\n   (hint-3-section :type 'sheet-section\n\t\t   :inner-html (with-cl-who-string()\n\t\t\t\t (when (the hint-3)\n\t\t\t\t   (htm (:div :class \"grid-container-2-650px\"\n\t\t\t\t\t(:div :class \"grid-item\"\n\t\t\t\t\t  (:p \"The requirements says there should be a minimum of 2 roof trusses, they should be no more than 1500mm apart and the minimum number of trusses should be used. The trusses are spaced along the side wall length side, so if we divide that length \"\n\t\t\t\t\t      ((:span :class \"slot\")\"(the left-wall length)\")\" by 1500 we get the exact pitch. We need an integer and we need to round up so the \"\n\t\t\t\t\t      ((:span :class \"function\")\"ceiling\")\" function is used which round up to the nearest whole number. Finally should return this number or 2, whichever is greatest\")\n\t\t\t\t\t(str (code-example (the code-3)))\n\t\t\t\t\t(:p \"Our final task in the design is to calculate the size of the roof panels and position and orient them\")\n\n                                        (str (the (hint-button :function-key :hint-4!)))                                        \n\t\t\t\t\t))))))\n\n   \n   (hint-4-section :type 'sheet-section\n\t\t   :inner-html (with-cl-who-string()\n\t\t\t\t (when (the hint-4)\n\t\t\t\t   (htm\n\t\t\t\t    (:div :class \"grid-container-2-650px\"\n\t\t\t\t\t  (:div :class \"grid-item\"\n\t\t\t\t\t\t(:p \"First we need to calculate the apex point for the roof. There are a number of approaches for this; here we choose to augment the \"\n\t\t\t\t\t    ((:span :class \"object\")\"truss\")\" object to add in an \"\n\t\t\t\t\t    ((:span :class \"slot\")\"apex-point\")\" message, using the GendL \"\n\t\t\t\t\t    ((:span :class \"function\")\"inter-line-plane\")\" function. The line is defined as a point and vector (in our case the start of the foor slope construction line and the roof slope vector) and the plane is defines as a point and a vector which is normal to the plane (in out case the center point of the lower beam and the \"\n\t\t\t\t\t    ((:span :class \"function\")\"(face-normal-vector :rear)\")\" of the \"\n\t\t\t\t\t    ((:span :class \"object\")\"truss\")\" bounding box). We also add some further messages which we need to compute the roof size and orientation\"\n\t\t\t\t\t    (:ul (:li ((:span :class \"slot\")\"front-gutter-point\")\" - the bottom edge of the front-slope-beam\")\n\t\t\t\t\t\t (:li ((:span :class \"slot\")\"rear-gutter-point\")\" - the bottom edge of the rear-slope-beam\")\n\t\t\t\t\t\t (:li ((:span :class \"slot\")\"front-slope-normal\")\" - the (face-normal-vector :top) of the front-slope-beam\")\n\t\t\t\t\t\t (:li ((:span :class \"slot\")\"rear-slope-normal\")\" - the (face-normal-vector :top) of the rear-slope-beam\")))\n\t\t\t\t\t(str (code-example (the code-4)))\n\t\t\t\t\t(:p \"Next we need to add the remaining \"\n\t\t\t\t\t    ((:span :class \"object-keyword\")\":input-slots\")\" which enable the dimensions of the roof cladding to be calculated and add the \"\n\t\t\t\t\t    ((:span :class \"object-keyword\")\":computed-slots\")\" which will evaluate to the roof cladding dimensions\"\n\t\t\t\t\t    (str (code-example (the code-5)))\n\t\t\t\t\t    (:p \"And finally we set the \"\n\t\t\t\t\t\t((:span :class \"slot\")\":length\")\", \"\n\t\t\t\t\t\t((:span :class \"slot\")\":width\")\" and \"\n\t\t\t\t\t\t((:span :class \"slot\")\":height\")\" of the \"\n\t\t\t\t\t\t((:span :class \"object\")\"roof-cladding-right\")\" and \"\n\t\t\t\t\t\t((:span :class \"object\")\"roof-cladding-left\")\" objects, align their orientation such that their \"\n\t\t\t\t\t\t((:span :class \"object-keyword\")\":left\")\" axis is aligned twith the\"\n\t\t\t\t\t\t((:span :class \"function\")\"(face-normal-vector :top)\")\" of the sloping beams, and define their center points. The \"\n\t\t\t\t\t\t((:span :class \"slot\")\":center\")\" calculation is done using a \"\n\t\t\t\t\t\t((:span :class \"special-operator\")\"let\")\" binding, but since some of the local bindings need previously defined symbols, we use the \"\n\t\t\t\t\t\t((:span :class \"special-operator\")\"let*\")\" special operator rather than \"\n\t\t\t\t\t\t((:span :class \"special-operator\")\"let\")\". Also note the use of a \"\n\t\t\t\t\t\t((:span :class \"object-keyword\")\":function\")\" \"\n\t\t\t\t\t\t((:span :class \"function\")\":get-roof-mid-point!\")\" as the processing of this is common to both the left and right cladding\")))\n\t\t\t\t\t(:div :class \"grid-item\")\n\t\t\t\t\t(:div :class \"grid-item\"\n\t\t\t\t\t      (str (code-example (the code-6))))\n\t\t\t\t\t(:div :class \"grid-item\"\n\t\t\t\t\t      (:img :src (format nil \"/~a-images/geysr-building-7.png\" (the publish-prefix)) :style \"width: auto; height: 400px; margin: 1em 0 1em 3% ;\" ))\n\t\t\t\t\t\t(:div :class \"grid-item\"\n\t\t\t\t\t              (:p \"To complete the brief we now need to assemble the building properties\")\n\n                                                      (str (the (hint-button :function-key :hint-5!)))))))))\n\n\n   (hint-5-section :type 'sheet-section\n\t\t   :inner-html (with-cl-who-string()\n\t\t\t\t (when (the hint-5)\n\t\t\t\t   (htm\n\t\t\t\t    (:div :class \"grid-container-2-650px\"\n\t\t\t\t\t(:div :class \"grid-item\"\n\t\t\t\t    (:p \"Each of the \"\n\t\t\t\t\t    ((:span :class \"object\")\"wall\")\" objects supports the messages \"\n\t\t\t\t\t    ((:span :class \"slot\")\"full-bricks\")\", \"\n\t\t\t\t\t    ((:span :class \"slot\")\"half-bricks\")\" and \"\n\t\t\t\t\t    ((:span :class \"slot\")\"mortar-volume\")\". We need to retrieve and sum these\")\n\t\t\t\t\t(:p \"The roof cladding dimensions can be taken from the inputs to the \"\n\t\t\t\t\t    ((:span :class \"object\")\"roof-cladding-right\")\" and \"\n\t\t\t\t\t    ((:span :class \"object\")\"roof-cladding-left\")\" objects\")\n\t\t\t\t\t(:p \"Each \"\n\t\t\t\t\t    ((:span :class \"object\")\"roof-truss\")\" supports the message \"\n\t\t\t\t\t    ((:span :class \"slot\")\"beam-properties\")\". As all the \"\n\t\t\t\t\t    ((:span :class \"object\")\"roof-truss\")\" objects are identical, we can just work with \"\n\t\t\t\t\t    ((:span :class \"slot\")\"beam-properties\")\" from one \"\n\t\t\t\t\t    ((:span :class \"object\")\"roof-truss\")\" and multiply by \"\n\t\t\t\t\t    ((:span :class \"slot\")\"(the number-of-roof-trusses)\")\". We need to process this list to determine quantities of beams by size and the total truss mass. Note that when processing the \"\n\t\t\t\t\t    ((:span :class \"slot\")\"beam-properties\")\" to obtain \"\n\t\t\t\t\t    ((:span :class \"slot\")\"(the beam-qty-by-size)\")\" the \"\n\t\t\t\t\t    ((:span :class \"macro\")\"dolist\")\" iteration doesn't return anything , its just side-effecting on the locally bound variable \"\n\t\t\t\t\t    ((:span :class \"slot\")\"res\")\" and then returns the value of \"\n\t\t\t\t\t    ((:span :class \"slot\")\"res\")\" sorted by \"\n\t\t\t\t\t    ((:span :class \"object-keyword\")\":length-mm\")\". The final return value is a plist,  \"\n\t\t\t\t\t    ((:span :class \"slot\")\"building-materials\")))\n\t\t\t\t\t(:div :class \"grid-item\")\n\t\t\t\t\t(:div :class \"grid-item\"\n\t\t\t\t\t  (str (code-example (the code-7))))\n\t\t\t\t\t (:div :class \"grid-item\"\n\t\t\t\t\t (str (repl-example (the repl-1)))) )))))))\n\n",
    "metadata": {
      "source": "gornschool-training/t2/source/building-example.lisp",
      "file_name": "building-example.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 15,
      "section": "building"
    },
    "id": "e1a21b8018ee7b29e96d6c0a6ec7a6a7"
  },
  {
    "text": "(in-package :training-2)\n\n",
    "metadata": {
      "source": "gornschool-training/t2/source/conditionals.lisp",
      "file_name": "conditionals.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 0,
      "section": "header"
    },
    "id": "ca0e206f21e080913fa6d1767b67db91"
  },
  {
    "text": "(define-object conditionals (base-training-sheet)\n  :computed-slots\n  ((index-words (list \"if\" \"when\" \"case\" \"cond\" \"unless\"))\n\n   (repl-1 (list (list :command \"(if (> 1 0) (+ 3 4))\"\n\t\t       :output 7)\n\t\t (list :command \"(if (< 1 0) (+ 3 4))\"\n\t\t       :output \"NIL\")\n\t\t (list :command \"(if (< 1 0) (+ 3 4)(+ 5 6))\"\n\t\t       :output 7)))\n   (repl-2 (list (list :command \"(defparameter *evaluated* NIL)\"\n\t\t       :output \"*EVALUATED*\")\n\t\t (list :command (list \"(if (> 1 0)\"\n\t\t\t\t      \"    (progn (+ 1 2)\"\n\t\t\t\t      \"           (setf *evaluated* (not *evaluated*))\"\n\t\t\t\t      \"           (+ 4 5))\"\n\t\t\t\t      \"    (+ 3 2))\")\n\t\t       :output 9)\n\t\t (list :command \"*evaluated*\"\n\t\t       :output \"T\")\n\t\t(list :command (list \"(if (> 1 0)\"\n\t\t\t\t      \"    (prog1 (+ 1 2)\"\n\t\t\t\t      \"           (setf *evaluated*  (not *evaluated*))\"\n\t\t\t\t      \"           (+ 4 5))\"\n\t\t\t\t      \"    (+ 3 2))\")\n\t\t      :output 3)\n\t\t (list :command \"*evaluated*\"\n\t\t       :output \"NIL\")))\n   \n   (repl-3 (list (list :command \"(defparameter *evaluated* NIL)\"\n\t\t       :output \"*EVALUATED*\")\n\t\t (list :command (list \"(when (> 1 0)\"\n\t\t\t\t      \"  (+ 1 2)\"\n\t\t\t\t      \"  (setf *evaluated* (not *evaluated*))\"\n\t\t\t\t      \"  (+ 4 5))\")\n\t\t       :output 9)\n\t\t (list :command \"*evaluated*\"\n\t\t       :output \"T\")\n\t\t (list :command (list \"(when (< 1 0)\"\n\t\t\t\t      \"  (+ 1 2)\"\n\t\t\t\t      \"  (setf *evaluated* (not *evaluated*))\"\n\t\t\t\t      \"  (+ 4 5))\")\n\t\t       :output nil)))\n   (repl-4 (list (list :command (list \"(cond ((> 1 2) (+ 3 4))\"\n\t\t\t\t      \"((string= \\\"peter\\\" \\\"paul\\\") (+ 5 6))\"\n\t\t\t\t      \"((equalp (list 1 2) (list 1 2)) (setq a (+ 7 8))\"\n\t\t\t\t      \"                                (oddp a))\"\n\t\t\t\t      \"(T 0))\")\n\t\t       :output T)))\n\n   (repl-5 (list (list :command (list \"",
    "metadata": {
      "source": "gornschool-training/t2/source/conditionals.lisp",
      "file_name": "conditionals.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 0,
      "section": "conditionals"
    },
    "id": "ca0e206f21e080913fa6d1767b67db91"
  },
  {
    "text": "(defun month-days (month &key (leap-year nil))\"\n\t\t\t\t      \"(case month\"\n\t\t\t\t      \" ((1 3 5 7 8 10 12) 31)\"\n\t\t\t\t      \" ((4 6 9 11) 30)\"\n\t\t\t\t      \" (2 (if leap-year 29 28))\"\n\t\t\t\t      \" (otherwise \\\"month must be between 1 and 12\\\"))) \")\n\t\t       :output \"MONTH-DAYS\")\n\t\t (list :command\t\"(month-days 3)\"\n\t\t       :output 31)\n\t\t (list :command \"(month-days 2 :leap-year t)\"\n\t\t       :output 29)\n\t\t (list :command \"(month-days 13)\"\n\t\t       :output \"month must be between 1 and 12\")))\n\n   (repl-6 (list (list :command \"(setq self (make-object 'assembly-8))\"\n\t\t :output \"#<ASSEMBLY-8 #x2103F266ED>\")\n\t   (list :command \"(the box-centers)\"\n\t\t :output \"(#(0.0 0.0 0.0) #(6.0 0.0 0.0) #(12.0 0.0 0.0))\")\n\t   (list :command \"(setq self (make-object 'assembly-8 :box-lengths (list 3 8)))\"\n\t\t :output \"#<ASSEMBLY-8 #x2103F25B2D>\")\n\t   (list :command \"(the box-centers)\"\n\t\t :output \"(#(0.0 0.0 0.0) #(6.0 0.0 0.0))\")))\n\n   (code-1 (list \"",
    "metadata": {
      "source": "gornschool-training/t2/source/conditionals.lisp",
      "file_name": "conditionals.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 1,
      "section": "month-days"
    },
    "id": "b61b025c8fa120c95302289602153eda"
  },
  {
    "text": "(define-object assembly-8 (base-object)\"\n\t\t \":input-slots\"\n\t\t \"((box-lengths (list 2 5 8 12)))\"\n\t\t \":computed-slots\"\n\t\t \"((number-of-boxes (if (> (length (the box-lengths)) 3)\"\n\t\t \"\t\t\t3\"\n\t\t \"\t\t\t(length (the box-lengths))))\"\n\t\t \"\"\n\t\t \" (box-centers (case (the number-of-boxes)\"\n\t\t \"\t\t  (1 (list (make-point 0 0 0)))\"\n\t\t \"\t\t  (2 (list (make-point 0 0 0)\"\n\t\t \"\t\t\t   (make-point 6 0 0)))\"\n\t\t \"\t\t  (3 (list (make-point 0 0 0)\"\n\t\t \"\t\t\t    (make-point 6 0 0)\"\n\t\t \"\t\t\t    (make-point 12 0 0)))))\"\n\t\t \"   \"\n\t\t \" (box-volumes (list-elements (the my-box) (the-element volume)))\"\n\t\t \" (box-1-volume (nth 0 (the box-volumes))))\"\n\t\t \"\"\n\t\t \":objects\"\n\t\t \"((my-box :type 'box\"\n\t\t \"\t   :sequence (:size (the number-of-boxes))\"\n\t\t \"\t   :length (nth (the-child index) (the box-lengths))\"\n\t\t \"\t   :width 2\"\n\t\t \"\t   :height 1\"\n\t\t \"\t   :center (nth (the-child index) (the box-centers)))))\"))\n\n   (body-content\n    (with-cl-who-string()\n      (:p \"We use conditionals mainly to implement logic in our computer programs. Common Lisp provides the following conditionals\"\n\t  (:ul (:li (:span :class \"special-operator\" \"if\"))\n\t       (:li (:span :class \"macro\" \"when\"))\n\t       (:li (:span :class \"macro\" \"unless\"))\n\t       (:li (:span :class \"macro\" \"cond\"))\n\t       (:li (:span :class \"macro\" \"case\"))))\n      (:h3 (:span :class \"special-operator\" \"if\"))\n      (:p (:span :class \"special-operator\" \"if\")\" is a special operator.\")\n      (:p \"The syntax is \" (:span :class \"general-keyword\"  \"(if test then [else])\")\n\t  \", where\"\n\t  (:ul (:li (:span :class \"general-keyword\" \"test\")\n\t\t    \" is an expression that will evaluate to T or NIL\")\n\t       (:li (:span :class \"general-keyword\" \"then\")\n\t\t    \" is an expression that is evaluated and its value returned if \"(:em \"test\") \" is T\")\n\t       (:li (:span :class \"general-keyword\" \"else\")\n\t\t    \" is an optional argument which is an expression to be evalued and its value returned if \"\n\t\t    (:span :class \"general-keyword\" \"test\") \" is \"\n\t\t    (:span :class \"value\" \"NIL\") \".\")\n\t       (:li \"if \"(:span :class \"general-keyword\" \"else\")\" is not provided, but \"\n\t\t    (:span :class \"general-keyword\" \"test\")\n\t\t    \" returns \"\n\t\t    (:span :class \"value\" \"NIL\") \", then \"\n\t\t    (:span :class \"special-operator\" \"if\") \" also returns \"\n\t\t    (:span :class \"value\" \"NIL\"))))\n      (str (repl-example (the repl-1)))\n\n      (:p (:span :class \"special-operator\" \"if\") \" only allows single expressions for the \"\n\t  (:span :class \"general-keyword\" \"then\") \" and \"\n\t  (:span :class \"general-keyword\" \"else\") \" arguments; if multiple expressions needs to be evaluated then the must be wrapped in a \"\n\t  (:span :class \"special-operator\" \"progn\") \" (which returns the last evaluated value in its body) or \"\n\t  (:span :class \"macro\"  \"prog1\") \" (which evaluates all expressions in its body in order and finally returns the value of the first). \"\n\t  \"Not that it matters much to the routine user, but note that \"\n\t  (:span :class \"special-operator\" \"progn\") \" is a special operator, whilst \"\n\t  (:span :class \"macro\" \"prog1\") \" is a macro (which you might imaging utilizes the former in its implementation).\")\n      (str (repl-example (the repl-2)))\n      (:h3 (:span :class \"macro\" \"when\"))\n      (:p (:span :class \"macro\" \"when\")\" is a macro.\")\n      (:p \"The syntax is \" (:span :class \"general-keyword\" \"(when test body)\") \", where \"\n\t  (:ul (:li (:span :class \"general-keyword\" \"test\") \"is an expression that will evaluate to \"\n\t\t    (:span :class \"value\" \"T\") \" or \" (:span :class \"value\" \"NIL\") \".\")\n\t       (:li (:span :class \"general-keyword\" \"body\")\n\t\t    \" is one or more expressions, an implicit \"\n\t\t    (:span :class \"special-operator\" \"progn\")\n\t\t    \" such that each expression will be evaluated in order, and finally the value of the last one returned.\")\n\t       (:li \"if \" (:span :class \"general-keyword\" \"test\") \" returns \"\n\t\t    (:span :class \"value\" \"NIL\") \", then the \"\n\t\t    (:span :class \"macro\" \"when\") \" expression likewise returns \"\n\t\t    (:span :class \"value\" \"NIL\"))))\n      (str (repl-example (the repl-3)))\n      (:h3 (:span :class \"macro\" \"unless\"))\n      (:p (:span :class \"macro\" \"unless\")\" is a macro and acts as the opposite of \"\n\t  (:span :class \"macro\" \"when\")\". It takes the same arguments, but \"\n\t  (:span :class \"general-keyword\" \"body\")\" is only evaluated when \"\n\t  (:span :class \"general-keyword\" \"test\")\" returns \"\n\t  (:span :class \"value\" \"NIL\") \")\")\n      (:h3 (:span :class \"macro\" \"cond\"))\n      (:pr  (:span :class \"macro\" \"cond\")\n\t    \" is a macro which allows multiple conditions to be tested.\nThe code associated with each condition is wrapped in an implicit\nprogn allowing multiple expressions to be evaluated per\ncondition. Each \"\n\t    (:span :class \"general-keyword\" \"test\") \" and \"\n\t    (:span :class \"general-keyword\"  \"body\") \" of expressions is specified as a list and the \"\n\t    (:span :class \"general-keyword\"  \"body\") \" of expressions associated with the first \"\n\t    (:span :class \"general-keyword\"  \"test\") \" to evaluate to \"\n\t    (:span :class \"value\" \"T\") \" is evaluated and the value of the last expression in that \"\n\t    (:span :class \"general-keyword\"  \"body\") \" returned. Once a \"\n\t    (:span :class \"general-keyword\"  \"test\") \" has evaluated to \"\n\t    (:span :class \"value\" \"T\") \", no further \"\n\t    (:span :class \"general-keyword\"  \"tests\") \" are evaluated.\")\n      (str (repl-example (the repl-4)))\n      (:p \"In the example above, the final \"\n\t  (:span :class \"general-keyword\"  \"test\")\" is always T so this is effectively the default if none of the prior \"\n\t  (:span :class \"general-keyword\"  \"test\")\" expressions return T\")\n      (:h3 (:span :class \"macro\" \"case\"))\n      (:p (:span :class \"macro\" \"case\")\" is a macro which takes an \"\n\t  (:em \"object\")\" as a first argument, followd by lists of \"\n\t  (:em \"key\")\"-\"(:em \"expression\")\" pairs. The \"\n\t  (:em \"key\")-(:em \"expression\")\" pairs are then tested in order, and where the \"\n\t  (:em \"object\")\" is \"\n\t  (:span :class \"function\" \"eql\") \" to the \"\n\t  (:em \"key\")\", or a member of the \"\n\t  (:em \"key\")\", then the corresponding \"\n\t  (:em \"expression\")\" is evaluated and returned. Optionally \"\n\t  (:span :class \"general-keyword\" \"T\") \" or \"\n\t  (:span :class \"general-keyword\" \"otherwise\") \" may be specified as a catchall \"\n\t  (:em \"key\")\" at the end of the \"\n\t  (:span :class \"macro\" \"case\") \" expression, meaning that its corresponsing \"\n\t  (:em \"expression\")\" will be evauated and returned if and only if \"\n\t  (:em \"object\")\" is not \"\n\t  (:span :class \"function\" \"eql\") \" to, or a member of, any of the \"\n\t  (:em \"keys\") \". Without such a \" (:span :class \"general-keyword\" \"otherwise\") \" or \"\n\t  (:span :class \"general-keyword\" \"T\") \", \"\n\t  (:span :class \"value\" \"NIL\") \" would be returned in such a non-matching situation.\")\n      (str (repl-example (the repl-5)))\n      (:p)\n      (:p \"We could extend \"\n\t  (:span :class \"object\" \"assembly-8\")\n\t  \", used in the Lists tutorial as follows to make it a bit more flexible, ensuring that the number of box centers defined will always match the number of boxes to be created\")\n      (str (code-example (the code-1)))\n      (str (repl-example (the repl-6)))\n\n      (:h2 \"Resources\")\n      (str (the resource-links))))))\n\n",
    "metadata": {
      "source": "gornschool-training/t2/source/conditionals.lisp",
      "file_name": "conditionals.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 2,
      "section": "assembly-8"
    },
    "id": "cd645050afcfb8fba9c3fd1986269583"
  },
  {
    "text": "(in-package :training-2)\n\n",
    "metadata": {
      "source": "gornschool-training/t2/source/gendl-intro.lisp",
      "file_name": "gendl-intro.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 0,
      "section": "header"
    },
    "id": "eee70905906d4aca36d78d48559cb181"
  },
  {
    "text": "(define-object gendl-intro (base-training-sheet)\n  \n  :computed-slots\n  ((index-words (list \"Emacs\" \"REPL\" \"YADD\" \"Geysr\"))\n  \n   (body-content\n    (with-cl-who-string()\n      (:h3 \"What is GendL?\")\n       \"\nGendL is a dynamic, declarative, object-oriented language environment\nembedded in ANSI Common Lisp (CL).\n\nIt consists of a collection of predefined objects, code-expansion\nmacros, and functions which you, the GendL application developer, may\neither use directly or extend, to solve problems of any level of\ncomplexity decomposed into manageable units.\n\nGendL includes geometric primitives (wireframe, surfaces and solids)\nand has a built-in web server to facilitate cross-platform deployment.\n\nUnlike many other programming languages which execute procedurally\nline by line, GendL only evaluates expressions when they are demanded,\nand the object, slot, and function specifications within an object\ndefinition can be written in any order. Another useful and\ndistinguishing feature is GendL's built-in runtime dependency\ntracking. This allows your applicaton code to make modifications to\nthe value of any slot at runtime, and the GendL runtime system will\nimmediately mark any downstream dependent slots as \\\"Unbound\\\",\nforcing them to be re-computed with fresh data the next time they are\ndemanded.\"\n\n      (:h3 \"GendL development tools\")\n\t    \n      (:h4 \"Emacs IDE\")\n      \"\n\nGendL is provided with a configuration for the Emacs Integrated\nDevelopment Environment (IDE) called \\\"Slime\\\", or the \\\"Superior Lisp\nInteraction Mode for Emacs.\\\" Although any text editor can be used,\nthe Emacs/Slime combination provides a rich and evolving set of\nfeatures for developing GendL and CL code.\n\nEmacs/Slime includes a Read-Eval-Print-Loop (REPL), which is an\ninteractive, editable command prompt connected to a live GendL\nsession (which itself is hosted in a running CL process). You will\nfind that the REPL proves useful for testing and debugging code as\nyou are writing it.\n                          \nEmacs also boasts a wide range of open-source plugins for\ncustomization and automation, including plugins for the emerging AI\ncoding assistants such as Github Copilot.\n\n\"\n\n\n    (:img :src (format nil \"/~a-images/emacs.png\" (the publish-prefix)) :style \"width: auto; height: 200px;\" )\n      \n    (:h4 \"YADD\")\n      \"\n      Hyperlinked documentation for the objects, macros, functions, and\nglobal parameters provided with GendL is available through any web\nbrowser using YADD, a documentation generator built\nusing... GendL. Assuming you have a running session which is using\nport 9000 for its webserver listener, then reference documentation for\nthe developer will be accessible at\n[http://localhost:9000/yadd](http://localhost:9000/yadd).\n\t\t       \nYADD may also be used to document your own user-defined objects,\nmacros, functions, and global parameters. The resulting documentation\navailable on the main YADD home page side by side with that for the\nbuilt-in operators.\n\nIn the picture on the right, you can see documentation links for\nbuilt-in GendL packages such as CL-LITE, GENDL, GEOM-BASE, GEYSR, GWL\nand YADD, as well as user-defined packages such as PURSUIT-ANALYSIS,\nWEB-PARTS, and WIND-TUNNEL.\n\nFrom time to time, supplemental documentation may be published at [the\nGenworks\nWebsite](https://genworks.com/documentation){target=\\\"_new\\\"}.\"\n                         \n      (:img :src (format nil \"/~a-images/yadd.png\" (the publish-prefix)) :style \"width: auto; height: 200px;\" )\n      (:div :class \"grid-item\"\n\t    (:h4 \"Geysr\")\n            \"\nAs code is developed it may be evaluated in the CL\nRead-Eval-Print-Loop (REPL).\n\nAdditionally, GendL provides a model and object browser called\nGeysr. This is a web-based UI which allows objects to be instantiated,\nnavigated and inspected. Assuming you have a running session which is\nusing port 9000 for its webserver listener, then Geysr will be\navailable\nat [http://localhost:9000/geysr](http://localhost:9000/geysr).\n\nGeysr is also integrated with the REPL. By invoking Geysr's \\\"Set\nSelf!\\\" action on any object in the object instance tree displayed\nGeysr, that object will become bound to a global variable `self`,\nallowing you to work with that object (including access to its\nancestor and descendant instances). As with YADD, Geysr is also built\nusing GendL itself.\"\n                         \n\t    (:img :src (format nil \"/~a-images/geysr.png\" (the publish-prefix)) :style \"width: auto; height: 200px;\")\n            (:div :class \"main-page-item\"\n\t          (:h2 \"Resources\")\n\t          (str (the resource-links))))))))\n\n",
    "metadata": {
      "source": "gornschool-training/t2/source/gendl-intro.lisp",
      "file_name": "gendl-intro.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 0,
      "section": "gendl-intro"
    },
    "id": "eee70905906d4aca36d78d48559cb181"
  },
  {
    "text": "(in-package :training-2)\n",
    "metadata": {
      "source": "gornschool-training/t2/source/object-definition-tw.lisp",
      "file_name": "object-definition-tw.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 0,
      "section": "header"
    },
    "id": "f3b7e2264c72426d6d47825d7bfdc5ea"
  },
  {
    "text": "(define-object object-definition (base-training-sheet)\n  \n  :computed-slots\n  ((additional-header-content (with-cl-who-string()\n                                ((:link :rel \"stylesheet\" :href \"/training-style.css\"))\n                                (:link :rel \"stylesheet\" :href \"/tw-css-build/tailwind-built.css\")\n                                (:title (str (the page-title)))))\n\n   (index-words (list \"define-object\" \"mixin\" \":input-slots\" \":computed-slots\" \":objects\" \":functions\" \"mixin precedence\" \"the\"))\n\n   (code-1 (list\n\t    \"",
    "metadata": {
      "source": "gornschool-training/t2/source/object-definition-tw.lisp",
      "file_name": "object-definition-tw.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 0,
      "section": "object-definition"
    },
    "id": "f3b7e2264c72426d6d47825d7bfdc5ea"
  },
  {
    "text": "(define-object my-box-1a (box)\"\n\t    \" :input-slots\"\n\t    \" ((length 2)\"\n\t    \"  (width 3)\"\n\t    \"  (height 4)))\"))\n   (code-2 (list\n\t    \"",
    "metadata": {
      "source": "gornschool-training/t2/source/object-definition-tw.lisp",
      "file_name": "object-definition-tw.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 1,
      "section": "my-box-1a"
    },
    "id": "a9ea9eed272b8af3dbff775e57bdb3cd"
  },
  {
    "text": "(define-object my-box-1b ()\"\n\t    \" :input-slots\"\n\t    \" ((length 2)\"\n\t    \"  (width 3)\"\n\t    \"  (height 4)))\"\n\t    \"\"\n\t    \"",
    "metadata": {
      "source": "gornschool-training/t2/source/object-definition-tw.lisp",
      "file_name": "object-definition-tw.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 2,
      "section": "my-box-1b"
    },
    "id": "858e9612f7e7e94c79f0fb72d7a167ab"
  },
  {
    "text": "(define-object my-box-2 (my-box-1b box))\"\n\t    \" \"\n\t    \"",
    "metadata": {
      "source": "gornschool-training/t2/source/object-definition-tw.lisp",
      "file_name": "object-definition-tw.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 3,
      "section": "my-box-2"
    },
    "id": "eba9e85c80365b4088d18c033e4e2ab7"
  },
  {
    "text": "(define-object my-box-3 (box my-box-1b))\"\n\t    \" \"\n\t    ))\n   (code-3 (list\n\t    \"",
    "metadata": {
      "source": "gornschool-training/t2/source/object-definition-tw.lisp",
      "file_name": "object-definition-tw.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 4,
      "section": "my-box-3"
    },
    "id": "0ca2b3862fe8eaacc5379a33108f5b26"
  },
  {
    "text": "(define-object my-box-4 (box)\"\n\t    \" :input-slots\"\n\t    \" (length\"\n\t    \"  (width 4)\"\n\t    \"  (height 4)))\"))\n   (code-4 (list\n\t    \"",
    "metadata": {
      "source": "gornschool-training/t2/source/object-definition-tw.lisp",
      "file_name": "object-definition-tw.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 5,
      "section": "my-box-4"
    },
    "id": "fae32805c3bf83a4716ce007e9ea0c8e"
  },
  {
    "text": "(define-object my-box-4 (box)\"\n\t    \" :input-slots\"\n\t    \" (length\"\n\t    \"  (width 4)\"\n\t    \"  (height 4)))\"\n\t    \" :computed-slots\"\n\t    \" ((density 7800)\"\n\t    \"  (mass (* (div (the volume) 1000000000) (the density)))))\"))\n\n   (code-5 (list\n\t    \"",
    "metadata": {
      "source": "gornschool-training/t2/source/object-definition-tw.lisp",
      "file_name": "object-definition-tw.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 6,
      "section": "my-box-4"
    },
    "id": "c59cc4361490ed35f3e3b61ee17bcfaa"
  },
  {
    "text": "(define-object assembly-1 (base-object)\"\n\t    \" :objects\"\n\t    \" ((my-box :type 'my-box-4\"\n\t    \"          :length 10)\"\n\t    \"  (my-sphere :type 'sphere\"\n\t    \"             :radius (the my-box width))))\"))\n   \n   (repl-1 (list (list :command \"(setq self (make-object 'box)\"\n\t\t       :output \"#<BOX #x210348242D>\")\n\t\t (list :command \"(the length)\"\n\t\t       :output 0)\n\t\t (list :command \"(the width)\"\n\t\t       :output 0)\n\t\t (list :command \"(the height)\"\n\t\t       :output 0)\n\t\t (list :command \"(the volume)\"\n\t\t       :output 0)\n\t\t (list :command \"(setq self (make-object 'my-box-1a)\"\n\t\t       :output \"#<BOX #x210348242D>\")\n\t\t (list :command \"(the length)\"\n\t\t       :output 2)\n\t\t (list :command \"(the width)\"\n\t\t       :output 3)\n\t\t (list :command \"(the height)\"\n\t\t       :output 4)\n\t\t (list :command \"(the volume)\"\n\t\t       :output 24)))\n   (repl-2 (list \n\t    (list :command \"(setq self (make-object 'my-box-2)\"\n\t\t  :output \"#<MY-BOX-2 #x210346742D>\")\n\t    (list :command \"(the length)\"\n\t\t  :output 2)\n\t    (list :command \"(setq self (make-object 'my-box-3)\"\n\t\t  :output \"#<MY-BOX-3 #x210349442D>\")\n\t    (list :command \"(the length)\"\n\t\t  :output 0)))\n\n   (repl-3 (list \n\t    (list :command \"(setq self (make-object 'my-box-4))\"\n\t\t  :output \"#<MY-BOX-4 #x2103467C4D>\")\n\t    (list :command \"(the length)\"\n\t\t  :output \"Invoking restart: Return to SLIME's top level.\"\n\t\t  :error \"; Evaluation aborted on #<SIMPLE-ERROR #x21056CE7DD>.\")\n\t    (list :command \"(the volume)\"\n\t\t  :output \"Invoking restart: Return to SLIME's top level.\"\n\t\t  :error \"; Evaluation aborted on #<SIMPLE-ERROR #x21056B76DD>.\")\n\t    (list :command \"(setq self (make-object 'my-box-4 :length 3))\"\n\t\t  :output \"#<MY-BOX-4 #x21034F4C4D>\")\n\t    (list :command \"(the length)\"\n\t\t  :output 3)\n\t    (list :command \"(the volume)\"\n\t\t  :output 48)))\n\n   (repl-4 (list (list :command \"(setq self (make-object 'my-box-4 :length 3 :width 10))\"\n\t\t       :output \"#<MY-BOX-4 #x21034F4C4D>\")\n\t\t (list :command \"(the volume)\"\n\t\t       :output 120)))\n   \n   (main-sheet-body (with-cl-who-string()\n\t\t      (when gwl:*developing?* (str (the development-links)))\n\t\t      (:div :class \"main-page-container\"\n\t\t            (:div :class \"main-page-item\"\n\t\t\t          ((:h2 :class \"text-lg text-indigo-600 font-semibold\") (str (the page-header)))\n\n\n                                  ((:h2 :class \"text-lg text-indigo-600 font-semibold\") \"Hey Now\")\n                                  \n\t\t                  (:div :class \"grid-container-2-650px\"\n\t\t\t                (:div :class \"grid-item\"\n\t\t      \n\t\t\t                      (:p \"Recall on the slide about \"\n                                                  ((:a :href (the instantiate-repl url)) \"Instantiating Objects in the REPL\")\n                                                  \", we defined our own object using the Gendl \"\n\t\t\t                          (:span :class \"macro\" \"define-object\") \" macro similarly to the following:\")\n\t\t\t                      (str (code-example (the code-1)))\n\t\t\t                      (:p \"In this section we will look a bit deeper into \" (:span :class \"macro\" \"define-object\") \".\")\n\t\t\t                      (:p \"The syntax for \" (:span :class \"macro\" \"define-object\") \" is:\")\n\t\t\t                      (:p (wmd \"`",
    "metadata": {
      "source": "gornschool-training/t2/source/object-definition-tw.lisp",
      "file_name": "object-definition-tw.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 7,
      "section": "assembly-1"
    },
    "id": "65df4b9896a5d8466a1875ba1ba86b6e"
  },
  {
    "text": "(define-object` *definition-name* `([`*mixins**`]) [`*specifications**`])`\"))\n                        \n\t\t\t                      (:p \"where:\"\n                                                  (wmd \"\n\n- *definition-name* is a symbol naming the object being defined.\n- *mixins** means zero or more symbols naming other object definitions, from which this object type will inherit characteristics.\n- *specifications** comprise the body of the object definition and consist of a set\nof keyword-value pairs which describe the characteristics and behaviors of any given instance of the object type.\"))\n\t                        \n\t\t\t                      (:h2 \"mixins\")\n\t\t\t                      (:p \"In the above example, \"\n\t\t\t                          (:span :class \"object\" \"my-box-1a\") \" specifies \"\n\t\t\t                          (:span :class \"object\" \"box\") \" as a mixin. Because \"\n\t\t\t                          (:span :class \"object\" \"box\") \" includes a built-in slot \"\n\t\t\t                          (:span :class \"slot\" \"volume\") \" , \"\n\t\t\t                          (:span :class \"object\" \"my-box-1a\") \" will also include a \"\n                                                  (:span :class \"slot\" \"volume\") \" slot. The primitive \"\n\t\t\t                          (:span :class \"object\" \"box\") \" also includes \"\n\t\t\t                          (:span :class \"slot\" \"length\") \", \"\n\t\t\t                          (:span :class \"slot\" \"width\") \" and \"\n\t\t\t                          (:span :class \"slot\" \"height\")\", but specifies their default values each to be \"\n\t\t\t                          (:span :class \"value\" \"0\") \". In the example above, because \"\n\t\t\t                          (:span :class \"object\" \"my-box-1a\") \" also includes \"\n\t\t\t                          (:span :class \"slot\" \"length\") \", \"\n\t\t\t                          (:span :class \"slot\" \"width\") \", and \"\n\t\t\t                          (:span :class \"slot\" \"height\")\", and assigns default values to them (\"\n                                                  (:span :class \"value\" \"2\") \", \" (:span :class \"value\" \"3\") \" and \"\n                                                  (:span :class \"value\" \"4\") \", respectively), \nthese values override the default \"\n\t\t\t                          (:span :class \"value\" \"0\") \" values in any instances we may make of \"\n                                                  (:span :class \"object\" \"my-box-1a\")\n\t\t\t                          \" as long as we do not feed in any other specific values at\ninstantiation-time.\")\n\n\t\t                              (str (repl-example (the repl-1)))\n                        \n\t\t                              (:p \"If you specify multiple mixins, precedence on the slots is left to right (and depth-first).\")\n\t\t                              (str (code-example (the code-2)))\n\t\t                              (str (repl-example (the repl-2)))\n                        \n\t\t\t                      (:h2 \"specifications\")\n\t\t\t                      (:p \"The specifications section is what really defines the object.\n This can be thought of as its computational DNA.\")\n\t\t\t                      (:p \"Each section of the specification is identified by one of a few supported keyword symbols.\nThe most common ones are:\"\n\t\t\t                          (:ul (:li (:span :class \"object-keyword\" \":input-slots\"))\n\t\t\t\t                       (:li (:span :class \"object-keyword\" \":computed-slots\"))\n\t\t\t\t                       (:li (:span :class \"object-keyword\" \":objects\"))\n\t\t\t\t                       (:li (:span :class \"object-keyword\" \":functions\"))))\n\t\t\t                      (:h3 (:span :class \"object-keyword\" \":input-slots\"))\n\t\t\t                      (:p  (:span :class \"object-keyword\" \":input-slots\") \" specify any required and/or optional\ninputs to the object. Each input-slot may be \"\n\t\t\t                           (:ul (:li \"a symbol &ndash; in this case it is a required input for the object\")\n\t\t\t\t                        (:li \"a symbol-value pair enclosed in parentheses &ndash; in this case\nthe slot is provided with a default value which may be overridden by \"\n                                                             (:em \"passing in\")\n                                                             \" a different value, either from the parent object or from a toplevel\ncall to the \"\n                                                             (:span :class \"function\" \"make-object\")\n                                                             \" function.\")))\n\t\t\t                      (:p \"In the example below, \"\n\t\t\t                          (:span :class \"slot\" \"length\") \" is required, but \"\n\t\t\t                          (:span :class \"slot\" \"width\") \" and \"\n\t\t\t                          (:span :class \"slot\" \"height\") \" each default to \"\n\t\t\t                          (:span :class \"value\" \"4\") \".\")\n\t\t\t                      (str (code-example (the code-3)))\n\t\t\t                      (:p \"If \"\n\t\t\t                          (:span :class \"object\" \"my-box-4\") \" is instantiated, and \"\n\t\t\t                          (:span :class \"slot\" \"length\")\" (or any attribute which depends on \"\n\t\t\t                          (:span :class \"slot\" \"length\") \") is evaluated, then an error \nwill result, as \"\n\t\t\t                          (:span :class \"slot\" \"length\")\n\t\t\t                          \" does not have a value. In other words, to be of any use,\n this object must be instantiated with \" (:span :class \"slot\" \"length\")\" passed in explicitly\nas an input.\")\n\t\t\t                      (str (repl-example (the repl-3)))\n\t\t\t                      (:p (:span :class \"object-keyword\" \":input-slots\")\" which have default \nvalues may have those values over-ridden when the object is instantiated\")\n\t\t\t                      (str (repl-example (the repl-4)))\n\t\t\t                      (:h3 (:span :class \"object-keyword\"  \":computed-slots\"))\n\t\t\t                      (:p  (:span :class \"object-keyword\" \":computed-slots\") \" can represent \nknown values, intermediate results, or final outputs which may be computed by an object\")\n\t\t\t                      (:p  \"They are defined as symbol-value pairs enclosed in parenthases. \nThe value can be any Common Lisp value or expression.\")\n\t\t\t                      (:p  (:span :class \"object-keyword\" \":computed-slots\")\n\t\t\t                           \" can refer to the return values of other \"\n\t\t\t                           (:span :class \"object-keyword\" \":computed-slots\")\n\t\t\t                           \" using the GendL macro \" (:span :class \"macro\"\"the\"))\n\t\t\t                      (str (code-example (the code-4)))\n\t\t\t                      (:p \"In the example above, a computed-slot \" (:span :class \"slot\" \"density\")\n                                                  \" has been created and set to \" (:span :class \"value\" \"7800\")\n                                                  \" (the density of steel in kg/m\" (:sup \"3\") \"). A further slot has \nbeen created, \" (:span :class \"slot\" \"mass\") \", which divides the \"\n\t\t\t                          (:span :class \"slot\" \"volume\") \" by \"\n                                                  (:span :class \"value\" \"1000000\") \" and then multiplies that \nresult by the value of \"\n                                                  (:span :class \"slot\" \"density\"))\n\t\t\t                      (:p (:em \"A point to note here is the Gendl is dimensionless. \nIt is the responsibility of the programmer to ensure units are correct when performing \ncalculations. Implicit in the example here is that length, width and height are specified \nin mm and the resultant mass will be in kg\"))\n\t\t\t                      (:p \"We will cover the use of functions to perform calculations in \nmore detail later in this tutorial\")\n\t\t                              (:h3 (:span :class \"object-keyword\" \":objects\"))\n\t\t                              (:p \"The \" (:span :class \"object-keyword\" \":objects\")\n\t\t\t                          \" section is where child objects are specified. \nThis specification includes:\"\n\t\t\t                          (:ul (:li (wmd \"The object *name*, i.e. the name of the slot which \nwill contain this child object instance\"))\n\t\t\t\t                       (:li (wmd \"The object *type*, which is expected to correspond to \nan object definition name specified in another \")\n\t\t\t\t                            (:span :class \"function\" \"define-object\") \".\")\n\t\t\t\t                       (:li \"The object input values\"))\n\t\t\t                          \"The object type is identified with the \"\n\t\t\t                          (:code \":type\")\n\t\t\t                          \" keyword, followed by a literal (quoted) symbol or an expression\nwhich evaluates to a symbol. The input values consist of a spliced-in plist of\nkeyword-value pairs.\")\n\t\t                              (:p \"In the definition below, the parent object (\"\n\t\t\t                          (:span :class \"object\" \"assembly-1\")\n\t\t\t                          \") has two child objects: one called \"\n\t\t\t                          (:span :class \"object\" \"my-box\")\" based on \"\n\t\t\t                          (:span :class \"object\" \"my-box-4\") \" with \"\n\t\t\t                          (:span :class \"slot\" \"length\") \" set to \"\n\t\t\t                          (:span :class \"value\" \"10\") \", and another called \"\n\t\t\t                          (:span :class \"object\" \"my-sphere\") \", based on the GendL \"\n\t\t\t                          (:span :class \"object\" \"sphere\") \" object, with its \"\n\t\t\t                          (:span :class \"slot\" \"radius\")\" specified as being equal to the \"\n\t\t\t                          (:span :class \"slot\" \"width\")\" of \"\n\t\t\t                          (:span :class \"slot\" \"my-box\"))\n\t\t\t                      (:p \"Note that when specifying the inputs to an object\"\n\t\t\t                          (:ul (:li \"the name must match one of the symbols in the object's \"\n\t\t\t\t                            (:span :class \"object-keyword\" \":input-slots\") \".\")\n\t\t\t\t                       (:li \"the name must be specified as a keyword (ie preceeded by a \"\n\t\t\t\t                            (:b (:code \":\")) \") so an \"\n\t\t\t\t                            (:span :class \"object-keyword\" \":input-slot\") \" \"\n\t\t\t\t                            (:span :class \"slot\" \"length\") \" is specified as \"\n\t\t\t\t                            (:b \":length\") \" when specifying the inputs\")))\n\t\t                              (str (code-example (the code-5)))\n\t\t\t                      (:p \"Instantiating assembly-1 in Geysr and drawing the leaves will \nlook like this\")\n\t\t\t                      (:img :src (format nil \"/~a-images/assembly-1.png\" (the publish-prefix)) :style \"width: auto; height: 200px;\" )\n\t\t\t                      (:h3 (:span :class \"object-keyword\" \":functions\"))\n\t\t\t                      (:p \"The \"\n\t\t\t                          (:span :class \"object-keyword\" \":functions\") \" section is where \nyou put the names, argument lists and bodies for \"\n\t\t\t                          (:span :class \"object-keyword\" \":functions\") \" which can operate \nwithin the context of the Gendl object they are defined in. \"\n\t\t\t                          \"They shouldn't be confused with Common Lisp functions which are \ndefined with \"\n\t\t\t                          (:em (:b\"defun\"))\", although the syntax is very similar. The biggest \ndifference is that a Gendl \"\n\t\t\t                          (:span :class \"object-keyword\" \":function\") \" can access messages \nwithin the object it is defined in by using the Gendl \"\n\t\t\t                          (:span :class \"macro\" \"the\") \" macro\")\n\t\t\t                      (:p \"We will cover more on \"\n\t\t\t                          (:span :class \"object-keyword\" \":functions\") \" in a later part of \nthis tutorial\"))))\n\t\t       \n\t\t\t\n\t\t            ((:div :class \"main-page-item\")\n\t\t\t     (:h2 \"Resources\")\n\t\t\t     (str (the resource-links))))))))\n\n\n\n\n\n",
    "metadata": {
      "source": "gornschool-training/t2/source/object-definition-tw.lisp",
      "file_name": "object-definition-tw.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 8,
      "section": "*definition-name*"
    },
    "id": "3a6e53f5d47530c2b5d33dd77215127f"
  },
  {
    "text": "(in-package :training-2)\n\n",
    "metadata": {
      "source": "gornschool-training/t2/source/lists.lisp",
      "file_name": "lists.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 0,
      "section": "header"
    },
    "id": "cec0f0465a02078251c7bc3df15f846f"
  },
  {
    "text": "(define-object lists (base-training-sheet)\n  :computed-slots\n  ((index-words (list \"list\" \"quote\" \"'\" \"append\" \"cons\" \"push\" \"car\" \"cdr\" \"cadr\"\n                      \"first\" \"second\" \"tenth\" \"nth\" \"nthcdr\"\"last\" \"lastcar\" \n\t\t      \"getf\" \"setf\" \"plist\" \"length\" \"list-elements\" \"the-element\"\n                      \"the-child\" \"index\"))\n   (repl-1 (list (list :command \"(setq a (list 1 2 3))\"\n\t\t       :output \"(1 2 3)\")))\n   (repl-2 (list (list :command \"(setq b '(4 5 6 7 8 9))\"\n\t\t       :output \"(4 5 6 7 8 9)\")))\n   (repl-3 (list (list :command \"(first a)\"\n\t\t\t:output 1)\n\t\t  (list :command \"(rest a)\"\n\t\t\t:output \"(2 3)\")))\n   (repl-4 (list (list :command \"(car a)\"\n\t\t       :output 1)\n\t\t (list :command \"(cdr a)\"\n\t\t       :output \"(2 3)\")\n\t\t (list :command \"(caddr a)\"\n\t\t       :output 3)))\n   \n   (repl-5 (list (list :command \"(first a)\"\n\t\t       :output 1)\n\t\t (list :command \"(fourth b)\"\n\t\t       :output 7)))\n   (repl-6 (list (list :command \"(last a)\"\n\t\t       :output \"(3)\")\n\t\t (list :command \"(lastcar a)\"\n\t\t       :output 3)))\n   (repl-7 (list (list :command \"(nth 3 b)\"\n\t\t       :output \"7\")\n\t\t (list :command \"(nthcdr 3 b)\"\n\t\t       :output \"(7 8 9)\")))\n   (repl-8 (list (list :command \"(setq c (list :a 1 :b 2 :c 3))\"\n\t\t       :output \"(:A 1 :B 2 :C 3)\")\n\t\t (list :command \"(getf c :b)\"\n\t\t       :output 2)))\n   (repl-9 (list (list :command \"(setq c (list :a 1 :b 2 :c 3 :a 4))\"\n\t\t       :output \"(:A 1 :B 2 :C 3 :A 4)\")\n\t\t (list :command \"(getf c :a)\"\n\t\t       :output 1)))\n   (repl-10 (list (list :command \"(setq d (list :a 1 :b 2 :c 3))\"\n\t\t\t:output \"(:A 1 :B 2 :C 3)\")\n\t\t  (list :command \"(setf (getf d :b) 10)\"\n\t\t\t:output 10)\n\t\t  (list :command \"d\"\n\t\t\t:output \"(:A 1 :B 10 :C 3)\")))\n\n   (repl-11 (list (list :command \"(append (list 1 2) (list 3 4))\"\n\t\t\t:output \"(1 2 3 4)\")\n\t\t  (list :command \"(append (list 1 2) (list 3 4) 5)\"\n\t\t\t:output \"(1 2 3 4 . 5)\")\n\t\t  (list :command \"(append 0 (list 1 2) (list 3 4))\"\n\t\t\t:error \"; Evaluation aborted on #<TYPE-ERROR #x2103F1595D>.\")\n\t\t  (list :command \"(append (list 1 2) 0 (list 3 4))\"\n\t\t\t:error \"; Evaluation aborted on #<TYPE-ERROR #x2103EBBCBD>.\")))\n\t\t  \n   (repl-12 (list (list :command \"(cons 1 (list 2 3 4))\"\t  \n\t\t\t:output \"(1 2 3 4)\")\n\t\t  (list :command\" (cons (list 1 2) (list 2 3 4))\"\t  \n\t\t\t:output \"((1 2) 2 3 4)\")))\n   (repl-13 (list (list :command \"(setq a nil)\"\n\t\t\t:output \"NIL\")\n\t\t  (list :command \"(push 1 a)\"\n\t\t\t:output \"(1)\")\n\t\t  (list :command \"(push 2 a)\"\n\t\t\t:output \"(2 1)\")\n\t\t  (list :command \"(push 2 a)\"\n\t\t\t:output \"(3 2 1)\")\n\t\t  (list :command \"a\"\n\t\t\t:output \"(3 2 1)\")\n\t\t  (list :command \"(push (list 1 2 3) a)\"\n\t\t\t:output \"((1 2 3) 3 2 1)\")))\n\n   (repl-14 (list (list :command \"(setq self (make-object 'assembly-8))\"\n\t\t\t:output \"#<GDL-USER::ASSEMBLY-8 #x210456C58D>\")\n\t\t  (list :command \"(list-elements (the my-box))\"\n\t\t\t:output \"(#<BOX #x210456A86D> #<BOX #x210456F2BD> #<BOX #x210456EE9D>)\")\n\t\t  (list :command \"(the box-volumes)\"\n\t\t\t:output \"(4 10 16)\")))\n\n\n   (code-1 (list \"",
    "metadata": {
      "source": "gornschool-training/t2/source/lists.lisp",
      "file_name": "lists.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 0,
      "section": "lists"
    },
    "id": "cec0f0465a02078251c7bc3df15f846f"
  },
  {
    "text": "(define-object assembly-8 (base-object)\"\n\t\t \"\"\n\t\t \":computed-slots\"\n\t\t \"((box-lengths (list 2 5 8))\"\n\t\t \" (box-centers (list (make-point 0 0 0)\"\n\t\t \"\t\t    (make-point 6 0 0)\"\n\t\t \"\t\t    (make-point 12 0 0)))\"\n\t\t \" (number-of-boxes (length (the box-lengths)))\"\n\t\t \" (box-volumes (list-elements (the my-box) (the-element volume)))\"\n\t\t \" (box-1-volume (nth 0 (the box-volumes))))\"\n\t\t \"\"\n\t\t \":objects\"\n\t\t \"((my-box :type 'box\"\n\t\t \"\t :sequence (:size (the number-of-boxes))\"\n\t\t \"\t :length (nth (the-child index) (the box-lengths))\"\n\t\t \"\t :width 2\"\n\t\t \"\t :height 1\"\n\t\t \"\t :center (nth (the-child index) (the box-centers)))))\"))\n\n\n   (body-content (with-cl-who-string()\n\t\t   (:p \"Lists are fundamental to Lisp - LISt Processing\")\n\t\t   (:p \"A list is defined textually as zero or more elements enclosed by parentheses. The elements can actually be anything, e.g. numbers, strings, objects, more lists, keywords\")\n\t\t   (:p (:span :class \"general-keyword\" \"nil\") \" is defined an an empty list. It also acts as the Boolean value for false.\nThis is one of the few places in Lisp where a single value assumes more than one meaning\")\n\t\t   (:h3 \"Creating Lists\")\n\t\t   (:p \"There are 2 basic ways to create a list\"\n\t\t       (:ul (:li \"Using the \"\n\t\t\t\t (:span :class \"function\"\"list\")\" function\"))\n                       \n\t\t       (str (repl-example  (the repl-1)))\n\t\t       (:ul (:li \"Quoting a literal list\"))\n\t\t       (str (repl-example (the repl-2)))\n\t\t       \"However, there are many other functions which return lists\")\n                   \n\t\t   (:h3 \"Adding to lists\")\n                   \n\t\t   (:p \"The Common Lisp function \"\n\t\t       ((:span :class \"function\") \"append\") \" takes 2 or more lists and returns a new list\nwhich results from appending them into a single list. It does not modify the given input lists. If the arguments are not lists then \"\n\t\t       ((:span :class \"function\") \"append\") \" will behave in different ways depending on where the non-list element is\"\n\t\t       (:ul (:li \"If it is the last of the arguments append will generate a dotted list\")\n\t\t\t    (:li \"If it is in any other position an error will be generated\")))\n\t\t   \n\t\t   (str (repl-example (the repl-11)))\n                        \n\t\t   (:p \"If the second argument to the Common Lisp function \"\n\t\t       ((:span :class \"function\") \"cons\")\" is a list, then \"\n\t\t       ((:span :class \"function\") \"cons\")\" will return a list with the first\nargument prepended to the front of it. Contrast the difference in output compared to \"\n\t\t       ((:span :class \"function\") \"append\")\" when the first argument to \"\n\t\t       ((:span :class \"function\") \"cons\")\" is a list\")\n\t\t   (str (repl-example (the repl-12)))\n\t\t   (:p \"the Common Lisp macro \"((:span :class \"macro\") \"push\")\" works in much the same way as  \"\n\t\t       ((:span :class \"function\") \"cons\") \" but \"\n                       ((:span :class \"function\") \"push\") \" modifies the list (its second argument) in-place,\nwhile \" ((:span :class \"function\") \"cons\") \" simply returns a new list and does not modify its arguments in any way.\")\n                   \n\t\t   (str (repl-example (the repl-13))) \n\t\t   \n\t\t   (:h3 \"Accessing elements within a list\")\n\t\t   (:p \"The Lisp function \"\n\t\t       ((:span :class \"function\") \"first\")\" returns the first element of a list, whilst the Lisp function \"\n\t\t       ((:span :class \"function\") \"rest\")\" returns a list minus the first element\")\n\t\t   (str (repl-example (the repl-3)))\n\t\t   \n\t\t   (:p \"Lisp also defines some archaically-named list access functions which you may encounter in legacy code,such as  \"\n                       (:span :class \"function\" \"car\") \" (synonym for \"\n                       (:span :class \"function\" \"first\") \"), \"\n                       (:span :class \"function\" \"cdr\") \" (synonym for \"\n                       (:span :class \"function\" \"rest\") \"), and some compound ones such as \"\n                       ((:span :class \"function\")\"cadr\") \", \"\n                       ((:span :class \"function\")\"caddr\") \", and so on.\")\n                   (str (repl-example (the repl-4)))\n\t\t   (:p \"If you encounter any of these archaic names, you may look them up in a standard CL reference.\")\n\t\t   (:p \"Common Lisp defines first through to tenth as functions to retrieve the corresponding element of a list\")\n\t\t   (str (repl-example (the repl-5)))\n\t\t   (:p \"The Common Lisp function \"\n\t\t       (:span :class \"function\"\"last\")\" returns the last element of a list \"\n\t\t       (:em (:b \"as a list\"))\". To get the last element, use the GendL function \"\n\t\t       (:span :class \"function\"\"lastcar\"))\n\t\t   (str (repl-example (the repl-6)))\n\t\t   (:p \"Finally to return any element in a list, Common Lisp provides the function \"\n\t\t       (:span :class \"function\"\"nth\")\". \"\n\t\t       (:span :class \"function\"\"nth\")\" takes an index number and a list and will return the the element at the position in the list defined by the index number. Note that nth is zero-based, so the first element in a list in (nth 0 [list]). There is a corresponding function \"\n\t\t       (:span :class \"function\"\"nthcdr\")\", again taking an index number and list as arguments which will return the nth \"\n\t\t       (:span :class \"function\"\"cdr\")\" of a list\")\n\t\t   (str (repl-example (the repl-7)))\n\t\t   (:h3 \"Plists\")\n\t\t   (:p \"Plists are a special type of list which is made up of keyword-value pairs. Rather than accessing elements of the list by position, the value element is accessed by referencing the keyword. Plists are a very convenient way to hold data and are widely used. The \"\n\t\t       (:span :class \"function\"\"getf\")\" function, which takes a Plist and keyword as arguments returns the value immediately following the keyword\")\n\t\t   (str (repl-example (the repl-8)))\n\t\t   (:p \"Note that if a keyword is defined more than once in a plist, \"\n\t\t       (:span :class \"function\"\"getf\")\" will return the value associated with the first occurrence of the keyword\")\n\t\t   (str (repl-example (the repl-9)))\n\t\t   (:p \"Values in a plist may be updated by using a combination of the Common Lisp \"\n\t\t       (:span :class \"function\"\"setf\")\" and \"\n\t\t       (:span :class \"function\"\"getf\")\" functions\")\n\t\t   (str (repl-example (the repl-10)))\n\t\t\t\n\t\t   (:h3 \"Using lists in GendL\")\n\t\t   (:p \"The example below is based on \"\n\t\t       ((:span :class \"object\")\"assembly-5\")\" from the Sequences of Objects tutorial, converted to use lists. A few features to observe\"\n\t\t       (:ul (:li \"The number of \"\n\t\t\t\t (:span :class \"object\"\"my-box\")\" objects is now calculated based on the elements in the list defined by the \"\n\t\t\t\t (:span :class \"keyword\"\":computed-slot\")\" \"\n\t\t\t\t (:span :class \"slot\"\"box-lengths\")\", using the Common Lisp function \"\n\t\t\t\t (:span :class \"function\"\"length\"))\n\t\t\t    (:li \"The \"\n\t\t\t\t (:span :class \"slot\"\"length\")\" of each \"\n\t\t\t\t (:span :class \"object\"\"my-box\")\" object uses (\"\n\t\t\t\t (:span :class \"macro\"\"the-child\")\" \"\n\t\t\t\t (:span :class \"slot\"\"index\")\") to access the nth element of the \"\n\t\t\t\t (:span :class \"slot\"\"box-lengths\")\" list\")\n\t\t\t    (:li \"The \"\n\t\t\t\t (:span :class \"keyword\"\":computed-slot\")\" \"\n\t\t\t\t (:span :class \"slot\"\"box-volumes\")\" makes use of the GendL macro \"\n\t\t\t\t (:span :class \"macro\"\"list-elements\")\" to list all of the \"\n\t\t\t\t (:span :class \"object\"\"my-box\")\" objects and then send the volume message to them using the GendL macro \"(:span :class \"macro\"\"the-element\"))))\n                   (:div :class \"main-page-container\"\n\t                 (:div :class \"main-page-item\"\n\t\t\t       (str (code-example (the code-1))))\n\t\t\t \n\t\t\t (:div :class \"main-page-item\"\n\t\t\t       (:img :src (format nil \"/~a-images/using-lists.png\" (the publish-prefix)) :style \"width: auto; height: 300px; margin: 1em 0 1em 3% ;\" )))\n\t\t   (str (repl-example (the repl-14)))\n\t\t\t    \n\t\t\t    \n\t\t   (:div :class \"main-page-item\"\n\t\t\t (:h2 \"Resources\")\n\t\t\t (str (the resource-links)))))))\n  \n\n",
    "metadata": {
      "source": "gornschool-training/t2/source/lists.lisp",
      "file_name": "lists.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 1,
      "section": "assembly-8"
    },
    "id": "352c54391e00277cea251dfcb139a149"
  },
  {
    "text": "(in-package :training-2)\n\n",
    "metadata": {
      "source": "gornschool-training/t2/source/positioning-and-orientation.lisp",
      "file_name": "positioning-and-orientation.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 0,
      "section": "header"
    },
    "id": "c6992ef73ad72dfe6e1ca9e97d5b04d2"
  },
  {
    "text": "(define-object positioning-and-orientation (base-training-sheet)\n  :computed-slots\n  ((index-words (list \"center\" \":orientation\" \"alignment\" \"make-point\" \"translate-along-vector\" \"make-vector\" \"face-center\" \"face-normal-vector\" \"edge-center\"\n\t\t      \"vertex\" \":top\"\":bottom\"\":front\" \":rear\" \":left\" \":right\" \"the-child\" \"co-ordinate system\" \"axis system\"))\n\n   (code-1 (list \"",
    "metadata": {
      "source": "gornschool-training/t2/source/positioning-and-orientation.lisp",
      "file_name": "positioning-and-orientation.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 0,
      "section": "positioning-and-orientation"
    },
    "id": "c6992ef73ad72dfe6e1ca9e97d5b04d2"
  },
  {
    "text": "(define-object assembly-2 (base-object)\"\n\t\t \" :objects\"\n\t\t \" ((box-1 :type 'box\"\n\t\t \"         :length 5\"\n\t\t \"         :width 1\"\n\t\t \"         :height 1)\"\n\t\t \"  (box-2 :type 'box\"\n\t\t \"         :length 10\"\n\t\t \"         :height 5\"\n\t\t \"         :width 3\"\n\t\t \"         :center (make-point 2 2 2))\"\n\t\t \"  (box-3 :type 'box\"\n\t\t \"         :length 5\"\n\t\t \"         :height 5\"\n\t\t \"         :width 5\"\n\t\t \"         :center (translate-along-vector\"\n                 \"                   (the box-2 center)\"\n\t\t \"                   (make-vector 1 1 0)\"\n\t\t \"                   5))))\"))\n\n\n   (code-2 (list \"",
    "metadata": {
      "source": "gornschool-training/t2/source/positioning-and-orientation.lisp",
      "file_name": "positioning-and-orientation.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 1,
      "section": "assembly-2"
    },
    "id": "3d7f940369197bc5db2cbc8714774208"
  },
  {
    "text": "(define-object assembly-3 (base-object)\"\n\t\t \" :objects\"\n\t\t \" ((box-1 :type 'box\"\n\t\t \"         :length 5\"\n\t\t \"         :width 1\"\n\t\t \"         :height 1)\"\n\t\t \"  (box-2 :type 'box\"\n\t\t \"         :length 10\"\n\t\t \"         :height 5\"\n\t\t \"         :width 3\"\n\t\t \"         :center (translate-along-vector\"\n                 \"                   (the box-1 (face-center :rear))\"\n\t\t \"                   (the box-1 (face-normal-vector :rear))\"\n                 \"                   (half (the-child length))))\"\n\t\t \"  (box-3 :type 'box\"\n\t\t \"         :length 5\"\n\t\t \"         :height 5\"\n\t\t \"         :width 5\"\n\t\t \"         :center (translate-along-vector\"\n                 \"                    (the box-2 (face-center :rear))\"\n\t\t \"                    (the box-2 (face-normal-vector :rear))\"\n\t\t \"                    (half (the-child length)))))\"))\n\n   (code-3 (list \"",
    "metadata": {
      "source": "gornschool-training/t2/source/positioning-and-orientation.lisp",
      "file_name": "positioning-and-orientation.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 2,
      "section": "assembly-3"
    },
    "id": "8727c368bf28de7c7ef412086e82f6cd"
  },
  {
    "text": "(define-object assembly-4 (base-object)\"\n\t\t \"  :objects\"\n\t\t \"  ((box-1 :type 'box\"\n\t\t \"          :length 5\"\n\t\t \"          :width 1\"\n\t\t \"          :height 1)\"\n\t\t \"   (box-2 :type 'box\"\n\t\t \"          :length 5\"\n\t\t \"          :width 1\"\n\t\t \"          :height 1\"\n\t\t \"          :orientation (alignment :rear (the box-1 (face-normal-vector :top)))))\"\n\t\t \"  )\"))\n\n   (code-4 (list \"",
    "metadata": {
      "source": "gornschool-training/t2/source/positioning-and-orientation.lisp",
      "file_name": "positioning-and-orientation.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 3,
      "section": "assembly-4"
    },
    "id": "b25025476b0693802790897d1eedcf49"
  },
  {
    "text": "(define-object assembly-5 (base-object)\"\n\t\t \" :objects\"\n\t\t \" ((box-1 :type 'box\"\n\t\t \"         :length 5\"\n\t\t \"         :width 1\"\n\t\t \"         :height 1\"\n\t\t \"         :orientation (alignment :rear (the (face-normal-vector :right))))\"\n\t\t \"  (box-2 :type 'box\"\n\t\t \"         :length 10\"\n\t\t \"         :height 5\"\n\t\t \"         :width 3\"\n\t\t \"         :orientation (alignment :rear (the box-1 (face-normal-vector :rear)))\"\n\t\t \"         :center (translate-along-vector (the box-1 (face-center :rear))\"\n\t\t \"                                         (the box-1 (face-normal-vector :rear))\"\n\t\t \"                                         (half (the-child length))))\"\n\t\t \"  (box-3 :type 'box\"\n\t\t \"         :length 5\"\n\t\t \"         :height 5\"\n\t\t \"         :width 5\"\n\t\t \"         :orientation (alignment :rear (the box-2 (face-normal-vector :rear)))\"\t\t \n\t\t \"         :center (translate-along-vector (the box-2 (face-center :rear))\"\n\t\t \"                                         (the box-2 (face-normal-vector :rear))\"\n\t\t \"                                         (half (the-child length)))\"))\n   \n   (repl-1 (list (list :command \"(make-point 2 2 2)\"\n\t\t       :output \"#(2.0 2.0 2.0)\")))\n   \n   (repl-2 (list (list :command \"(setq self (make-object 'assembly-2))\"\n\t\t       :output \"#<ASSEMBLY-2 #x210462875D>\")\n\t\t (list :command \"(translate-along-vector (the box-2 center) (make-vector 1 1 0) 5)\"\n\t\t       :output \"#(5.535533905932738 5.535533905932738 2.0)\")))\n\n   (repl-3 (list (list :command \"(setq self (make-object 'assembly-3))\"\n\t\t       :output \"#<ASSEMBLY-3 #x210494BB9D>\")\n\t\t (list :command \"(the box-1 (face-center :rear))\"\n\t\t       :output \"#(0.0 2.5 0.0)\")\n\t\t (list :command \"(the box-1 (face-normal-vector :rear))\"\n\t\t       :output \"#(0.0 1.0 0.0)\")))\n\n\n   (body-content (with-cl-who-string()\n\t\t   (when gwl:*developing?* (str (the development-links)))\n\t\t   (:h2 (str (the page-header)))\n\t\t      \n\t\t   (:div\n                    :class \"main-page-container\"\n\t\t    (:div\n                     :class \"main-page-item\"\n\t\t     (:div\n\t\t      :class \"main-page-container\"\n\t\t      (:div\n                       :class \"main-page-item\"\n\t\t       (:p \"For geometric objects, GendL has a Cartesian axis system to specify co\u00f6rdinates in the X, Y and Z dimensions. \")\n\t\t       (:p \"When specifying a geometric object, a number of basic principles apply:\")\n\t\t       (:ul (:li \"The axis system applies to the object, but may be moved or re-oriented relative to other objects.\")\n\t\t\t    (:li \"The \" (:span :class \"slot\" \"center\") \" of the object is co-incident with the origin of its axis system \"\n                                 (:span :class \"value\" \"#(0.0 0.0 0.0)\") \".\")\n\t\t\t    (:li \"The \" (:span :class \"slot\" \"length\") \" dimension of the geometric object correponds with the Y axis.\")\n\t\t\t    (:li \"The \" (:span :class \"slot\" \"width\") \" dimension of the geometric object corresponds with the X axis.\")\n\t\t\t    (:li \"The \" (:span :class \"slot\" \"height\") \" dimension of the geometric object corresponds with the Z axis.\")))\n\t\t      (:div :class \"main-page-item\")\n\t\t      (:div\n                       :class \"main-page-item\"\n\t\t       (:img :src (format nil \"/~a-images/xyz-length-width-height.png\" (the publish-prefix)) :style \"width: auto; height: 200px;\" ))\n\t\t      (:div\n\t\t       :class \"main-page-item\")\n\t\t\t \n\t\t      (:div\n\t\t       :class \"main-page-item\"\n\t\t       (:h3 \"Positioning\")\n\n\n\t\t       (:p \"By default, the positioning of the center point of a child object is\nidentical to the center point of its parent. (This is because \"\n                           (:span :class \"slot\" \"center\") \" is declared internally to be \" (:em \"trickle-down\") \". We will cover more about \"\n                           (:span :class \"object-keyword\" \"trickle-down-slots\") \" and the \"\n                           (:code \"defaulting\") \" slot modifier later.\")\n                       (:p \"If you would like to override the default \"\n                           (:span :class \"slot\" \"center\")\n                           \" which \\\"trickles down\\\" from the \"\n                           (:span :class \"slot\" \"parent\")\n                           \" or a higher ancestor in the tree, then you may position them explicitly,\neither in an absolute manner (i.e. relative to the global co\u00f6rdinate system), or in a relative\nmanner (i.e. relative to another object, typically the direct parent), by feeding an explicit \"\n                           (:span :class \"general-keyword\" \":center\")\n                           \" input into the child.  Depending on how you specify that \"\n                           (:span :class \"general-keyword\" \":center\") \", the child will end up positioned relative to the parent (or to another object), or relative to the global co\u00f6rdinate system.\")\n\t\t       (:p \"Consider the following object definition and its display in Geysr:\"))\n\t\t      (:div\n                       :class \"main-page-item\")\n\t\t\t\n\t\t      (:div :class \"main-page-item\" (str (code-example (the code-1))))\n\t\t      (:div :class \"main-page-item\"\n\t\t\t    (:img :src (format nil \"/~a-images/box-position.png\"  (the publish-prefix))\n                                  :style \"width: auto; height: 300px; margin: 1em 0 1em 3% ;\" ))\n\t\t      (:div :class \"main-page-item\"\n\t\t\t    (:p (:span :class \"object\" \"box-1\") \" does not specify a \"\n\t\t\t        (:span :class \"slot\" \"center\")\", so its center will default to that of its parent, or \"\n                                (:span :class \"value\" \"#(0.0 0.0 0.0)\") \".  Note in this case the parent (\"\n                                (:span :class \"object\" \"assembly-1\") \") is defined to include the \"\n\t\t\t        (:span :class \"object\" \"base-object\") \" mixin - this provides the basic co\u00f6rdinate system without providing any explicit geometry.\")\n\t\t\t    (:p (:span :class \"object\" \"box-2\") \" defines an explicit \"\n\t\t\t        (:span :class \"slot\" \"center\") \" using the GendL \"\n\t\t\t        (:span :class \"macro\" \"make-point\")\" macro. The co\u00f6rdinates of this point are defined in absolute global co\u00f6rdinates by\npassing numbers directly into that \" (:span :class \"function\" \"make-point\") \" macro.\"))\n\t\t      (:div :class \"main-page-item\")\n\t\t      (:div :class \"main-page-item\" \n\t\t\t    (str (repl-example (the repl-1))))\n\t\t      (:div :class \"main-page-item\")\n\t\t      (:div :class \"main-page-item\"\n\t\t\t    (:p)\n\t\t\t    (:p \"box-3 defines its \"\n\t\t\t        (:span :class \"slot\" \"center\")\" relative to the \"\n\t\t\t        (:span :class \"slot\" \"center\")\" of \"\n                                (:span :class \"slot\" \"box-2\") \" instance by using the \"\n\t\t\t        (:span :class \"function\" \"translate-along-vector\")\" function. \"\n\t\t\t        (:span :class \"function\" \"translate-along-vector\")\" takes the following inputs:\"\n\t\t\t        (:ul (:li \"a 3d-point which is to be translated, in this case the center of box-2;\")\n\t\t\t\t     (:li \"a vector which specifies the direction of translation - in this case we are translating in the direction pointed to\nby an arrow from the origin to one unit in the X direction, one unit in the Y direction and zero units in the Z direction;\")\n\t\t\t\t     (:li \"the distance by which the point it to be translated\"))\n\t\t\t        \"The co\u00f6rdinates of the resulting point are again defined in the co\u00f6rdinate system of the parent.\"))\n\t\t      (:div :class \"main-page-item\")\n\t\t      (:div :class \"main-page-item\" (str (repl-example (the repl-2))))\n\t\t      (:div :class \"main-page-item\")\n\t\t      (:div :class \"main-page-item\"\n\t\t\t    (:p \"Sometimes it is useful to access points and vectors relative to the reference box of the objects you create. When you create a \"\n                                (:span :class \"object\" \"box\") \" for example (whose reference box is identical with itself), the faces of the box are identified as \"\n\t\t\t        (:span :class \"general-keyword\" \":top\")\", \"\n\t\t\t        (:span :class \"general-keyword\" \":bottom\")\", \"\n\t\t\t        (:span :class \"general-keyword\" \":left\")\", \"\n\t\t\t        (:span :class \"general-keyword\" \":right\")\", \"\n\t\t\t        (:span :class \"general-keyword\" \":front\")\" and \"\n\t\t\t        (:span :class \"general-keyword\" \":rear\")))\n\t\t      (:div :class \"main-page-item\")\n\t\t      (:div :class \"main-page-item\" \n\t\t\t    (:img :src (format nil \"/~a-images/face-notation.png\"  (the publish-prefix)) :style \"width: auto; height: 300px; margin: 1em 0 1em 3% ;\" ))\n\t\t      (:div :class \"main-page-item\")\n\t\t      (:div :class \"main-page-item\"\n\t\t\t    (:p \"Various points relative to the bounding-box may then be accessed using the GendL \"\n\t\t\t        (:span :class \"object-keyword\" \":functions\")\" \" \n\t\t\t        (:span :class \"function\" \"face-center\")\", \"\n\t\t\t        (:span :class \"function\" \"edge-center\")\" and \"\n\t\t\t        (:span :class \"function\" \"vertex\")\", whilst vectors may be created normal to a face using the GendL \"\n\t\t\t        (:span :class \"object-keyword\" \":function\") \" \"\n\t\t\t        (:span :class \"function\" \"face-normal-vector\")\". \"))\n\t\t      (:div :class \"main-page-item\")\n\t\t      (:div :class \"main-page-item\"\n\t\t\t    (:img :src (format nil \"/~a-images/points-and-vector-from-faces.png\"  (the publish-prefix)) :style \"width: auto; height: 300px; margin: 1em 0 1em 3% ;\" ))\n\t\t      (:div :class \"main-page-item\")\n\t\t      (:div :class \"main-page-item\"\n\t\t\t    (:p \"So if you wished to position the 3 boxes in \"\n\t\t\t\t(:span :class \"object\" \"assemby-3\")\n\t\t\t\t\" such that the rear and front faces of adjoining boxes were coincident, you could achieve that with the following code:\"))\n\t\t      (:div :class \"main-page-item\")\n\t\t      (:div :class \"main-page-item\"\n\t\t\t    (str (code-example (the code-2))))\n\t\t      (:div :class \"main-page-item\"\n\t\t\t    (:img :src (format nil \"/~a-images/box-coincident-face.png\"  (the publish-prefix)) :style \"width: auto; height: 300px; margin: 1em 0 1em 3% ;\" ))\n\t\t      (:div :class \"main-page-item\"\n\t\t\t    (:p \"Two important concepts are also introduced here\"\n\t\t\t\t(:ul (:li \"When referencing a GendL function, you can use a normal referencing chain, but if the function has arguments\nthen you need to wrap that function and its arguments in parentheses. We see examples of this when using the \"\n\t\t\t\t\t  (:span :class \"function\" \"face-center\")\" and \"\n\t\t\t\t\t  (:span :class \"function\" \"face-normal-vector\")\" functions\"))))\n\t\t      (:div :class \"main-page-item\")\n\t\t      (:div :class \"main-page-item\"\n\t\t\t    (str (repl-example (the repl-3))))\n\t\t      (:div :class \"main-page-item\")\n\t\t      (:div :class \"main-page-item\"\n\t\t\t    (:ul (:li \"To refer to messages in the child object instances, you can use the macro \"\n\t\t\t\t      (:span :class \"macro\" \"the-child\") \". In the case of \"\n                                      (:span :class \"slot\" \"box-2\") \" and \" (:span :class \"slot\" \"box-3\")\n                                      \", we want to translate the point by half of each one's own \"\n\t\t\t\t      (:span :class \"slot\" \"length\")))\n\t\t\t    (:p \". These points and vectors could, of cource be computed explicitly in\nthe parent object. However by computing them using expressions\nrelative to the child instances, you can ensure that the design will \\\"hang\ntogether\\\" as intended, i.e. that front and rear faces of adjoining\nboxes will continue to be touching, even if the \"\n                                (:span :class \"slot\" \"center\") \" and/or \" (:span :class \"slot\" \"orientation\") \" of the first box is changed.\")\n\t\t\t    (:h3 \"Orientation\")\n\t\t\t    (:p \"By default, the \" (:span :class \"slot\" \"orientation\") \" of a child object is the same as that for its \"\n                                (:span :class \"slot\" \"parent\") \" object. However, you can override that by specifying an \"\n\t\t\t        (:span :class \"object-keyword\" \":orientation\") \" as an input to the child instance. To compute an orientation, you can use\nthe GendL \"\n                                (:span :class \"function\" \"alignment\") \" \"\n                                (:span :class \"object-keyword\" \"function\") \", which will yield an orientation by aligning one, two, or three\nspecified axes of our child instance with one, two, or three specified vectors.\")\n                            (:p \"If you compute those specified vectors relative to the co\u00f6rdinate system of the current \"\n                                (:span :class \"variable-name\" \"self\") \" (i.e. the \"\n                                (:span :class \"slot\" \"parent\") \", then the resultant \"\n                                (:span :class \"slot\" \"orientation\") \" will also end up relative and will automatically respond to any changes.\")\n                            (:p \"The \"\n\t\t\t        (:span :class \"function\" \"alignment\") \" function requires at least one axis-vector pair,\nbut optionally can accept an additional two axis-vector pairs, providing the second axis\nis orthogonal to the first and the third axis is orthogonal to the\nfirst and second\")\n\t\t\t    (:p \"In the example below, the \" (:span :class \"general-keyword\" \":rear\") \" axis of box-2 (aligned with the global positive Y axis, \"\n                                (:span :class \"value\" \"#(0.0 1.0 0.0)\") \", is aligned with the vector normal to the \"\n                                (:span :class \"general-keyword\" \":top\") \" face of \"\n                                (:span :class \"slot\" \"box-1\") \". The \" (:span :class \"slot\" \"center\") \" of each box remains the default \"\n                                (:span :class \"value\" \"#(0.0 0.0 0.0)\") \".\"))\n\t\t      (:div :class \"main-page-item\")\n\t\t      (:div :class \"main-page-item\"\n\t\t\t    (str (code-example (the code-3))))\n\t\t      (:div :class \"main-page-item\"\n\t\t\t    (:img :src (format nil \"/~a-images/orientation-1.png\" (the publish-prefix)) :style \"width: auto; height: 300px; margin: 1em 0 1em 3% ;\" ))\n\t\t      (:div :class \"main-page-item\"\n\t\t\t    (:p \"In the example below, which is an extension of \"\n                                (:span :class \"object\" \"assembly-4\") \", by being more explicit about the \"\n\t\t\t        (:span :class \"slot\" \":orientation\")\" being fed into \"\n                                (:span :class \"slot\" \"box-2\") \" and \"\n                                (:span :class \"slot\" \"box-3\") \", and aligning them with the \"\n                                (:span :class \"general-keyword\" \":rear\") \" axis of each's neighbor, you can ensure that all boxes remain touching regardless of what \"\n\t\t\t        (:span :class \"slot\" \":orientation\")\" may be specified in the future for \"\n                                (:span :class \"slot\" \"box-1\") \".\"))\n\t\t      (:div :class \"main-page-item\") \n\t\t      (:div :class \"main-page-item\"\n\t\t\t    (str (code-example (the code-4))))\n\t\t      (:div :class \"main-page-item\"\n\t\t\t    (:img :src (format nil \"/~a-images/orientation-2.png\" (the publish-prefix)) :style \"width: auto; height: 300px; margin: 1em 0 1em 3% ;\" ))\n\t\t      (:div :class \"main-page-item\"\n\t\t\t    (:h3 \"Points and Vectors\")\n\t\t\t    (:p \"GendL provides a number of functions for manipulating points and vectors. The Resources file points-and-vectors.lisp gives\nexamples of the most common ones, summarised below. Note that this is not an exhaustive list.\")\n\t\t\t    (:h4 \"Vectors\")\n\t\t\t    (:ul (:li (:span :class \"function\" \"make-vector\")\" - creates a vector\")\n\t\t\t         (:li (:span :class \"function\" \"face-normal-vector\")\" - (GendL \" (:span :class \"object-keyword\" \"function\") \") returns a vector normal to a specified face\")\n\t\t\t         (:li (:span :class \"function\" \"subtract-vectors\")\" - takes 2 3d points and returns the vector from the second point to the first point\")\n\t\t\t         (:li (:span :class \"function\" \"cross-vectors\")\" - returns a vector that is orthogonal to the 2 input vectors\")\n\t\t\t         (:li (:span :class \"function\" \"rotate-vector\")\" - rotates a vector around a normal vecort by an angle specified in radians\")\n\t\t\t         (:li (:span :class \"function\" \"rotate-vector-d\")\" - rotates a vector around a normal vecort by an angle specified in degrees\")\n\t\t\t         (:li (:span :class \"function\" \"angle-between-vectors\")\" - returns the angle between 2 vectors in radians\")\n\t\t\t         (:li (:span :class \"function\" \"angle-between-vectors-d\")\" - returns the angle between 2 vectors in degrees\"))\n\t\t\t    (:h4 \"Points\")\n\t\t\t    (:ul (:li  (:span :class \"function\" \"make-point\")\" - creates a point\")\n\t\t\t         (:li  (:span :class \"function\" \"3d-distance\")\" - the distance between 2 points\")\n\t\t\t         (:li  (:span :class \"function\" \"translate-along-vector\")\" - returns a point resulting from translating the\nspecified point along the specified vector by the specified distance\")\n\t\t\t         (:li  (:span :class \"function\" \"face-center\")\" (GendL \" (:span :class \"object-keyword\" \"function\")\n                                       \") - returns a point which is the center of a specified reference-box face\")\n\t\t\t         (:li  (:span :class \"function\" \"edge-center\")\" (GendL \" (:span :class \"object-keyword\" \"function\")\n                                       \") - returns a point which is the center of a specified reference-box edge (coincidence of 2 specified reference-box faces)\")\n\t\t\t         (:li  (:span :class \"function\" \"vertex\") \" (GendL \" (:span :class \"object-keyword\" \"function\")\n                                       \") - returns a point which is a vertex (coincidence of 3 specified reference-box faces)\")\n\t\t\t         (:li  (:span :class \"function\" \"coincident-points?\")\" - returns T is 2 points are within a given tolerance of each other\")\n\t\t\t         (:li  (:span :class \"function\" \"get-x\")\", \"\n\t\t\t\t       (:span :class \"function\" \"get-y\")\", \"\n\t\t\t\t       (:span :class \"function\" \"get-z\")\" - returns the X, Y or Z value of a specified point\"))\n\t\t\t    (:p \"See the \" (:a :href \"/yadd\" \"online documentation\") \" relating to the \"\n                                (:span :class \"package-name\" \":GEOM-BASE\") \" package for exact syntax and further details.\")))))\n\t\t   (:div :class \"main-page-item\"\n\t\t\t (:h2 \"Resources\") (str (the resource-links)))))))\n\n\n\n",
    "metadata": {
      "source": "gornschool-training/t2/source/positioning-and-orientation.lisp",
      "file_name": "positioning-and-orientation.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 4,
      "section": "assembly-5"
    },
    "id": "727d77bd4576376e43759e41f5a4a56f"
  },
  {
    "text": "(in-package :training-2)\n\n",
    "metadata": {
      "source": "gornschool-training/t2/source/building-example-2.lisp",
      "file_name": "building-example-2.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 0,
      "section": "header"
    },
    "id": "f6d992dd9b29cf50504bb4069a066d91"
  },
  {
    "text": "(define-object building-example-2 (base-training-sheet)\n  :functions\n  ((hint-1! () (the (set-slot! :hint-1 (not (the hint-1)))))\n   (hint-2! () (the (set-slot! :hint-2 (not (the hint-2))))))\n\n  :computed-slots\n  ((index-words (list \"format\" \"~f\" \"~{ ~}\" \"~a\" ))\n   (hint-1 nil :settable)\n   (hint-2 nil :settable)\n   (repl-1 (list (list :command \"(make-self 'building)\"\n\t\t       :output \"#<BUILDING #x21045DF6AD>\")\n\t\t  (list :command \"(the building-materials)\"\n\t\t\t:output (list \"(:FULL-BRICKS 3109\"\n\t\t\t\t      \" :HALF-BRICKS 162\"\n\t\t\t\t      \" :MORTAR-VOLUME-M3 0.6665175\"\n\t\t\t\t      \" :BEAMS ((:LENGTH-MM 874.685657822283\"\n\t\t\t\t      \"          :QTY 3)\"\n\t\t\t\t      \"         (:LENGTH-MM 1727.7658984943535 \"\n\t\t\t\t      \"          :QTY 6)\"\n\t\t\t\t      \"         (:LENGTH-MM 3030 \"\n\t\t\t\t      \"          :QTY 3))\"\n\t\t\t\t      \" :ROOF-CLADDING (:LENGTH 4080 \"\n\t\t\t\t      \"                 :WIDTH 1806.755259207346 \"\n\t\t\t\t      \"                 :QTY 2))\"))))\n\n   (repl-2 (list (list :command (list \"(format nil \\\"Bricks~%======~%  Full Bricks ~a~%  Half Bricks ~a~%\\\" \"\n\t\t\t\t      \"        (getf (the building-materials) :full-bricks)\" \n\t\t\t\t      \"        (getf (the building-materials) :half-bricks))\")\n\t\t       :output (list \"\\\"Bricks\\\"\"\n\t\t\t\t     \"======\"\n\t\t\t\t     \"  Full Bricks 3190\"\n\t\t\t\t     \"  Half Bricks 162\"\n\t\t\t\t     \"\\\"\"))))\n   (repl-3 (list (list :command (list \"(format nil \\\"Mortar~%======~%  Volume ~,2f m^3~%\\\"\"\n\t\t\t\t      \"        (getf (the building-materials) :mortar-volume-m3))\")\n\t\t       :output (list \"\\\"Mortar\"\n\t\t\t\t     \"======\"\n\t\t\t\t     \"  Volume 0.67 m^3\"\n\t\t\t\t     \"\\\"\"))\n\t\t (list :command (list \"(format nil \"\n\t\t\t\t      \"  \\\"Roof Cladding~%======~%  Qty ~a~%  Dimensions (L x W x T) ~d x ~d x ~d\\\")\"\n\t\t\t\t      \"(getf (getf (the building-materials) :roof-cladding) :qty)\"\n\t\t\t\t      \"(round-to-nearest (getf (getf (the building-materials) :roof-cladding) \"\n\t\t\t\t      \"                        :length) 1)\"\n\t\t\t\t      \"(round-to-nearest (getf (getf (the building-materials) :roof-cladding) \"\n\t\t\t\t      \"                        :width) 1)\"\n\t\t\t\t      \"(the cladding-thickness)))\")\n\t\t       \n\t\t       :output (list \"\\\"Roof Cladding\"\n\t\t\t\t     \"======\"\n\t\t\t\t     \"  Qty 2\"\n\t\t\t\t     \"  Dimensions (L x W x T) 4080 x 1807 x 10\"\n\t\t\t\t     \"\\\"\"))))\n\n   (repl-4 (list (list :command (list \"(let* \"\n\t\t\t\t      \"  ((bom (the building-materials))\"\n\t\t\t\t      \"   (cladding (getf bom :roof-cladding))\"\n\t\t\t\t      \"   (bricks (format nil \\\"Bricks~%======~%  Full Bricks ~a~%  Half Bricks ~a~%\\\" \"\n\t\t\t\t      \"\t\t          (getf bom :full-bricks) \"\n\t\t\t\t      \"\t\t          (getf bom :half-bricks)))\"\n\t\t\t\t      \"   (mortar (format nil \\\"Mortar~%======~%  Volume ~,2f m^3~%\\\" \"\n\t\t\t\t      \"\t\t          (getf bom :mortar-volume-m3)))\"\n\t\t\t\t      \"   (l (round-to-nearest (getf cladding :length) 1))\"\n\t\t\t\t      \"   (w (round-to-nearest (getf cladding :width) 1))\"\n\t\t\t\t      \"   (roof \"\n\t\t\t\t      \"      (format nil \"\n\t\t\t\t      \"       \\\"Roof Cladding~%======~%  Qty ~a~%  Dimensions (L x W x T) ~d x ~d x ~d~%\\\" \"\n\t\t\t\t      \"         (getf cladding :qty)\"\n\t\t\t\t      \"         l w (the cladding-thickness))))\"\n\t\t\t\t      \"  (format nil \\\"~@{~a~}\\\" bricks mortar roof))\")\n\t\t       :output (list \"\\\"Bricks\"\n\t\t\t\t     \"======\"\n\t\t\t\t     \"  Full Bricks 3109\"\n\t\t\t\t     \"  Half Bricks 162\"\n\t\t\t\t     \"Mortar\"\n\t\t\t\t     \"======\"\n\t\t\t\t     \"  Volume 0.67 m^3\"\n\t\t\t\t     \"Roof Cladding\"\n\t\t\t\t     \"======\"\n\t\t\t\t     \"  Qty 2\"\n\t\t\t\t     \"  Dimensions (L x W x T) 4080 x 1807 x 10\"\n\t\t\t\t     \"\\\"\"))))\n\n   (repl-5 (list (list :command (list \"(let* ((beams (getf (the building-materials) :beams))\"\n\t\t\t\t      \"       (beams-list (flatten \"\n\t\t\t\t      \"                       (mapcar #'(lambda(a)\"\n\t\t\t\t      \"                            (list (getf a :qty) \"\n\t\t\t\t      \"                                  (round-to-nearest (getf a :length-mm) 1)))\"\n\t\t\t\t      \"\t\t                    beams)))\"\n\t\t\t\t      \"       (header (format nil \\\"Beams~%=====~%\\\"))\"\n\t\t\t\t      \"       (dimensions (format nil \\\"Section (H x W x T) ~a x ~a x ~a~%\\\" \"\n\t\t\t\t      \"                           (the beam-height) \"\n\t\t\t\t      \"                           (the beam-width) \"\n\t\t\t\t      \"                           (the wall-thickness)))\"\n\t\t\t\t      \"       (lengths (format nil \\\"~{  Qty ~a Length ~a~%~}\\\" beams-list)))\"\n\t\t\t\t      \" (format nil \\\"~@{~a~}\\\" header dimensions lengths))\")\n\t\t       :output (list \"\\\"Beams\"\n\t\t\t\t     \"=====\"\n\t\t\t\t     \"Section (H x W x T) 50 x 40 x 3\"\n\t\t\t\t     \"  Qty 3 Length 875\"\n\t\t\t\t     \"  Qty 6 Length 1728\"\n\t\t\t\t     \"  Qty 3 Length 3030\"\n\t\t\t\t     \"\\\"\"))))\n\n   (code-1 (list \"define-object building(box)\"\n\t\t \":computed-slots\"\n\t\t \"(...\"\n\t\t \" ...\"\n\t\t \"(bom-formatted \"\n\t\t \"   (let* \"\n\t\t \"     ((bom (the building-materials))\"\n\t\t \"\t(cladding (getf bom :roof-cladding))\"\n\t\t \"\t(bricks (format nil \\\"Bricks~%======~%  Full Bricks ~a~%  Half Bricks ~a~%\\\" \"\n\t\t \"\t\t\t(getf bom :full-bricks) \"\n\t\t \"\t\t\t(getf bom :half-bricks)))\"\n\t\t \"\t(mortar (format nil \\\"Mortar~%======~%  Volume ~,3f m^3~%\\\" \"\n\t\t \"\t\t        (getf bom :mortar-volume-m3)))\"\n\t\t \"\t(l (round-to-nearest (getf cladding :length) 1))\"\n\t\t \"\t(w (round-to-nearest (getf cladding :width) 1))\"\n\t\t \"\t(roof \"\n\t\t \"        (format \"\n\t\t \"           nil \"\n\t\t \"            \\\"Roof Cladding~%======~%  Qty ~a~%  Dimensions (L x W x T) ~d x ~d x ~d~%\\\" \"\n\t\t \"\t        (getf cladding :qty) \"\n\t\t \"              l w (the cladding-thickness)))\"\n\t\t \"\t(beams (getf (the building-materials) :beams))\"\n\t\t \"\t(beams-list (flatten\"\n\t\t \"\t\t      (mapcar #'(lambda(a)\"\n\t\t \"\t\t\t\t  (list (getf a :qty) \"\n\t\t \"                                      (round-to-nearest (getf a :length-mm) 1)))\"\n\t\t \"\t\t\t  beams)))\"\n\t\t \"\t\"\n\t\t \"\t    (beams-header\" \n\t\t \"             (format \"\n\t\t \"                nil \"\n\t\t \"                 \\\"Beams~%=====~%  Section (H x W x T) ~a x ~a x ~a~%\\\"\"\n\t\t \"\t\t (the beam-height) (the beam-width) (the wall-thickness)))\"\n\t\t \"\t    (beam-lengths (format nil \\\"~{  Qty ~a Length ~a~%~}\\\" beams-list)))\"\n\t\t \"   (format nil \\\"~@{~a~}\\\" bricks mortar roof beams-header beam-lengths))) \"\n\t\t \"))\"))\n\n   (code-2 (list \"",
    "metadata": {
      "source": "gornschool-training/t2/source/building-example-2.lisp",
      "file_name": "building-example-2.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 0,
      "section": "building-example-2"
    },
    "id": "f6d992dd9b29cf50504bb4069a066d91"
  },
  {
    "text": "(defun building-bom (&key (nominal-height 3000)\"\n\t\t \"                          (nominal-width 3000)\"\n\t\t \"                          (nominal-length 3000)\"\n\t\t \"                          (roof-angle 30))\"\n\t\t \"   (let ((obj (make-object 'building\"\n\t\t \"\t\t\t     :nominal-height nominal-height\"\n\t\t \"\t\t\t     :nominal-width nominal-width\"\n\t\t \"\t\t\t     :nominal-length nominal-length\"\n\t\t \"\t\t\t     :truss-angle roof-angle)))\"\n\t\t \"    (theo obj bom-formatted)))\"))\n\n   (repl-6 (list (list :command \"(building-bom :nominal-width 4000)\"\n\t\t       :output (list \"\\\"Bricks\"\n\t\t\t\t     \"======\"\n\t\t\t\t     \"  Full Bricks 2834\"\n\t\t\t\t     \"  Half Bricks 162\"\n\t\t\t\t     \"Mortar\"\n\t\t\t\t     \"======\"\n\t\t\t\t     \"  Volume 0.608 m^3\"\n\t\t\t\t     \"Roof Cladding\"\n\t\t\t\t     \"======\"\n\t\t\t\t     \"  Qty 2\"\n\t\t\t\t     \"  Dimensions (L x W x T) 3130 x 2355 x 10\"\n\t\t\t\t     \"Beams\"\n\t\t\t\t     \"=====\"\n\t\t\t\t     \"  Section (H x W x T) 50 x 40 x 3\"\n\t\t\t\t     \"  Qty 3 Length 1149\"\n\t\t\t\t     \"  Qty 6 Length 2276\"\n\t\t\t\t     \"  Qty 3 Length 3980\"\n\t\t\t\t     \"\\\"\"))))\n   \n   (body-content (with-cl-who-string()\n\t\t      ((:div :class \"main-page-container\")\n\t\t       ((:div :class \"main-page-item\")\n\t\t\t(str (the intro-section main-div))\n\t\t\t(str (the hint-1-section main-div))\n\t\t\t(str (the hint-2-section main-div))\n\t\t\t)\n\t\t       ((:div :class \"main-page-item\")\n\t\t\t(:h2 \"Resources\")\n\t\t\t(str (the resource-links)))))))\n\n  :objects\n  ((intro-section :type 'sheet-section\n\t\t  :inner-html (with-cl-who-string()\n\t\t\t\t(:div :class \"grid-container-2-650px\"\n\t\t\t\t      (:div :class \"grid-item\"\n\t\t\t\t\t    (:p \"The previous worked example generated a model of a building and a list of materials required.\nIn this example you will create a formatted bill of materials\")\n\t\t\t\t\t    (:h3 \"Brief\")\n\t\t\t\t\t    (:p \"Based on the building model, deliver a formatted bill of materials. Dimensions where required should be\nto the nearest mm and morter volume to the nearest 0.01 m\"(:sup \"3\") \" The BOM shuld be delivered as a single formatted string\")\n                                            (str (the (hint-button :function-key :hint-1!)))))))\n\n\t\t  \n   (hint-1-section :type 'sheet-section\n\t\t   :inner-html (with-cl-who-string()\n\t\t\t\t (when (the hint-1)\n\t\t\t\t   (htm\n\t\t\t\t    (:div :class \"grid-container-2-650px\"\n\t\t\t\t\t  (:div :class \"grid-item\"\n\t\t\t\t\t\t(:p \"If you instantiate the \"\n\t\t\t\t\t((:span :class \"object\") \"building\")\" object from the previous example and request \"\n\t\t\t\t\t((:span :class \"slot\") \"(the building-materials)\")\", you will see the plist identifying the material requirements.\")\n\t\t\t\t   (str (repl-example (the repl-1) ))\n\t\t\t\t   (:p \"Starting with the bricks, we can easily construct a formatted string:\")\n\t\t\t\t   (str (repl-example (the repl-2) ))\n\n\t\t\t\t   (:p \"And similarly we can construct for the morter and roof cladding.\nNote that for the roof cladding we have to round the value before passing to \"\n\t\t\t\t       ((:span :class \"object\")\"format\")\", this is because if you were to use a \"(:em \",0\")\" prefix parameter with the \"\n\t\t\t\t       ((:span :class \"format-directive\")\"~f\")\" directive you would still end up with a trailing decimal point.\nWith the Mortar, on the other hand, \"\n\t\t\t\t       ((:span :class \"format-directive\")\"~,2f\")\" delivers exactly what you want\")\n\n\t\t\t\t   (str (repl-example (the repl-3) ))\n\t\t\t\t   (:p \"You can tidy this up and make it a bit more efficient with the use of \"\n\t\t\t\t       ((:span :class \"macro\") \"let*\") \" with some local bindings\")\n\t\t\t\t   (str (repl-example (the repl-4) ))\n\n\t\t\t\t   (:p \"Now you need to process the beams\")\n                                   (str (the (hint-button :function-key :hint-2!)))))))))\n\n   (hint-2-section :type 'sheet-section\n\t\t   :inner-html (with-cl-who-string()\n\t\t\t\t (when (the hint-2)\n\t\t\t\t   (htm\n\t\t\t\t    (:div :class \"grid-container-2-650px\"\n\t\t\t\t\t  (:div :class \"grid-item\"\n\t\t\t\t\t\t(:p \"If you can put the beams data into a list of pairs containing quantity and length for each distinct length, you can then use \"\n\t\t\t\t\t((:span :class \"object\") \"format\")\" with its iteration directive \"\n\t\t\t\t\t((:span :class \"format-directive\")\"~{ ~}\") \" to write the main output.\")\n\t\t\t\t    (str (repl-example (the repl-5 ) ))\n\t\t\t\t    (:p \"Putting it all together now, you can define a new \"\n\t\t\t\t\t((:span :class \"keyword\")\":computed-slot\")\" at the top level of \"\n\t\t\t\t\t((:span :class \"object\")\"building\")\" called \"\n\t\t\t\t\t((:span :class \"slot\")\"bom-formatted\")\", to deliver the required formatted bill of materials\")\n\n\t\t\t\t    (str (code-example (the code-1) ))\n\t\t\t\t    (:p \"Additionally you could define a custom constructor function with some keyword inputs which makes a \"\n\t\t\t\t\t((:span :class \"object\") \"building\")\" object instance using said inputs, and then calls \"\n\t\t\t\t\t((:span :class \"slot\") \"bom-formatted\")\" to yield the formatted BOM output.\")\n\t\t\t\t    \n\t\t\t\t    (str (code-example (the code-2) ))\n\t\t\t\t    (str (repl-example (the repl-6 ) ))))))))))\n\n",
    "metadata": {
      "source": "gornschool-training/t2/source/building-example-2.lisp",
      "file_name": "building-example-2.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 1,
      "section": "building-bom"
    },
    "id": "09fd01fd00745b752789b29222a87b4c"
  },
  {
    "text": "(in-package :training-2)\n\n",
    "metadata": {
      "source": "gornschool-training/t2/source/strings.lisp",
      "file_name": "strings.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 0,
      "section": "header"
    },
    "id": "041bbc72b184e0e52b4db81b496503be"
  },
  {
    "text": "(define-object strings (base-training-sheet)\n  :computed-slots\n  ((index-words (list \"String\" \"Character\" \"string-equal\" \"string=\" \"safe-sort\" \"position\" \"string<\" \"concatenate\" \"position\" \"format\" \"escape\"))\n\n   (repl-1 (list (list :command \"(setq str \\\"Introduction to GendL\\\")\"\n\t\t       :output \"\\\"Introduction to GendL\\\"\")\n\t\t (list :command \"(reverse str)\"\n\t\t       :output \"\\\"LdneG ot noitcudortnI\\\"\")\n\t\t (list :command \"(length str)\"\n\t\t       :output 21)\n\t\t (list :command \"(setq escaped-str \\\"Introduction to \\\"GendL\\\"\\\")\"\n\t\t       :output \"\\\"Introduction to \\\"GendL\\\"\\\"\")\n\t\t (list :command \"(length escaped-str)\"\n\t\t       :output 23)))\n   \n   (repl-2 (list (list :command \"(setq a #\\c)\"\n\t\t       :output \"#\\c\")\n\t\t (list :command \"(setq b #\\c)\"\n\t\t       :output \"#\\c\")\n\t\t (list :command \"(setq c #\\C)\"\n\t\t       :output \"#\\C\")\n\t\t (list :command \"(and (eq a b) (eql a b) (equal a b) (equalp a b))\"\n\t\t       :output \"T\")\n\t\t (list :command \"(char= a b)\"\n\t\t       :output \"T\")\n\t\t (list :command \"(char= a c)\"\n\t\t       :output \"NIL\")\n\t\t (list :command \"(char-equal a c)\"\n\t\t       :output \"T\")))\n\n   (repl-3 (list (list  :command \"(setq str1 \\\"genworks\\\")\"\n\t\t       :output \"\\\"genworks\\\"\")\n\t\t(list :command \"(setq str2 \\\"Genworks\\\")\"\n\t\t      :output \"\\\"Genworks\\\"\")\n\t\t(list :command \"(string= str1 str2)\"\n\t\t      :output \"NIL\")\n\t\t(list :command \"(string= str1 str2 :start1 1 :start2 1)\"\n\t\t      :output \"T\")\t\t   \n\t\t(list :command \"(string-equal str1 str2)\"\n\t\t      :output \"T\")\n\t\t(list :command \"(string-equal str1 str2 :start1 2)\"\n\t\t      :output \"NIL\")))\n   \n   (repl-4 (list (list :command \"(setq str \\\"GendL\\\")\"\n\t\t       :output \"NIL\")\n\t\t (list :command \"(position \\\"l\\\" str)\"\n\t\t       :output \"NIL\")\n\t\t (list :command \"(position \\\"l\\\" str :test 'string=))\"\n\t\t       :output \"NIL\")\n\t\t (list :command \"(position \\\"l\\\" str :test 'string-equal))\"\n\t\t       :output 4)\n\t\t (list :command \"(setq lis (list \\\"Peter\\\" \\\"Paul\\\" \\\"John\\\" \\\"Craig\\\"))\"\n\t\t       :output \"(\\\"Peter\\\" \\\"Paul\\\" \\\"John\\\" \\\"Craig\\\")\")\n\t\t (list :command \"(safe-sort lis 'string<)\"\n\t\t       :output \"(\\\"Craig\\\"\\\"John\\\" \\\"Paul\\\" \\\"Peter\\\")\")))\n\n   (repl-5 (list (list :command \"(setq str1 \\\"Introduction\\\")\"\n\t\t       :output \"\\\"Introduction\\\"\")\n\t\t (list :command \"(setq str2 \\\"To\\\")\"\n\t\t       :output \"\\\"To\\\"\")\n\t\t (list :command \"(setq str3 \\\"GendL\\\")\"\n\t\t       :output\"\\\"GendL\\\"\")\n\t\t (list :command \"(format nil \\\"~a ~a ~a\\\" str1 str2 str3)\"\n\t\t       :output \"\\\"Introduction to GendL\\\"\")\n\t\t (list :command \"(concatenate 'string str1 \\\" \\\" str2 \\\" \\\" str3)\"\n\t\t       :output \"\\\"Introduction to GendL\\\"\")\n\t\t (list :command \"(setq lis (list \\\"My\\\" \\\"List\\\" \\\"of\\\" \\\"strings\\\"))\"\n\t\t       :output \"(\\\"My\\\" \\\"List\\\" \\\"of\\\" \\\"strings\\\")\")\n\t\t (list  :command \"(apply #'concatenate 'string lis)\"\n\t\t\t:output \"\\\"MyListofstrings\\\"\")))\t\n\t\t   \n   (repl-6 (list (list :command \"(setq str1 \\\"Introduction\\\")\"\n\t\t       :output \"\\\"Introduction\\\"\")\n\t\t (list :command \"(subseq str1 3)\"\n\t\t       :output \"\\\"roduction\\\"\")))\n  \n   (body-content (with-cl-who-string()\n\t\t   ((:div :class \"main-page-container\")\n\t\t    ((:div :class \"main-page-item\")\n\t\t     (:div :class \"grid-container-2-650px\"\n\t\t\t   (:div :class \"grid-item\"\n\t\t      \n\t\t\t         (:h3 \"Character and String definitions\")\n\t\t                 (:p (:em (:b \"Characters\"))\" are denoted with a #\\ prefix, whilst \"(:em (:b \"Strings\"))\n                                     \" are represented textually as a series of characters between double\nquotes. Because Strings are sequences of Characters, any function\nwhich acts upon a sequence can be used on a string. Because a string\nis represented textually as characters enclosed in double quotes, if\nyou want to include literal double quotes in your string you need to\nescape them with \\\\ (backslash) characters. If you want to include a\nliteral backslash (\\\\) it needs to be escaped with another backslash\")\n\t\t\t         (str (repl-example (the repl-1)))\n\t\t\t         (:h3 \"Character Comparison\")\n\t\t\t         (:p \"Recall from the Equality tutorial that, because a character is an object with the same symbol, any of the tests \"\n\t\t\t             ((:span :class \"function\")\"EQ\")\", \"\n\t\t\t             ((:span :class \"function\")\"EQL\")\", \"\n\t\t\t             ((:span :class \"function\")\"EQUAL\")\" or \"\n\t\t\t             ((:span :class \"function\")\"EQUALP\")\" will work with characters. Additionally the function \"\n\t\t\t             ((:span :class \"function\")\"char=\")\" may be used, which accepts any number of arguments and will return T if the arguments are all the same character. The case-insensitive version is \"\n\t\t\t             ((:span :class \"function\")\"char-equal\"))\n\t\t\t         (str (repl-example (the repl-2)))\n\t\t\t         (:h3 \"String Comparison\")\n\t\t\t         (:p \"Recall from the Equality tutorial that \"\n\t\t\t             ((:span :class \"function\")\"equal\")\" will return T for 2 identical strings and \"\n\t\t\t             ((:span :class \"function\")\"equalp\")\" will return T for 2 strings which are identical ignoring case. \"\n\t\t\t             ((:span :class \"function\")\"string=\")\" and \"\n\t\t\t             ((:span :class \"function\")\"string-equal\")\" will give the same result as \"\n\t\t\t             ((:span :class \"function\")\"equal\")\" and \"\n\t\t\t             ((:span :class \"function\")\"equalp\")\", but additionally provide keyword arguments :start1, :end1, start2, end2 which enable substrings to be tested\")\n\t\t\t         (str (repl-example (the repl-3)))\n\t\t\t         (:h3 \"String Searching/Ordering\")\n\t\t\t         (:p \"When searching or ordering strings, some extra arguments to the functions may be required, because the default test for equality is \"\n\t\t\t             ((:span :class \"function\")\"EQL\")\" which, you may recall, will not return T for two identical strings. The keyword input \"\n\t\t\t             ((:span :class \"object-keyword\")\":test\")\" generally has to be specified to be an equality test which works with strings, for example \"\n\t\t\t             ((:span :class \"function\")\"string-equal\"))\n\t\t\t         (str (repl-example (the repl-4)))\n\t\t\t         (:h3 \"String Building\")\n\t\t\t         (:p \"One of the easiest ways to build strings is with the CL \"\n\t\t\t             ((:span :class \"function\")\"format\")\" function. We will come onto it in the next tutorial but for now it can be though of as a function which defines a format template that you define and then assign specific strings to. At its most basic, the CL function \"\n\t\t\t             ((:span :class \"function\")\"concatenate\")\" can achieve the same output\")\n\t\t\t         (:p \"To assemble a string from a list of strings using concatenate the apply function must be used\")\n\t\t\t         (str (repl-example (the repl-5)))\n\t\t\t         (:h3 \"String Destructuring\")\n\t\t\t         (:p \"Strings may be taken apart using the subseq function.\")\n\t\t\t         (str (repl-example (the repl-6))))))\n\t\t    \n\t\t    ((:div :class \"main-page-item\")\n\t\t     (:h2 \"Resources\")\n\t\t     (str (the resource-links))))))))\n",
    "metadata": {
      "source": "gornschool-training/t2/source/strings.lisp",
      "file_name": "strings.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 0,
      "section": "strings"
    },
    "id": "041bbc72b184e0e52b4db81b496503be"
  },
  {
    "text": "(in-package :training-2)\n\n",
    "metadata": {
      "source": "gornschool-training/t2/source/truss-example.lisp",
      "file_name": "truss-example.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 0,
      "section": "header"
    },
    "id": "f1d9775f0ccb0b31b4d89b77ffe0529a"
  },
  {
    "text": "(define-object truss-example (base-training-sheet)\n  :computed-slots\n  ((hint-1 nil :settable)\n   (hint-2 nil :settable)\n   (hint-3 nil :settable)\n   (hint-4 nil :settable)\n   (hint-5 nil :settable)\n   (hint-6 nil :settable)\n   (hint-7 nil :settable)\n   (hint-8 nil :settable)\n   \n   (code-1 (list \"",
    "metadata": {
      "source": "gornschool-training/t2/source/truss-example.lisp",
      "file_name": "truss-example.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 0,
      "section": "truss-example"
    },
    "id": "f1d9775f0ccb0b31b4d89b77ffe0529a"
  },
  {
    "text": "(define-object truss ()\"\n\t\t \"  :objects\"\n\t\t \"  ((lower-beam :type 'beam)\"\n\t\t \"   (vertical-beam :type 'beam)\"\n\t\t \"   (front-slope-beam :type 'beam)\"\n\t\t \"   (rear-slope-beam :type 'beam)))\"\n\t\t \"\"\n\t\t \"",
    "metadata": {
      "source": "gornschool-training/t2/source/truss-example.lisp",
      "file_name": "truss-example.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 1,
      "section": "truss"
    },
    "id": "92c67d0d8e36299d5f33c157c4b9c805"
  },
  {
    "text": "(define-object beam ()\"\n\t\t \"  :objects\"\n\t\t \"  ((outer :type 'box)\"\n\t\t \"   (inner :type 'box)))\"))\n\n   (code-2 (list \"",
    "metadata": {
      "source": "gornschool-training/t2/source/truss-example.lisp",
      "file_name": "truss-example.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 2,
      "section": "beam"
    },
    "id": "1e70ff9feaccd1652633494f7d0a587c"
  },
  {
    "text": "(define-object beam (box)\"\n\t\t \"  :input-slots\"\n\t\t \"  ((beam-length 1000)\"\n\t\t \"   (beam-width 40)\"\n\t\t \"   (beam-height 50)\"\n\t\t \"   (wall-thickness 2)\"\n\t\t \"   (material-density 7800)\"\n\t\t \"   (tonne-rate 500))\"\n\t\t \"\"\n\t\t \"  :computed-slots\"\n\t\t \"  ((length (the beam-length))\"\n\t\t \"   (width (the beam-width))\"\n\t\t \"   (height (the beam-height))\"\n\t\t \"\"\n\t\t \"   (beam-volume (- (the outer volume) (the inner volume)))\"\n\t\t \"   (beam-mass (* (div (the beam-volume) 1000000000) (the material-density)))\"\n\t\t \"   (beam-cost (* (the tonne-rate) (div (the beam-mass) 1000)))\"\n\t\t \"   (beam-properties (list :volume-mm3 (the beam-volume)\"\n\t\t \"\t\t\t    :mass-kg (round-to-nearest (the beam-mass) 0.01)\"\n\t\t \"\t\t\t    :cost-gbp (round-to-nearest (the beam-cost) 0.01)\"\n\t\t \"\t\t\t    :length-mm (the beam-length)\"\n\t\t \"\t\t\t    :width-mm (the beam-width)\"\n\t\t \"\t\t\t    :height-mm (the beam-height)\"\n\t\t \"\t\t\t   :thickness-mm (the wall-thickness))))\"\n\t\t \"   \"\n\t\t \"  :objects\"\n\t\t \"  ((outer :type 'box\"\n\t\t \"\t    :length (the beam-length)\"\n\t\t \"\t    :width (the beam-width)\"\n\t\t \"\t    :height (the beam-height))\"\n\t\t \"\"\n\t\t \"   (inner :type 'box\"\n\t\t \"\t    :length (the beam-length)\"\n\t\t \"\t    :width (- (the beam-width) (twice (the wall-thickness)))\"\n\t\t \"\t   :height (- (the beam-height) (twice (the wall-thickness))))))\"))\n\n\n  (code-3 (list \"",
    "metadata": {
      "source": "gornschool-training/t2/source/truss-example.lisp",
      "file_name": "truss-example.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 3,
      "section": "beam"
    },
    "id": "fe1c11a8c50131e967267879910e1bcf"
  },
  {
    "text": "(defun degrees-to-radians (degrees)\"\n\t\t\"   (div (* degrees pi) 180))\"\n\t\t\"\"\n\t\t\"",
    "metadata": {
      "source": "gornschool-training/t2/source/truss-example.lisp",
      "file_name": "truss-example.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 4,
      "section": "degrees-to-radians"
    },
    "id": "442b3023dabe7867bb8ad6aa79c77155"
  },
  {
    "text": "(define-object truss (box)\"\n\t\t\"  :input-slots\"\n\t\t\"  ((truss-length 2000)\"\n\t\t\"   (truss-height 800)\"\n\t\t\"   (truss-angle nil)\"\n\t\t\"\"\n\t\t\"   (beam-width 50)\"\n\t\t\"   (beam-height 50)\"\n\t\t\"   (wall-thickness 3))\"\n\t\t\"\"\n\t\t\"  :computed-slots\"\n\t\t\"  (\"\n\t\t\"   ;; bounding box dimensions\"\n\t\t\"   (length (the truss-length))\"\n\t\t\"   (height (cond ((the truss-height)(the truss-height))\"\n\t\t\"\t\t ((the truss-angle) (+ (* (half (the truss-length))\"\n\t\t\"\t\t\t\t\t  (tan (degrees-to-radians (the truss-angle))))\"\n\t\t\"\t\t\t\t       (the beam-height)))))\"\n\t\t\"   (width (the beam-width)))\"\n\t\t\"\"\t\t       \n\t\t\"  :objects\"\n\t\t\"  ((lower-beam :type 'beam\"\n\t\t\"\t\t:beam-height (the beam-height)\"\n\t\t\"\t\t:beam-width (the beam-width)\"\n\t\t\"\t\t:beam-length (the truss-length)\"\n\t\t\"\t\t:center (translate-along-vector \"\n\t\t\"                          (the (face-center :bottom))\"\n\t\t\"\t\t\t    (the (face-normal-vector :top))\"\n\t\t\"\t\t\t    (half (the beam-height))))\"\n\t\t\"    ;;(vertical-beam :type 'beam)\"\n\t\t\"    ;;(front-slope-beam :type 'beam)\"\n\t\t\"    ;;(rear-slope-beam :type 'beam))\"\n\t\t\" ))\" ))\n\n   (code-4 (list \"",
    "metadata": {
      "source": "gornschool-training/t2/source/truss-example.lisp",
      "file_name": "truss-example.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 5,
      "section": "truss"
    },
    "id": "e7eb3a919db975a83c9b12145c2909d6"
  },
  {
    "text": "(define-object truss (box)\"\n\t\t \"...\"\n\t\t \"...\"\n\t\t \"  :objects\"\n\t\t \"  ((lower-beam :type 'beam\"\n\t\t \"\t       :beam-height (the beam-height)\"\n\t\t \"\t       :beam-width (the beam-width)\"\n\t\t \"\t       :beam-length (the truss-length)\"\n\t\t \"\t       :center (translate-along-vector \"\n\t\t \"                         (the (face-center :bottom))\"\n\t\t \"                         (the (face-normal-vector :top))\"\n\t\t \"\t\t\t   (half (the beam-height))))\"\n\t\t \"   (vertical-beam :type 'beam\"\n\t\t \"\t\t  :beam-length (- (the height) (the beam-height))\"\n\t\t \"\t\t  :beam-height (the beam-height)\"\n\t\t \"\t\t  :beam-width (the beam-width)\"\n\t\t \"\t\t  :orientation (alignment :rear (the (face-normal-vector :top))\"\n\t\t \"                                        :right (the (face-normal-vector :right)))\"\n\t\t \"\t\t  :center (translate-along-vector \"\n\t\t \"                           (the lower-beam (face-center :top))\"\n\t\t \"\t\t\t     (the lower-beam (face-normal-vector :top))\"\n\t\t \"\t\t\t     (half (the-child beam-length))))\"\n\t\t \" ;;(front-slope-beam :type 'beam)\"\n\t\t \" ;;(rear-slope-beam :type 'beam))\"\n\t\t \"))\"))\n\n   (code-5 (list \"",
    "metadata": {
      "source": "gornschool-training/t2/source/truss-example.lisp",
      "file_name": "truss-example.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 6,
      "section": "truss"
    },
    "id": "f18ef381f05fbaec1080d5f3a2815fcb"
  },
  {
    "text": "(define-object truss (box)\"\n\t\t \"  ...\"\n\t\t \"  ...\"\n\t\t \":computed-slots\"\n\t\t \" (\"\n\t\t \"  ...\"\n\t\t \"  ...\"\n\t\t \"  (truss-front-slope-vector (subtract-vectors \"\n\t\t \"                               (the vertical-beam (edge-center :rear :top))\"\n\t\t \"\t\t                 (the lower-beam (edge-center :front :top))))\"\n\t\t \" )\"\n\t\t \":objects\"\n\t\t \"  ...\"\n\t\t \"  ...\"\n\t\t \";;(front-slope-beam :type 'beam)\"\n\t\t \";;(right-slope-beam :type 'beam)\"\n\t\t \"\"\n\t\t \"   (pt-1 :type 'sphere\"\n\t\t \"\t :radius 5\"\n\t\t \"\t :display-controls (list :color :green)\"\n\t\t \"\t :center (the lower-beam (edge-center :front :top)))\"\n\t\t \"   (pt-2 :type 'sphere\"\n\t\t \"\t :radius 5\"\n\t\t \"\t :display-controls (list :color :red)\"\n\t\t \"\t :center (the vertical-beam (edge-center :rear :top)))\"\n\t\t \"   (vector-line :type 'vector-line\"\n\t\t \"\t\t:start-point (the pt-1 center)\"\n\t\t \"\t\t:vector (the truss-front-slope-vector)\"\n\t\t \"\t\t:length 150)))\"\n\t\t \"\"\n\t\t \"",
    "metadata": {
      "source": "gornschool-training/t2/source/truss-example.lisp",
      "file_name": "truss-example.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 7,
      "section": "truss"
    },
    "id": "6eb9ff743abcc79bb2b6b4ec5d4fb0df"
  },
  {
    "text": "(define-object vector-line (box)\"\n\t\t \"  :input-slots\"\n\t\t \"  ((start-point (make-point 0 0 0))\"\n\t\t \"   (vector (make-vector 1 0 1))\"\n\t\t \"   (length 50)\"\n\t\t \"   (width 1))\"\n\t\t \"  :computed-slots\"\n\t\t \"  ((height (div (the length) 5)))\"\n\t\t \"  :objects\"\n\t\t \"  ((v-line :type 'line\"\n\t\t \"\t   :start (the start-point)\"\n\t\t \"\t   :display-controls (list :color :red)\"\n\t\t \"\t   :end (translate-along-vector (the start-point)\"\n\t\t \"\t\t\t\t\t(the vector)\"\n\t\t \"\t\t\t\t\t(the length)))\"\n\t\t \"   (arrow :type 'cone\"\n\t\t \"\t  :radius-1 0\"\n\t\t \"\t  :radius-2 (div (the length) 50)\"\n\t\t \"\t  :length (div (the length) 5)\"\n\t\t \"\t  :display-controls (list :color :red)\"\n\t\t \"\t  :center (translate-along-vector (the v-line end)\"\n\t\t \"\t\t\t\t\t  (the vector)\"\n\t\t \"\t\t\t\t\t  (half (the-child length)))\"\n\t\t \"\t  :orientation (alignment :front (the vector)))))\"))\n\n   (code-6 (list \"",
    "metadata": {
      "source": "gornschool-training/t2/source/truss-example.lisp",
      "file_name": "truss-example.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 8,
      "section": "vector-line"
    },
    "id": "a2e781b258d2ac9f4a303c71f0d221d8"
  },
  {
    "text": "(define-object truss (box)\"\n\t\t \"  ...\"\n\t\t \"  ...\"\n\t\t \":computed-slots\"\n\t\t \" (\"\n\t\t \"  ...\"\n\t\t \"  ...\"\n\t\t \"  (truss-front-slope-vector (subtract-vectors\" \n\t\t \"                              (the vertical-beam (edge-center :rear :top))\"\n\t\t \"\t\t\t        (the lower-beam (edge-center :front :top))))\"\n\t\t \"  (front-slope-length (3d-distance \"\n\t\t \"                         (the vertical-beam (edge-center :rear :top))\"\n\t\t \"\t\t          (the lower-beam (edge-center :front :top))))\"\n\t\t \"  (front-slope-center (translate-along-vector \"\n\t\t \"                         (the front-slope-construction-line center)\"\n\t\t \"\t\t\t  (the front-slope-beam (face-normal-vector :bottom))\"\n\t\t \"\t\t\t  (half (the beam-height))))\"\n\t\t \")\"\n\t\t \":objects\"\n\t\t \"  ...\"\n\t\t \"  ...\"\n\t\t \"  (front-slope-beam :type 'beam\"\n\t\t \"                    :beam-length (the front-slope-length)\"\n\t\t \"                    :beam-height (the beam-height)\"\n\t\t \"                    :beam-width (the beam-width)\"\n\t\t \"                    :center (the front-slope-center)\"\n\t\t \"                    :orientation (alignment :rear (the truss-front-slope-vector)\"\n\t\t \"                                          :right (the (face-normal-vector :right))))\"\n\t\t \"\"\n\t\t \"  (front-slope-construction-line :type 'line\"\n\t\t \"\t\t\t\t :start (the lower-beam (edge-center :front :top))\"\n\t\t \"\t\t\t\t :end (the vertical-beam (edge-center :rear :top)))\"\n\t\t \"  (mid-pt :type 'sphere\"\n\t\t \"\t    :display-controls (list :color :blue)\"\n\t\t \"\t    :radius 5\"\n\t\t \"\t    :center (the front-slope-construction-line center))\"\n\t\t \"  ...\"\n\t\t \"  ...\"\n\t\t \" ))\"))\n\n\n    (code-7 (list \"",
    "metadata": {
      "source": "gornschool-training/t2/source/truss-example.lisp",
      "file_name": "truss-example.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 9,
      "section": "truss"
    },
    "id": "e41b3e8541d9371eb34697e14b2e415e"
  },
  {
    "text": "(define-object truss (box)\"\n\t\t  \"  ...\"\n\t\t  \"  ...\"\n\t\t  \":computed-slots\"\n\t\t  \" (\"\n\t\t  \"  (truss-front-slope-vector (subtract-vectors \"\n\t\t  \"                              (the vertical-beam (edge-center :rear :top))\"\n\t\t  \"\t\t\t        (the lower-beam (edge-center :front :top))))\"\n\t\t  \"  (front-slope-length (3d-distance \"\n\t\t  \"                         (the vertical-beam (edge-center :rear :top))\"\n\t\t  \"\t\t\t  (the lower-beam (edge-center :front :top))))\"\n\t\t  \"  (front-slope-center (translate-along-vector \"\n\t\t  \"                         (the front-slope-construction-line center)\"\n\t\t  \"\t\t\t  (the front-slope-beam (face-normal-vector :bottom))\"\t\t\t    \n\t\t  \"                         (half (the beam-height))))\"\n\t\t  \"  (truss-rear-slope-vector (subtract-vectors \"\n\t\t  \"                             (the vertical-beam (edge-center :rear :bottom))\"\n\t\t  \"\t\t\t       (the lower-beam (edge-center :rear :top))))\"\n\t\t  \"  (rear-slope-length (3d-distance \"\n\t\t  \"                        (the vertical-beam (edge-center :rear :bottom))\"\n\t\t  \"\t\t\t  (the lower-beam (edge-center :rear :top))))\"\n\t\t  \"  (rear-slope-center (translate-along-vector \"\n\t\t  \"                        (the rear-slope-construction-line center)\"\n\t\t  \"\t\t\t  (the rear-slope-beam (face-normal-vector :bottom))\"\n\t\t  \"\t\t\t  (half (the beam-height))))\"\n\t\t  \"  ...\"\n\t\t  \"  ...\"\n\t\t  \"))\"))\n\n   (code-8 (list \"",
    "metadata": {
      "source": "gornschool-training/t2/source/truss-example.lisp",
      "file_name": "truss-example.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 10,
      "section": "truss"
    },
    "id": "f0e854d5a5bfe80f03c907f97ec0617b"
  },
  {
    "text": "(define-object truss (box)\"\n\t\t \"  ...\"\n\t\t \"  ...\"\n\t\t \" :computed-slots\"\n\t\t \" (\"\n\t\t \"  ...\"\n\t\t \"  ...\"\n\t\t \"  (truss-front-slope-vector (the (get-slope-vector! :front)))\"\n\t\t \"  (truss-rear-slope-vector (the (get-slope-vector! :rear)))\"\n\t\t \"\"\n\t\t \"  (front-slope-length (the (get-slope-length! :front)))\"\n\t\t \"  (rear-slope-length (the (get-slope-length! :rear)))\"\n\t\t \"  \"\n\t\t \"  (front-slope-center (the (get-slope-center! :front)))\"\n\t\t \"  (rear-slope-center (the (get-slope-center! :rear)))\"\n\t\t \" )\"\n\t\t \"\"\n\t\t \"  :functions\"\n\t\t \"  ((get-slope-vector! (beam-side)\"\n\t\t \"\t\t      (let ((v-key (the (get-v-key! beam-side)))\"\n\t\t \"\t\t\t    (l-key (the (get-l-key! beam-side))))\"\n\t\t \"\t\t      (subtract-vectors (the vertical-beam (edge-center :rear v-key))\"\n\t\t \"\t\t\t\t\t(the lower-beam (edge-center l-key :top)))))\"\n\t\t \"   (get-slope-length! (beam-side)\"\n\t\t \"\t\t      (let ((v-key (the (get-v-key! beam-side)))\"\n\t\t \"\t\t\t    (l-key (the (get-l-key! beam-side))))\"\n\t\t \"\t\t\t(3d-distance (the vertical-beam (edge-center :rear v-key))\"\n\t\t \"\t\t\t\t     (the lower-beam (edge-center l-key :top)))))\"\n\t\t \"\"\n\t\t \"   (get-slope-center! \"\n\t\t \"     (beam-side)\"\n\t\t \"     (let ((pt (case beam-side\"\n\t\t \"\t\t   (:front (the front-slope-construction-line center))\"\n\t\t \"\t\t   (:rear  (the rear-slope-construction-line center))))\"\n\t\t \"\t     (norm-vector (case beam-side\"\n\t\t \"                          (:front (the front-slope-beam (face-normal-vector :bottom)))\"\n\t\t \"                          (:rear (the rear-slope-beam (face-normal-vector :bottom))))))\"\n\t\t \"\t(translate-along-vector \"\n\t\t \"                           pt\"\n\t\t \"\t\t\t     norm-vector\"\n\t\t \"\t\t\t     (half (the beam-height)))))\"\n\t\t \"   (get-v-key! (beam-side)\"\n\t\t \"\t       (case beam-side\"\n\t\t \"\t\t (:front :top)\"\n\t\t \"\t\t (:rear :bottom)))\"\n\t\t \"   (get-l-key! (beam-side)\"\n\t\t \"\t       (case beam-side\"\n\t\t \"\t\t (:front :front)\"\n\t\t \"\t\t (:rear :rear))))\"))\n\n   (code-9 (list \"",
    "metadata": {
      "source": "gornschool-training/t2/source/truss-example.lisp",
      "file_name": "truss-example.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 11,
      "section": "truss"
    },
    "id": "7a7c8ed72be75bdd4e43538cc6b4b209"
  },
  {
    "text": "(define-object truss (box)\"\n\t\t \"  ...\"\n\t\t \"  ...\"\n\t\t \" :computed-slots\"\n\t\t \" (\"\n\t\t \"  ...\"\n\t\t \"  ...\"\n\t\t \"  (beam-properties (mapsend (the children) :beam-properties)) \"\n\t\t \"  (total-mass (round-to-nearest\"\n\t\t \"                   (apply '+\"\n\t\t \"                          (mapcar #'(lambda(a) (getf a :mass-kg))\"\n\t\t \"\t                              (the beam-properties)))\"\n\t\t \"               0.001)))\"\n\t\t \"  (total-cost (round-to-nearest\"\n\t\t \"                   (apply '+\"\n\t\t \"                          (mapcar #'(lambda(a) (getf a :cost-gbp))\"\n\t\t \"\t                              (the beam-properties)))\"\n\t\t \"\t           0.01)))\"\n\t\t \" )\"\n\t\t \")\"))\n   \n   (repl-1 (list (list :command \"(setq self (make-object 'truss))\"\n\t\t       :output \"#<TRUSS #x2104B7CAED>\")\n\t\t (list :command \"(the total-mass)\"\n\t\t       :output 22.92)\n\t\t (list :command \"(the total-cost)\"\n\t\t       :output 10.32)))\n\n   (body-content (with-cl-who-string()\n\t\t   ((:div :class \"main-page-container\")\n\t\t    ((:div :class \"main-page-item\")\n\t\t     (str (the start-section main-div))\n\t\t     (str (the hint-1-section main-div))\n\t\t     (str (the hint-2-section main-div))\n\t\t     (str (the hint-3-section main-div))\n\t\t     (str (the hint-4-section main-div))\n\t\t     (str (the hint-5-section main-div))\n\t\t     (str (the hint-6-section main-div))\n\t\t     (str (the hint-7-section main-div))\n\t\t     (str (the hint-8-section main-div)))\n\t\t    \n\t\t    \n\t\t    ((:div :class \"main-page-item\")\n\t\t     (:h2 \"Resources\")\n\t\t     (str (the resource-links-section main-div)))))))\n\n\n   :functions\n  ((hint-1! () (the (set-slot! :hint-1 (not (the hint-1)))))\n   (hint-2! () (the (set-slot! :hint-2 (not (the hint-2)))))\n   (hint-3! () (the (set-slot! :hint-3 (not (the hint-3)))))\n   (hint-4! () (the (set-slot! :hint-4 (not (the hint-4)))))\n   (hint-5! () (the (set-slot! :hint-5 (not (the hint-5)))))\n   (hint-6! () (the (set-slot! :hint-6 (not (the hint-6)))))\n   (hint-7! () (the (set-slot! :hint-7 (not (the hint-7)))))\n   (hint-8! () (the (set-slot! :hint-8 (not (the hint-8))))))\n\n   :objects\n  ((resource-links-section :type 'sheet-section\n\t\t\t   :inner-html (with-cl-who-string()\n\t\t\t\t\t (:table\n\t\t\t\t\t     (let ((icon \"/common-images/lisp-file.png\")\n\t\t\t\t\t\t   (lis (list (list :available (the hint-1) :file \"truss-hint-1.lisp\")\n\t\t\t\t\t\t\t      (list :available (the hint-2) :file \"truss-hint-2.lisp\")\n\t\t\t\t\t\t\t      (list :available (the hint-3) :file \"truss-hint-3.lisp\")\n\t\t\t\t\t\t\t      (list :available (the hint-4) :file \"truss-hint-4.lisp\")\n\t\t\t\t\t\t\t      (list :available (the hint-5) :file \"truss-hint-5.lisp\")\n\t\t\t\t\t\t\t      (list :available (the hint-6) :file \"truss-hint-6.lisp\")\n\t\t\t\t\t\t\t      (list :available (the hint-6) :file \"truss-hint-6a.lisp\")\n\t\t\t\t\t\t\t      (list :available (the hint-7) :file \"truss-hint-7.lisp\")\n\t\t\t\t\t\t\t      (list :available (the hint-8) :file \"truss-hint-8.lisp\"))))\n\t\t\t\t\t       (dolist (l lis)\n\t\t\t\t\t\t (let* ((f (getf l :file))\n\t\t\t\t\t\t       (link (format nil \"/t2-resources/~a\" f)))\n\t\t\t\t\t\t   (htm (:tr (when (getf l :available))\n\t\t\t\t\t\t\t     (htm (:td ((:a :href link) ((:img :src icon :style \"width: 40px; height: auto;\"))))\n\t\t\t\t\t\t                  (:td ((:a :href link) (str f))))))))))))\n\n   (start-section :type 'sheet-section\n\t\t  :inner-html (with-cl-who-string()\n\t\t\t\t(:p \"This example builds on the wall example, but adds some orientation and also considers creation and use of custom objects.\")\n\t\t\t\t(:h3 \"Example Brief\")\n\t\t\t\t(:p \"A roof truss is made from a number of rectangular section hollow steel beams. The beams are H mm high, W mm wide\nand have a wall thickness t mm. The length of the truss is L mm. Height may be specified explicitly as Ht mm, or an angle D\ndegrees may be specified (one or the other, if both are specified then the H dimension should be used.\nA sketch of the design is shown. \")\n\t\t\t\t(:p \"For a given beam dimension (H X W X t) and overall truss dimensions (H x L or L with a D degree slope), calculate the total\nmass of the truss. If it is made from steel which has a density of 7800 kg/m\" (:sup \"3\") \" and the cost of the beam is \u00a3450 per metric tonne,\ncalculate the mass of the truss and the material cost. Joint overlaps may be ignored\")\n\t\t                (:img :src (format nil \"/~a-images/roof-truss-brief.png\"  (the publish-prefix)) :style \"width: auto; height: 300px; margin: 1em 0 1em 3% ;\" )\n\t\t                (:p (str (the (hint-button :function-key :hint-1!))))))\n\n   (hint-1-section :type 'sheet-section\n\t   :inner-html (with-cl-who-string()\n\t\t\t (when (the hint-1)\n\t\t\t   (htm (:p \"As with the wall example, we start by thinking of the object structure. There will be\"\n\t\t\t\t    (:ul (:li \"A horizontal beam\")\n\t\t\t\t\t (:li \"A vertical beam with its bottom end sat on the mid-point of the horizontal beam\")\n\t\t\t\t\t (:li \"2 sloping beams joining the ends of the horizontal beam with the top end of the vertical beam\"))\n\t\t\t\t    \"All beams are the same cross section and we need to gather information about each beam to compute the overall mass and cost.\nIt would make sense therefore to design a beam object which generates a beam and answers the required property messages.\nThe 2 sloping beams are potentially candidates for a \"\n\t\t\t\t    ((:span :class \"object-keyword\")\":sequence\")\n\t\t\t\t    \", but on closer consideration the start and end point positioning are not generic and there will always be exactly two\nsloping beams, so two explicit child objects are probably the best way forward in this case. With GendL, if this turns out not to be the case and we\nsee more genericness during coding the we first thought would be present, its easy to change to a different solution approach.\nSo and object structure could look like this\")\n\t\t\t\t(str (code-example (the code-1)))\n\t\t\t\t(:p \"The next task would be to define our custom beam object\")\n                                (str (the (hint-button :function-key :hint-2!)))))))\n\n   (hint-2-section :type 'sheet-section\n\t   :inner-html (with-cl-who-string()\n\t\t\t (when (the hint-2)\n\t\t\t   (htm (:p \"To satisfy the brief requirements we need to calculate the \"\n\t\t\t\t    ((:span :class \"slot\")\"mass\")\" and \"\n\t\t\t\t    ((:span :class \"slot\")\"cost\")\" of each beam. To do this we will need to know the \"\n\t\t\t\t    ((:span :class \"slot\")\"volume\")\" of each beam. Because we are using wireframe we will need to create a box representing the\nouter of the beam, a box representing the hollow inner, and subtract the inner box \"\n\t\t\t\t    ((:span :class \"slot\")\"volume\")\" from the outer box \"\n\t\t\t\t    ((:span :class \"slot\")\"volume\")\". Of course we could do this analytically without the need of geometry,\nbut for the sake of this example and potentially some downstream benefits we will probe the geometric entities directly.\")\n\t\t\t\t(:p \"So our beam will have two child objects of type \"\n\t\t\t\t    ((:span :class \"object\") \"box\")\", from which we can get the beam \"\n\t\t\t\t    ((:span :class \"slot\") \"volume\")\". To calculate the box dimensions we need beam \"\n\t\t\t\t    ((:span :class \"slot\") \"height\")\", \"\n\t\t\t\t    ((:span :class \"slot\") \"width\")\" and \"\n\t\t\t\t    ((:span :class \"slot\") \"thickness\")\", plus the \"\n\t\t\t\t    ((:span :class \"slot\")\"length\")\". To caculate \"\n\t\t\t\t    ((:span :class \"slot\")\"mass\")\" we will need inputs to the object for \"\n\t\t\t\t    ((:span :class \"slot\") \"material-density\")\" and \"\n\t\t\t\t    ((:span :class \"slot\") \"tonne-rate\")\". So effectively out custom beam object will look like below. By defining some default values for the \"\n\t\t\t\t    ((:span :class \"object-keyword\") \":input-slots\")\" we can instantiate this object standalone in Geysr to review the geometry\ngraphics and output values\")\n\t\t\t\t((:div :class \"main-page-container\")\n\t\t\t\t ((:div :class \"main-page-item\")\n\t\t\t\t  (str (code-example (the code-2))))\n\t\t\t\t ((:div :class \"main-page-item\")\n\t\t\t\t  (:img :src (format nil \"/~a-images/geysr-truss-1.png\"  (the publish-prefix)) :style \"width: auto; height: 300px; margin: 1em 0 1em 3% ;\" )))\n\t\t\t\t(:p \"A couple of things to note\"\n\t\t\t\t    (:ul (:li \"The properties of the beam have been assembled into a plist to make it easier to return multiple properties at once.\")\n\t\t\t\t\t (:li ((:span :class \"slot\")\"beam-volume\")\", \"\n\t\t\t\t\t      ((:span :class \"slot\")\"beam-mass\")\" and \"\n\t\t\t\t\t      ((:span :class \"slot\")\"beam-cost\")\" could all have been defined as local variables using a \"\n\t\t\t\t\t      ((:span :class \"special-operator\")\"let\")\" binding when calculating the \"\n\t\t\t\t\t      ((:span :class \"slot\")\"beam-properties\")\". This would probably have been more efficient, but it reduces flexibility\na bit at this early stage of development. If it turns out that performance improvements are required at a later stage in the development we could easily\nimplement this by converting these slots into simple \"\n                                              (:span :class \"general-keyword\" \"let\")\n                                              \" variables, but at this stage the benefit in terms of variable access and visibility is considered more useful\")))\n\t\t\t\t(:p \"Now that we have defined the custom \"\n\t\t\t\t    ((:span :class \"object\")\"beam\")\" object and the \"\n\t\t\t\t    ((:span :class \"object-keyword\")\":input-slots\")\" it needs to function we need to start working from the top down to pass values through\")\n                                (str (the (hint-button :function-key :hint-3!)))))))\n\t\t\t\t\n\n   (hint-3-section :type 'sheet-section\n\t   :inner-html (with-cl-who-string()\n\t\t\t (when (the hint-3)\n\t\t\t   (htm (:p \"We can break the next step down into 2 stages\"\n\t\t\t\t    (:ul (:li \"Define the size of the overall bounding box for the \" ((:span :class \"object\")\"truss\"))\n\t\t\t\t\t (:li \"Pass down the required arguments for the beams which make up the \" ((:span :class \"object\")\"truss\")\" assembly\"))\n\t\t\t\t    \"To simplify this step and to allow the top level object to be instantiated in Geysr, all of the child objects except the \"\n\t\t\t\t    ((:span :class \"object\")\"lower-beam\")\" beam have been commented out\")\n\t\t\t\t(:p ((:span :class \"slot\")\"length\")\" and \"\n\t\t\t\t    ((:span :class \"slot\")\"width\")\" of the assembly bounding box are simple; they are the \"\n\t\t\t\t    (:em \"length of the truss\")\" and the \"\n\t\t\t\t    (:em \"width of the beam\")\". As per the spec, if the \"\n\t\t\t\t    (:em \"truss height\")\" is specified, then we should use it, and this will be the height of the bounding box.\nHowever, if height isn't provided and the \"\n\t\t\t\t    (:em \"truss slope angle\") \" is provided, then we can use a bit of triganometry to calculate the height. Two things to note here:\"\n\t\t\t\t    (:ul (:li \"the Lisp function \"\n\t\t\t\t\t      ((:span :class \"function\")\"tan\") \" takes an angle in \"\n\t\t\t\t\t      (:em (:b \"radians\"))  \" as its argument, yet the specification says the angle will be specified in degrees.\nTo make the conversion, a simple function \"\n\t\t\t\t\t      ((:span :class \"function\")\"degrees-to-radians\") \", defined by a supported Gendl package, is used.\")\n\t\t\t\t\t (:li \"We need to add the \"\n\t\t\t\t\t      (:em \"beam height\")\" to the \"\n\t\t\t\t\t      (:em\"slope height\")\" to get the overall bounding box height.\")))\n\t\t\t\t(:p \"Now that the bounding box is defined, we can position the \"\n\t\t\t\t    ((:span :class \"object\") \"lower-beam inside that bounding-box by specifying its \"\n                                     (:span :class \"slot\" \"center\") \".\"))\n\t\t\t\t((:div :class \"main-page-container\")\n\t\t\t\t ((:div :class \"main-page-item\")\n\t\t\t\t  (str (code-example (the code-3))))\n\t\t\t\t ((:div :class \"main-page-item\")\n\t\t\t\t  (:img :src (format nil \"/~a-images/geysr-truss-2.png\"  (the publish-prefix)) :style \"width: auto; height: 300px; margin: 1em 0 1em 3% ;\" )))\n\t\t\t\t(:p \"We can now uncomment the \"\n\t\t\t\t    ((:span :class \"object\")\"vertical-beam\")\", provide the input values and position and orient it\")\n                                (str (the (hint-button :function-key :hint-4!)))))))\n\n\n   (hint-4-section :type 'sheet-section\n\t   :inner-html (with-cl-who-string()\n\t\t\t (when (the hint-4)\n\t\t\t   (htm (:p \"The \"((:span :class \"object\")\"vertical-beam\")\" is oriented so that its \"\n\t\t\t\t    ((:span :class \"object-keyword\")\":rear\")\" axis aligns with the \"\n\t\t\t\t    ((:span :class \"function\")\"(face-center :top)\")\" of the assembly bounding box and its \"\n\t\t\t\t    ((:span :class \"object-keyword\")\":right\")\" axis aligns with the \"\n\t\t\t\t    ((:span :class \"function\")\"(face-center :top)\")\" of the assembly bounding box. We then position its center relative to the \"\n\t\t\t\t    ((:span :class \"function\")\"(face-center :top)\")\" of the \"\n\t\t\t\t    ((:span :class \"object\")\"lower-beam\")\". Because it sits on top of the \"\n\t\t\t\t    ((:span :class \"object\")\"lower-beam\")\", its length is defined as the overall assembly \"\n\t\t\t\t    ((:span :class \"slot\")\"height\")\" minus the \"\n\t\t\t\t    ((:span :class \"slot\")\"height\")\" of the \"\n\t\t\t\t    ((:span :class \"object\")\"lower-beam\"))\n\t\t\t\t((:div :class \"main-page-container\")\n\t\t\t\t ((:div :class \"main-page-item\")\n\t\t\t\t  (str (code-example (the code-4))))\n\t\t\t\t ((:div :class \"main-page-item\")\n\t\t\t\t  (:img :src (format nil \"/~a-images/geysr-truss-3.png\" (the publish-prefix)) :style \"width: auto; height: 300px; margin: 1em 0 1em 3% ;\" )))\n\t\t\t\t(:p \"With the \"((:span :class \"object\")\"lower-beam\")\" and \"\n\t\t\t\t    ((:span :class \"object\")\"vertical-beam\")\" now defined, we can move on to calculation the \"\n\t\t\t\t    ((:span :class \"slot\")\"length\")\", \"\n\t\t\t\t    ((:span :class \"object-keyword\")\"position\")\" and \"\n\t\t\t\t    ((:span :class \"object-keyword\")\"orientation\")\" of the sloping beams\")\n                                (str (the (hint-button :function-key :hint-5!)))))))\n\n\n   (hint-5-section :type 'sheet-section\n\t   :inner-html (with-cl-who-string()\n\t\t\t (when (the hint-5)\n\t\t\t   (htm (:p \"To determine the \"\n\t\t\t\t    ((:span :class \"object-keyword\")\"orientation\")\" and \"\n\t\t\t\t    ((:span :class \"object-keyword\")\"position\")\" of the sloping beam, we can use some construction geometry. Often, when working\nwith different orientations it can also be helpful to visualise specific points and directions, and we will adopt that approach here.\")\n\t\t\t\t(:p \"The \"((:span :class \"object\")\"front-slope-beam\")\" \"\n\t\t\t\t    ((:span :class \"function\")\"(edge-center :front :top)\")\" and \"\n\t\t\t\t    ((:span :class \"function\")\"(edge-center :rear :top)\")\" need to be coincident with the \"\n\t\t\t\t    ((:span :class \"object\")\"lower-beam\")\" \"\n\t\t\t\t    ((:span :class \"function\")\"(edge-center :front :top)\")\" and the \"\n\t\t\t\t    ((:span :class \"object\")\"vertical-beam\")\" \"\n\t\t\t\t    ((:span :class \"function\")\"(edge-center :rear :top)\")\" respectively and its \"\n\t\t\t\t    ((:span :class \"object-keyword\")\"orientation\")\" will be a vector from the \"\n\t\t\t\t    ((:span :class \"object\")\"lower-beam\")\" \"\n\t\t\t\t    ((:span :class \"function\")\"(edge-center :front :top)\")\" to the \"\n\t\t\t\t    ((:span :class \"object\")\"vertical-beam\")\" \"\n\t\t\t\t    ((:span :class \"function\")\"(edge-center :rear :top)\")\". To verify this visually, we can include graphical representations of these points and make an object which will display a vector visually. To further help with visual identification we can use the objects \"\n\t\t\t\t    ((:span :class \"object-keyword\")\":display-controls\")\" to set different colours. The code below includes 2 visual points (using the \"\n\t\t\t\t    ((:span :class \"object\")\"sphere\")\" primative) and a \"\n\t\t\t\t    ((:span :class \"object\")\"vector-line\")\" object, which is a custom object to display a vectors orientation. Note the calculation of the slope vector, using the GendL \"\n\t\t\t\t    ((:span :class \"function\")\"subtract-vectors\")\" function. Of particular interest is the the inputs are actually both points,\nbut as a point is defined with the same data structure as a vector this will return the vector pointing from the second point argument to the first point argument\")\n\t\t\t\t((:div :class \"main-page-container\")\n\t\t\t\t ((:div :class \"main-page-item\")\n\t\t\t\t  (str (code-example (the code-5))))\n\t\t\t\t ((:div :class \"main-page-item\")\n\t\t\t\t  (:img :src (format nil \"/~a-images/geysr-truss-4.png\"  (the publish-prefix)) :style \"width: auto; height: 300px; margin: 1em 0 1em 3% ;\" )))\n\t\t\t\t(:P \"So now we have verified we are using the correct construction points, and that the vector is correct, we need to determine the length of the sloping beam and its position.\")\n                                (str (the (hint-button :function-key :hint-6!)))))))\n\n\n   (hint-6-section :type 'sheet-section\n\t   :inner-html (with-cl-who-string()\n\t\t\t (when (the hint-6)\n\t\t\t   (htm (:p \"Getting the \"\n\t\t\t\t    ((:span :class \"slot\")\"length\")\" is fairly simple; we use the GendL \"\n\t\t\t\t    ((:span :class \"function\")\"3d-distance\")\" function, which takes 2 points and returns the distance between them. To determine the center point of the sloping beam, we will use a construction line between the 2 construction points and take its \"\n\t\t\t\t    ((:span :class \"slot\")\"center\")\" point. (As an alternative we could use the GendL function \"\n\t\t\t\t    ((:span :class \"function\")\"midpoint\")\") We also need to offset this point in a direction normal to bottom face of the beam by half the \"\n\t\t\t\t    ((:span :class \"slot\")\"beam-height\"))\n\t\t\t\t(:p \"Again, we have included a construction point to visualise the mid-point of our construction line. The Geysr screen\nshot below shows the beam in Right view with all the construction/visualisation elements turned on to give a visual check that the beam is\npositioned correctly\"\n\t\t\t\t((:div :class \"main-page-container\")\n\t\t\t\t ((:div :class \"main-page-item\")\n\t\t\t\t  (str (code-example (the code-6))))\n\t\t\t\t ((:div :class \"main-page-item\")\n\t\t\t\t  (:img :src (format nil \"/~a-images/geysr-truss-5.png\"  (the publish-prefix)) :style \"width: auto; height: 300px; margin: 1em 0 1em 3% ;\" )))\n\t\t\t\t(:p \"The process is then repeated for the \"\n\t\t\t\t    ((:span :class \"object\")\"rear-slope-beam\")\", although some changes need making to calculate the slope vector, beam\ncenter and beam length to reflect the other construction points being used\")\n\t\t\t\t((:div :class \"main-page-container\")\n\t\t\t\t ((:div :class \"main-page-item\")\n\t\t\t\t  (str (code-example (the code-7))))\n\t\t\t\t ((:div :class \"main-page-item\")\n\t\t\t\t  (:img :src (format nil \"/~a-images/geysr-truss-6.png\"  (the publish-prefix)) :style \"width: auto; height: 300px; margin: 1em 0 1em 3% ;\" )))\n\t\t\t\t(:p \"At this point we have all the geometry construction complete, but before proceeding to delivering the required\ncalculation outputs, there are a number of oppertunities to tidy up both the code and the display in Geysr\")\n                                (str (the (hint-button :function-key :hint-7!))))))))\n\n\n   \n   (hint-7-section :type 'sheet-section\n\t   :inner-html (with-cl-who-string()\n\t\t\t (when (the hint-7)\n\t\t\t   (htm (:p \"If we examine the code for the \"\n\t\t\t\t    (:em \"length\")\", \"\n\t\t\t\t    (:em \"vector\")\" and \"\n\t\t\t\t    (:em \"center\")\" of the \"\n\t\t\t\t    ((:span :class \"object\")\"front-slope-beam\")\" and \"\n\t\t\t\t    ((:span :class \"object\")\"rear-slope-beam\")\", we can see patterns/similarities between them as well as some differences.\nThese are candidates for replacing with \"\n\t\t\t\t    ((:span :class \"object-keyword\")\":functions\")\" which will\"\n\t\t\t\t    (:ul (:li \"Clean up the code a bit\")\n\t\t\t\t\t (:li \"Make the code easier to maintain\")\n\t\t\t\t\t (:li \"Explicitly capture the logic used to differentiate between the \"\n\t\t\t\t\t      ((:span :class \"object\")\"front-slop-beam\")\" and the \"\n\t\t\t\t\t      ((:span :class \"object\")\"rear-slope-beam\")))\n\t\t\t\t    \"The principal differences between the vector and distance calculations relate to the \"\n\t\t\t\t    (:em \"keywords\")\" used to identify the construction points and the objects used for points and vectors.\nFurther examination reveals that the same logic is applied in each case. So it makes sense to have common \"\n\t\t\t\t    ((:span :class \"object-keyword\")\":functions\")\" to return the respective keywords (\"\n\t\t\t\t    ((:span :class \"function\")\"get-v-key!\")\" to be used on the \"\n\t\t\t\t    ((:span :class \"object\")\"vertical-beam\")\" and \"\n\t\t\t\t    ((:span :class \"function\")\"get-l-key!\")\" to be used on the \"\n\t\t\t\t    ((:span :class \"object\")\"lower-beam\")\"). These functions are then called from the other \"\n\t\t\t\t    ((:span :class \"object-keyword\")\":functions\")\" which return the vector and length for each beam\")\n\t\t\t\t(:p \"The \"((:span :class \"object-keyword\")\":computed-slots\")\" are also updated to make use of these \"\n\t\t\t\t    ((:span :class \"object-keyword\")\":functions\"))\n\t\t\t\t    \n\t\t\t\t(:p \"If we look in Geysr we see all of the construction geometry. Once the code has been developed we don't particularly\nneed to see these objects in the model tree. Whilst the points could be commented out, we actually need the construction line as it's part of the\nslope beams center calculation. To hide these from displaying in Geysr, rather than include them in the \"\n\t\t\t\t    ((:span :class \"object-keyword\")\":objects\")\" section of the assembly object, we put them in a \"\n\t\t\t\t    ((:span :class \"object-keyword\")\":hidden-objects\")\" section. Child-objects defined as \"\n\t\t\t\t    ((:span :class \"object-keyword\")\":hidden-objects\")\" exist in the model and can be referenced, but don't show up in\nthe graphics window in Geysr and also do not show in the object tree on the LHS window in Geysr\")\n\t\t\t\t((:div :class \"main-page-container\")\n\t\t\t\t ((:div :class \"main-page-item\")\n\t\t\t\t  (str (code-example (the code-8))))\n\t\t\t\t ((:div :class \"main-page-item\")\n\t\t\t\t  (:img :src (format nil \"/~a-images/geysr-truss-7.png\"  (the publish-prefix)) :style \"width: auto; height: 300px; margin: 1em 0 1em 3% ;\" )))\n\t\t\t\t(:p \"The final task is to calculate the \"\n\t\t\t\t    ((:span :class \"slot\")\"total-mass\")\" and \"\n\t\t\t\t    ((:span :class \"slot\")\"total-cost\")\" for the truss assembly\")\n                                (str (the (hint-button :function-key :hint-8!)))))))\n\n\n   (hint-8-section :type 'sheet-section\n\t   :inner-html (with-cl-who-string()\n\t\t\t (when (the hint-8)\n\t\t\t   (htm (:p \"The \"\n\t\t\t\t    ((:span :class \"object\") \"beam\")\" object supports a message \"\n\t\t\t\t    ((:span :class \"slot\") \"beam-properties\")\" which we need to get from each of the truss assembly beams.\nBecause we only have beam objects in the \"\n\t\t\t\t    ((:span :class \"object-keyword\")\":objects\") \" section (having moved construction geometry into \"\n\t\t\t\t    ((:span :class \"object-keyword\")\":hidden-objects\") \") we can use one of the base-object messages \"\n\t\t\t\t    ((:span :class \"slot\")\":children\")\" to get a list of all of the beams. Once we have this list we can use the GendL function \"\n\t\t\t\t    ((:span :class \"function\")\"mapsend\")\" to send the \"\n\t\t\t\t    ((:span :class \"slot\")\":beam-properties\")\" message to each of these objects and return a list of \"\n\t\t\t\t    ((:span :class \"slot\")\":beam-properties\")\" messages. This will be a list of plists and the 2 keyword elements we are interested in are \"\n\t\t\t\t    (:em (:b \":mass-kg\"))\" and \"(:em (:b \":cost-gbp\")))\n\t\t\t\t(:p \"Using \"\n\t\t\t\t    ((:span :class \"function\")\"mapcar\")\" and a \"\n\t\t\t\t    (:em (:b \"lambda function\"))\", we can process this list of plists to retrieve a list of masses and a list of costs. Because the values are in a list, we cannot use the \"\n\t\t\t\t    ((:span :class \"function\")\"+\")\" function directly to sum these values, we need to use the Lisp \"\n\t\t\t\t    ((:span :class \"function\")\"apply\")\" function to sum the list values\")\n\t\t\t((:div :class \"main-page-container\")\n\t\t\t\t ((:div :class \"main-page-item\")\n\t\t\t\t  (str (code-example (the code-9))))\n\t\t\t ((:div :class \"main-page-item\")\n\t\t\t  (str (repl-example (the repl-1)))))))))))\n\t\t\t\t    \n   \n",
    "metadata": {
      "source": "gornschool-training/t2/source/truss-example.lisp",
      "file_name": "truss-example.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 12,
      "section": "truss"
    },
    "id": "bb4e88f26bd0312b2985e18053600eb6"
  },
  {
    "text": "(in-package :training-2)\n\n",
    "metadata": {
      "source": "gornschool-training/t2/source/numbers-and-arithmetic.lisp",
      "file_name": "numbers-and-arithmetic.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 0,
      "section": "header"
    },
    "id": "88ed0e112af73517c78bd23d608daa01"
  },
  {
    "text": "(define-object numbers-and-arithmetic (base-training-sheet)\n  \n  :computed-slots\n  ((index-words (list \"+\" \"-\" \"/\" \"*\" \"div\" \"half\" \"twice\" \"Arithmetic Precedence\" \"Integer\" \"Floating Point\" \"Ratio\" \"Complex Number\" \"Prefix Notation\" \":computed-slots\"))\n   (repl-1 (list (list :command \"(+)\"\n\t\t       :output 0)\n\t\t (list :command \"(+ 5)\"\n\t\t       :output 5)\n\t\t (list :command \"(+ 5 1 9 2)\"\n\t\t       :output 17)))\n   \n   (repl-2 (list (list :command \"(- 5)\"\n\t\t       :output -5)\n\t\t (list :command \"(- 5 1 9 2)\"\n\t\t       :output -7)\n\t\t (list :command \"(- 1 -5)\"\n\t\t       :output 6)))\n\n   (repl-3 (list (list :command \"(*)\"\n\t\t       :output 1)\n\t\t (list :command \"(* 2)\"\n\t\t       :output 2)\n\t\t (list :command \"(* 2 3 4)\"\n\t\t       :output 24)\n\t\t (list :command \"(* 2 -3 4)\"\n\t\t       :output -24)))\n\n   (repl-4 (list (list :command \"(/ 3)\"\n\t\t       :output \"1/3\")\n\t\t (list :command \"(/ 10 2)\"\n\t\t       :output \"5\")\n\t\t (list :command \"(/ 10 3)\"\n\t\t       :output \"10/3\")\n\t\t (list :command \"(/ 10 2 5)\"\n\t\t       :output \"1\")\n\t\t (list :command \"(/ 10 1 6)\"\n\t\t       :output \"5/3\")))\n\n   (repl-5 (list (list :command \"(div 3)\"\n\t\t       :output \"0.3333333333333333\")\n\t\t (list :command \"(div 10 2)\"\n\t\t       :output \"5.0\")\n\t\t (list :command \"(div 10 3)\"\n\t\t       :output \"3.3333333333333333\")\n\t\t (list :command \"(div 10 2 5)\"\n\t\t       :output \"1.0\")\n\t\t (list :command \"(div 10 1 6)\"\n\t\t       :output \"1.6666666666666667\")))\n\n   (repl-6 (list (list :command \"(half 5)\"\n\t\t       :output \"5/2\")\n\t\t (list :command \"(half 5.0)\"\n\t\t       :output \"2.5\")\n\t\t (list :command \"(half 5/3)\"\n\t\t       :output \"5/6\")))\n   (repl-7 (list (list :command \"(twice 5)\"\n\t\t       :output \"10\")\n\t\t (list :command \"(twice 5.0)\"\n\t\t       :output \"10.0\")\n\t\t (list :command \"(twice 5/3)\"\n\t\t       :output \"10/3\")))\n   (repl-8 (list (list :command \"(/ (* (+ 2 3) (- 3 4)) (* (- 2 6) (+ 2 (* 2 3))))\"\n\t\t       :output \"5/32\")\n\t\t (list :command \"(/ (* (+ 2 3) (- 3 4)) (* (- 2 6) (+ 2 6)))\"\n\t\t       :output \"5/32\")\n\t\t (list :command \"(/ (* 5 -1) (* -4 8))\"\n\t\t       :output \"5/32\")\n\t\t (list :command \"(/ -5 -32)\"\n\t\t       :output \"5/32\")))\n\n   \n\t      \n   (code-1 (list\"",
    "metadata": {
      "source": "gornschool-training/t2/source/numbers-and-arithmetic.lisp",
      "file_name": "numbers-and-arithmetic.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 0,
      "section": "numbers-and-arithmetic"
    },
    "id": "88ed0e112af73517c78bd23d608daa01"
  },
  {
    "text": "(define-object my-box-4 (box)\"\n\t\t\" :input-slots\"\n\t\t\" (length\"\n\t\t\"  (width 4)\"\n\t\t\"  (height 4)))\"\n\t\t\" :computed-slots\"\n\t\t\" ((density 7800)\"\n\t\t\"  (mass (* (div (the volume) 1000000000) (the density)))))\"))\n\n   (body-content (with-cl-who-string()\n\t\t\n\t\t   (:p \"In the \" (:em (:b (:a :href \"../object-definition/index.html\" \"Defining Objects\")))\n                       \" section, we briefly touched on numbers and arithmetic\")\n\t\t   (str (code-example (the code-1)))\n\t\t   (:p \"In this section we will take a bit more detailed look at how GendL handles numbers and arithmetic.\")\n\t\t   (:p \"The majority of this is pure Common Lisp (CL), although GendL does define a few \"\n\t\t       (:em \"Convenience Functions\") \" which may be classed as arithmetic. \")\n\t\t   (:p \"CL has four number types:\"\n\t\t       (:ul (:li \"Integers (e.g. \"\n                                 (:span :class \"value\" \"1\") \", \"\n                                 (:span :class \"value\" \"38\") \", \"\n                                 (:span :class \"value\" \"183749372628\") \")\")\n\t\t\t    (:li \"Floating Point (e.g. \"\n                                 (:span :class \"value\" \"253.67\") \", \"\n                                 (:span :class \"value\" \"2.52E+26\") \")\")\n\t\t\t    (:li \"Ratios (e.g. \"\n                                 (:span :class \"value\" \"6/7\") \", \"\n                                 (:span :class \"value\" \"347/395\") \")\"))\n\t\t       (:li \"Complex (e.g. \" (:span :class \"value\" \"(#C(0 5)\") \", representing the square root of -25)\"))\n\t\t   (:p \"In contrast with other languages, you don't need to worry too much\nabout the type of number you are using, as the CL runtime system will\nsort that out for us (unless you need to intervene for specific\nperformance reasons by bypassing the dynamic typing feature).\")\n\t\t   (:p \"CL can handle rational numbers with \\\"infinite\\\" precision. For\nexample, the number \"\n                       (:span :class \"value\" \"1/3\")\n                       \" represents one-third with no loss of precision as happens with the decimal representation of \"\n                       (:span :class \"value\" \"0.33333...\")\n                       \" truncated to some arbitray number of decimal places.\")\n\n\t\t   (:p \"And there is no realistic limit on the maximum size of a number that\nCL can represent (although Integers up to a certain size may be\nprocessed more efficiently than arbitrarily huge Integers).\")\n\t\t   (:h3 \"Arithmetic functions\")\n\t\t   (:p \"There are four basic CL arithmetic functions\"\n\t\t       (:ul (:li (:span :class \"function\" \"+\"))\n\t\t\t    (:li (:span :class \"function\" \"-\"))\n\t\t\t    (:li (:span :class \"function\" \"*\"))\n\t\t\t    (:li (:span :class \"function\" \"/\")))\n\t\t       \"Additionally GendL defines a fifth:\"\n\t\t       (:ul (:li (:span :class \"function\" \"div\")))\n\t\t       \"and two \"(:em \"shortcut\") \" functions\"\n\t\t       (:ul (:li (:span :class \"function\" \"half\"))\n\t\t\t    (:li (:span :class \"function\" \"twice\"))))\n\t\t\t\n\t\t   (:p \"As with all Lisp dialects, CL  uses prefix notation for\nfunctions. All five basic arithmetic functions (\"\n                       (:span :class \"function\" \"+\") \", \"\n                       (:span :class \"function\" \"-\") \", \"\n                       (:span :class \"function\" \"*\") \", \"\n                       (:span :class \"function\" \"/\") \", and \"\n                       (:span :class \"function\" \"div\") \") can take one or more arguments, while \"\n\t\t       (:span :class \"function\" \"+\") \" and \"\n\t\t       (:span :class \"function\" \"*\") \" can also take zero arguments.\")\n\t\t   (:h4 \"CL function \" (:span :class \"function\" \"+\"))\n\t\t   (:p \"The return value from \"\n\t\t       (:span :class \"function\" \"+\") \" depends on the number of arguments it is given.\"\n\t\t       (:ul (:li \"Zero Arguments - returns \" (:span :class \"value\" \"0\"))\n\t\t\t    (:li \"One Argument - returns the argument\")\n\t\t\t    (:li \"Two or more arguments - returns the sum of all the arguments\")))\n\t\t   (str (repl-example (the repl-1)))\n\t\t   (:p \"Also note that because Lisp evaluates functions inside-out, (+ 1 2 3) is equivalent to (+ (+ 1 2) 3)\")\n\t\t   (:p \"More about functions later.\")\n\t\t   (:h4 \"CL function \" (:span :class \"function\" \"-\"))\n\t\t   (:p \"The \" (:span :class \"function\"  \"-\") \" function requires at least one argument. If no arguments are supplied, then an error will result.\")\n\t\t   (:p \"The return value from \" (:span :class \"function\"  \"-\") \" depends on the number of arguments it is given.\"\n\t\t       (:ul (:li \"One Argument - returns the negative value of the supplied argument\")\n\t\t\t    (:li \"Two or more arguments - accumulates the value of each argument subrtacted from the previous argument and returns the final result.\")))\n\t\t   (str (repl-example (the repl-2)))\n\t\t   (:h4 \"CL function \" (:span :class \"function\" \"*\"))\n\t\t   (:p \"The return value from \"\n\t\t       (:span :class \"function\" \"*\") \" depends on the number of arguments it is given.\"\n\t\t       (:ul (:li \"Zero Arguments - returns \" (:span :class \"value\" \"1\") \".\")\n\t\t\t    (:li \"One Argument - returns the argument.\")\n\t\t\t    (:li \"Two or more arguments - returns the product of all the arguments.\")))\n\t\t   (str (repl-example (the repl-3)))\n\t\t   (:h4 \"CL function \" (:span :class \"function\" \"/\"))\n\t\t   (:p \"The \" (:span :class \"function\" \"/\") \" requires at least one argument. If no arguments are supplied, then an error will result.\")\n\t\t   (:p \"The return value from \"\n\t\t       (:span :class \"function\" \"/\") \" depends on the number of arguments it is given and the value of the result\"\n\t\t       (:ul (:li \"One Argument - returns the reciprocal of the argument as a ratio (1/argument).\")\n\t\t\t    (:li \"Two or more arguments - returns the value of the first argument\ndivided by the product of the remaining arguments. If the resulting\nanswer is a whole number, then the return value will be a whole number.\nOtherwise it will be a ratio with the least possible whole denominator.\")))\n\t\t   (str (repl-example (the repl-4)))\n\t\t   (:h4 \"GendL function \" (:span :class \"function\" \"div\"))\n\t\t   (:p \"The GendL function \"(:span :class \"function\" \"div\") \" is identical in operation to the Lisp function \"\n\t\t       (:span :class \"function\" \"/\") \" except it uses rational division and converts the return value to a floating point number\")\n\t\t   (str (repl-example (the repl-5)))\n\t\t   (:h4 \"GendL function \" (:span :class \"function\" \"half\"))\n\t\t   (:p \"The GendL function \"\n                       (:span :class \"function\" \"half\")\n                       \" takes a single argument and returns the result of dividing that\nargument by the integer \"\n                       (:span :class \"value\" \"2\")\n                       \". The type of the returned number will depend on the type of the argument\" )\n\t\t   (str (repl-example (the repl-6)))\n\t\t   (:h4 \"GendL function \" (:span :class \"function\" \"twice\"))\n\t\t   (:p \"The GendL function \"\n                       (:span :class \"function\" \"twice\")\n                       \" takes a single argument and returns the result of multiplying The\nargument by the integer \"\n                       (:span :class \"value\" \"2\") \". The type of the returned number will depend\non the type of the argument.\")\n\t\t   (str (repl-example (the repl-7)))\n\t\t\t\n\t\t   (:h3 \"Arithmetic Precedence\")\n\t\t   (:p \"Due to Lisp's generalized prefix notation for functions, and the\nbasic rule that functions are evaluated inside-out (in other words,\nthe innermost functions are evaluated first), precedence of arithmetic\noperators is completely explicit in Lisp. The example below shows\nconceptually how a long arithmetic expression is broken down during\nevaluation\")\n\t\t   (str (repl-example (the repl-8)))\n\t\t   (:p \"So back to our code, \" (:span :class \"object\" \"my-box-4\"))\n\t\t   (str (code-example (the code-1)))\n\t\t   (:p \"In the \"\n\t\t       (:span :class \"object-keyword\" \":computed-slots\")\", \"\n\t\t       (:span :class \"slot\" \"density\") \" has been assigned the value of \"\n                       (:span :class \"value\" \"7800\") \".\")\n\t\t   (:p \"Because the box dimensions are in mm, and the \"\n\t\t       (:span :class \"slot\" \"density\") \" is in kg/m\" (:sup \"3\") \", we first divide the \"\n\t\t       (:span :class \"slot\" \"volume\") \" by \" (:span :class \"value\" \"1000000000\")\n                       \" to convert into cubic metres. We then multiply this result by the value of \"\n\t\t       (:span :class \"slot\" \"density\")\n                       \" to get the mass in kg. The result will always be a floating point number, since \"\n                       (:span :class \"function\" \"div\") \" indeed always returns a floating point number.\")\n\t\t   (:div :class \"main-page-item\" (:h2 \"Resources\") (str (the resource-links)))))))\n",
    "metadata": {
      "source": "gornschool-training/t2/source/numbers-and-arithmetic.lisp",
      "file_name": "numbers-and-arithmetic.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 1,
      "section": "my-box-4"
    },
    "id": "22a1e60dbfce9f659b4d55806268109c"
  },
  {
    "text": "(in-package :training-2)\n\n",
    "metadata": {
      "source": "gornschool-training/t2/source/instantiate-repl.lisp",
      "file_name": "instantiate-repl.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 0,
      "section": "header"
    },
    "id": "8163ee464b57179887f2e3d3e73ec179"
  },
  {
    "text": "(define-object instantiate-repl (base-training-sheet)\n  :computed-slots\n  ((index-words (list \"make-object\" \"the-object\" \"theo\" \"setq\" \"self\" \":input-slots\" \"define-object\" \"REPL\" \"compile code\"))\n\n   (repl-1 (list (list :command \"(setq my-box (make-object 'box :length 2 :width 3 :height 4))\"\n\t\t       :output \"#<BOX #x210348222D>\")\n\t\t (list :command \"(the-object my-box length)\"\n\t\t       :output 2)\n\t\t (list :command \"(the-object my-box width)\"\n\t\t       :output 3)\n\t\t (list :command \"(the-object my-box height)\"\n\t\t       :output 4)))\n\n   (repl-2 (list (list :command \"(the-object my-box volume)\"\n\t\t       :output 24)))\n\n   (repl-3 (list (list :command \"(theo my-box volume)\"\n\t\t       :output 24)))\n   \n   (repl-4 (list (list :command \"(setq self (make-object 'box :length 2 :width 3 :height 4))\"\n\t\t       :output \"#<BOX #x210348242D>\")\n\t\t (list :command \"(the volume)\"\n\t\t       :output 24)\n                 (list :command \"(the-object self volume)\"\n\t\t       :output 24)\n                 (list :command \"(theo self volume)\"\n\t\t       :output 24)))\n\n   (repl-4b (list (list :command \"(make-self 'box :length 1 :width 2 :height 3)\"\n\t\t        :output \"#<BOX #x210348242D>\")\n\t\t  (list :command \"(the volume)\"\n\t\t        :output 6)\n                  (list :command \"(the-object self volume)\"\n\t\t        :output 6)\n                  (list :command \"(theo self volume)\"\n\t\t        :output 6)))\n\n   (repl-5 (list (list :command \"(setq self (make-object 'my-box-1))\"\n\t\t       :output \"#<BOX #x210344342D>\")\n\t\t (list :command \"(the volume)\"\n\t\t       :output 24)))\n\n   (repl-6 (list (list :command \"(setq self (make-object 'my-box-1 :length 8))\"\n\t\t       :output \"#<BOX #x210478242D>\")\n\t\t (list :command \"(the volume)\"\n\t\t       :output 96)))\n\n   (setq-repl (list (list :command \"(setq a 1)\"\n\t\t\t  :output 1)\n\t\t    (list :command \"(setq b 2 c \\\"three\\\" d nil)\"\n\t\t\t  :output \"NIL\")\n\t\t    (list :command \"b\"\n\t\t\t  :output 2)\n\t\t    (list :command \"c\"\n\t\t\t  :output \"three\")\n\t\t    (list :command \"d\"\n\t\t\t  :output \"NIL\")))\n   \n   (code-1 (list\n\t    \"",
    "metadata": {
      "source": "gornschool-training/t2/source/instantiate-repl.lisp",
      "file_name": "instantiate-repl.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 0,
      "section": "instantiate-repl"
    },
    "id": "8163ee464b57179887f2e3d3e73ec179"
  },
  {
    "text": "(define-object my-box-1 (box)\"\n\t    \" :input-slots\"\n\t    \" ((length 2)\"\n\t    \"  (width 3)\"\n\t    \"  (height 4)))\"))\n\n   (body-content (with-cl-who-string()\n\t\t   (:p \"GendL includes a collection of object definitions which you can use\ndirectly or customise/enhance to suit particular needs.\")\n\t\t   (:p \"To work with instances of these objects you may choose to \"\n                       (:em \"instantiate\")\" an object in the REPL. For example, to instantiate a GendL object of type \"\n                       (:span :class \"object\" \"box\") \" in the REPL, we call GendL's general-purpose \"\n                       (:span :class \"function\" \"make-object\")\n                       \" constructor function, which yields a freshly instantiated object which we assign to a symbol (\"\n                       (:span :class \"variable-name\"  \"my-box\") \") in the below example), using the Lisp special operator \"\n                       (:span :class \"special-operator\" \"setq\") \". The \"\n                       (:span :class \"function\" \"make-object\")\n                       \" function takes an object name as its required argument, followed by a\n\\\"spliced-in\\\" list of alternating slot-names and corresponding\ndesired initial values. This type of list which is made up from\nalternating key-value pairs is called a \" (:i \"plist\") \". You will learn more\nabout plists later.\n                            \nIn the example below we are instantiating a wireframe volumetric \" (:span :class \"object\" \"box\") \" and initializing its \"\n                       (:span :class \"slot\" \"length\")\", \"\n                       (:span :class \"slot\" \"width\") \" and \"\n                       (:span :class \"slot\" \"height\") \" slots to \"\n                       (:span :class \"value\" \"2\") \", \" (:span :class \"value\" \"3\") \", and \"\n                       (:span :class \"value\" \"4\") \", respectively.\")\n\t\t   (:p \"Using the macro \"\n\t\t       (:span :class \"macro\" \"the-object\") \n                       \", you can then \\\"send a message\\\" to this object, which yields the current\nvalue of the requested slot.\")\n\t\t      \n\t\t   (str (repl-example (the repl-1)))\n\t\t   (:p \"Note that \" (:span :class \"special-operator\" \"setq\")\n                       \" is a standard CL special operator which takes one or more symbol-value\npairs, assigns the respective values to the symbols, and finally returns the last value.\")\n\t\t   (str (repl-example (the setq-repl)))\n\n\t\t   (:p \"As with most built-in primitives, The GendL \" (:span :class \"object\" \"box\")\n                       \" supports a number of built-in messages, for example \"\n\t\t       (:span :class \"slot\" \"volume\")\n                       \". To send the \" (:span :class \"slot\" \"volume\") \" message to our \"\n                       (:span :class \"variable-name\" \"my-box\")\n                       \" instance and get its value returned, we will need to use a \"\n                       (:i \"reference chain\") \". A reference chain consists of a reference operator such as \"\n                       (:span :class \"macro\" \"the-object\") \", followed by an expression which is expected\nto return an object instance (the example below this expression is simply that \"\n                       (:span :class \"variable-name\" \"my-box\") \" symbol).\")\n                        \n\t\t   (str (repl-example (the repl-2)))\n\n\t\t   (:p \"You can use the abbreviation \"\n\t\t       ((:span :class \"macro\")\"theo\") \" rather than \"\n\t\t       ((:span :class \"macro\")\"the-object\") \". It does the same thing with less typing.\")\n\t\t   (str (repl-example (the repl-3)))\n\t\t       \n\t\t   (:p \"As an added convenience, you can assign the object to the special variable \"\n                       (:span :class \"variable-name\" \"self\")\n                       \" rather than to an arbitrarily-named variable. If you take this approach, then rather than using \"\n\t\t       (:span :class \"macro\" \"theo\") \" or \"\n\t\t       (:span :class \"macro\" \"the-object\") \" to refer to an object expression explicitly when\nsending a message, you now have the option of using the GendL macro \"\n\t\t       (:span :class \"macro\" \"the\") \" to send a message to the object, and automatically \"\n                       (:span :class \"variable-name\" \"self\") \" will be assumed as the object to receive the message. \")\n\n                   (:p \"In the following REPL interaction, the last three expressions are equivalent with each other:\")\n\n                   (str (repl-example (the repl-4)))\n\n                        \n\t\t   (:p \"While \" (:span :class \"variable-name\" \"self\")\n                       \" is a normal symbol, it has a special meaning within the context of GendL.\nIt is fine to use \"\n                       (:span :class \"variable-name\") \"self\" \" in the REPL, you should never bind or set/modify \"\n                       (:span :class \"variable-name\") \"self\" \" within the body of a GendL object definition (created using the \"\n                       (:span :class \"macro\")\"define-object\" \" macro)\")\n\n\n                   (:p \"As yet an additional convenience, you can use the built-in GendL function \"\n                       (:span :class \"function\" \"make-self\")\n                       \" to instantiate an object and set it to the toplevel \"\n                       (:span :class \"variable-name\" \"self\")\n                       \", all in one fell swoop:\")\n\n                   (str (repl-example (the repl-4b)))\n                        \n                        \n\t\t   (:p \"If you'd like to create a named \\\"blueprint\\\"\nof an object instance, e.g. for being able to instantiate customized\nboxes without needing to feed in customized slot values, then you may\nuse GendL's \"\n                       (:span :class \"macro\" \"define-object\") \" macro. In the example below we are\ndefining a new object \"\n                       (:span :class \"object\" \"my-box\")\n                            \n                       \",  which is effectively a customisation of the default Gendl \"\n\t\t       (:span :class \"object\" \"box\") \" object, by specifying \"\n\t\t       (:span :class \"object\" \"box\") \" as part of its \"\n                       (:i \"mixin list\") \". More about \"\n\t\t       (:span :class \"macro\"\"define-object\") \" later.\")\n                        \n\t\t   (str (code-example (the code-1)))\n                        \n\t\t   (:p \"After this object definition has been compiled & loaded into the\nrunning system (in Emacs/Slime this can be done with the cursor in the object and pressing C-c C-c),\nthen you can instantiate it in the REPL. Note that because the new object \"\n\t\t       (:span :class \"object\" \"my-box\") \" specifies default values for the \"\n\t\t       (:span :class \"object-keyword\" \":input-slots\")\" , you do not need to feed them in when making instances of \"\n                       (:span :class \"object\" \"my-box\") \" in the REPL\")\n\t\t   (str (repl-example (the repl-5)))\n\n\t\t   (:p \"However, you continue to have the ability to feed in alternative values of \"\n\t\t       (:span :class \"object-keyword\" \":input-slots\") \" for \"\n\t\t       (:span :class \"object\" \"my-box\"))\n\t\t   (str (repl-example (the repl-6)))\n  \n\t\t   (str (the resource-links))))))\n",
    "metadata": {
      "source": "gornschool-training/t2/source/instantiate-repl.lisp",
      "file_name": "instantiate-repl.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 1,
      "section": "my-box-1"
    },
    "id": "fbe2fd7771ef8ec4d04d38102a9b137a"
  },
  {
    "text": "(in-package :training-2)\n\n",
    "metadata": {
      "source": "gornschool-training/t2/source/instantiate-geysr.lisp",
      "file_name": "instantiate-geysr.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 0,
      "section": "header"
    },
    "id": "255c48c73fd9e11dcbdd4a6f22e8e227"
  },
  {
    "text": "(define-object instantiate-geysr (base-training-sheet)\n  \n  :computed-slots\n  ((body-content (with-cl-who-string()\n\t\t   (:p \"As a companion to the REPL interaction described on the previous slide, you can use the built-in\nGeysr object browser.\")\n\t\t   (:p \"Geysr is particularly helpful when working with geometry,\nas it includes a viewport for rendering the geometry.\")\n\t\t   (:p \"Assuming the Gendl web server is running on port 9000, Geysr may be accessed at \"\n                       ((:a :href \"http://localhost:9000/geysr\") \"http://localhost:9000/geysr\") \".\")\n\t\t   ((:div :class \"grid-container-2\")\n\t\t    ((:div :class \"grid-item\")\n\t\t     (:p \"When Geysr is opened, a splash screen is displayed:\"))\n\t\t    ((:div :class \"grid-item\")\n\t\t     (:img :src (format nil \"/~a-images/geysr-splash.png\" (the publish-prefix)) :style \"width: auto; height: 200px;\" ))\n\t\t    ((:div :class \"grid-item\")\n\t\t     (:p \"To instantiate a compiled object, select:\")\n\t\t     (:p (:b \"File..New\") \", and in the text field enter the desired package name and the object\ntype name separated by \" (:b \"::\"))\n                     (:p \"For the example code in the Resources section, this will be \" (:code \"gdl-user::my-box-1\") \".\")\n\t\t     (:p \"Press \" (:b \"Enter\") \" to instantiate the object.\"))\n\t\t    ((:div :class \"grid-item\")\n\t\t     (:img :src (format nil \"/~a-images/geysr-file-new.png\" (the publish-prefix)) :style \"width: auto; height: 100px;\" ) (:br)\n\t\t     (:img :src (format nil \"/~a-images/geysr-package-object.png\" (the publish-prefix)) :style \"width: auto; height: 100px;\" ))\n\t\t    ((:div :class \"grid-item\")\n\t\t     (:p \"The object will be instantiated, and all of its available slots will\nbe displayed in the \"\n                         (:i \"Inspector\") \" pane in the lower Left-hand section of the browser window.\")\n\t\t     (:p \"Note that most slots will initially be shown as \" (:em \"unbound\") \".\")\n\t\t     (:p \"Clicking on the \" (:em \"unbound\") \" link will cause the value of the associated\nslot to be evaluated. In the lower screenshot the slot \"\n\t\t\t ((:span :class \"slot\") \"length\") \" has been evaluated and returns \"\n                         ((:span :class \"value\") \"4\") \".\"))\n\t\t    ((:div :class \"grid-item\")\n\t\t     (:img :src (format nil \"/~a-images/geysr-instantiate.png\" (the publish-prefix)) :style \"width: auto; height: 200px;\" ) (:br)\n\t\t     (:img :src (format nil \"/~a-images/geysr-eval.png\" (the publish-prefix)) :style \"width: auto; height: 200px;\" ))\n\t\t    ((:div :class \"grid-item\")\n\t\t     (:p \"To draw the geometry: first click or tap \")\n\t\t     (:p (:b \"Mode\") \" and ensure \" (:b \"Add Leaves\") \" is selected with a checkmark\"))\n\t\t    ((:div :class \"grid-item\")\n\t\t     (:img :src (format nil \"/~a-images/geysr-add-leaves.png\" (the publish-prefix)):style \"width: auto; height: 100px;\" ))\n\t\t    ((:div :class \"grid-item\")\n\t\t     (:p \"Then left mouse click or tap on the object name just below the menu bar (in this case \"\n\t\t\t (:code \"GDL-USER::MY-BOX-1\") \"), and the geometry will be displayed in the main viewport\")\n\t\t     (:p \"The geometry camera view may be changed by selecting \"\n\t\t\t (:b \"View..Perspective\") \" and picking any of the pre-defined orientations such a top or left.\")\n\t\t     (:p \"The geometry viewport may be cleared by selecting \"\n\t\t\t (:b \"View..Clear!\")))\n\t\t    ((:div :class \"grid-item\")\n\t\t     (:img :src (format nil \"/~a-images/geysr-geometry.png\" (the publish-prefix)):style \"width: auto; height: 400px;\" ))\n\t\t    ((:div :class \"grid-item\")\n\t\t     (:p \"By selecting \" (:b \"Mode..Set Self...\") \" then clicking on any object in the tree pane at upper-left,\nthe toplevel value of \"\n                         ((:span :class \"variable-name\") \"self\") \" will be set to that object, to similar effect\nas typing \"\n                         (:code \"(setq self (make-object 'my-box-1))\") \" at the REPL. You may then evaluate any slot in\nmy-box-1 at the REPL\"))\n\t\t    ((:div :class \"grid-item\")\n\t\t     (str (repl-example (the repl-set-self)))))\n\t\t   (:h3 \"Creating Fresh Instances\")\n\t\t   (:p \n\n                    (wmd \"__Note__: __File..New__ is currently __only__ supported for a *Fresh Web Browser Tab*.\nIt is not currently supported to make a fresh instance in an existing Geysr browser tab or window.\n\nSo, if you'd like to make a new, fresh instance (of the same or a different type),\nthen follow these steps:\n\n1. Open a *new* Web Browser tab or window.\n1. Visit the toplevel  [Geysr url](/geysr).\n1. Click or tap __File..New__ and proceed as in the __File..New__ section above.\n\n\n\"))\n                   (:h3 \"Updating Existing Instances after a Code Change\")\n                   (:p \"If you want to see the results of a change you've made to the code\nand loaded into the running session (don't worry, you will learn how\ncompile & load code changes later), then select the \"\n                       (:b \"Update\") \" mode (click or tap \" (:b \"Mode..Update...\") \"),\nand finally click in the tree on the object for which you would like\nto unload any cached results it may be holding, and let the system\nrecompute fresh everything based on your latest code (typically the\nnode you click to \"\n                       (:b \"Update\")\n                       \" will simply be the root object in the tree).\")\n                        \n                   (:p (wmd \"\nThis recomputation forms one of the steps of a five-step iterative\nprocess you'll typically follow when developing using Geysr:\n\n1. Author your desired code (new code or changes to existing code).\n1. Compile the code and load it into the running session (compiling is optional but recommended).\n1. Update the instance in the running Geysr session to reflect the new code.\n1. Inspect and poke around with the results in the various panes of Geysr\n1. Based on said results, return to Step 1 above and repeat.\n\nYour typical development session will include many iterations of the\nabove five steps. Depending on the situation at hand it is possible to\ncomplete a single iteration very quickly, sometimes in less than one\nminute. This rapid iteration potential is one of the upsides of\nbecoming proficient with GendL combined with Geysr.\"))\n\n                   (:h3 \"A Note on Symbol Names\")\n                   (:p (wmd \"Note that object type names in Gendl (as in Common Lisp) have two parts:\n\n1. a Package name\n2. a Symbol name\n\nThese can be written together separated by a double colon (`::`).\")\n\n                       \" For example, the symbol naming our \" ((:span :class \"object\") \"my-box-1\")\n                       \" definition was introduced into the system while the \"\n                       ((:span :class \"package-name\") \"gdl-user\") \" package was active, or\n\\\"current\\\" &mdash; therefore you can refer to this definition with the fully qualified symbol\nname: \"\n                       ((:span :class \"package-name\") \"gdl-user\")\n                       (:code \"::\")\n                       ((:span :class \"object\") \"my-box-1\")\n                       (wmd\n                        \"Sometimes it is possible to use a single colon (`:`) rather than a\ndouble colon (`::`), and often it is possible to omit the package name\nentirely when referring to a symbol.\n\nThat's enough on Packages and Symbols for now. You will learn more about Packages and Symbols later.\"))\n\t\t\t    \n\t\t   (:h2 \"Resources\")\n\t\t   (str (the resource-links))))\n\n   (repl-set-self (list (list :comment \"Self is now set to to #<MY-BOX-1 #x210500D41D>, you may use command-line interaction....\")\n\t\t\t(list :comment \"127.0.0.1 - - [Thu, 02 Jun 2022 09:00:48 GMT] \\\"POST /gdlAjax HTTP/1.1\\\" 200 222\")\n\t\t\t(list :command \"(the)\"\n\t\t\t      :output \"#<MY-BOX-1 #x210500D41D>\")\n\t\t\t(list :command \"(the length)\"\n\t\t\t      :output 2)\n\t\t\t(list :command \"(the height)\"\n\t\t\t      :output 4)\n\t\t\t(list :command \"(the width)\"\n\t\t\t      :output 3)\n\t\t\t(list :command \"(the volume)\"\n\t\t\t     :output 24))))\n\n   )\n",
    "metadata": {
      "source": "gornschool-training/t2/source/instantiate-geysr.lisp",
      "file_name": "instantiate-geysr.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 0,
      "section": "instantiate-geysr"
    },
    "id": "255c48c73fd9e11dcbdd4a6f22e8e227"
  },
  {
    "text": "(in-package :training-2)\n\n",
    "metadata": {
      "source": "gornschool-training/t2/source/object-definition.lisp",
      "file_name": "object-definition.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 0,
      "section": "header"
    },
    "id": "ab5ec16cdd0deef37648ecf343a45d71"
  },
  {
    "text": "(define-object object-definition (base-training-sheet)\n  \n  :computed-slots\n  (\n   (index-words (list \"define-object\" \"mixin\" \":input-slots\" \":computed-slots\" \":objects\" \":functions\" \"mixin precedence\" \"the\"))\n\n   (code-1 (list\n\t    \"",
    "metadata": {
      "source": "gornschool-training/t2/source/object-definition.lisp",
      "file_name": "object-definition.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 0,
      "section": "object-definition"
    },
    "id": "ab5ec16cdd0deef37648ecf343a45d71"
  },
  {
    "text": "(define-object my-box-1a (box)\"\n\t    \" :input-slots\"\n\t    \" ((length 2)\"\n\t    \"  (width 3)\"\n\t    \"  (height 4)))\"))\n   (code-2 (list\n\t    \"",
    "metadata": {
      "source": "gornschool-training/t2/source/object-definition.lisp",
      "file_name": "object-definition.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 1,
      "section": "my-box-1a"
    },
    "id": "5e7807af354ba060ca18ea83cc25db85"
  },
  {
    "text": "(define-object my-box-1b ()\"\n\t    \" :input-slots\"\n\t    \" ((length 2)\"\n\t    \"  (width 3)\"\n\t    \"  (height 4)))\"\n\t    \"\"\n\t    \"",
    "metadata": {
      "source": "gornschool-training/t2/source/object-definition.lisp",
      "file_name": "object-definition.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 2,
      "section": "my-box-1b"
    },
    "id": "d923a547bad8457d1e2d1f8db659f020"
  },
  {
    "text": "(define-object my-box-2 (my-box-1b box))\"\n\t    \" \"\n\t    \"",
    "metadata": {
      "source": "gornschool-training/t2/source/object-definition.lisp",
      "file_name": "object-definition.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 3,
      "section": "my-box-2"
    },
    "id": "c8a87caab5a7e177b3c6914260dfdc64"
  },
  {
    "text": "(define-object my-box-3 (box my-box-1b))\"\n\t    \" \"\n\t    ))\n   (code-3 (list\n\t    \"",
    "metadata": {
      "source": "gornschool-training/t2/source/object-definition.lisp",
      "file_name": "object-definition.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 4,
      "section": "my-box-3"
    },
    "id": "577a55b467f31550aa62f184e0da6361"
  },
  {
    "text": "(define-object my-box-4 (box)\"\n\t    \" :input-slots\"\n\t    \" (length\"\n\t    \"  (width 4)\"\n\t    \"  (height 4)))\"))\n   (code-4 (list\n\t    \"",
    "metadata": {
      "source": "gornschool-training/t2/source/object-definition.lisp",
      "file_name": "object-definition.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 5,
      "section": "my-box-4"
    },
    "id": "5d3c435988905594c34485ddcaf2d45e"
  },
  {
    "text": "(define-object my-box-4 (box)\"\n\t    \" :input-slots\"\n\t    \" (length\"\n\t    \"  (width 4)\"\n\t    \"  (height 4)))\"\n\t    \" :computed-slots\"\n\t    \" ((density 7800)\"\n\t    \"  (mass (* (div (the volume) 1000000000) (the density)))))\"))\n\n   (code-5 (list\n\t    \"",
    "metadata": {
      "source": "gornschool-training/t2/source/object-definition.lisp",
      "file_name": "object-definition.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 6,
      "section": "my-box-4"
    },
    "id": "6b8b8b105857b19e5c7ac345a25f73fb"
  },
  {
    "text": "(define-object assembly-1 (base-object)\"\n\t    \" :objects\"\n\t    \" ((my-box :type 'my-box-4\"\n\t    \"          :length 10)\"\n\t    \"  (my-sphere :type 'sphere\"\n\t    \"             :radius (the my-box width))))\"))\n   \n   (repl-1 (list (list :command \"(setq self (make-object 'box)\"\n\t\t       :output \"#<BOX #x210348242D>\")\n\t\t (list :command \"(the length)\"\n\t\t       :output 0)\n\t\t (list :command \"(the width)\"\n\t\t       :output 0)\n\t\t (list :command \"(the height)\"\n\t\t       :output 0)\n\t\t (list :command \"(the volume)\"\n\t\t       :output 0)\n\t\t (list :command \"(setq self (make-object 'my-box-1a)\"\n\t\t       :output \"#<BOX #x210348242D>\")\n\t\t (list :command \"(the length)\"\n\t\t       :output 2)\n\t\t (list :command \"(the width)\"\n\t\t       :output 3)\n\t\t (list :command \"(the height)\"\n\t\t       :output 4)\n\t\t (list :command \"(the volume)\"\n\t\t       :output 24)))\n   (repl-2 (list \n\t    (list :command \"(setq self (make-object 'my-box-2)\"\n\t\t  :output \"#<MY-BOX-2 #x210346742D>\")\n\t    (list :command \"(the length)\"\n\t\t  :output 2)\n\t    (list :command \"(setq self (make-object 'my-box-3)\"\n\t\t  :output \"#<MY-BOX-3 #x210349442D>\")\n\t    (list :command \"(the length)\"\n\t\t  :output 0)))\n\n   (repl-3 (list \n\t    (list :command \"(setq self (make-object 'my-box-4))\"\n\t\t  :output \"#<MY-BOX-4 #x2103467C4D>\")\n\t    (list :command \"(the length)\"\n\t\t  :output \"Invoking restart: Return to SLIME's top level.\"\n\t\t  :error \"; Evaluation aborted on #<SIMPLE-ERROR #x21056CE7DD>.\")\n\t    (list :command \"(the volume)\"\n\t\t  :output \"Invoking restart: Return to SLIME's top level.\"\n\t\t  :error \"; Evaluation aborted on #<SIMPLE-ERROR #x21056B76DD>.\")\n\t    (list :command \"(setq self (make-object 'my-box-4 :length 3))\"\n\t\t  :output \"#<MY-BOX-4 #x21034F4C4D>\")\n\t    (list :command \"(the length)\"\n\t\t  :output 3)\n\t    (list :command \"(the volume)\"\n\t\t  :output 48)))\n\n   (repl-4 (list (list :command \"(setq self (make-object 'my-box-4 :length 3 :width 10))\"\n\t\t       :output \"#<MY-BOX-4 #x21034F4C4D>\")\n\t\t (list :command \"(the volume)\"\n\t\t       :output 120)))\n   \n   (body-content (with-cl-who-string()\n\t\t   (:p \"Recall on the slide about \"\n                       ((:a :href (the instantiate-repl url)) \"Instantiating Objects in the REPL\")\n                       \", we defined our own object using the Gendl \"\n\t\t       (:span :class \"macro\" \"define-object\") \" macro similarly to the following:\")\n\t\t   (str (code-example (the code-1)))\n\t\t   (:p \"In this section we will look a bit deeper into \" (:span :class \"macro\" \"define-object\") \".\")\n\t\t   (:p \"The syntax for \" (:span :class \"macro\" \"define-object\") \" is:\")\n\t\t   (:p (str (code-example (list \"",
    "metadata": {
      "source": "gornschool-training/t2/source/object-definition.lisp",
      "file_name": "object-definition.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 7,
      "section": "assembly-1"
    },
    "id": "e3a8b6dec10fb6e84b963f8764c5f2ce"
  },
  {
    "text": "(define-object definition-name ([mixins*]) [specifications*])\"))))\n                        \n\t\t   (:p \"where:\"\n                       (:dl\n                        (:dt \"definition-name\")\n                        (:dd \"is a symbol naming the object being defined.\")\n                        (:dt \"mixins*\")\n                        (:dd \"means zero or more symbols naming other object definitions,\nfrom which this object type will inherit characteristics.\")\n                        (:dt \"specifications*\")\n                        (:dd \"comprise the body of the object definition and consist of a set\nof keyword-value pairs which describe the characteristics and behaviors of any given instance of the object type.\")))\n\t                                      \n\t\t   (:h2 \"mixins\")\n\t\t   (:p \"In the above example, \"\n\t\t       (:span :class \"object\" \"my-box-1a\") \" specifies \"\n\t\t       (:span :class \"object\" \"box\") \" as a mixin. Because \"\n\t\t       (:span :class \"object\" \"box\") \" includes a built-in slot \"\n\t\t       (:span :class \"slot\" \"volume\") \" , \"\n\t\t       (:span :class \"object\" \"my-box-1a\") \" will also include a \"\n                       (:span :class \"slot\" \"volume\") \" slot. The primitive \"\n\t\t       (:span :class \"object\" \"box\") \" also includes \"\n\t\t       (:span :class \"slot\" \"length\") \", \"\n\t\t       (:span :class \"slot\" \"width\") \" and \"\n\t\t       (:span :class \"slot\" \"height\")\", but specifies their default values each to be \"\n\t\t       (:span :class \"value\" \"0\") \". In the example above, because \"\n\t\t       (:span :class \"object\" \"my-box-1a\") \" also includes \"\n\t\t       (:span :class \"slot\" \"length\") \", \"\n\t\t       (:span :class \"slot\" \"width\") \", and \"\n\t\t       (:span :class \"slot\" \"height\")\", and assigns default values to them (\"\n                       (:span :class \"value\" \"2\") \", \" (:span :class \"value\" \"3\") \" and \"\n                       (:span :class \"value\" \"4\") \", respectively), \nthese values override the default \"\n\t\t       (:span :class \"value\" \"0\") \" values in any instances we may make of \"\n                       (:span :class \"object\" \"my-box-1a\")\n\t\t       \" as long as we do not feed in any other specific values at\ninstantiation-time.\")\n\n\t\t   (str (repl-example (the repl-1)))\n                        \n\t\t   (:p \"If you specify multiple mixins, precedence on the slots is left to right (and depth-first).\")\n\n                   (str (code-example (the code-2)))\n                   :br \n\t\t   (str (repl-example (the repl-2)))\n                        \n\t\t   (:h2 \"specifications\")\n\t\t   (:p \"The specifications section is what really defines the object.\n This can be thought of as its computational DNA.\")\n\t\t   (:p \"Each section of the specification is identified by one of a few supported keyword symbols.\nThe most common ones are:\"\n\t\t       (:ul :class \"list-disc list-outside ml-3 mr-8 bg-zinc-100\"\n                            (:li (:span :class \"object-keyword\" \":input-slots\"))\n\t\t\t    (:li (:span :class \"object-keyword\" \":computed-slots\"))\n\t\t\t    (:li (:span :class \"object-keyword\" \":objects\"))\n\t\t\t    (:li (:span :class \"object-keyword\" \":functions\"))))\n\t\t   (:h3 (:span :class \"object-keyword\" \":input-slots\"))\n\t\t   (:p  (:span :class \"object-keyword\" \":input-slots\") \" specify any required and/or optional\ninputs to the object. Each input-slot may be \"\n\n                        (:dl (:dt \"a symbol\")\n                             (:dd \"In this case it is a required input for the object.\")\n                             (:dt \"a symbol-value pair enclosed in parentheses\")\n                             (:dd \"in this case the slot is provided with a default value which may be overridden by \"\n                                  (:em \"passing in\")\n                                  \" a different value, either from the parent object or from a toplevel call to the \"\n                                  (:span :class \"function\" \"make-object\") \" function.\")))\n\t\t   (:p \"In the example below, \"\n\t\t       (:span :class \"slot\" \"length\") \" is required, but \"\n\t\t       (:span :class \"slot\" \"width\") \" and \"\n\t\t       (:span :class \"slot\" \"height\") \" each default to \"\n\t\t       (:span :class \"value\" \"4\") \".\")\n                                        \n\t\t   (str (code-example (the code-3)))\n                                        \n\t\t   (:p \"If \"\n\t\t       (:span :class \"object\" \"my-box-4\") \" is instantiated, and \"\n\t\t       (:span :class \"slot\" \"length\")\" (or any attribute which depends on \"\n\t\t       (:span :class \"slot\" \"length\") \") is evaluated, then an error \nwill result, as \"\n\t\t       (:span :class \"slot\" \"length\")\n\t\t       \" does not have a value. In other words, to be of any use,\n this object must be instantiated with \" (:span :class \"slot\" \"length\")\" passed in explicitly\nas an input.\")\n\t\t   (str (repl-example (the repl-3)))\n\t\t   (:p (:span :class \"object-keyword\" \":input-slots\")\" which have default \nvalues may have those values over-ridden when the object is instantiated\")\n                                              \n\t\t   ;;(str (repl-example (the repl-4) :class \"repl-example-wide\"))\n\n                   (str (repl-example (the repl-4) :class \"repl-example\"))\n                                              \n\t\t   (:h3 (:span :class \"object-keyword\"  \":computed-slots\"))\n\t\t   (:p  (:span :class \"object-keyword\" \":computed-slots\") \" can represent \nknown values, intermediate results, or final outputs which may be computed by an object\")\n\t\t   (:p  \"They are defined as symbol-value pairs enclosed in parentheses. \nThe value can be any Common Lisp value or expression.\")\n\t\t   (:p  (:span :class \"object-keyword\" \":computed-slots\")\n\t\t\t\" can refer to the return values of other \"\n\t\t\t(:span :class \"object-keyword\" \":computed-slots\")\n\t\t\t\" using the GendL macro \" (:span :class \"macro\"\"the\"))\n\t\t   (str (code-example (the code-4)))\n\t\t   (:p \"In the example above, a computed-slot \" (:span :class \"slot\" \"density\")\n                       \" has been created and set to \" (:span :class \"value\" \"7800\")\n                       \" (the density of steel in kg/m\" (:sup \"3\") \"). A further slot has \nbeen created, \" (:span :class \"slot\" \"mass\") \", which divides the \"\n\t\t       (:span :class \"slot\" \"volume\") \" by \"\n                       (:span :class \"value\" \"1000000\") \" and then multiplies that \nresult by the value of \"\n                       (:span :class \"slot\" \"density\"))\n\t\t   (:p (:em \"A point to note here is the Gendl is dimensionless. \nIt is the responsibility of the programmer to ensure units are correct when performing \ncalculations. Implicit in the example here is that length, width and height are specified \nin mm and the resultant mass will be in kg\"))\n\t\t   (:p \"We will cover the use of functions to perform calculations in \nmore detail later in this tutorial\")\n\t\t   (:h3 (:span :class \"object-keyword\" \":objects\"))\n\t\t   (:p \"The \" (:span :class \"object-keyword\" \":objects\")\n\t\t       \" section is where child objects are specified. \nThis specification includes:\"\n\t\t       (:dl (:dt \"The object name\")\n                            (:dd \"i.e. the name of the slot which will contain this child object instance\")\n                            (:dt \"The object type\")\n                            (:dd \"This is expected to correspond to an object definition name specified in another \"\n\t\t\t\t (:span :class \"function\" \"define-object\") \". This can be a literal (quoted) symbol or\nan expression which yields a symbol when evaluated (that is, object type can be determined dynamically at runtime).\")\n                            (:dt \"The object input values\")\n                            (:dd \"these are keyword-tagged expressions which specify the values to be passed (when and if demanded)\ninto the child object instance. They keywords should match existing \"\n                                 (:span :class \"slot\" \"input-slots\")\n                                 \" in the child object's type, otherwise a compiler warning will be generated.\")))\n\t\t   (:p \"In the definition below, the parent object (\"\n\t\t       (:span :class \"object\" \"assembly-1\")\n\t\t       \") has two child objects: one called \"\n\t\t       (:span :class \"object\" \"my-box\")\" based on \"\n\t\t       (:span :class \"object\" \"my-box-4\") \" with \"\n\t\t       (:span :class \"slot\" \"length\") \" set to \"\n\t\t       (:span :class \"value\" \"10\") \", and another called \"\n\t\t       (:span :class \"object\" \"my-sphere\") \", based on the GendL \"\n\t\t       (:span :class \"object\" \"sphere\") \" object, with its \"\n\t\t       (:span :class \"slot\" \"radius\")\" specified as being equal to the \"\n\t\t       (:span :class \"slot\" \"width\")\" of \"\n\t\t       (:span :class \"slot\" \"my-box\"))\n\t\t   (:p \"Note that when specifying the inputs to an object\"\n\t\t       (:ul :class \"list-disc list-outside ml-3 mr-8 bg-zinc-100\"\n                            (:li \"the name must match one of the symbols in the object's \"\n\t\t\t\t (:span :class \"object-keyword\" \":input-slots\") \".\")\n\t\t\t    (:li \"the name must be specified as a keyword (ie preceeded by a \"\n\t\t\t\t (:b (:code \":\")) \") so an \"\n\t\t\t\t (:span :class \"object-keyword\" \":input-slot\") \" \"\n\t\t\t\t (:span :class \"slot\" \"length\") \" is specified as \"\n\t\t\t\t (:b \":length\") \" when specifying the inputs.\")))\n\t\t   (str (code-example (the code-5)))\n\t\t   (:p \"Instantiating assembly-1 in Geysr and drawing the leaves will \nlook like this\")\n\t\t   (:img :src (format nil \"/~a-images/assembly-1.png\" (the publish-prefix)) :style \"width: auto; height: 200px;\" )\n\t\t   (:h3 (:span :class \"object-keyword\" \":functions\"))\n\t\t   (:p \"The \"\n\t\t       (:span :class \"object-keyword\" \":functions\") \" section is where \nyou put the names, argument lists and bodies for \"\n\t\t       (:span :class \"object-keyword\" \":functions\") \" which can operate \nwithin the context of the Gendl object they are defined in. \"\n\t\t       \"They shouldn't be confused with Common Lisp functions which are \ndefined with \"\n\t\t       (:em (:b\"defun\"))\", although the syntax is very similar. The biggest \ndifference is that a Gendl \"\n\t\t       (:span :class \"object-keyword\" \":function\") \" can access messages \nwithin the object it is defined in by using the Gendl \"\n\t\t       (:span :class \"macro\" \"the\") \" macro\")\n\t\t   (:p \"We will cover more on \"\n\t\t       (:span :class \"object-keyword\" \":functions\") \" in a later part of this tutorial\")\n\t\t       \n\t\t\t\n                   ((:div :class \"main-page-item\")\n\t\t    (:h2 \"Resources\")\n\t\t    (str (the resource-links)))))))\n\n\n\n\n\n\n",
    "metadata": {
      "source": "gornschool-training/t2/source/object-definition.lisp",
      "file_name": "object-definition.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 8,
      "section": "definition-name"
    },
    "id": "1138ba39c43cf155fbccb924356f3d77"
  },
  {
    "text": "(in-package :training-2)\n\n",
    "metadata": {
      "source": "gornschool-training/t2/source/functions-and-functions.lisp",
      "file_name": "functions-and-functions.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 0,
      "section": "header"
    },
    "id": "62523e776aa93f05df830119313300e9"
  },
  {
    "text": "(define-object functions-and-functions (base-training-sheet)\n  :computed-slots\n  ((index-words (list \"Named Functions\" \":functions\" \"GendL object functions\"\n                      \"&optional\" \"&key\" \"&rest\"))\n\n   (repl-1 (list (list :command \"",
    "metadata": {
      "source": "gornschool-training/t2/source/functions-and-functions.lisp",
      "file_name": "functions-and-functions.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 0,
      "section": "functions-and-functions"
    },
    "id": "62523e776aa93f05df830119313300e9"
  },
  {
    "text": "(defun add2 (x) (+ x 2))\"\n\t\t       :output \"ADD2\")\n\t\t (list :command \"(add2 4)\"\n\t\t       :output 6)\n\t\t (list :command (list \"",
    "metadata": {
      "source": "gornschool-training/t2/source/functions-and-functions.lisp",
      "file_name": "functions-and-functions.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 1,
      "section": "add2"
    },
    "id": "49574ead4b85a3025895ea2c2a289f1d"
  },
  {
    "text": "(defun kinetic-energy (mass velocity)\"\n\t\t\t\t      \"   (div (* mass velocity velocity) 2))\")\n\t\t       :output \"KINETIC-ENERGY\")\n\t\t (list :command \"(kinetic-energy 5 12)\"\n\t\t       :output \"360.0\")))\n\n   (repl-2 (list (list  :command (list \"",
    "metadata": {
      "source": "gornschool-training/t2/source/functions-and-functions.lisp",
      "file_name": "functions-and-functions.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 2,
      "section": "kinetic-energy"
    },
    "id": "85f6171b525dfc953c152761fb253b0f"
  },
  {
    "text": "(defun kinetic-energy (&optional (mass 5) (velocity 12)\"\n\t\t\t\t       \"   (div (* mass velocity velocity) 2))\")\n\t\t\t:output \"KINETIC-ENERGY\")\n\t\t (list :command \"(kinetic-energy)\"\n\t\t       :output \"360.0\")\n\t\t (list :command \"(kinetic-energy 10)\"\n\t\t       :output \"720.0\")\n\t\t (list :command \"(kinetic-energy 10 24)\"\n\t\t       :output \"2880.0\")))\n\n   (repl-3 (list (list  :command (list \"",
    "metadata": {
      "source": "gornschool-training/t2/source/functions-and-functions.lisp",
      "file_name": "functions-and-functions.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 3,
      "section": "kinetic-energy"
    },
    "id": "3690187e276253ed521dfab15b9e7faf"
  },
  {
    "text": "(defun kinetic-energy (&key (mass 5) (velocity 12)\"\n\t\t\t\t       \"   (div (* mass velocity velocity) 2))\")\n\t\t\t:output \"KINETIC-ENERGY\")\n\t\t (list :command \"(kinetic-energy)\"\n\t\t       :output \"360.0\")\n\t\t (list :command \"(kinetic-energy :mass 10)\"\n\t\t       :output \"720.0\")\n\t\t (list :command \"(kinetic-energy :velocity 24)\"\n\t\t       :output \"1440.0\")\n\t\t (list :command \"(kinetic-energy :velocity 24 :mass 10)\"\n\t\t       :output \"2880.0\") ))\n\n   (code-1 (list \"",
    "metadata": {
      "source": "gornschool-training/t2/source/functions-and-functions.lisp",
      "file_name": "functions-and-functions.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 4,
      "section": "kinetic-energy"
    },
    "id": "73c0bffb6a09eb24adb644ead0915dc0"
  },
  {
    "text": "(defun kinetic-energy (&key (mass 5) (velocity 12)\"\n\t\t \"\t (div (* mass velocity velocity) 2)))\"\n\t\t \"\"\n\t\t \"",
    "metadata": {
      "source": "gornschool-training/t2/source/functions-and-functions.lisp",
      "file_name": "functions-and-functions.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 5,
      "section": "kinetic-energy"
    },
    "id": "72405519810d5c305f91895a632da6fb"
  },
  {
    "text": "(define-object function-example(base-object)\"\n\t\t \"\"\n\t\t \":computed-slots\"\n\t\t \"((mass 5)\"\n\t\t \" (velocity 12)\"\n\t\t \" (ke-1 (the kinetic-energy-1))\"\n\t\t \" (ke-2 (the kinetic-energy-2))\"\n\t\t \" (ke-3 (the (kinetic-energy-2 :mass 10)))\"\n\t\t \" (ke-4 (the (kinetic-energy-2 :velocity 24)))\"\n\t\t \" (ke-5 (the (kinetic-energy-2 :velocity 24 :mass 10)))\"\n\t\t \"\"\n\t\t \" (ke-6 (kinetic-energy :mass 10 :velocity 24))\"\n\t\t \" )\"\n\t\t \"\"\n\t\t \":functions\"\n\t\t \"((kinetic-energy-1 () (div (* (the mass) (the velocity) (the velocity)) 2))\"\n\t\t \"\"\n\t\t \" (kinetic-energy-2 (&key (mass (the mass)) (velocity (the velocity)))\"\n\t\t \"\t\t      (div (* mass velocity velocity) 2))\"\n\t\t \" )\"\n\t\t \")\"))\n\n   (repl-4 (list (list :command \"(setq self (make-object 'function-example))\"\n\t\t       :output \"#<GDL-USER::FUNCTION-EXAMPLE #x210397F77D>\")\n\t\t (list :command \"(the ke-1)\"\n\t\t       :output \"360.0\")\n\t\t (list :command \"(the ke-2)\"\n\t\t       :output \"360.0\")\n\t\t (list :command \"(the ke-3)\"\n\t\t       :output \"720.0\")\n\t\t (list :command \"(the ke-4)\"\n\t\t       :output \"1440.0\")\n\t\t (list :command \"(the ke-5)\"\n\t\t       :output \"2880.0\")\n\t\t (list :command \"(the ke-6)\"\n\t\t       :output \"2880.0\"))) \n\n   \n\n   (body-content (with-cl-who-string()\n\t\t   (:div\n                    :class \"main-page-container\"\n\t\t    (:div\n                     :class \"main-page-item\"\n                     (:h2 (str (the page-header)))\n\t\t     (:div\n                      :class \"grid-container-2-650px\"\n\t\t      (:div\n                       :class \"grid-item\"\n\t\t       (:p (wmd \"Functions are Lisp objects which can be _called_, or invoked, to\naccept some _inputs_ (or \\\"arguments\\\") and yield corresponding _outputs_ or \\\"return values.\\\"\n\nTypically, functions will simply return new values without modifying\nany of the inputs. If you program mostly with such a non-modifying\nstyle, you are doing _Functional Programming.\"))\n                       (:p \"GendL offers two kinds of functions:\"\n\t\t\t   (:ul (:li \"Functions defined using the \"\n\t\t\t\t     ((:span :class \"macro\")\"defun\")\" macro, Sometimes called \"\n\t\t\t\t     (:em (:b \"Named Functions\"))\n                                     \", such functions become objects in memory which have a symbol for a name. Usually, variables mentioned within the body of such functions\nare \\\"passed in\\\" to the function call as arguments, Variables with\nGlobal and Dynamic Scope can also be accessed within function bodies,\nbut we will cover those types of variables later.\")\n\t\t\t\t(:li \"Functions defined within the \"\n\t\t\t\t     ((:span :class \"object-keyword\")\":functions\")\n                                     \" section of a GendL object definition. As with toplevel \"\n                                     (:span :class \"macro\" \"defun\")\n                                     \" functions, variables may be passed into \"\n                                     (:span :class \"object-keyword\" \":functions\")\n                                     \" as arguments and the function bodies may access\nglobal data. But additionally, \"\n                                     (:span :class \"object-keyword\" \":functions\")\n\n                                     \" can also access any other \"(:em (:b \"messages\"))\" defined within\nthe same GendL object type where they occur. \" (:em (:b \"Messages\"))\" can be any of \"\n                                     (:ul\n                                      (:li (:span :class \"object-keyword\" \":input-slots\"))\n                                      (:li (:span :class \"object-keyword\" \":computed-slots\"))\n                                      (:li (:span :class \"object-keyword\" \":objects\")))\n                                     \"... and other \"\n                                     (:span :class \"object-keyword\" \":functions\")\n                                     \" also count as messages!\n\nWhen you want to access the value of other mesages within the same object instance, you can use the \"\n                                     (:span :class \"macro\" \"the\") (:em \" referencing macro\")\".\")))\n\t\t       (:h3 \"Named functions\")\n\t\t       (:p \"We have already encountered a number of Named Functions, for example\"\n\t\t\t   (:ul (:li (:span :class \"function\" \"+\")\" which returns the sum of\nthe numbers supplied as arguments\")\n\t\t\t\t(:li (:span :class \"function\" \"length\")\" which returns\nthe length of a list supplied as an argument\")))\n                       (:p \"Named functions defined using the \"\n                           (:span :class \"macro\" \"defun\")\n                           \" macro use \"\n\t\t\t   (:em (:b \"Prefix Notation\")) \". In other words, the function\nname is specified first, followed by its arguments. Named functions can accept \"\n\t\t\t   (:ul (:li \"Specific standard arguments, which immediately follow\nthe function name\")\n\t\t\t\t(:li \"Specific optional arguments, identified using \"\n\t\t\t\t     (:em (:b \"&optional\")) \" in the argument list\")\n\t\t\t\t(:li \"Specific keyword arguments, identified using \"\n\t\t\t\t     (:em (:b \"&key\")) \" in the argument list\")\n\t\t\t\t(:li \"Any number of remaining arguments, identified using \"\n\t\t\t\t     (:em (:b \"&rest\")) \" in the argument list\"))\n\t\t\t   \"We'll discuss standard, \"\n\t\t\t   (:em (:b \"&optional\")) \" and \"\n\t\t\t   (:em (:b \"&keyword\")) \" arguments in this tutorial and come back to \"\n\t\t\t   (:em (:b \"&rest arguments\")) \" in a later tutorial\")\n\t\t       (:h4 \"Standard arguments\")\n\t\t       (:p \"Here we define two functions with one and two arguments respectively.\nIn the second function, the ordering of the arguments is what determines which input value ends\nup in which variable in the body of the function.\")\n\t\t       (str (repl-example (the repl-1)))\n\t\t       (:h4 \"Optional arguments\")\n\t\t       (:p \"The syntax for optional arguments is\"\n\t\t\t   (:ul (:li (:code \"defun function-name (&optional (arg1-name arg1-default) (arg2-name arg2-default))\"))\n\t\t\t\t(:li \"In principle there is no limit to the number of optional arguments you can specify\")\n\t\t\t\t(:li \"Optional arguments are order dependant as with Standard ones, so if \"\n                                     (:span :class \"general-keyword\" \"arg2\")\n                                     \" is to be specified, \"\n                                     (:span :class \"general-keyword\" \"arg1\")\n                                     \" must be specified as well.\")))\n\t\t       (str (repl-example (the repl-2)))\n\t\t       (:p \"The first call to \"\n\n\t\t\t   ((:span :class \"function\")\"kinetic-energy\")\n                           \" passes in no values for the arguments and so it ends up using both default optional values.\nThe second call uses a supplied value for \"\n\t\t\t   ((:span :class \"slot\") \"mass\")\" but the default value for \"\n\t\t\t   ((:span :class \"slot\") \"velocity\")\". And the third call to \"\n\t\t\t   ((:span :class \"function\") \"kinetic-energy\")\" uses supplied values for \"\n\t\t\t   ((:span :class \"slot\") \"mass\")\" and \"\n\t\t\t   ((:span :class \"slot\")\"velocity\")\n                           \". Note that when defined in this way, in order to used a specified \"\n\t\t\t   ((:span :class \"slot\") \"velocity\") \", then \"\n\t\t\t   ((:span :class \"slot\") \"mass\")\" must be supplied, even if given simply \nas its default value\")\n\n\t\t\t    \n\t\t       (:h4 \"Keyword arguments\")\t      \n\t\t       (:p \"The syntax for keyword arguments is\"\n\t\t\t   (:ul (:li (:code \"defun function-name (&key (arg1-key arg1-default) (arg2-key arg2-deefault))\"))\n\t\t\t\t(:li \"As with Optional arguments, there is no limit to the number of\nkeyword arguments you can specify\")\n                                (:li \"Contrasted with Standard and Optional arguments, you can call a function with\nKeyword arguments with those argument values specified in any order (because each one is identified explicitly\nby a keyword symbol in the definition of the function. This is a significant advantage over Optional and Standard\narguments, especially when you want to extend a function to accept new arguments without breaking existing code\nwhich is calling it.\")\n\t\t\t        (:li \"As with Optional arguments, you only need to specify the keyword arguments you want to use\nwhen calling the function, and any arguments which you do not include in the call will take on their default values when\nthe body of the function is being evaluated.\")))\n\t\t       (str (repl-example (the repl-3)))\n\t\t       (:p \"Above we can see how the order-dependency is removed\")\n\n\t\t       (:p \"Some general recomendations and observations:\"\n\t\t\t   (:ul (:li \"If there is only one argument then it's reasonable to use a Standard argument\")\n\t\t\t\t(:li \"Optional arguments will be easy to work with if there is only one of\nthem, a bit less easy if there are two, and will start becoming\nunwieldy to work with if you use more than 2 Optional\narguments.\n\nAdditionally, thought needs to be given to the order in\nwhich they are defined to avoid having to specify optional arguments\njust to occupy a space in the argument list (e.g. if you have two optional arguments,\nlist first the one which is more likely to be passed in as a non-default value in calls to that function.\")\n\t\t\t\t(:li \"Keyword arguments work well when the function has more than 1 argument, and help with readability\")\n\t\t\t\t(:li \"Optional and Keyword arguments are relatively 'expensive' at runtime\ncompared with Standard arguments, so particularly with Keyword\narguments you may be trading Convenience for Speed in some cases (such cases can be shaken out\nwith Runtime Profiling)\")))\n                        \n\t\t       (:h3 \"GendL object \"((:span :class \"object-keyword\")\":functions\"))\n\t\t       (:p \"A GendL object function is defined in the \"\n\t\t\t   ((:span :class \"object-keyword\")\":functions\")\" section of an object definition made with the \"\n                           (:span :class \"macro\" \"define-object\")\n                           \" macro. The function only \\\"exists\\\" in the context of the object\ndefinition itself, but it can reference all of the slots within the\nobject directly, rather than you having to pass in values as\narguments. But of course it can also accept passed-in arguments. The\nargument syntax is identical to that for Named Functions (this style\nof argument list is called a \\\"lambda list\\\". The Named\nFunction \"\n\t\t\t   ((:span :class \"function\")\"kinetic-energy\")\" shown above,\nwhen defined as a GendL object function, may look like this:\")))\n\t\t     ((:div :class \"main-page-container\")\n\t\t      ((:div :class \"main-page-item\")\n\n\t\t       (str (code-example (the code-1))))\n\t\t      (:div :class \"main-page-item\"\n\t\t\t    (str (repl-example (the repl-4)))))\n\t\t     (:div :class \"grid-container-2-650px\"\n\t\t\t   (:div :class \"grid-item\"\n\t\t\t         (:p \"Some points to note from the above example\"\n\t\t\t             (:ul (:li \"The \"\n\t\t\t\t               (:span :class \"object-keyword\" \":function\")\" \"\n\t\t\t\t               (:span :class \"function\" \"kinetic-energy-1\")\" has no arguments but it references the \"\n\t\t\t\t               (:span :class \"object-keyword\" \":computed-slots\")\" \"\n\t\t\t\t               (:span :class \"slot\" \"mass\")\" and \"\n\t\t\t\t               (:span :class \"slot\" \"velocity\")\" directly using the \"\n\t\t\t\t               (:span :class \"macro\" \"the\")\" macro\")\n\t\t\t\t          (:li \"The \"\n\n\t\t\t\t               (:span :class \"object-keyword\" \":function\") \" \"\n\t\t\t\t               (:span :class \"function\" \"kinetic-energy-2\")\n                                               \" defines keyword arguments for \"\n\t\t\t\t               (:span :class \"slot\" \"mass\")\" and \"\n\t\t\t\t               (:span :class \"slot\" \"veocity\")\n                                               \" and sets their default values to the values of the \"\n\t\t\t\t               (:span :class \"object-keyword\" \":computed-slots\")\" \"\n\t\t\t\t               (:span :class \"slot\" \"mass\")\" and \"\n\t\t\t\t               (:span :class \"slot\" \"velocity\") \".\")\n\t\t\t\t          (:li \"When a \"\n\t\t\t\t               (:span :class \"object-keyword\" \":function\")\" is called without arguments, the \"\n\t\t\t\t               (:span :class \"macro\" \"the\")\" referencing macro is still used but the \"\n\t\t\t\t               (:span :class \"object-keyword\" \":function\")\" does not need enclosing in parentheses (so\nsuch a reference would look just like a reference to a \"\n\n                                               (:span :class \"object-keyword\" \":computed-slot\") \" (see \"\n                                               (:span :class \"object-keyword\" \":computed-slots\") \" above)\")\n\n\t\t\t\t          (:li \"When a \"\n                                               (:span :class \"object-keyword\" \":function\")\" is called with arguments, whilst the \"\n\t\t\t\t               (:span :class \"macro\" \"the\")\"\nreferencing macro is again used, you must wrap the function name and\narguments with parentheses, similar to calling a normal Named function\nwith the only difference being an outer wrapping referencing macro e.g. \"\n                                               (:code \"(the ... )\")\n                                               \" (see the \"\n\t\t\t\t               (:span :class \"object-keyword\"\":computed-slots\")\" \"\n\t\t\t\t               (:span :class \"slot\" \"ke-3\")\", \"\n\t\t\t\t               (:span :class \"slot\" \"ke-4\")\" and \"\n\t\t\t\t               (:span :class \"slot\" \"ke-5\"))\n\t\t\t\t          (:li \"Compare and contrast these \"\n\t\t\t\t               (:span :class \"object-keyword\" \":computed-slots\")\" with the way in which the \"\n\t\t\t\t               (:span :class \"function\" \"kinetic-energy\")\" Named Function is used for \"\n\t\t\t\t               (:span :class \"slot\" \"ke-6\")))))))\n\t\t\t\n\t\t    (:div :class \"main-page-item\"\n\t\t\t  (:h2 \"Resources\")\n\t\t\t  (str (the resource-links))))))))\n\n\n\n",
    "metadata": {
      "source": "gornschool-training/t2/source/functions-and-functions.lisp",
      "file_name": "functions-and-functions.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 6,
      "section": "function-example"
    },
    "id": "6315acbf0c85fe28df9d0adde6bc793f"
  },
  {
    "text": "(in-package :training-2)\n\n",
    "metadata": {
      "source": "gornschool-training/t2/source/more-on-lists.lisp",
      "file_name": "more-on-lists.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 0,
      "section": "header"
    },
    "id": "51f8c8e62a054c5b5065e5c048f30fbb"
  },
  {
    "text": "(define-object more-on-lists (base-training-sheet)\n  :input-slots\n  (prior-tutorial-url)\n\n  :computed-slots\n  ((index-words (list \"length\" \"member\" \"position\" \"subseq\" \"remove\" \"delete\" \"distructive functions\"\n\t\t      \"remove-duplicates\" \"flatten\" \"reverse\" \"nreverse\" \"sort\" \"safe-sort\"))\n\n   (repl-1 (list (list :command \"(setq a (list 1 2 3))\"\n\t\t       :output \"(1 2 3)\")\n\t\t (list :command \"(length a)\"\n\t\t       :output 3)\n\t\t (list :command \"(setq b (list 1 2 (list 3 4 5 6)))\"\n\t\t       :output \"(1 2 (3 4 5 6))\")\n\t\t (list :command \"(length b)\"\n\t\t       :output 3)))\n   (repl-2 (list (list :command \"(member 2 a)\"\n\t\t       :output \"(2 3)\")\n\t\t (list :command \"(member 4 a)\"\n\t\t       :output \"NIL\")))\n   (repl-3 (list (list :command \"(setq c (list \\\"a\\\" \\\"b\\\" \\\"c\\\"))\"\n\t\t       :output \"(\\\"a\\\" \\\"b\\\" \\\"c\\\")\")\n\t\t (list :command \"(member \\\"a\\\" c)\"\n\t\t       :output \"NIL\")\n\t\t (list :command \"(member \\\"a\\\" c :test 'equal)\"\n\t\t       :output \"(\\\"a\\\" \\\"b\\\" \\\"c\\\")\")))\n\n   (repl-4 (list (list :command \"(position 2 a)\"\n\t\t       :output 1)\n\t\t (list :command \"(position \\\"b\\\" c)\"\n\t\t       :output \"NIL\")\n\t\t (list :command \"(position \\\"b\\\" c :test 'equal)\"\n\t\t       :output 2)))\n\n   (repl-5 (list (list :command \"(setq lis (list 1 2 3 \\\"a\\\" \\\"B\\\" (list 1 2 3)))\"\n\t\t       :output \"(1 2 3 \\\"a\\\" \\\"B\\\" (1 2 3))\")\n\t\t (list :command \"(subseq lis 2)\"\n\t\t       :output \"(3 \\\"a\\\" \\\"B\\\" (1 2 3))\")\n\t\t (list :command \"(subseq lis 2 4)\"\n\t\t       :output \"(3 \\\"a\\\")\")))\n\n   (repl-6 (list (list :command \"(setq rm (list 1 2 3 4 3 4 5 6 4 5 4 5 3 1))\"\n\t\t       :output \"(1 2 3 4 3 4 5 6 4 5 4 5 3 1)\")\n\t\t (list :command \"(remove 3 rm)\"\n\t\t       :output \"(1 2 4 4 5 6 4 5 4 5 1)\")\n\t\t (list :command \"(remove 3 rm :count 2)\"\n\t\t       :output \"(1 2 4 4 5 6 4 5 4 5 3 1)\")\n\t\t (list :command \"(remove 3 rm :start 3)\"\n\t\t       :output \"(1 2 3 4 4 5 6 4 5 4 5 1)\")\n\t\t (list :command \"(remove 3 rm :start 3 :end 6)\"\n\t\t       :output \"(1 2 3 4 4 5 6 4 5 4 5 3 1)\")\n\t\t (list :command \"(setq rm1 (list (list 1 2) (list 3 4) (list 1 3)))\"\n\t\t       :output \"((1 2) (3 4) (1 3))\")\n\t\t (list :command \"(remove (list 3 4) rm1 :test 'equal)\"\n\t\t       :output \"((1 2) (1 3))\")))\n   \n   (repl-7 (list (list :command \"rm1\"\n\t\t       :output \"((1 2) (3 4) (1 3))\")\n\t\t (list :command \"(delete (list 3 4) rm1 :test 'equal)\"\n\t\t       :output \"((1 2) (1 3))\")\n\t\t (list :command \"rm1\"\n\t\t       :output \"((1 2) (1 3))\")))\n\n   (repl-8 (list (list :command \"(setq rm (list 1 2 3 4 3 4 5 6 4 5 4 5 3 1))\"\n\t\t :output \"(1 2 3 4 3 4 5 6 4 5 4 5 3 1)\")\n\t   (list :command \"(remove-duplicates rm)\"\n\t\t :output \"(2 6 4 5 3 1)\")\n\t   (list :command \"(setq rm (list \\\"a\\\" \\\"b\\\" \\\"c\\\" \\\"a\\\" \\\"A\\\"))\"\n\t\t :output \"(\\\"a\\\" \\\"b\\\" \\\"c\\\" \\\"a\\\" \\\"A\\\")\")\n\t   (list :command \"(remove-duplicates rm)\"\n\t\t :output \"(\\\"a\\\" \\\"b\\\" \\\"c\\\" \\\"a\\\" \\\"A\\\")\")\n\t   (list :command \"(remove-duplicates rm :test 'equal)\"\n\t\t :output \"(\\\"b\\\" \\\"c\\\" \\\"a\\\" \\\"A\\\")\")\n\t   (list :command \"(remove-duplicates rm :test 'equalp)\"\n\t\t :output \"(\\\"b\\\" \\\"c\\\" \\\"A\\\")\")))\n\t   \n   (repl-9 (list (list :command \"(setq lis (list 1 2 3 (list 1 4 5) (list \\\"a\\\" \\\"b\\\") (list :a 1 :b 2)))\"\n\t\t       :output \"(1 2 3 1 4 5 \\\"a\\\" \\\"b\\\" :A 1 :B 2)\")\n\t\t (list :command \"(flatten lis)\"\n\t\t       :output \"(1 2 3 1 4 5 \\\"a\\\" \\\"b\\\" :A 1 :B 2)\")\n\t\t (list :command \"(setq lis (list 1 2 3 nil (list 1 4 5) (list \\\"a\\\" \\\"b\\\") nil (list :a 1 :b 2)))\"\n\t\t       :output \"(1 2 3 1 nil 4 5 \\\"a\\\" \\\"b\\\" nil :A 1 :B 2)\")\n\t\t (list :command \"(flatten lis)\"\n\t\t       :output \"(1 2 3 1 4 5 \\\"a\\\" \\\"b\\\" :A 1 :B 2)\")))\n\n   (repl-10 (list (list :command \"(setq a (list 1 2 3 4 5))\"\n\t\t\t:output \"(1 2 3 4 5)\")\n\t\t  (list :command \"(reverse a)\"\n\t\t\t:output \"(5 4 3 2 1)\")\n\t\t  (list :command \"a\"\n\t\t\t:output \"(1 2 3 4 5)\")\n\t\t  (list :command \"(nreverse a)\"\n\t\t\t:output \"(5 4 3 2 1)\")\n\t\t  (list :command \"a\"\n\t\t\t:output \"(1)\")))\n\n   (repl-11 (list (list :command \"(setq a (list 1 3 2 5 4))\"\n\t\t\t:output \"(1 3 2 5 4)\")\n\t\t  (list :command \"(setq b (list 1 3 2 5 4)\"\n\t\t\t:output \"(1 3 2 5 4)\")\n\t\t  (list :command \"(sort a '<)\"\n\t\t\t:output \"(1 2 3 4 5)\")\n\t\t  (list :command \"a\"\n\t\t\t:output \"(1 2 3 4 5)\")\n\t\t  (list :command \"(safe-sort b '<)\"\n\t\t\t:output \"(1 2 3 4 5)\")\n\t\t  (list :command \"b\"\n\t\t\t:output \"(1 3 2 5 4)\")))\n\n   (repl-12 (list (list :command \"(setq a (list (list 2 4) (list 1 6) (list 4 3) (list 3 5)))\"\n\t\t\t:output \"((2 4) (1 6) (4 3) (3 5))\")\n\t\t  (list :command \"(safe-sort a '< :key 'first)\"\n\t\t\t:output \"((1 6) (2 4) (3 5) (4 3))\")))\n\t\t  \n   \n   (body-content (with-cl-who-string()\n\t\t   (:p \"In the earlier tutorial on \" ((:a :href (the prior-tutorial-url)) \"Lists\")\n\t\t       \" we covered Creating Lists, Adding to Lists, Accessing elements\nwithin a List, and treating Lists as Property Lists (Plists). In this\ntutorial we will continue to look at working with lists.\")\n\t\t   (:h3 \"List Properties\")\n\t\t   (:p \"Common Lisp provides a number of functions for obtaining properties of lists\"\n\t\t       (:ul ((:div :class \"grid-container-2\")\n\t\t\t     ((:div :class \"main-page-item\")\n\t\t\t      (:li (:span :class \"function\" \"length\") \" takes a \"\n\t\t\t\t   (:em \"list\") \" as its argument and returns an \"\n\t\t\t\t   (:em \"integer\") \" corresponding to the number of elements within that list. \")\n\t\t\t      \"Note that if any of the elements of the list passed to \"\n\t\t\t      (:span :class \"function\" \"length\")\n\t\t\t      \" is\nitself a list or other aggregate data type, it still counts as a single element for the purposes of \"\n\t\t\t      (:span :class \"function\" \"length\")\n\t\t\t      \".\")\n\t\t\t     ((:div :class \"main-page-item\")\n\t\t\t      (str (repl-example (the repl-1))))\n\t\t\t     ((:div :class \"main-page-item\")\n\t\t\t      (:li ((:span :class \"function\")\"member\")\" takes an \"\n\t\t\t\t   (:em \"object\") \" and \"\n\t\t\t\t   (:em \"list\") \" as arguments and returns all the values in the list starting with the first element matching object.\")\n\t\t\t      \"If there is no match the function returns nil\")\n\t\t\t     ((:div :class \"main-page-item\")\n\t\t\t      (str (repl-example (the repl-2))))\n\t\t\t     ((:div :class \"main-page-item\")\n\t\t\t      ((:span :class \"function\") \"member\") \" uses the equality test \"\n\t\t\t      ((:span :class \"function\") \"eql\")\" as the default test. An alternative test may be provided using the \"\n\t\t\t      ((:span :class \"object-keyword\") \":test\") \" keyword input. Whatever function is specified for\"\n\t\t\t      ((:span :class \"object-keyword\") \":test\") \" needs to be \"(:em (:b \"quoted\")))\n\t\t\t     ((:div :class \"main-page-item\")\t\n\t\t\t      (str (repl-example (the repl-3))))\n\t\t\t     ((:div :class \"main-page-item\")\n\t\t\t      (:li ((:span :class \"function\")\"position\")\" takes an \"\n\t\t\t\t   (:em \"object\")\" and a \"\n\t\t\t\t   (:em \"list\")\" as inputs and returns the index number of the first object in the list matching object.\")\n\t\t\t      \"The index number is zero-based. Again, the default test for equality is \"\n\t\t\t      ((:span :class \"function\") \"eql\")\" but you can override this by specifying a \"\n\t\t\t      ((:span :class \"object-keyword\")\":test\")\" keyword input\")\n\t\t\t     ((:div :class \"main-page-item\")\n\t\t\t      (str (repl-example (the repl-4)))))))\n\t\t\t\n\t\t   (:h3 \"List Processing\")\n\t\t\t\n\t\t   (:p \"There are a number of Common Lisp functions which allow us to process lists in various ways,\nsuch as returning part of a list, returning a new list with elements removed, and re-ordering or sorting a list\"\n\t\t       (:ul ((:div :class \"grid-container-2\")\n\t\t\t     ((:div :class \"main-page-item\")\n\t\t\t      (:li ((:span :class \"function\")\"subseq\")\" treats a list as a sequence. Its takes a \"\n\t\t\t\t   (:em \"list\")\" and \"\n\t\t\t\t   (:em \"start\")\" position and optionally an \"\n\t\t\t\t   (:em \"end\")\" position, returning a list comprising the elements from and including the start position up to but excluding the end position. \"\n\t\t\t\t   \"Positions are zero-based. Note that if either \"\n\t\t\t\t   (:em \"start\")\" or \"\n\t\t\t\t   (:em \"end\")\" is a higher index than the maximum index number in the list, then an error will be generated\"))\n\t\t\t     ((:div :class \"main-page-item\")\n\t\t\t      (str (repl-example (the repl-5))))\n\t\t\t     ((:div :class \"main-page-item\")\n\t\t\t      (:li ((:span :class \"function\")\"remove\")\" takes an \"\n\t\t\t\t   (:em \"object\")\" and a \"\n\t\t\t\t   (:em \"list\")\" as inputs and returns the list with \"\n\t\t\t\t   (:em \"object\")\" removed from it. \"\n\t\t\t\t   \"By default the equality test is \"((:span :class \"function\")\"EQL\")\", but an alternative may be specified using the \"\n\t\t\t\t   ((:span :class \"object-keyword\")\":test\")\" keyword input. If \"\n\t\t\t\t   ((:span :class \"object-keyword\")\":start\")\" or \"\n\t\t\t\t   ((:span :class \"object-keyword\")\":end\")\" keywords are provided, only elements between those positions are tested for a match and removed. Finally if \"\n\t\t\t\t   ((:span :class \"object-keyword\")\":count\")\" is provided only the first \"\n\t\t\t\t   (:em \"count\")\" instances of \"(:em \"object\")\" are removed\"))\n\t\t\t     ((:div :class \"main-page-item\")\n\t\t\t      (str (repl-example (the repl-6))))\n\t\t\t     ((:div :class \"main-page-item\")\n\t\t\t      (:li ((:span :class \"function\")\"delete\")\" is identical to \"\n\t\t\t\t   ((:span :class \"function\")\"remove\")\" except it \"\n\t\t\t\t   (:em (:b \"modifies the input list\"))))\n\t\t\t     ((:div :class \"main-page-item\")\n\t\t\t      (str (repl-example (the repl-7))))\n\t\t\t     ((:div :class \"main-page-item\")\n\t\t\t      (:li ((:span :class \"function\")\"remove-duplicates\")\" removes any duplicate values from a list, where duplicate is tested by default using \"\n\t\t\t\t   ((:span :class \"function\") \"eql\")\". As with \"\n\t\t\t\t   ((:span :class \"function\") \"remove\")\", \"\n\t\t\t\t   ((:span :class \"object-keyword\") \":test\")\", \"\n\t\t\t\t   ((:span :class \"object-keyword\") \":start\")\" and \"\n\t\t\t\t   ((:span :class \"object-keyword\") \":end\")\" keyword inputs may be specified. \")\n\t\t\t      \"When duplicates are found, only the last occurrence of the duplicate is retained in the return value\")\n                                  \n\t\t\t     ((:div :class \"main-page-item\")\n\t\t\t      (str (repl-example (the repl-8))))\n\t\t\t     ((:div :class \"main-page-item\")\n\t\t\t      (:li ((:span :class \"function\") \"flatten\")\" (a GendL function, not included in standard Common Lisp) takes a \"\n\t\t\t\t   (:em \"list\")\" as input, which may comprise sub-lists, and returns a one dimensional list. Because nil is an empty list, any occurences of nil in a list passed to \"\n\t\t\t\t   ((:span :class \"function\")\"flatten\")\" will be removed\"))\n\t\t\t     ((:div :class \"main-page-item\")\n\t\t\t      (str (repl-example (the repl-9))))\n\t\t\t     ((:div :class \"main-page-item\")\n\t\t\t      (:li ((:span :class \"function\")\"reverse\")\" takes a \"\n\t\t\t\t   (:em \"list\")\" as input and returns a list but with the elements in the reverse order.\"\n\t\t\t\t   ((:span :class \"function\")\"nreverse\") \"is the destructive version of reverse, ie it may alter the supplied list\"))\n\t\t\t     ((:div :class \"main-page-item\")\n\t\t\t      (str (repl-example (the repl-10)))))))\n\t\t   (:h3 \"List Sorting\")\n\t\t   (:ul ((:div :class \"grid-container-2\")\n\t\t\t ((:div :class \"main-page-item\")\n\t\t\t  (:li ((:span :class \"function\")\"sort\")\" is a Common Lisp function which takes a \"\n\t\t\t       (:em \"List\")\" and a \"\n\t\t\t       (:em \"predicate\") \"as arguments and returns a list such that no 2 successive elements [x] and [y] returns false for (predicate x y) and true for (predicate y x)\")\n\t\t\t  (:p \"A significant downside of using \"\n\t\t\t      ((:span :class \"function\")\"sort\")\" is that it is distructive - it can modify the input list. GendL therefore defines a function \"\n\t\t\t      ((:span :class \"function\")\"safe-sort\")\" which mirrors \"\n\t\t\t      ((:span :class \"function\")\"sort\")\" in every respect apart from \"\n\t\t\t      (:em (:b \"it does not modify the input list\"))\". It is \"\n\t\t\t      (:em (:b \"strongly recomended\"))\" to use \"\n\t\t\t      ((:span :class \"function\")\"safe-sort\")\" for any list sorting\")\n\t\t\t  (:p \"An obvious but sometimes overlooked equirement for the input list is that for \"\n\t\t\t      ((:span :class \"function\")\"sort\")\" or \"\n\t\t\t      ((:span :class \"function\")\"safe-sort\")\" to be meaningful, the elements in the list must be of types which may be compared with the same predicate\"))\n\t\t\t ((:div :class \"main-page-item\")\n\t\t\t  (str (repl-example (the repl-11))))\n\t\t\t ((:div :class \"main-page-item\")\n\t\t\t  ((:span :class \"function\")\"sort\")\" and \"\n\t\t\t  ((:span :class \"function\")\"safe-sort\")\" both have a keyword input \"\n\t\t\t  ((:span :class \"object-keyword\")\":key\")\" which allows the element on which the sorting is to be performed to be identified. \"\n\t\t\t  ((:span :class \"object-keyword\")\":key\")\" is specified as a \"\n\t\t\t  (:em \"quoted\")\" function which is applied to each element in the input list and then the sort is applied to that return value\")\n\t\t\t (str (repl-example (the repl-12)))))\n\t\t\t    \n\t\t\t\n\t\t   ((:div :class \"main-page-item\")\n\t\t    (:h2 \"Resources\")\n\t\t    (str (the resource-links)))))))\n",
    "metadata": {
      "source": "gornschool-training/t2/source/more-on-lists.lisp",
      "file_name": "more-on-lists.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 0,
      "section": "more-on-lists"
    },
    "id": "51f8c8e62a054c5b5065e5c048f30fbb"
  },
  {
    "text": "(in-package :gdl-user)\n\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/truss-hint-4.lisp",
      "file_name": "truss-hint-4.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 0,
      "section": "header"
    },
    "id": "98910d0850cdc65c2cc924fa671ca9c0"
  },
  {
    "text": "(defun degrees-to-radians (degrees)\n  (div (* degrees pi) 180))\n\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/truss-hint-4.lisp",
      "file_name": "truss-hint-4.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 0,
      "section": "degrees-to-radians"
    },
    "id": "98910d0850cdc65c2cc924fa671ca9c0"
  },
  {
    "text": "(define-object truss (box)\n  :input-slots\n  ((truss-length 2000)\n   (truss-height 800)\n   (truss-angle nil)\n\n   (beam-width 50)\n   (beam-height 50)\n   (wall-thickness 3))\n\n  :computed-slots\n  ((length (the truss-length))\n   (height (cond ((the truss-height)(the truss-height))\n\t\t ((the truss-angle) (+ (* (half (the truss-length))\n\t\t\t\t\t  (tan (degrees-to-radians (the truss-angle))))\n\t\t\t\t       (the beam-height)))))\n   (width (the beam-width)))\n\t\t\t\t       \n  :objects\n  ((lower-beam :type 'beam\n\t       :beam-height (the beam-height)\n\t       :beam-width (the beam-width)\n\t       :beam-length (the truss-length)\n\t       :center (translate-along-vector (the (face-center :bottom))\n\t\t\t\t\t       (the (face-normal-vector :top))\n\t\t\t\t\t       (half (the beam-height))))\n   (vertical-beam :type 'beam\n\t\t  :beam-length (- (the height) (the beam-height))\n\t\t  :beam-height (the beam-height)\n\t\t  :beam-width (the beam-width)\n\t\t  :orientation (alignment :rear (the (face-normal-vector :top)))\n\t\t  :center (translate-along-vector (the lower-beam (face-center :top))\n\t\t\t\t\t\t  (the lower-beam (face-normal-vector :top))\n\t\t\t\t\t\t  (half (the-child beam-length))))\n   ;;(front-slope-beam :type 'beam)\n   ;;(rear-slope-beam :type 'beam))\n   ))\n\n\n\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/truss-hint-4.lisp",
      "file_name": "truss-hint-4.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 1,
      "section": "truss"
    },
    "id": "6e88d3987462c78dea03f9939b542557"
  },
  {
    "text": "(define-object beam (box)\n  :input-slots\n  ((beam-length 1000)\n   (beam-width 40)\n   (beam-height 50)\n   (wall-thickness 2)\n   (material-density 7800)\n   (tonne-rate 500))\n\n  :computed-slots\n  ((length (the beam-length))\n   (width (the beam-width))\n   (height (the beam-height))\n\n   (beam-volume (- (the outer volume) (the inner volume)))\n   (beam-mass (* (div (the beam-volume) 1000000000) (the material-density)))\n   (beam-cost (* (the tonne-rate) (div (the beam-mass) 1000)))\n   (beam-properties (list :volume-mm3 (the beam-volume)\n\t\t\t  :mass-kg (round-to-nearest (the beam-mass) 0.01)\n\t\t\t  :cost-gbp (round-to-nearest (the beam-cost) 0.01)\n\t\t\t  :length-mm (the beam-length)\n\t\t\t  :width-mm (the beam-width)\n\t\t\t  :height-mm (the beam-height)\n\t\t\t  :thickness-mm (the wall-thickness))))\n   \n  :objects\n  ((outer :type 'box\n\t  :length (the beam-length)\n\t  :width (the beam-width)\n\t  :height (the beam-height))\n\n   (inner :type 'box\n\t  :length (the beam-length)\n\t  :width (- (the beam-width) (twice (the wall-thickness)))\n\t  :height (- (the beam-height) (twice (the wall-thickness)))))\n  )\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/truss-hint-4.lisp",
      "file_name": "truss-hint-4.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 2,
      "section": "beam"
    },
    "id": "4380fbd02f169a8da876e489d676aaf7"
  },
  {
    "text": "(in-package :gdl-user)\n\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/wall-hint-7.lisp",
      "file_name": "wall-hint-7.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 0,
      "section": "header"
    },
    "id": "f5b989e3d46d3c1742bb3afb67e2bb69"
  },
  {
    "text": "(define-object wall(box)\n  :input-slots\n  ((brick-height 45)\n   (brick-length 180)\n   (brick-width 90)\n   (mortar-joint-width 10)\n   (wall-length 3700)\n   (wall-height 900))\n\n  :computed-slots\n  ((row-height (+ (the brick-height) (the mortar-joint-width)))\n   (number-of-rows (round-to-nearest (div (the wall-height) (the row-height)) 1))\n   (actual-wall-height (* (the row-height) (the number-of-rows)))\n   \n   ;; for the wall-length we need the number of full bricks\n   ;; if there are n full bricks then there will be (n-1) mortar joints\n   ;; so n*brick-length + n-1*mortar-joint-width = overall-length\n   ;; or n(brick-length + mortar-join-width) - mortar-joint-width = overall-length\n   ;; or n = (overall-length - mortar-joint-width)/(brick-length + mortar-joint-width)\n   (number-of-bricks (round-to-nearest (div (- (the wall-length) (the mortar-joint-width))\n\t\t\t\t\t    (+ (the brick-length) (the mortar-joint-width)))\n\t\t\t\t       1))\n   (actual-wall-length (+ (* (the number-of-bricks) (the brick-length))\n\t\t\t  (* (- (the number-of-bricks) 1) (the mortar-joint-width))))\n\n   ;; box inputs - gives the wall bounding box\n   (height (the actual-wall-height))\n   (width (the brick-width))\n   (length (the actual-wall-length))\n\n   (full-bricks (apply '+ (list-elements (the row) (the-element full-bricks))))\n   (half-bricks (apply '+ (list-elements (the row) (the-element half-bricks))))\n   (mortar-volume (apply '+ (list-elements (the row) (the-element mortar-volume))))\n   (mortar-density 2162)\n   (mortar-mass (* (the mortar-density) (div (the mortar-volume) 1000000000)))\n   )\n   \n     \n  :objects\n  ((row :type 'row\n     :sequence (:size (the number-of-rows))\n     :center (translate-along-vector (the (face-center :bottom))\n\t\t\t\t     (the (face-normal-vector :top))\n\t\t\t\t     (+ (half (the-child height))\n\t\t\t\t\t(* (the-child index) (the-child height))))\n     :height (+ (the brick-height) (the mortar-joint-width))\n     :full-bricks-per-row (the number-of-bricks)\n     :pass-down (brick-height\n\t\t brick-length\n\t\t brick-width\n\t\t mortar-joint-width\n\t\t length\n\t\t width))))\n\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/wall-hint-7.lisp",
      "file_name": "wall-hint-7.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 0,
      "section": "wall"
    },
    "id": "f5b989e3d46d3c1742bb3afb67e2bb69"
  },
  {
    "text": "(define-object row (box)\n  :input-slots\n  (full-bricks-per-row\n   brick-height\n   brick-length\n   brick-width\n   mortar-joint-width)\n\n  :computed-slots\n  ((full-brick-row? (or (zerop (the index)) (evenp (the index))))\n   (full-bricks (the bricks-and-mortar full-bricks))\n   (half-bricks (the bricks-and-mortar half-bricks))\n   (mortar-volume (+ (the bricks-and-mortar mortar-joint-volume)\n\t\t     (the mortar-bed volume))))\n\n  :objects\n  ((bricks-and-mortar :type 'bricks-and-mortar\n\t\t      :height (the brick-height)\n\t\t      :center (translate-along-vector (the mortar-bed (face-center :top))\n\t\t\t\t\t\t      (the mortar-bed (face-normal-vector :top))\n\t\t\t\t\t\t      (half (the-child height)))\n\t\t      :pass-down (width\n\t\t\t\t  length\n\t\t\t\t  full-brick-row?\n\t\t\t\t  brick-height\n\t\t\t\t  brick-length\n\t\t\t\t  brick-width\n\t\t\t\t  mortar-joint-width\n\t\t\t\t  full-bricks-per-row))\n   (mortar-bed :type 'box\n\t       :height (the mortar-joint-width)\n\t       :center (translate-along-vector (the (face-center :bottom))\n\t\t\t\t\t       (the (face-normal-vector :top))\n\t\t\t\t\t       (half (the-child height)))\n\t       :pass-down (width\n\t\t\t   length))))\n\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/wall-hint-7.lisp",
      "file_name": "wall-hint-7.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 1,
      "section": "row"
    },
    "id": "96fef7a49a94bb8e07b72cf500acda2a"
  },
  {
    "text": "(define-object bricks-and-mortar (box)\n  :input-slots\n  (full-brick-row?\n   full-bricks-per-row\n   brick-height\n   brick-length\n   brick-width\n   mortar-joint-width)\n\n  :computed-slots\n  ((first-full-brick-start-point (if (the full-brick-row?)\n\t\t\t\t     (the (face-center :front))\n\t\t\t\t     (the (mortar-joint 0) (face-center :rear))))\n   \n   (first-mortar-joint-start-point (if (the full-brick-row?)\n\t\t\t\t       (the (full-brick 0) (face-center :rear))\n\t\t\t\t       (the (half-brick 0) (face-center :rear))))\n\n   (number-of-full-bricks (if (the full-brick-row?)\n\t\t\t      (the full-bricks-per-row)\n\t\t\t      (- (the full-bricks-per-row) 1)))\n\n   (number-of-mortar-joints (if (the full-brick-row?)\n\t\t\t\t(- (the number-of-full-bricks) 1)\n\t\t\t\t(+ (the number-of-full-bricks) 1)))\n\n   ;; if it isn't a full brick row then there will be an extra joint because one\n   ;; full brick is replaced with 2 half bricks so without correcting the\n   ;; mortar-joint-width the ends of a full brick row and one starting and\n   ;; finishing with half bricks won't align. So we need to correct\n   ;; the mortar-joint-width\n   (corrected-joint-width (if (the full-brick-row?)\n\t\t\t\t     (the mortar-joint-width)\n\t\t\t\t     (let ((total-gap (* (- (the number-of-mortar-joints) 1)\n\t\t\t\t\t\t\t\t\t(the mortar-joint-width))))\n\t\t\t\t       (div total-gap (the number-of-mortar-joints)))))\n   ;; collating the output. We could do this analytically, but for this example we'll use the geometry\n   (full-bricks (length (list-elements (the full-brick))))\n   (half-bricks (length (list-elements (the half-brick))))\n   (mortar-joint-volume (apply '+ (list-elements (the mortar-joint)\n\t\t\t\t\t\t (the-element volume))))\n   )\n  \n  :functions\n  ((first-full-brick-center!\n    ()\n    (translate-along-vector (the first-full-brick-start-point)\n\t\t\t    (the (face-normal-vector :rear))\n\t\t\t    (half (the brick-length))))\n   \n   (other-full-brick-center!\n    (index)\n    ;; if its a full brick row, (full-brick 1) is positioned relative to (joint 0)\n    ;; if its a half brick row, (full-brick 1) is positioned relative to (joint 1)\n    (let ((ind (if (the full-brick-row?) (- index 1) index)))\n\t  (translate-along-vector (the (mortar-joint ind) (face-center :rear))\n\t\t\t\t  (the (face-normal-vector :rear))\n\t\t\t\t  (half (the brick-length)))))\n   \n    (first-joint-center!\n     ()\n     (translate-along-vector (the first-mortar-joint-start-point)\n\t\t\t     (the (face-normal-vector :rear))\n\t\t\t     (half (the corrected-joint-width))))\n   (other-joint-center!\n    (index)\n    ;; if its a full brick row, (joint 1) is positioned relative to (full-brick 1)\n    ;; if its a half brick row, (joint 1) is positioned relative to (full-brick 0)\n    (let ((ind (if (the full-brick-row?) index (- index 1))))\n      (translate-along-vector (the (full-brick ind) (face-center :rear))\n\t\t\t      (the (face-normal-vector :rear))\n\t\t\t      (half (the corrected-joint-width)))))\n\n    (first-half-brick-center!\n     ()\n     (translate-along-vector (the (face-center :front))\n\t\t\t     (the (face-normal-vector :rear))\n\t\t\t     (half (half (the brick-length)))))\n   \n   (last-half-brick-center!\n     ()\n     (translate-along-vector (theo (the mortar-joint last) (face-center :rear))\n\t\t\t     (the (face-normal-vector :rear))\n\t\t\t     (half (half (the brick-length))))))\n \t\t\t     \n  \n  :objects\n  ((full-brick :type 'box\n\t       :sequence (:size (the number-of-full-bricks))\n\t       :center (if (= (the-child index) 0)\n\t\t\t   (the first-full-brick-center!)\n\t\t\t   (the (other-full-brick-center! (the-child index))))\n\t       :length (the brick-length)\n\t       :height (the brick-height)\n\t       :width (the brick-width))\n\n   (half-brick :type 'box\n\t       :sequence (:size (if (the full-brick-row?) 0 2))\n\t       :center (if (= (the-child index) 0)\n\t\t\t   (the first-half-brick-center!)\n\t\t\t   (the last-half-brick-center!))\n\t       :length (half (the brick-length))\n\t       :height (the brick-height)\n\t       :width (the brick-width))\n\n   (mortar-joint :type 'box\n\t\t :sequence (:size (the number-of-mortar-joints))\n\t\t :center (if (= (the-child index) 0)\n\t\t\t     (the first-joint-center!)\n\t\t\t  (the (other-joint-center! (the-child index))))   \n\t\t :height (the brick-height)\n\t\t :width (the brick-width)\n\t\t :length (the corrected-joint-width))))\n\n\n\n\n\n\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/wall-hint-7.lisp",
      "file_name": "wall-hint-7.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 2,
      "section": "bricks-and-mortar"
    },
    "id": "65deb57d112fa310b78f7e0ddbefe3d5"
  },
  {
    "text": "(in-package :gdl-user)\n\n;; a basic customisation of the box object\n\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/my-box-1.lisp",
      "file_name": "my-box-1.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 0,
      "section": "header"
    },
    "id": "f2214835edbd970b0808a0ebbb6ff4b3"
  },
  {
    "text": "(define-object my-box-1 (box)\n  :input-slots\n  ((length 2)\n   (width 3)\n   (height 4)))\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/my-box-1.lisp",
      "file_name": "my-box-1.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 0,
      "section": "my-box-1"
    },
    "id": "f2214835edbd970b0808a0ebbb6ff4b3"
  },
  {
    "text": "(in-package :gdl-user)\n\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/iteration-and-mapping.lisp",
      "file_name": "iteration-and-mapping.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 0,
      "section": "header"
    },
    "id": "60bf521abbd62984514e5b3dec32732c"
  },
  {
    "text": "(defun make-integer-list (elements &key (start 0) (interval 1))\n  ;; build a list if integers a specified number of elements long\n  ;; by default it starts at zero and increments each element by 1, but these values may be ammended\n\n  (let ((result nil))\n    ;; we can use nreverse here for the return value, since while it is distructive\n    ;; result will never be used once the return value has been sent\n    (dotimes (e elements (nreverse result))\n      (if (= e 0)\n\t  (push start result)\n\t  (push (+ start (* e interval)) result)))))\n\n;; GDL-USER> (make-integer-list 5)\n;; (0 1 2 3 4)\n;; GDL-USER> (make-integer-list 5 :start 8)\n;; (8 9 10 11 12)\n;; GDL-USER> (make-integer-list 5 :start 8 :interval 2)\n;; (8 10 12 14 16)\n;; GDL-USER> (make-integer-list 5 :interval 2)\n;; (0 2 4 6 8)\n\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/iteration-and-mapping.lisp",
      "file_name": "iteration-and-mapping.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 0,
      "section": "make-integer-list"
    },
    "id": "60bf521abbd62984514e5b3dec32732c"
  },
  {
    "text": "(defun get-plist-keys-dolist (plist)\n  ;; get just keywords from a plist\n  ;; in contrast to make-integer-list we have not set result to nil explicitly\n  ;; if no value is assigned it will automatically be nil\n  (let ((result))\n    (dolist (p plist (nreverse result))\n    (when (keywordp p) (push p result)))))\n\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/iteration-and-mapping.lisp",
      "file_name": "iteration-and-mapping.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 1,
      "section": "get-plist-keys-dolist"
    },
    "id": "7e510cf2fae118541791669098c5f560"
  },
  {
    "text": "(defun get-plist-keys-mapcar (plist)\n  (remove nil (mapcar #'(lambda(a) (when (keywordp a) a)) plist)))\n\n;; GDL-USER> (setq plist (list :k1 1 :k2 2 :k3 3 :k4 4 :k5 5 :k6 6))\n;; (:K1 1 :K2 2 :K3 3 :K4 4 :K5 5 :K6 6)\n;; GDL-USER> (get-plist-keys-dolist plist)\n;; (:K1 :K2 :K3 :K4 :K5 :K6)\n;; GDL-USER> (get-plist-keys-mapcar plist)\n;; (:K1 :K2 :K3 :K4 :K5 :K6)\n\n\n\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/iteration-and-mapping.lisp",
      "file_name": "iteration-and-mapping.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 2,
      "section": "get-plist-keys-mapcar"
    },
    "id": "b0e5b6ab7ff4b56c1a420f7fcc5bf00d"
  },
  {
    "text": "(define-object mapping (base-object)\n  :computed-slots\n  ((integer-list (list 1 2 3 4 5 6))\n   (plist (list :k1 1 :k2 2 :k3 3 :k4 4 :k5 5 :k6 6))\n  \n\n   (add-2 (mapcar #'(lambda(i) (+ i 2)) (the integer-list)))\n   ;; (3 4 5 6 7 8)\n   \n   (keys-only (remove nil (mapcar #'(lambda(p) (when (keywordp p) p)) (the plist))))\n   ;; (:k1 :k2 :k3 :k4 :k5 :k6)\n\n   (values-only (remove nil (mapcar #'(lambda(p) (when (not (keywordp p)) p)) (the plist))))\n   ;; (1 2 3 4 5 6)\n\n   (spliced-plist (mapcan #'list (the keys-only) (the add-2)))\n   ;; (:K1 3 :K2 4 :K3 5 :K4 6 :K5 7 :K6 8)\n\n   (add-plists (mapcar #'(lambda(k) (+ (getf (the plist) k)\n\t\t\t\t       (getf (the spliced-plist) k)))\n\t\t       (the keys-only)))\n   ;; (4 6 8 10 12 14)\n\n   ;; slightly more efficient, making only a single 'the' call for each plist\n   (add-plists-2 (let ((plist-1 (the plist))\n\t\t       (plist-2 (the spliced-plist)))\n\t\t   (mapcar #'(lambda(k) (+ (getf plist-1 k)\n\t\t\t\t\t   (getf plist-2 k)))\n\t\t\t   (the keys-only))))\n   ;; (4 6 8 10 12 14)\n\n   (add-plists-3 (let ((result)\n\t\t       (plist-1 (the plist))\n\t\t       (plist-2 (the spliced-plist)))\n\t\t   (mapc #'(lambda(x) (when (keywordp x)\n\t\t\t\t\t(push (+ (getf plist-1 x) (or (getf plist-2 x) 0)) result)))\n\t\t\t plist-1)\n\t\t   (nreverse result)))\n\n    ;; (4 6 8 10 12 14)\n\t\t   \n   )\n  )\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/iteration-and-mapping.lisp",
      "file_name": "iteration-and-mapping.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 3,
      "section": "mapping"
    },
    "id": "7963da32f88ab10269c824c6de9ee448"
  },
  {
    "text": "   \n(in-package :gdl-user)\n\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/equality.lisp",
      "file_name": "equality.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 0,
      "section": "header"
    },
    "id": "1c3739674e01df5dfd6b66a13e265cc6"
  },
  {
    "text": "(define-object equality (base-object)\n\n  :input-slots\n  (\n   )\n  \n  :computed-slots\n  ((eq-1 (eq 1 1))                                 ;;; T\n   (eq-2 (eq \\#c \\#c))                             ;;; T\n   (eq-3 (eq 1 1.0))                               ;;; NIL\n   (eq-4 (eq 1.0 1.0))                             ;;; NIL\n   (eq-4 (eq \"a\" \"a\"))                             ;;; NIL\n   (eq-6 (eq \"A\" \"a\"))                             ;;; NIL\n   (eq-7 (eq (list 1 \"a\") (list 1 \"a\")))           ;;; NIL\n   (eq-8 (eq (list 1 \"A\") (list 1.0 \"a\")))         ;;; NIL\n\n   (eql-1 (eql 1 1))                               ;;; T\n   (eql-2 (eql \\#c \\#c))                           ;;; T\n   (eql-3 (eql 1 1.0))                             ;;; NIL\n   (eql-4 (eql 1.0 1.0))                           ;;; T\n   (eql-4 (eql \"a\" \"a\"))                           ;;; NIL\n   (eql-6 (eql \"A\" \"a\"))                           ;;; NIL\n   (eql-7 (eql (list 1 \"a\") (list 1 \"a\")))         ;;; NIL\n   (eql-8 (eql (list 1 \"A\") (list 1.0 \"a\")))       ;;; NIL\n\n   (equal-1 (equal 1 1))                           ;;; T\n   (equal-2 (equal \\#c \\#c))                       ;;; T\n   (equal-3 (equal 1 1.0))                         ;;; T\n   (equal-4 (equal 1.0 1.0))                       ;;; T\n   (equal-4 (equal \"a\" \"a\"))                       ;;; T\n   (equal-6 (equal \"A\" \"a\"))                       ;;; NIL\n   (equal-7 (equal (list 1 \"a\") (list 1 \"a\")))     ;;; T\n   (equal-8 (equal (list 1 \"A\") (list 1.0 \"a\")))   ;;;NIL\n\n   (equalp-1 (equalp 1 1))                         ;;; T\n   (equalp-2 (equalp \\#c \\#c))                     ;;; T\n   (equalp-3 (equalp 1 1.0))                       ;;; T\n   (equalp-4 (equalp 1.0 1.0))                     ;;; T\n   (equalp-4 (equalp \"a\" \"a\"))                     ;;; T\n   (equalp-6 (equalp \"A\" \"a\"))                     ;;; T\n   (equalp-7 (equalp (list 1 \"a\") (list 1 \"a\")))   ;;; T\n   (equalp-8 (equalp (list 1 \"A\") (list 1.0 \"a\"))) ;;; T\n   \n\t \n   (odd? (oddp 7))\t       ;;; will return T, requires an integer\n   (even? (evenp 2))\t       ;;; will return T\n   (zero? (zerop 0.0))\t       ;;; will return T\n   (positive? (plusp 190.445)) ;;; will return T\n   (negative? (minusp -0.223)) ;;; will return T\t \n\n\n\n   ;; Mathematical expressions and boolean operators\n   \n   ;; Numeric comparison\n   (less-than? (< 45 33))                    ;;; will return nil as 45 is not less than 33\n   (less-than-or-equal? (<= 12 32))          ;;; will return T\n   (equal-to (= 1 1.0))\t\t             ;;; will return T\n   (greater? (> 100 5))                      ;;; will return T as 100 is compared to 5\n   (greater-or-equal? (>= 1.000 1.0))        ;;; will return T\n   (not-equal-1 (/= 1.0 2.0))\t             ;;; will return T\n   ;; or\n   (not-equal-2 (not (= 1.0 2.0)))           ;;; will return T\n\n   (multi-greater-1? (> 4 3 2))              ;;; will return T\n   ;; which is equivalent to\n   (multi-greater-1? (and (> 4 3) (> 3 2)))  ;;; will return T\n\n   ;; for floats, because of rounding better to use near-to? for rather than =\n   (near-to-1 (near-to? 1 1.1)) ;;; will return nil as tolerance is defined parameter *ZERO-EPSILON* (0.001)\n   (near-to-2 (near-to? 1 1.1 0.5)) ;;; will return T as last 0.5 is the tolerance\n\n   ;; similarly, rather than zerop, use near-zero?\n   (zero-1 (near-zero? 0.0001)) ;;; retuns T as the tolerance is *ZERO-EPSILON* (0.001)\n   \n   \n   \n   \n   \n   (string-equal-1? (string= \"text\" \"text\"))       ;;; will return T\n   (string-equal-2? (string-equal \"text\" \"text\"))  ;;; will return T\n  \n   (string-equal-3? (string= \"text\" \"TEXT\"))       ;;; will return NIL\n   (string-equal-4? (string-equal \"text\" \"TEXT\"))  ;;; will return T\n\n   (string-equal-5? (string= \"text\" \"test\" :start1 0 :end1 2 :start2 0 :end2 2))       ;;; will return T\n   (string-equal-5? (string-equal \"Text\" \"test\" :start1 0 :end1 2 :start2 0 :end2 2))  ;;; will return T\n   )\n  )\n   \n\n  \n   \n   \n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/equality.lisp",
      "file_name": "equality.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 0,
      "section": "equality"
    },
    "id": "1c3739674e01df5dfd6b66a13e265cc6"
  },
  {
    "text": "(in-package :gdl-user)\n\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/building-hint-5.lisp",
      "file_name": "building-hint-5.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 0,
      "section": "header"
    },
    "id": "d932f99969e3d36f80aaf1dc39b0c9a5"
  },
  {
    "text": "(define-object building (box)\n  :input-slots\n  ((nominal-height 3000)\n   (nominal-width 3000)\n   (nominal-length 4000)\n   (brick-height 45)\n   (brick-length 180)\n   (brick-width 90)\n   (mortar-joint-width 10)\n   (truss-angle 30)\n   (beam-width 40)\n   (beam-height 50)\n   (wall-thickness 3)\n   (material-density 7800)\n   (roof-overhang 50)\n   (cladding-thickness 10)\n   (max-beam-spacing 1500))\n\n  :computed-slots\n  ((length (the left-wall length))\n   (width (the rear-wall length))\n   (height (+ (the left-wall height) (the (roof-truss 0) height)))\n\n   (number-of-roof-trusses (let ((trusses (ceiling (the left-wall length) 1500)))\n\t\t\t     (max trusses 2)))\n\n   (truss-spacing (div (- (the left-wall length) (the beam-width))\n\t\t       (- (the number-of-roof-trusses) 1)))\n   (truss-offsets (let ((res nil))\n\t\t    (dotimes (n (the number-of-roof-trusses) (nreverse res))\n\t\t      (push (+ (half (the beam-width))\n\t\t\t       (* n (the truss-spacing))) res))))\n\n   (roof-length (+ (the left-wall length) (twice (the roof-overhang))))\n   (roof-width (the cladding-thickness))\n   (roof-height (let ((apex (the (roof-truss 0) apex-point))\n\t\t      (gutter (the (roof-truss 0) front-gutter-point)))\n\t\t  (+ (3d-distance apex gutter) (the roof-overhang))))\n\n   ;; building properties\n   (walls (remove nil (mapcar #'(lambda(a) (when (typep a 'wall) a)) (the children))))\n   (full-bricks (apply '+ (mapsend (the walls) :full-bricks)))\n   (half-bricks (apply '+ (mapsend (the walls) :half-bricks)))\n   (mortar-volume (apply '+ (mapsend (the walls) :mortar-volume)))\n   (cladding-dimensions (list :length (the roof-length)\n\t\t\t      :width (the roof-height)))\n   (beam-properties (the (roof-truss 0) beam-properties))\n   (beam-qty-by-size (let ((res nil))\n\t\t       (dolist (plis (the beam-properties) )\n\t\t\t (let* ((trusses (the number-of-roof-trusses))\n\t\t\t\t(l (getf plis :length-mm))\n\t\t\t\t(p (position l res :key #'(lambda(a) (getf a :length-mm))))\n\t\t\t\t(qty (when p (getf (nth p res) :qty))))\n\t\t\t   (if p (setf (getf (nth p res) :qty) (+ qty trusses))\n\t\t\t       (setq res (append (list (list :length-mm l :qty trusses)) res)))))\n\t\t       (safe-sort res '< :key #'(lambda(a) (getf a :length-mm)))))\n\t\t       \n\n   (roof-truss-mass (* (apply '+ (mapcar #'(lambda(a) (getf a :mass-kg))\n\t\t\t\t\t (the beam-properties)))\n\t\t       (the number-of-roof-trusses)))\n\n   (building-materials (list :full-bricks (the full-bricks)\n\t\t\t     :half-bricks (the half-bricks)\n\t\t\t     :mortar-volume-m3 (div (the mortar-volume) 1000000000)\n\t\t\t     :beams (the beam-qty-by-size)\n\t\t\t     :roof-cladding (append (the cladding-dimensions) (list :qty 2))))\n   \n\t\t\n   )\n\n  :functions\n  ((get-roof-mid-point! (first-gutter last-gutter last-index)\n\t\t       (let*((mid-gutter (midpoint first-gutter last-gutter))\n\t\t\t     (first-apex (the (roof-truss 0) apex-point))\n\t\t\t     (last-apex (the (roof-truss last-index) apex-point))\n\t\t\t     (mid-apex (midpoint first-apex last-apex))\n\t\t\t     (vec (subtract-vectors mid-gutter mid-apex))\n\t\t\t     (mid-edge (translate-along-vector mid-gutter vec (the roof-overhang))))\n\t\t\t (midpoint mid-apex mid-edge))) )\n  \n  :objects\n  ((left-wall :type 'wall\n\t      :pass-down (brick-height\n\t\t\t  brick-length\n\t\t\t  brick-width\n\t\t\t  mortar-joint-width)\n\t      :center (translate-along-vector\n\t\t       (translate-along-vector (the (edge-center :bottom :left))\n\t\t\t\t\t       (the (face-normal-vector :right))\n\t\t\t\t\t       (half (the-child width)))\n\t\t       (the (face-normal-vector :top))\n\t\t       (half (the-child height)))\n\t      :wall-length (the nominal-length)\n\t      :wall-height (the nominal-height))\n\n   (right-wall :type 'wall\n\t       :pass-down (brick-height\n\t\t\t   brick-length\n\t\t\t   brick-width\n\t\t\t   mortar-joint-width)\n\t       :center (translate-along-vector\n\t\t\t(translate-along-vector (the (edge-center :bottom :right))\n\t\t\t\t\t\t(the (face-normal-vector :left))\n\t\t\t\t\t\t(half (the-child width)))\n\t\t\t(the (face-normal-vector :top))\n\t\t\t(half (the-child height)))\n\t       :wall-length (the nominal-length)\n\t       :wall-height (the nominal-height))\n\n   (rear-wall :type 'wall\n\t      :pass-down (brick-height\n\t\t\t  brick-length\n\t\t\t  brick-width\n\t\t\t  mortar-joint-width)\n\t      :center (translate-along-vector\n\t\t\t(translate-along-vector (the (edge-center :bottom :rear))\n\t\t\t\t\t\t(the (face-normal-vector :front))\n\t\t\t\t\t\t(half (the-child width)))\n\t\t\t(the (face-normal-vector :top))\n\t\t\t(half (the-child height)))\n\t      :orientation (alignment :rear (the (face-normal-vector :right)))\n\t      :wall-length (the nominal-width)\n\t      :wall-height (the nominal-height))\n\n   (roof-truss :type 'truss\n\t       :sequence (:size (the number-of-roof-trusses))\n\t       :truss-length (the rear-wall length)\n\t       :center (translate-along-vector\n\t\t\t(translate-along-vector (the (edge-center :front :top))\n\t\t\t\t\t\t(the (face-normal-vector :bottom))\n\t\t\t\t\t\t(half (the-child height)))\n\t\t\t(the (face-normal-vector :rear))\n\t\t\t(nth (the-child index) (the truss-offsets)))\n\t       :orientation (alignment :rear (the (face-normal-vector :right))\n\t\t\t\t       )\t\t\n\t       :pass-down (truss-angle\n\t\t\t   beam-width\n\t\t\t   beam-height\n\t\t\t   wall-thickness\n\t\t\t   material-density))\n   \n   (roof-cladding-left\n    :type 'box\n    :length (the roof-length)\n    :height (the roof-height)\n    :width (the cladding-thickness)\n    :orientation (alignment :left (the (roof-truss 0) front-slope-normal))\n    :center (let* ((last-index (- (the number-of-roof-trusses) 1))\n\t\t   (first-gutter (the (roof-truss 0) front-gutter-point))\n\t\t   (last-gutter (the (roof-truss last-index) front-gutter-point))\n\t\t   (mid-ctr (the (get-roof-mid-point! first-gutter last-gutter last-index))))\n\t      (translate-along-vector mid-ctr\n\t\t\t\t      (the (roof-truss 0) front-slope-normal)\n\t\t\t\t      (half (the cladding-thickness)))))\n   \n   (roof-cladding-right :type 'box\n\t\t\t:length (the roof-length)\n\t\t\t:height (the roof-height)\n\t\t\t:width (the cladding-thickness)\n\t\t\t:orientation (alignment :left (the (roof-truss 0) rear-slope-normal))\n\t\t\t :center (let* ((last-index (- (the number-of-roof-trusses) 1))\n\t\t\t\t\t(first-gutter (the (roof-truss 0) rear-gutter-point))\n\t\t\t\t\t(last-gutter (the (roof-truss last-index) rear-gutter-point))\n\t\t\t\t\t(mid-ctr (the (get-roof-mid-point! first-gutter last-gutter last-index))))\n\t\t\t\t (translate-along-vector mid-ctr\n\t\t\t\t\t\t\t (the (roof-truss 0) rear-slope-normal)\n\t\t\t\t\t\t\t (half (the cladding-thickness)))))\n   )\n\n  \n\t\t       \n  )\n\n\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/building-hint-5.lisp",
      "file_name": "building-hint-5.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 0,
      "section": "building"
    },
    "id": "d932f99969e3d36f80aaf1dc39b0c9a5"
  },
  {
    "text": "(define-object wall(box)\n  :input-slots\n  ((brick-height 45)\n   (brick-length 180)\n   (brick-width 90)\n   (mortar-joint-width 10)\n   (wall-length 3700)\n   (wall-height 900)\n   (first-row :start-full)\n   (front-edge :full)\n   (rear-edge :full))\n\n  :computed-slots\n  ((row-height (+ (the brick-height) (the mortar-joint-width)))\n   (number-of-rows (round-to-nearest (div (the wall-height) (the row-height)) 1))\n   (actual-wall-height (* (the row-height) (the number-of-rows)))\n   \n   ;; for the wall-length we need the number of full bricks\n   ;; if there are n full bricks then there will be (n-1) mortar joints\n   ;; so n*brick-length + n-1*mortar-joint-width = overall-length\n   ;; or n(brick-length + mortar-join-width) - mortar-joint-width = overall-length\n   ;; or n = (overall-length - mortar-joint-width)/(brick-length + mortar-joint-width)\n   (number-of-bricks (round-to-nearest (div (- (the wall-length) (the mortar-joint-width))\n\t\t\t\t\t    (+ (the brick-length) (the mortar-joint-width)))\n\t\t\t\t       1))\n   (actual-wall-length (+ (* (the number-of-bricks) (the brick-length))\n\t\t\t  (* (- (the number-of-bricks) 1) (the mortar-joint-width))))\n\n   ;; box inputs - gives the wall bounding box\n   (height (the actual-wall-height))\n   (width (the brick-width))\n   (length (the actual-wall-length))\n\n   (full-bricks (apply '+ (list-elements (the row) (the-element full-bricks))))\n   (half-bricks (apply '+ (list-elements (the row) (the-element half-bricks))))\n   (mortar-volume (apply '+ (list-elements (the row) (the-element mortar-volume))))\n   (mortar-density 2162)\n   (mortar-mass (* (the mortar-density) (div (the mortar-volume) 1000000000)))\n   )\n   \n     \n  :objects\n  ((row :type 'row\n     :sequence (:size (the number-of-rows))\n     :center (translate-along-vector (the (face-center :bottom))\n\t\t\t\t     (the (face-normal-vector :top))\n\t\t\t\t     (+ (half (the-child height))\n\t\t\t\t\t(* (the-child index) (the-child height))))\n     :height (+ (the brick-height) (the mortar-joint-width))\n     :full-bricks-per-row (the number-of-bricks)\n     :pass-down (brick-height\n\t\t brick-length\n\t\t brick-width\n\t\t mortar-joint-width\n\t\t length\n\t\t width\n\t\t first-row\n\t\t front-edge\n\t\t rear-edge))))\n\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/building-hint-5.lisp",
      "file_name": "building-hint-5.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 1,
      "section": "wall"
    },
    "id": "4faf00a8927c66d48636aadcace0eaf7"
  },
  {
    "text": "(define-object row (box)\n  :input-slots\n  (full-bricks-per-row\n   brick-height\n   brick-length\n   brick-width\n   mortar-joint-width\n   first-row\n   front-edge\n   rear-edge )\n\n  :computed-slots\n  ((full-brick-row? (cond ((eq (the first-row) :start-full)\n\t\t\t   (or (zerop (the index)) (evenp (the index))))\n\t\t\t  ((eq (the first-row) :start-half)\n\t\t\t   (not (or (zerop (the index)) (evenp (the index)))))))\n\t\t    \n   (full-bricks (the bricks-and-mortar full-bricks))\n   (half-bricks (the bricks-and-mortar half-bricks))\n   (mortar-volume (+ (the bricks-and-mortar mortar-joint-volume)\n\t\t     (the mortar-bed volume))))\n\n  :objects\n  ((bricks-and-mortar :type 'bricks-and-mortar\n\t\t      :height (the brick-height)\n\t\t      :center (translate-along-vector (the mortar-bed (face-center :top))\n\t\t\t\t\t\t      (the mortar-bed (face-normal-vector :top))\n\t\t\t\t\t\t      (half (the-child height)))\n\t\t      :pass-down (width\n\t\t\t\t  length\n\t\t\t\t  full-brick-row?\n\t\t\t\t  brick-height\n\t\t\t\t  brick-length\n\t\t\t\t  brick-width\n\t\t\t\t  mortar-joint-width\n\t\t\t\t  full-bricks-per-row\n\t\t\t\t  front-edge\n\t\t\t\t  rear-edge))\n   (mortar-bed :type 'box\n\t       :height (the mortar-joint-width)\n\t       :center (translate-along-vector (the (face-center :bottom))\n\t\t\t\t\t       (the (face-normal-vector :top))\n\t\t\t\t\t       (half (the-child height)))\n\t       :pass-down (width\n\t\t\t   length))))\n\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/building-hint-5.lisp",
      "file_name": "building-hint-5.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 2,
      "section": "row"
    },
    "id": "7e275d22ae35086d1413b865f77d2486"
  },
  {
    "text": "(define-object bricks-and-mortar (box)\n  :input-slots\n  (full-brick-row?\n   full-bricks-per-row\n   brick-height\n   brick-length\n   brick-width\n   mortar-joint-width\n   front-edge\n   rear-edge)\n\n  :computed-slots\n  ((first-full-brick-start-point (if (the full-brick-row?)\n\t\t\t\t     (the (face-center :front))\n\t\t\t\t     (the (mortar-joint 0) (face-center :rear))))\n   \n   (first-mortar-joint-start-point (cond ((the full-brick-row?) (the (full-brick 0) (face-center :rear)))\n\t\t\t\t\t ((eq (the front-edge) :full) (the (half-brick 0) (face-center :rear)))\n\t\t\t\t\t ((eq (the front-edge) :keyed) (translate-along-vector (the (face-center :front))\n\t\t\t\t\t\t\t\t\t\t\t       (the (face-normal-vector :rear))\n\t\t\t\t\t\t\t\t\t\t\t       (half (the brick-length))))))\n\n   (number-of-full-bricks (if (the full-brick-row?)\n\t\t\t      (the full-bricks-per-row)\n\t\t\t      (- (the full-bricks-per-row) 1)))\n\n   (number-of-half-bricks (cond ((the full-brick-row?) 0)\n\t\t\t\t((and (eq (the front-edge) :full)(eq (the rear-edge) :full)) 2)\n\t\t\t\t((and (eq (the front-edge) :keyed) (eq (the rear-edge) :full)) 1)\n\t\t\t\t((and (eq (the front-edge) :full) (eq (the rear-edge) :keyed)) 1)\n\t\t\t\t((and (eq (the front-edge) :keyed) (eq (the rear-edge) :keyed)) 0)))\n\n   ;; whether or not the ends are :full or :keyed, the number of mortar joints remains the same since the mortar joint\n   ;; when it is :keyed is used to connect to the full brick of the other wall\n   (number-of-mortar-joints (if (the full-brick-row?)\n\t\t\t\t(- (the number-of-full-bricks) 1)\n\t\t\t\t(+ (the number-of-full-bricks) 1)))\n\n   ;; if it isn't a full brick row then there will be an extra joint because one\n   ;; full brick is replaced with 2 half bricks so without correcting the\n   ;; mortar-joint-width the ends of a full brick row and one starting and\n   ;; finishing with half bricks won't align. So we need to correct\n   ;; the mortar-joint-width\n   (corrected-joint-width (if (the full-brick-row?)\n\t\t\t\t     (the mortar-joint-width)\n\t\t\t\t     (let ((total-gap (* (- (the number-of-mortar-joints) 1)\n\t\t\t\t\t\t\t\t\t(the mortar-joint-width))))\n\t\t\t\t       (div total-gap (the number-of-mortar-joints)))))\n   ;; collating the output. We could do this analytically, but for this example we'll use the geometry\n   (full-bricks (length (list-elements (the full-brick))))\n   (half-bricks (length (list-elements (the half-brick))))\n   (mortar-joint-volume (apply '+ (list-elements (the mortar-joint)\n\t\t\t\t\t\t (the-element volume))))\n   )\n  \n  :functions\n  ((first-full-brick-center!\n    ()\n    (translate-along-vector (the first-full-brick-start-point)\n\t\t\t    (the (face-normal-vector :rear))\n\t\t\t    (half (the brick-length))))\n   \n   (other-full-brick-center!\n    (index)\n    ;; if its a full brick row, (full-brick 1) is positioned relative to (joint 0)\n    ;; if its a half brick row, (full-brick 1) is positioned relative to (joint 1)\n    (let ((ind (if (the full-brick-row?) (- index 1) index)))\n\t  (translate-along-vector (the (mortar-joint ind) (face-center :rear))\n\t\t\t\t  (the (face-normal-vector :rear))\n\t\t\t\t  (half (the brick-length)))))\n   \n    (first-joint-center!\n     ()\n     (translate-along-vector (the first-mortar-joint-start-point)\n\t\t\t     (the (face-normal-vector :rear))\n\t\t\t     (half (the corrected-joint-width))))\n   (other-joint-center!\n    (index)\n    ;; if its a full brick row, (joint 1) is positioned relative to (full-brick 1)\n    ;; if its a half brick row, (joint 1) is positioned relative to (full-brick 0)\n    (let ((ind (if (the full-brick-row?) index (- index 1))))\n      (translate-along-vector (the (full-brick ind) (face-center :rear))\n\t\t\t      (the (face-normal-vector :rear))\n\t\t\t      (half (the corrected-joint-width)))))\n\n    (first-half-brick-center!\n     ()\n     (translate-along-vector (the (face-center :front))\n\t\t\t     (the (face-normal-vector :rear))\n\t\t\t     (half (half (the brick-length)))))\n   \n   (last-half-brick-center!\n     ()\n     (translate-along-vector (theo (the mortar-joint last) (face-center :rear))\n\t\t\t     (the (face-normal-vector :rear))\n\t\t\t     (half (half (the brick-length))))))\n \t\t\t     \n  \n  :objects\n  ((full-brick :type 'box\n\t       :sequence (:size (the number-of-full-bricks))\n\t       :center (if (= (the-child index) 0)\n\t\t\t   (the first-full-brick-center!)\n\t\t\t   (the (other-full-brick-center! (the-child index))))\n\t       :length (the brick-length)\n\t       :height (the brick-height)\n\t       :width (the brick-width))\n\n   (half-brick :type 'box\n\t       :sequence (:size (the number-of-half-bricks))\n\t       :center (cond ((and (= (the-child index) 0)\n\t\t\t\t   (eq (the front-edge) :full)) (the first-half-brick-center!))\n\t\t\t     ((and (= (the-child index) 0)\n\t\t\t\t   (eq (the front-edge) :keyed)\n\t\t\t\t   (eq (the rear-edge) :full)) (the last-half-brick-center!))\n\t\t\t     ((eq (the rear-edge) :full) (the last-half-brick-center!)))\n\t       :length (half (the brick-length))\n\t       :height (the brick-height)\n\t       :width (the brick-width))\n\n   (mortar-joint :type 'box\n\t\t :sequence (:size (the number-of-mortar-joints))\n\t\t :center (if (= (the-child index) 0)\n\t\t\t     (the first-joint-center!)\n\t\t\t  (the (other-joint-center! (the-child index))))   \n\t\t :height (the brick-height)\n\t\t :width (the brick-width)\n\t\t :length (the corrected-joint-width))))\n\n\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/building-hint-5.lisp",
      "file_name": "building-hint-5.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 3,
      "section": "bricks-and-mortar"
    },
    "id": "0b552d4663918617695d6f80dce07be3"
  },
  {
    "text": "(defun degrees-to-radians (degrees)\n  (div (* degrees pi) 180))\n\n\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/building-hint-5.lisp",
      "file_name": "building-hint-5.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 4,
      "section": "degrees-to-radians"
    },
    "id": "f53a0e894d107cd5dbf6f6a95074253f"
  },
  {
    "text": "(define-object truss (box)\n  :input-slots\n  ((truss-length 2000)\n   (truss-height nil)\n   (truss-angle 30)\n\n   (beam-width 30)\n   (beam-height 50)\n   (wall-thickness 3)\n\n   (material-density 7800)\n   (tonne-rate 450))\n\n  :computed-slots\n  ((length (the truss-length))\n   (height (cond ((the truss-height)(the truss-height))\n\t\t ((the truss-angle) (+ (* (half (the truss-length))\n\t\t\t\t\t  (tan (degrees-to-radians (the truss-angle))))\n\t\t\t\t       (the beam-height)))))\n   (width (the beam-width))\n  \n   (truss-front-slope-vector (the (get-slope-vector! :front)))\n   (truss-rear-slope-vector (the (get-slope-vector! :rear)))\n\n   (front-slope-length (the (get-slope-length! :front)))\n   (rear-slope-length (the (get-slope-length! :rear)))\n   \n   (front-slope-center (the (get-slope-center! :front)))\n   (rear-slope-center (the (get-slope-center! :rear)))\n   \n\n   (beam-properties (mapsend (the children) :beam-properties))\n   (total-mass (round-to-nearest\n\t\t(apply '+\n\t\t       (mapcar #'(lambda(a) (getf a :mass-kg))\n\t\t\t       (the beam-properties)))\n\t\t0.001))\n   (total-cost (round-to-nearest\n\t\t(apply '+\n\t\t       (mapcar #'(lambda(a) (getf a :cost-gbp))\n\t\t\t       (the beam-properties)))\n\t\t0.01))\n\n   ;; messages to support roof cladding sizing and positioning\n   (apex-point (inter-line-plane (the rear-slope-construction-line end)\n\t\t\t   (the truss-rear-slope-vector)\n\t\t\t   (the lower-beam center)\n\t\t\t\t (the (face-normal-vector :rear))))\n   (front-gutter-point (the front-slope-construction-line start))\n   (rear-gutter-point (the rear-slope-construction-line start))\n   (front-slope-normal (the front-slope-beam (face-normal-vector :top)))\n   (rear-slope-normal (the rear-slope-beam (face-normal-vector :top)))\n   )\n\n  :functions\n  ((get-slope-vector! (beam-side)\n\t\t      (let ((v-key (the (get-v-key! beam-side)))\n\t\t\t    (l-key (the (get-l-key! beam-side))))\n\t\t      (subtract-vectors (the vertical-beam (edge-center :rear v-key))\n\t\t\t\t\t(the lower-beam (edge-center l-key :top)))))\n   (get-slope-length! (beam-side)\n\t\t      (let ((v-key (the (get-v-key! beam-side)))\n\t\t\t    (l-key (the (get-l-key! beam-side))))\n\t\t\t(3d-distance (the vertical-beam (edge-center :rear v-key))\n\t\t\t\t     (the lower-beam (edge-center l-key :top)))))\n   (get-slope-center!\n    (beam-side)\n    (let ((pt (case beam-side\n\t\t(:front (the front-slope-construction-line center))\n\t\t(:rear  (the rear-slope-construction-line center))))\n\t  (norm-vector (case beam-side\n\t\t\t (:front (the front-slope-beam (face-normal-vector :bottom)))\n\t\t\t (:rear (the rear-slope-beam (face-normal-vector :bottom))))))\n      (translate-along-vector pt\n\t\t\t      norm-vector\n\t\t\t      (half (the beam-height)))))\n   (get-v-key! (beam-side)\n\t       (case beam-side\n\t\t (:front :top)\n\t\t (:rear :bottom)))\n   (get-l-key! (beam-side)\n\t       (case beam-side\n\t\t (:front :front)\n\t\t (:rear :rear)))\n\n   \n   )\n   \n  \n  \n  :objects\n  ((lower-beam :type 'beam\n\t       :pass-down (:beam-height :beam-width :wall-thickness :material-density :tonne-rate)\n\t       :beam-length (the truss-length)\n\t       :center (translate-along-vector (the (face-center :bottom))\n\t\t\t\t\t       (the (face-normal-vector :top))\n\t\t\t\t\t       (half (the beam-height))))\n   (vertical-beam :type 'beam\n\t\t  :pass-down (:beam-height :beam-width :wall-thickness :material-density :tonne-rate)\n\t\t  \n\t\t  :beam-length (- (the height) (the beam-height))\n\t\t  :orientation (alignment :rear (the (face-normal-vector :top))\n\t\t\t\t\t  :right (the (face-normal-vector :right)))  \n\t\t  :center (translate-along-vector (the lower-beam (face-center :top))\n\t\t\t\t\t\t  (the lower-beam (face-normal-vector :top))\n\t\t\t\t\t\t  (half (the-child beam-length))))\n   (front-slope-beam :type 'beam\n\t\t     :pass-down (:beam-height :beam-width :wall-thickness :material-density :tonne-rate)\n\t\t     :beam-length (the front-slope-length)\n\t\t     :center (the front-slope-center)\n\t\t     :orientation (alignment :rear (the truss-front-slope-vector)\n\t\t\t\t\t     :right (the (face-normal-vector :right))))\n\n   (rear-slope-beam :type 'beam\n\t\t    :pass-down (:beam-height :beam-width :wall-thickness :material-density :tonne-rate)\n\t\t    :beam-length (the rear-slope-length)\n\t\t    :center (the rear-slope-center)\n\t\t    :orientation (alignment :rear (the truss-rear-slope-vector)\n\t\t\t\t\t    :left (the (face-normal-vector :right))))\n   \n   )\n\n  :hidden-objects\n  ((apex-pt :type 'sphere\n\t    :radius 5\n\t    :display-controls (list :color :green)\n\t    :center (the apex-point))\n   (front-slope-construction-line :type 'line\n\t\t\t\t  :start (the lower-beam (edge-center :front :top))\n\t\t\t\t  :end (the vertical-beam (edge-center :rear :top)))\n   (rear-slope-construction-line :type 'line\n\t\t\t\t :start (the lower-beam (edge-center :rear :top))\n\t\t\t\t :end (the vertical-beam (edge-center :rear :bottom)))\n   \n   (front-mid-pt :type 'sphere\n\t\t :display-controls (list :color :blue)\n\t\t :radius 5\n\t\t :center (the front-slope-construction-line center))\n   (rear-mid-pt :type 'sphere\n\t\t:display-controls (list :color :blue)\n\t\t:center (the rear-slope-construction-line center)\n\t\t:radius 5)\n   (pt-1 :type 'sphere\n\t :radius 5\n\t :display-controls (list :color :green)\n\t :center (the lower-beam (edge-center :rear :top)))\n   (pt-2 :type 'sphere\n\t :radius 5\n\t :display-controls (list :color :red)\n\t :center (the vertical-beam (edge-center :rear :bottom)) )\n\n   \n\n   (vector-line :type 'vector-line\n\t\t:start-point (the rear-slope-construction-line center)\n\t\t:vector (the rear-slope-beam (face-normal-vector :bottom))\n\t\t:length 150)\n   \n   ))\n\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/building-hint-5.lisp",
      "file_name": "building-hint-5.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 5,
      "section": "truss"
    },
    "id": "3c8ab442d4a18dac1b0cfebada30959e"
  },
  {
    "text": "(define-object vector-line (box)\n  :input-slots\n  ((start-point (make-point 0 0 0))\n   (vector (make-vector 1 0 1))\n   (length 50)\n   (width 1))\n  :computed-slots\n  ((height (div (the length) 5)))\n  :objects\n  ((v-line :type 'line\n\t   :start (the start-point)\n\t   :display-controls (list :color :red)\n\t   :end (translate-along-vector (the start-point)\n\t\t\t\t\t(the vector)\n\t\t\t\t\t(the length)))\n   (arrow :type 'cone\n\t  :radius-1 0\n\t  :radius-2 (div (the length) 50)\n\t  :length (div (the length) 5)\n\t  :display-controls (list :color :red)\n\t  :center (translate-along-vector (the v-line end)\n\t\t\t\t\t  (the vector)\n\t\t\t\t\t  (half (the-child length)))\n\t  :orientation (alignment :front (the vector)))))\n\n\t\t\t \n\t\t  \n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/building-hint-5.lisp",
      "file_name": "building-hint-5.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 6,
      "section": "vector-line"
    },
    "id": "56de9c5f241de10e5bb2ee861116b5e9"
  },
  {
    "text": "(define-object beam (box)\n  :input-slots\n  ((beam-length 1000)\n   (beam-width 40)\n   (beam-height 50)\n   (wall-thickness 2)\n   (material-density 7800)\n   (tonne-rate 500))\n\n  :computed-slots\n  ((length (the beam-length))\n   (width (the beam-width))\n   (height (the beam-height))\n\n   (beam-volume (- (the outer volume) (the inner volume)))\n   (beam-mass (* (div (the beam-volume) 1000000000) (the material-density)))\n   (beam-cost (* (the tonne-rate) (div (the beam-mass) 1000)))\n   (beam-properties (list :volume-mm3 (the beam-volume)\n\t\t\t  :mass-kg (round-to-nearest (the beam-mass) 0.01)\n\t\t\t  :cost-gbp (round-to-nearest (the beam-cost) 0.01)\n\t\t\t  :length-mm (the beam-length)\n\t\t\t  :width-mm (the beam-width)\n\t\t\t  :height-mm (the beam-height)\n\t\t\t  :thickness-mm (the wall-thickness))))\n   \n  :objects\n  ((outer :type 'box\n\t  :length (the beam-length)\n\t  :width (the beam-width)\n\t  :height (the beam-height))\n\n   (inner :type 'box\n\t  :length (the beam-length)\n\t  :width (- (the beam-width) (twice (the wall-thickness)))\n\t  :height (- (the beam-height) (twice (the wall-thickness)))))\n  )\n\n\n\n\n\n\n\n\n\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/building-hint-5.lisp",
      "file_name": "building-hint-5.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 7,
      "section": "beam"
    },
    "id": "5d63725d9232049923fafa83d5583314"
  },
  {
    "text": "(in-package :gdl-user)\n\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/format.lisp",
      "file_name": "format.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 0,
      "section": "header"
    },
    "id": "4adcb3d417fa97b5485f26a89aa4fc25"
  },
  {
    "text": "(define-object top-10-formatting (base-object)\n\n  :computed-slots\n  ((\"The most basic text formatting using the ~a directive\"\n    basic (let ((name \"mike\"))\n\t    (format nil \"hello ~a\" name))) ;;\"hello mike\"\n\n   (\"~$ directive outputs to 2dp, giving it a prefix parameter of 5 will output to 5dp. some directives take more than 1 prefic parameter, in this case the second prefix parameter to ~f controls the number of decimal places. Note all of these perform numeric rounding as well\"\n    floating-point-numbers (format nil \"~$ ~5$ ~,4f\" pi pi pi)) ;;\"3.14 3.14159 3.1416\"\n\n   (\"~d emits numbers in decimal, but using different prefix parameters alters the way they are printed\"\n    numeric-output (format nil \"~d ~:d ~@d\" 10000 10000 10000)) ;; \"10000 10,000 +10000\"\n\n   (\"for some outputs we may need a fixed width, irrespective of the length of the data. Here we have a width of 12, first padded with white-space, second with 0. The second example uses the ~:* directive to move backwards in the argument list\"\n    fixed-width (let ((str1 (format nil \"~12d ~12,'0d\" 1234 1234))\n\t\t      (str2 (format nil \"~12d ~:*~12,'0:d\" 1234)))\n\t\t  (format nil \"~a~%~a\" str1 str2)))                    ;;; \"        1234 000000001234\"\n                                                                       ;;;         1234 000000001234\"\n\n   (\"english language output\"\n    english-language (format nil \"~r\" 12)) ;; \"twelve\"\n\n   (\"control of case using the ~( and the @ and : modifiers. Also using ~% to introduce line breaks\"\n    case-control (let* ((men \"Men\")\n\t\t       (str1 (format nil \"~(~r ~a~)\" 12 men))\n\t\t       (str2 (format nil \"~@(~r ~a~)\" 12 men))\n\t\t       (str3 (format nil \"~:(~r ~a~)\" 12 men))\n\t\t\t(str4 (format nil \"~:@(~r ~a~)\" 12 men)))\n\t\t   (format nil \"~a~%~a~%~a~%~a\" str1 str2 str3 str4))) ;;; \"twelve men\n                                                                         ;;; Twelve men\n                                                                         ;;; Twelve Men\n\t\t\t\t\t                                 ;;; TWELVE MEN\"\n\n  (\"using the ~p and ~@p to introduce plurals. the : modifier causes the previous argument to be reprocessed\"\n   plural (let ((str1 (format nil \"~a computer~:p\" 1))\n\t\t(str2 (format nil \"~a computer~:p\" 2))\n\t\t(str3 (format nil \"~r fl~:@p\" 1))\n\t\t(str4 (format nil \"~r fl~:@p\" 2)))\n\t    (format nil \"~a~%~a~%~a~%~a\" str1 str2 str3 str4)))  ;;;\"1 computer\n                                                                ;;; 2 computers\n                                                                ;;; one fly\n                                                                ;;; two flies\"\n  (\"~{ causes the enclosed formatting directives to be applied to each element in the list. the ~^ directive causeswhatever is following to be processed every time apart from the last itteration\"\n   itteration (format nil \"~{~a~^,~}\" (list 1 2 3 4 5))) ;;; \"1,2,3,4,5\"\n\n  (\"using the @ modifier causes the individual arguments to be treated as a list\"\n   itteration-2 (format nil \"~@{~a~^,~}\" 1 2 3 4 5))      ;;; \"1,2,3,4,5\"\n\n  (conditional (let ((str1 (format nil \"~@[first name=~a ~]~@[second name = ~a~]\" \"Peter\" \"Paul\"))\n\t\t     (str2 (format nil \"~@[first name=~a ~]~@[second name = ~a~]\" nil \"Paul\"))\n\t\t     (str3 (format nil \"~@[first name=~a ~]~@[second name = ~a~]\" \"Peter\"  nil))\n\t\t     (str4 (format nil \"~@[first name=~a ~]~@[second name = ~a~]\" nil nil)))\n\t(format nil \"~@{~a~^~%~}\"str1 str2 str3 str4))))                                        ;;; \"first name=Peter second name = Paul\n                                                                                                ;;; second name = Paul\n                                                                                                ;;; first name=Peter \n                                                                                                ;;; \"\n  \n  \n  )\n   \n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/format.lisp",
      "file_name": "format.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 0,
      "section": "top-10-formatting"
    },
    "id": "4adcb3d417fa97b5485f26a89aa4fc25"
  },
  {
    "text": "(in-package :gdl-user)\n\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/truss-hint-6a.lisp",
      "file_name": "truss-hint-6a.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 0,
      "section": "header"
    },
    "id": "2230e5d9fc993c81189329c7ee94ed95"
  },
  {
    "text": "(defun degrees-to-radians (degrees)\n  (div (* degrees pi) 180))\n\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/truss-hint-6a.lisp",
      "file_name": "truss-hint-6a.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 0,
      "section": "degrees-to-radians"
    },
    "id": "2230e5d9fc993c81189329c7ee94ed95"
  },
  {
    "text": "(define-object truss (box)\n  :input-slots\n  ((truss-length 2000)\n   (truss-height 800)\n   (truss-angle nil)\n\n   (beam-width 30)\n   (beam-height 50)\n   (wall-thickness 3))\n\n  :computed-slots\n  ((length (the truss-length))\n   (height (cond ((the truss-height)(the truss-height))\n\t\t ((the truss-angle) (+ (* (half (the truss-length))\n\t\t\t\t\t  (tan (degrees-to-radians (the truss-angle))))\n\t\t\t\t       (the beam-height)))))\n   (width (the beam-width))\n   (truss-front-slope-vector (subtract-vectors (the vertical-beam (edge-center :rear :top))\n\t\t\t\t\t       (the lower-beam (edge-center :front :top))))\n   (front-slope-length (3d-distance (the vertical-beam (edge-center :rear :top))\n\t\t\t\t    (the lower-beam (edge-center :front :top))))\n   (front-slope-center (translate-along-vector (the front-slope-construction-line center)\n\t\t\t\t\t       (the front-slope-beam (face-normal-vector :bottom))\n\t\t\t\t\t       (half (the beam-height))))\n   (truss-rear-slope-vector (subtract-vectors (the vertical-beam (edge-center :rear :bottom))\n\t\t\t\t\t      (the lower-beam (edge-center :rear :top))))\n   (rear-slope-length (3d-distance (the vertical-beam (edge-center :rear :bottom))\n\t\t\t\t   (the lower-beam (edge-center :rear :top))))\n   (rear-slope-center (translate-along-vector (the rear-slope-construction-line center)\n\t\t\t\t\t      (the rear-slope-beam (face-normal-vector :bottom))\n\t\t\t\t\t      (half (the beam-height))))\n   )\n\t\t\t\t       \n  :objects\n  ((lower-beam :type 'beam\n\t       :beam-height (the beam-height)\n\t       :beam-width (the beam-width)\n\t       :beam-length (the truss-length)\n\t       :center (translate-along-vector (the (face-center :bottom))\n\t\t\t\t\t       (the (face-normal-vector :top))\n\t\t\t\t\t       (half (the beam-height))))\n   (vertical-beam :type 'beam\n\t\t  :beam-length (- (the height) (the beam-height))\n\t\t  :beam-height (the beam-height)\n\t\t  :beam-width (the beam-width)\n\t\t  :orientation (alignment :rear (the (face-normal-vector :top))\n\t\t\t\t\t  :right (the (face-normal-vector :right)))\n\t\t  :center (translate-along-vector (the lower-beam (face-center :top))\n\t\t\t\t\t\t  (the lower-beam (face-normal-vector :top))\n\t\t\t\t\t\t  (half (the-child beam-length))))\n   (front-slope-beam :type 'beam\n\t\t     :beam-length (the front-slope-length)\n\t\t     :beam-height (the beam-height)\n\t\t     :beam-width (the beam-width)\n\t\t     :center (the front-slope-center)\n\t\t     :orientation (alignment :rear (the truss-front-slope-vector)\n\t\t\t\t\t     :right (the (face-normal-vector :right))))\n\n   (front-slope-construction-line :type 'line\n\t\t\t\t  :start (the lower-beam (edge-center :front :top))\n\t\t\t\t  :end (the vertical-beam (edge-center :rear :top)))\n   \n   (front-mid-pt :type 'sphere\n\t\t :display-controls (list :color :blue)\n\t\t :radius 5\n\t\t :center (the front-slope-construction-line center))\n   \n   \n   (rear-slope-beam :type 'beam\n\t\t     :beam-length (the rear-slope-length)\n\t\t     :beam-height (the beam-height)\n\t\t     :beam-width (the beam-width)\n\t\t     :center (the rear-slope-center)\n\t\t     :orientation (alignment :rear (the truss-rear-slope-vector)\n\t\t\t\t\t     :left (the (face-normal-vector :right))))\n   \n   (rear-slope-construction-line :type 'line\n\t\t\t\t :start (the lower-beam (edge-center :rear :top))\n\t\t\t\t :end (the vertical-beam (edge-center :rear :bottom)))\n   (rear-mid-pt :type 'sphere\n\t\t:display-controls (list :color :blue)\n\t\t:center (the rear-slope-construction-line center)\n\t\t:radius 5)\n   \n   (pt-1 :type 'sphere\n\t :radius 5\n\t :display-controls (list :color :green)\n\t :center (the lower-beam (edge-center :front :top)))\n   (pt-2 :type 'sphere\n\t :radius 5\n\t :display-controls (list :color :red)\n\t :center (the vertical-beam (edge-center :rear :top)) )\n   (vector-line :type 'vector-line\n\t\t:start-point (the pt-1 center)\n\t\t:vector (the truss-front-slope-vector)\n\t\t:length 150)))\n\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/truss-hint-6a.lisp",
      "file_name": "truss-hint-6a.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 1,
      "section": "truss"
    },
    "id": "05b8538651c7c181232cb4b1389c5a9f"
  },
  {
    "text": "(define-object vector-line (box)\n  :input-slots\n  ((start-point (make-point 0 0 0))\n   (vector (make-vector 1 0 1))\n   (length 50)\n   (width 1))\n  :computed-slots\n  ((height (div (the length) 5)))\n  :objects\n  ((v-line :type 'line\n\t   :start (the start-point)\n\t   :display-controls (list :color :red)\n\t   :end (translate-along-vector (the start-point)\n\t\t\t\t\t(the vector)\n\t\t\t\t\t(the length)))\n   (arrow :type 'cone\n\t  :radius-1 0\n\t  :radius-2 (div (the length) 50)\n\t  :length (div (the length) 5)\n\t  :display-controls (list :color :red)\n\t  :center (translate-along-vector (the v-line end)\n\t\t\t\t\t  (the vector)\n\t\t\t\t\t  (half (the-child length)))\n\t  :orientation (alignment :front (the vector)))))\n\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/truss-hint-6a.lisp",
      "file_name": "truss-hint-6a.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 2,
      "section": "vector-line"
    },
    "id": "7bf973c22f1c131a1413e15174e1132d"
  },
  {
    "text": "(define-object beam (box)\n  :input-slots\n  ((beam-length 1000)\n   (beam-width 40)\n   (beam-height 50)\n   (wall-thickness 2)\n   (material-density 7800)\n   (tonne-rate 500))\n\n  :computed-slots\n  ((length (the beam-length))\n   (width (the beam-width))\n   (height (the beam-height))\n\n   (beam-volume (- (the outer volume) (the inner volume)))\n   (beam-mass (* (div (the beam-volume) 1000000000) (the material-density)))\n   (beam-cost (* (the tonne-rate) (div (the beam-mass) 1000)))\n   (beam-properties (list :volume-mm3 (the beam-volume)\n\t\t\t  :mass-kg (round-to-nearest (the beam-mass) 0.01)\n\t\t\t  :cost-gbp (round-to-nearest (the beam-cost) 0.01)\n\t\t\t  :length-mm (the beam-length)\n\t\t\t  :width-mm (the beam-width)\n\t\t\t  :height-mm (the beam-height)\n\t\t\t  :thickness-mm (the wall-thickness))))\n   \n  :objects\n  ((outer :type 'box\n\t  :length (the beam-length)\n\t  :width (the beam-width)\n\t  :height (the beam-height))\n\n   (inner :type 'box\n\t  :length (the beam-length)\n\t  :width (- (the beam-width) (twice (the wall-thickness)))\n\t  :height (- (the beam-height) (twice (the wall-thickness)))))\n  )\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/truss-hint-6a.lisp",
      "file_name": "truss-hint-6a.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 3,
      "section": "beam"
    },
    "id": "d534ed4de8dcf6076989c88eb006ae04"
  },
  {
    "text": "(in-package :gdl-user)\n\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/wall-hint-2.lisp",
      "file_name": "wall-hint-2.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 0,
      "section": "header"
    },
    "id": "74065c18327246381705c22487bb1e98"
  },
  {
    "text": "(define-object wall()\n  :input-slots\n  ((brick-height 45)\n   (brick-length 180)\n   (brick-width 90)\n   (mortar-joint-width 10)\n   (wall-length 3700)\n   (wall-height 900))\n     \n  :objects\n  ((row :type 'row\n     :brick-height(the brick-height)\n     :brick-length (the brick-length)\n     :brick-width (the brick-width)\n     :mortar-joint (the mortar-joint-width))))\n\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/wall-hint-2.lisp",
      "file_name": "wall-hint-2.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 0,
      "section": "wall"
    },
    "id": "74065c18327246381705c22487bb1e98"
  },
  {
    "text": "(define-object row ()\n  :input-slots\n  (brick-height\n   brick-length\n   brick-width\n   mortar-joint-width)\n\n  :objects\n  ((bricks-and-mortar :type 'bricks-and-mortar\n\t\t      :brick-height (the brick-height)\n\t\t      :brick-length (the brick-length)\n\t\t      :brick-width (the brick-width)\n\t\t      :mortar-joint-width (the mortar-joint-width))\n   (mortar-bed :type 'box\n\t       :height (the mortar-joint-width))\n   )\n  )\n\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/wall-hint-2.lisp",
      "file_name": "wall-hint-2.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 1,
      "section": "row"
    },
    "id": "37efd8e583caf8372e7b390ccbf75b82"
  },
  {
    "text": "(define-object bricks-and-mortar ()\n  :input-slots\n  (brick-height\n   brick-length\n   brick-width\n   mortar-joint-width)\n  \n  :objects\n  ((full-brick :type 'box\n\t       :length (the brick-length)\n\t       :height (the brick-height)\n\t       :width (the brick-width))\n   (half-brick :type 'box\n\t       :length (half (the brick-length))\n\t       :height (the brick-height)\n\t       :width (the brick-width))\n   (mortar-joint :type 'box\n\t\t :height (the brick-height)\n\t\t :width (the brick-width)\n\t\t :length (the mortar-joint-width))))\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/wall-hint-2.lisp",
      "file_name": "wall-hint-2.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 2,
      "section": "bricks-and-mortar"
    },
    "id": "4e36e17bcd33a068b9ead4059655d283"
  },
  {
    "text": "(in-package :gdl-user)\n\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/sequences.lisp",
      "file_name": "sequences.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 0,
      "section": "header"
    },
    "id": "fa43e8b6d36bb2f8d300b34db2d45cf9"
  },
  {
    "text": "(define-object assembly-6 (base-object)\n\n  :input-slots\n  ((number-of-boxes 3))\n\n  :computed-slots\n  ((first-box-volume-1 (the (my-box 0) volume))\n   (first-box-volume-2 (the-object (the my-box last) volume))\n   (second-box-volume (the (my-box 1) volume))\n   (last-box-volume-1 (the-object (the my-box last) volume)))\n\n  :objects\n  ((my-box :type 'box\n\t   :sequence (:size (the number-of-boxes))\n\t   :length (+ 2 (* (the-child index) 3))\n\t   :width 2\n\t   :height 1\n\t   :center (make-point (* (the-child index) 6) 0 0))))\n\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/sequences.lisp",
      "file_name": "sequences.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 0,
      "section": "assembly-6"
    },
    "id": "fa43e8b6d36bb2f8d300b34db2d45cf9"
  },
  {
    "text": "(define-object assembly-7 (base-object)\n\t\t \n  :input-slots\n  ((number-of-boxes 3))\n\t\t \n  :objects\n  ((my-box :type 'box\n\t   :sequence (:radial (the number-of-boxes))\n\t   :length (+ 2 (* (the-child index) 3))\n\t   :width 2\n\t   :height 1)))\n\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/sequences.lisp",
      "file_name": "sequences.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 1,
      "section": "assembly-7"
    },
    "id": "cf10cade69cfd018ac111bc2265c9f10"
  },
  {
    "text": "(in-package :gdl-user)\n\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/building-hint-3.lisp",
      "file_name": "building-hint-3.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 0,
      "section": "header"
    },
    "id": "b3370822dbb8f5e2a0bb9292fecfbefa"
  },
  {
    "text": "(define-object building (box)\n  :input-slots\n  ((nominal-height 3000)\n   (nominal-width 3000)\n   (nominal-length 4000)\n   (brick-height 45)\n   (brick-length 180)\n   (brick-width 90)\n   (mortar-joint-width 10)\n   (truss-angle 30)\n   (beam-width 40)\n   (beam-height 50)\n   (wall-thickness 3)\n   (material-density 7800)\n\n   (max-beam-spacing 1500))\n\n  :computed-slots\n  ((length (the left-wall length))\n   (width (the rear-wall length))\n   (height (+ (the left-wall height) (the (roof-truss 0) height)))\n\n   (number-of-roof-trusses (let ((trusses (ceiling (the left-wall length) 1500)))\n\t\t\t     (max trusses 2)))\n\n   (truss-spacing (div (- (the left-wall length) (the beam-width))\n\t\t       (- (the number-of-roof-trusses) 1)))\n   (truss-offsets (let ((res nil))\n\t\t    (dotimes (n (the number-of-roof-trusses) (nreverse res))\n\t\t      (push (+ (half (the beam-width))\n\t\t\t       (* n (the truss-spacing))) res))))\n   )\n\n   \n  \n  :objects\n  ((left-wall :type 'wall\n\t      :pass-down (brick-height\n\t\t\t  brick-length\n\t\t\t  brick-width\n\t\t\t  mortar-joint-width)\n\t      :center (translate-along-vector\n\t\t       (translate-along-vector (the (edge-center :bottom :left))\n\t\t\t\t\t       (the (face-normal-vector :right))\n\t\t\t\t\t       (half (the-child width)))\n\t\t       (the (face-normal-vector :top))\n\t\t       (half (the-child height)))\n\t      :wall-length (the nominal-length)\n\t      :wall-height (the nominal-height))\n\n   (right-wall :type 'wall\n\t       :pass-down (brick-height\n\t\t\t   brick-length\n\t\t\t   brick-width\n\t\t\t   mortar-joint-width)\n\t       :center (translate-along-vector\n\t\t\t(translate-along-vector (the (edge-center :bottom :right))\n\t\t\t\t\t\t(the (face-normal-vector :left))\n\t\t\t\t\t\t(half (the-child width)))\n\t\t\t(the (face-normal-vector :top))\n\t\t\t(half (the-child height)))\n\t       :wall-length (the nominal-length)\n\t       :wall-height (the nominal-height))\n\n   (rear-wall :type 'wall\n\t      :pass-down (brick-height\n\t\t\t  brick-length\n\t\t\t  brick-width\n\t\t\t  mortar-joint-width)\n\t      :center (translate-along-vector\n\t\t\t(translate-along-vector (the (edge-center :bottom :rear))\n\t\t\t\t\t\t(the (face-normal-vector :front))\n\t\t\t\t\t\t(half (the-child width)))\n\t\t\t(the (face-normal-vector :top))\n\t\t\t(half (the-child height)))\n\t      :orientation (alignment :rear (the (face-normal-vector :right)))\n\t      :wall-length (the nominal-width)\n\t      :wall-height (the nominal-height))\n\n   (roof-truss :type 'truss\n\t       :sequence (:size (the number-of-roof-trusses))\n\t       :truss-length (the rear-wall length)\n\t       :center (translate-along-vector\n\t\t\t(translate-along-vector (the (edge-center :front :top))\n\t\t\t\t\t\t(the (face-normal-vector :bottom))\n\t\t\t\t\t\t(half (the-child height)))\n\t\t\t(the (face-normal-vector :rear))\n\t\t\t(nth (the-child index) (the truss-offsets)))\n\t       :orientation (alignment :rear (the (face-normal-vector :right))\n\t\t\t\t       )\t\t\n\t       :pass-down (truss-angle\n\t\t\t   beam-width\n\t\t\t   beam-height\n\t\t\t   wall-thickness\n\t\t\t   material-density))\n   \n   (roof-cladding-left :type 'box)\n   (roof-cladding-right :type 'box)\n   )\n  )\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/building-hint-3.lisp",
      "file_name": "building-hint-3.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 0,
      "section": "building"
    },
    "id": "b3370822dbb8f5e2a0bb9292fecfbefa"
  },
  {
    "text": "(define-object full-start-wall (wall)\n  :input-slots\n  ((first-row :start-full)))\n\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/building-hint-3.lisp",
      "file_name": "building-hint-3.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 1,
      "section": "full-start-wall"
    },
    "id": "67c729cb8096b9b1f63e9e6602846551"
  },
  {
    "text": "(define-object half-start-wall (wall)\n  :input-slots\n  ((first-row :start-half)))\n\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/building-hint-3.lisp",
      "file_name": "building-hint-3.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 2,
      "section": "half-start-wall"
    },
    "id": "a2f3c3b54c426db2377a725c4a3ed873"
  },
  {
    "text": "(define-object half-start-wall-front-key (wall)\n  :input-slots\n  ((first-row :start-half)\n   (front-edge :keyed)))\n\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/building-hint-3.lisp",
      "file_name": "building-hint-3.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 3,
      "section": "half-start-wall-front-key"
    },
    "id": "ac851b3466569a3375364df09227bd8a"
  },
  {
    "text": "(define-object half-start-wall-rear-key (wall)\n  :input-slots\n  ((first-row :start-half)\n   (rear-edge :keyed)))\n\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/building-hint-3.lisp",
      "file_name": "building-hint-3.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 4,
      "section": "half-start-wall-rear-key"
    },
    "id": "eb62960167e60494d08c03e9749133d3"
  },
  {
    "text": "(define-object half-start-wall-both-key (wall)\n  :input-slots\n  ((first-row :start-half)\n   (front-edge :keyed)\n   (rear-edge :keyed)))\n\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/building-hint-3.lisp",
      "file_name": "building-hint-3.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 5,
      "section": "half-start-wall-both-key"
    },
    "id": "c64b9186d756ff413439f50ce5df3a9e"
  },
  {
    "text": "(define-object wall(box)\n  :input-slots\n  ((brick-height 45)\n   (brick-length 180)\n   (brick-width 90)\n   (mortar-joint-width 10)\n   (wall-length 3700)\n   (wall-height 900)\n   (first-row :start-full)\n   (front-edge :full)\n   (rear-edge :full))\n\n  :computed-slots\n  ((row-height (+ (the brick-height) (the mortar-joint-width)))\n   (number-of-rows (round-to-nearest (div (the wall-height) (the row-height)) 1))\n   (actual-wall-height (* (the row-height) (the number-of-rows)))\n   \n   ;; for the wall-length we need the number of full bricks\n   ;; if there are n full bricks then there will be (n-1) mortar joints\n   ;; so n*brick-length + n-1*mortar-joint-width = overall-length\n   ;; or n(brick-length + mortar-join-width) - mortar-joint-width = overall-length\n   ;; or n = (overall-length - mortar-joint-width)/(brick-length + mortar-joint-width)\n   (number-of-bricks (round-to-nearest (div (- (the wall-length) (the mortar-joint-width))\n\t\t\t\t\t    (+ (the brick-length) (the mortar-joint-width)))\n\t\t\t\t       1))\n   (actual-wall-length (+ (* (the number-of-bricks) (the brick-length))\n\t\t\t  (* (- (the number-of-bricks) 1) (the mortar-joint-width))))\n\n   ;; box inputs - gives the wall bounding box\n   (height (the actual-wall-height))\n   (width (the brick-width))\n   (length (the actual-wall-length))\n\n   (full-bricks (apply '+ (list-elements (the row) (the-element full-bricks))))\n   (half-bricks (apply '+ (list-elements (the row) (the-element half-bricks))))\n   (mortar-volume (apply '+ (list-elements (the row) (the-element mortar-volume))))\n   (mortar-density 2162)\n   (mortar-mass (* (the mortar-density) (div (the mortar-volume) 1000000000)))\n   )\n   \n     \n  :objects\n  ((row :type 'row\n     :sequence (:size (the number-of-rows))\n     :center (translate-along-vector (the (face-center :bottom))\n\t\t\t\t     (the (face-normal-vector :top))\n\t\t\t\t     (+ (half (the-child height))\n\t\t\t\t\t(* (the-child index) (the-child height))))\n     :height (+ (the brick-height) (the mortar-joint-width))\n     :full-bricks-per-row (the number-of-bricks)\n     :pass-down (brick-height\n\t\t brick-length\n\t\t brick-width\n\t\t mortar-joint-width\n\t\t length\n\t\t width\n\t\t first-row\n\t\t front-edge\n\t\t rear-edge))))\n\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/building-hint-3.lisp",
      "file_name": "building-hint-3.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 6,
      "section": "wall"
    },
    "id": "c273e990e63cb460d4ba7bcc21fa0c49"
  },
  {
    "text": "(define-object row (box)\n  :input-slots\n  (full-bricks-per-row\n   brick-height\n   brick-length\n   brick-width\n   mortar-joint-width\n   first-row\n   front-edge\n   rear-edge )\n\n  :computed-slots\n  ((full-brick-row? (cond ((eq (the first-row) :start-full)\n\t\t\t   (or (zerop (the index)) (evenp (the index))))\n\t\t\t  ((eq (the first-row) :start-half)\n\t\t\t   (not (or (zerop (the index)) (evenp (the index)))))))\n\t\t    \n   (full-bricks (the bricks-and-mortar full-bricks))\n   (half-bricks (the bricks-and-mortar half-bricks))\n   (mortar-volume (+ (the bricks-and-mortar mortar-joint-volume)\n\t\t     (the mortar-bed volume))))\n\n  :objects\n  ((bricks-and-mortar :type 'bricks-and-mortar\n\t\t      :height (the brick-height)\n\t\t      :center (translate-along-vector (the mortar-bed (face-center :top))\n\t\t\t\t\t\t      (the mortar-bed (face-normal-vector :top))\n\t\t\t\t\t\t      (half (the-child height)))\n\t\t      :pass-down (width\n\t\t\t\t  length\n\t\t\t\t  full-brick-row?\n\t\t\t\t  brick-height\n\t\t\t\t  brick-length\n\t\t\t\t  brick-width\n\t\t\t\t  mortar-joint-width\n\t\t\t\t  full-bricks-per-row\n\t\t\t\t  front-edge\n\t\t\t\t  rear-edge))\n   (mortar-bed :type 'box\n\t       :height (the mortar-joint-width)\n\t       :center (translate-along-vector (the (face-center :bottom))\n\t\t\t\t\t       (the (face-normal-vector :top))\n\t\t\t\t\t       (half (the-child height)))\n\t       :pass-down (width\n\t\t\t   length))))\n\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/building-hint-3.lisp",
      "file_name": "building-hint-3.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 7,
      "section": "row"
    },
    "id": "45f6f2cf58dcbbd0f7c9c2746a331dc9"
  },
  {
    "text": "(define-object bricks-and-mortar (box)\n  :input-slots\n  (full-brick-row?\n   full-bricks-per-row\n   brick-height\n   brick-length\n   brick-width\n   mortar-joint-width\n   front-edge\n   rear-edge)\n\n  :computed-slots\n  ((first-full-brick-start-point (if (the full-brick-row?)\n\t\t\t\t     (the (face-center :front))\n\t\t\t\t     (the (mortar-joint 0) (face-center :rear))))\n   \n   (first-mortar-joint-start-point (cond ((the full-brick-row?) (the (full-brick 0) (face-center :rear)))\n\t\t\t\t\t ((eq (the front-edge) :full) (the (half-brick 0) (face-center :rear)))\n\t\t\t\t\t ((eq (the front-edge) :keyed) (translate-along-vector (the (face-center :front))\n\t\t\t\t\t\t\t\t\t\t\t       (the (face-normal-vector :rear))\n\t\t\t\t\t\t\t\t\t\t\t       (half (the brick-length))))))\n\n   (number-of-full-bricks (if (the full-brick-row?)\n\t\t\t      (the full-bricks-per-row)\n\t\t\t      (- (the full-bricks-per-row) 1)))\n\n   (number-of-half-bricks (cond ((the full-brick-row?) 0)\n\t\t\t\t((and (eq (the front-edge) :full)(eq (the rear-edge) :full)) 2)\n\t\t\t\t((and (eq (the front-edge) :keyed) (eq (the rear-edge) :full)) 1)\n\t\t\t\t((and (eq (the front-edge) :full) (eq (the rear-edge) :keyed)) 1)\n\t\t\t\t((and (eq (the front-edge) :keyed) (eq (the rear-edge) :keyed)) 0)))\n\n   ;; whether or not the ends are :full or :keyed, the number of mortar joints remains the same since the mortar joint\n   ;; when it is :keyed is used to connect to the full brick of the other wall\n   (number-of-mortar-joints (if (the full-brick-row?)\n\t\t\t\t(- (the number-of-full-bricks) 1)\n\t\t\t\t(+ (the number-of-full-bricks) 1)))\n\n   ;; if it isn't a full brick row then there will be an extra joint because one\n   ;; full brick is replaced with 2 half bricks so without correcting the\n   ;; mortar-joint-width the ends of a full brick row and one starting and\n   ;; finishing with half bricks won't align. So we need to correct\n   ;; the mortar-joint-width\n   (corrected-joint-width (if (the full-brick-row?)\n\t\t\t\t     (the mortar-joint-width)\n\t\t\t\t     (let ((total-gap (* (- (the number-of-mortar-joints) 1)\n\t\t\t\t\t\t\t\t\t(the mortar-joint-width))))\n\t\t\t\t       (div total-gap (the number-of-mortar-joints)))))\n   ;; collating the output. We could do this analytically, but for this example we'll use the geometry\n   (full-bricks (length (list-elements (the full-brick))))\n   (half-bricks (length (list-elements (the half-brick))))\n   (mortar-joint-volume (apply '+ (list-elements (the mortar-joint)\n\t\t\t\t\t\t (the-element volume))))\n   )\n  \n  :functions\n  ((first-full-brick-center!\n    ()\n    (translate-along-vector (the first-full-brick-start-point)\n\t\t\t    (the (face-normal-vector :rear))\n\t\t\t    (half (the brick-length))))\n   \n   (other-full-brick-center!\n    (index)\n    ;; if its a full brick row, (full-brick 1) is positioned relative to (joint 0)\n    ;; if its a half brick row, (full-brick 1) is positioned relative to (joint 1)\n    (let ((ind (if (the full-brick-row?) (- index 1) index)))\n\t  (translate-along-vector (the (mortar-joint ind) (face-center :rear))\n\t\t\t\t  (the (face-normal-vector :rear))\n\t\t\t\t  (half (the brick-length)))))\n   \n    (first-joint-center!\n     ()\n     (translate-along-vector (the first-mortar-joint-start-point)\n\t\t\t     (the (face-normal-vector :rear))\n\t\t\t     (half (the corrected-joint-width))))\n   (other-joint-center!\n    (index)\n    ;; if its a full brick row, (joint 1) is positioned relative to (full-brick 1)\n    ;; if its a half brick row, (joint 1) is positioned relative to (full-brick 0)\n    (let ((ind (if (the full-brick-row?) index (- index 1))))\n      (translate-along-vector (the (full-brick ind) (face-center :rear))\n\t\t\t      (the (face-normal-vector :rear))\n\t\t\t      (half (the corrected-joint-width)))))\n\n    (first-half-brick-center!\n     ()\n     (translate-along-vector (the (face-center :front))\n\t\t\t     (the (face-normal-vector :rear))\n\t\t\t     (half (half (the brick-length)))))\n   \n   (last-half-brick-center!\n     ()\n     (translate-along-vector (theo (the mortar-joint last) (face-center :rear))\n\t\t\t     (the (face-normal-vector :rear))\n\t\t\t     (half (half (the brick-length))))))\n \t\t\t     \n  \n  :objects\n  ((full-brick :type 'box\n\t       :sequence (:size (the number-of-full-bricks))\n\t       :center (if (= (the-child index) 0)\n\t\t\t   (the first-full-brick-center!)\n\t\t\t   (the (other-full-brick-center! (the-child index))))\n\t       :length (the brick-length)\n\t       :height (the brick-height)\n\t       :width (the brick-width))\n\n   (half-brick :type 'box\n\t       :sequence (:size (the number-of-half-bricks))\n\t       :center (cond ((and (= (the-child index) 0)\n\t\t\t\t   (eq (the front-edge) :full)) (the first-half-brick-center!))\n\t\t\t     ((and (= (the-child index) 0)\n\t\t\t\t   (eq (the front-edge) :keyed)\n\t\t\t\t   (eq (the rear-edge) :full)) (the last-half-brick-center!))\n\t\t\t     ((eq (the rear-edge) :full) (the last-half-brick-center!)))\n\t       :length (half (the brick-length))\n\t       :height (the brick-height)\n\t       :width (the brick-width))\n\n   (mortar-joint :type 'box\n\t\t :sequence (:size (the number-of-mortar-joints))\n\t\t :center (if (= (the-child index) 0)\n\t\t\t     (the first-joint-center!)\n\t\t\t  (the (other-joint-center! (the-child index))))   \n\t\t :height (the brick-height)\n\t\t :width (the brick-width)\n\t\t :length (the corrected-joint-width))))\n\n\n\n\n\n\n\n\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/building-hint-3.lisp",
      "file_name": "building-hint-3.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 8,
      "section": "bricks-and-mortar"
    },
    "id": "40d1a4fc3ced8f51c9bb362339fa6561"
  },
  {
    "text": "(define-object truss (box)\n  :input-slots\n  ((truss-length 2000)\n   (truss-height nil)\n   (truss-angle 30)\n\n   (beam-width 30)\n   (beam-height 50)\n   (wall-thickness 3)\n\n   (material-density 7800)\n   (tonne-rate 450))\n\n  :computed-slots\n  ((length (the truss-length))\n   (height (cond ((the truss-height)(the truss-height))\n\t\t ((the truss-angle) (+ (* (half (the truss-length))\n\t\t\t\t\t  (tan (degrees-to-radians (the truss-angle))))\n\t\t\t\t       (the beam-height)))))\n   (width (the beam-width))\n  \n   (truss-front-slope-vector (the (get-slope-vector! :front)))\n   (truss-rear-slope-vector (the (get-slope-vector! :rear)))\n\n   (front-slope-length (the (get-slope-length! :front)))\n   (rear-slope-length (the (get-slope-length! :rear)))\n   \n   (front-slope-center (the (get-slope-center! :front)))\n   (rear-slope-center (the (get-slope-center! :rear)))\n   \n\n   (beam-properties (mapsend (the children) :beam-properties))\n   (total-mass (round-to-nearest\n\t\t(apply '+\n\t\t       (mapcar #'(lambda(a) (getf a :mass-kg))\n\t\t\t       (the beam-properties)))\n\t\t0.001))\n   (total-cost (round-to-nearest\n\t\t(apply '+\n\t\t       (mapcar #'(lambda(a) (getf a :cost-gbp))\n\t\t\t       (the beam-properties)))\n\t\t0.01))\n   )\n\n  :functions\n  ((get-slope-vector! (beam-side)\n\t\t      (let ((v-key (the (get-v-key! beam-side)))\n\t\t\t    (l-key (the (get-l-key! beam-side))))\n\t\t      (subtract-vectors (the vertical-beam (edge-center :rear v-key))\n\t\t\t\t\t(the lower-beam (edge-center l-key :top)))))\n   (get-slope-length! (beam-side)\n\t\t      (let ((v-key (the (get-v-key! beam-side)))\n\t\t\t    (l-key (the (get-l-key! beam-side))))\n\t\t\t(3d-distance (the vertical-beam (edge-center :rear v-key))\n\t\t\t\t     (the lower-beam (edge-center l-key :top)))))\n   (get-slope-center!\n    (beam-side)\n    (let ((pt (case beam-side\n\t\t(:front (the front-slope-construction-line center))\n\t\t(:rear  (the rear-slope-construction-line center))))\n\t  (norm-vector (case beam-side\n\t\t\t (:front (the front-slope-beam (face-normal-vector :bottom)))\n\t\t\t (:rear (the rear-slope-beam (face-normal-vector :bottom))))))\n      (translate-along-vector pt\n\t\t\t      norm-vector\n\t\t\t      (half (the beam-height)))))\n   (get-v-key! (beam-side)\n\t       (case beam-side\n\t\t (:front :top)\n\t\t (:rear :bottom)))\n   (get-l-key! (beam-side)\n\t       (case beam-side\n\t\t (:front :front)\n\t\t (:rear :rear)))\n\n   \n   )\n   \n\t\t\t\t       \n  :objects\n  ((lower-beam :type 'beam\n\t       :pass-down (:beam-height :beam-width :wall-thickness :material-density :tonne-rate)\n\t       :beam-length (the truss-length)\n\t       :center (translate-along-vector (the (face-center :bottom))\n\t\t\t\t\t       (the (face-normal-vector :top))\n\t\t\t\t\t       (half (the beam-height))))\n   (vertical-beam :type 'beam\n\t\t  :pass-down (:beam-height :beam-width :wall-thickness :material-density :tonne-rate)\n\t\t  \n\t\t  :beam-length (- (the height) (the beam-height))\n\t\t  :orientation (alignment :rear (the (face-normal-vector :top))\n\t\t\t\t\t  :right (the (face-normal-vector :right)))  \n\t\t  :center (translate-along-vector (the lower-beam (face-center :top))\n\t\t\t\t\t\t  (the lower-beam (face-normal-vector :top))\n\t\t\t\t\t\t  (half (the-child beam-length))))\n   (front-slope-beam :type 'beam\n\t\t     :pass-down (:beam-height :beam-width :wall-thickness :material-density :tonne-rate)\n\t\t     :beam-length (the front-slope-length)\n\t\t     :center (the front-slope-center)\n\t\t     :orientation (alignment :rear (the truss-front-slope-vector)\n\t\t\t\t\t     :right (the (face-normal-vector :right))))\n\n   (rear-slope-beam :type 'beam\n\t\t     :pass-down (:beam-height :beam-width :wall-thickness :material-density :tonne-rate)\n\t\t     :beam-length (the rear-slope-length)\n\t\t     :center (the rear-slope-center)\n\t\t    :orientation (alignment :rear (the truss-rear-slope-vector)\n\t\t\t\t\t    :left (the (face-normal-vector :right))))\n   \n   )\n\n  :hidden-objects\n  ((front-slope-construction-line :type 'line\n\t\t\t\t  :start (the lower-beam (edge-center :front :top))\n\t\t\t\t  :end (the vertical-beam (edge-center :rear :top)))\n   (rear-slope-construction-line :type 'line\n\t\t\t\t :start (the lower-beam (edge-center :rear :top))\n\t\t\t\t :end (the vertical-beam (edge-center :rear :bottom)))\n   \n   (front-mid-pt :type 'sphere\n\t\t :display-controls (list :color :blue)\n\t\t :radius 5\n\t\t :center (the front-slope-construction-line center))\n   (rear-mid-pt :type 'sphere\n\t\t:display-controls (list :color :blue)\n\t\t:center (the rear-slope-construction-line center)\n\t\t:radius 5)\n   (pt-1 :type 'sphere\n\t :radius 5\n\t :display-controls (list :color :green)\n\t :center (the lower-beam (edge-center :rear :top)))\n   (pt-2 :type 'sphere\n\t :radius 5\n\t :display-controls (list :color :red)\n\t :center (the vertical-beam (edge-center :rear :bottom)) )\n\n   \n\n   (vector-line :type 'vector-line\n\t\t:start-point (the rear-slope-construction-line center)\n\t\t:vector (the rear-slope-beam (face-normal-vector :bottom))\n\t\t:length 150)\n   \n   )))\n\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/building-hint-3.lisp",
      "file_name": "building-hint-3.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 9,
      "section": "truss"
    },
    "id": "cc8703cdbfbf5b47e7ce9f937a48d3a1"
  },
  {
    "text": "(define-object vector-line (box)\n  :input-slots\n  ((start-point (make-point 0 0 0))\n   (vector (make-vector 1 0 1))\n   (length 50)\n   (width 1))\n  :computed-slots\n  ((height (div (the length) 5)))\n  :objects\n  ((v-line :type 'line\n\t   :start (the start-point)\n\t   :display-controls (list :color :red)\n\t   :end (translate-along-vector (the start-point)\n\t\t\t\t\t(the vector)\n\t\t\t\t\t(the length)))\n   (arrow :type 'cone\n\t  :radius-1 0\n\t  :radius-2 (div (the length) 50)\n\t  :length (div (the length) 5)\n\t  :display-controls (list :color :red)\n\t  :center (translate-along-vector (the v-line end)\n\t\t\t\t\t  (the vector)\n\t\t\t\t\t  (half (the-child length)))\n\t  :orientation (alignment :front (the vector)))))\n\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/building-hint-3.lisp",
      "file_name": "building-hint-3.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 10,
      "section": "vector-line"
    },
    "id": "0f786d84dc21aa373cd76417d73fca62"
  },
  {
    "text": "(define-object beam (box)\n  :input-slots\n  ((beam-length 1000)\n   (beam-width 40)\n   (beam-height 50)\n   (wall-thickness 2)\n   (material-density 7800)\n   (tonne-rate 500))\n\n  :computed-slots\n  ((length (the beam-length))\n   (width (the beam-width))\n   (height (the beam-height))\n\n   (beam-volume (- (the outer volume) (the inner volume)))\n   (beam-mass (* (div (the beam-volume) 1000000000) (the material-density)))\n   (beam-cost (* (the tonne-rate) (div (the beam-mass) 1000)))\n   (beam-properties (list :volume-mm3 (the beam-volume)\n\t\t\t  :mass-kg (round-to-nearest (the beam-mass) 0.01)\n\t\t\t  :cost-gbp (round-to-nearest (the beam-cost) 0.01)\n\t\t\t  :length-mm (the beam-length)\n\t\t\t  :width-mm (the beam-width)\n\t\t\t  :height-mm (the beam-height)\n\t\t\t  :thickness-mm (the wall-thickness))))\n   \n  :objects\n  ((outer :type 'box\n\t  :length (the beam-length)\n\t  :width (the beam-width)\n\t  :height (the beam-height))\n\n   (inner :type 'box\n\t  :length (the beam-length)\n\t  :width (- (the beam-width) (twice (the wall-thickness)))\n\t  :height (- (the beam-height) (twice (the wall-thickness)))))\n  )\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/building-hint-3.lisp",
      "file_name": "building-hint-3.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 11,
      "section": "beam"
    },
    "id": "fa9fc14e0285d2e386e7a377bf418d1c"
  },
  {
    "text": "(in-package :gdl-user)\n\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/wall-hint-6.lisp",
      "file_name": "wall-hint-6.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 0,
      "section": "header"
    },
    "id": "db236b769ee5e636b354055a6b618faf"
  },
  {
    "text": "(define-object wall(box)\n  :input-slots\n  ((brick-height 45)\n   (brick-length 180)\n   (brick-width 90)\n   (mortar-joint-width 10)\n   (wall-length 3700)\n   (wall-height 900))\n\n  :computed-slots\n  ((row-height (+ (the brick-height) (the mortar-joint-width)))\n   (number-of-rows (round-to-nearest (div (the wall-height) (the row-height)) 1))\n   (actual-wall-height (* (the row-height) (the number-of-rows)))\n   \n   ;; for the wall-length we need the number of full bricks\n   ;; if there are n full bricks then there will be (n-1) mortar joints\n   ;; so n*brick-length + n-1*mortar-joint-width = overall-length\n   ;; or n(brick-length + mortar-join-width) - mortar-joint-width = overall-length\n   ;; or n = (overall-length - mortar-joint-width)/(brick-length + mortar-joint-width)\n   (number-of-bricks (round-to-nearest (div (- (the wall-length) (the mortar-joint-width))\n\t\t\t\t\t    (+ (the brick-length) (the mortar-joint-width)))\n\t\t\t\t       1))\n   (actual-wall-length (+ (* (the number-of-bricks) (the brick-length))\n\t\t\t  (* (- (the number-of-bricks) 1) (the mortar-joint-width))))\n\n   ;; box inputs - gives the wall bounding box\n   (height (the actual-wall-height))\n   (width (the brick-width))\n   (length (the actual-wall-length)))\n   \n     \n  :objects\n  ((row :type 'row\n     :sequence (:size (the number-of-rows))\n     :center (translate-along-vector (the (face-center :bottom))\n\t\t\t\t     (the (face-normal-vector :top))\n\t\t\t\t     (+ (half (the-child height))\n\t\t\t\t\t(* (the-child index) (the-child height))))\n     :height (+ (the brick-height) (the mortar-joint-width))\n     :full-bricks-per-row (the number-of-bricks)\n     :pass-down (brick-height\n\t\t brick-length\n\t\t brick-width\n\t\t mortar-joint-width\n\t\t length\n\t\t width))))\n\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/wall-hint-6.lisp",
      "file_name": "wall-hint-6.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 0,
      "section": "wall"
    },
    "id": "db236b769ee5e636b354055a6b618faf"
  },
  {
    "text": "(define-object row (box)\n  :input-slots\n  (full-bricks-per-row\n   brick-height\n   brick-length\n   brick-width\n   mortar-joint-width)\n\n  :computed-slots\n  ((full-brick-row? (or (zerop (the index)) (evenp (the index)))))\n\n  :objects\n  ((bricks-and-mortar :type 'bricks-and-mortar\n\t\t      :height (the brick-height)\n\t\t      :center (translate-along-vector (the mortar-bed (face-center :top))\n\t\t\t\t\t\t      (the mortar-bed (face-normal-vector :top))\n\t\t\t\t\t\t      (half (the-child height)))\n\t\t      :pass-down (width\n\t\t\t\t  length\n\t\t\t\t  full-brick-row?\n\t\t\t\t  brick-height\n\t\t\t\t  brick-length\n\t\t\t\t  brick-width\n\t\t\t\t  mortar-joint-width\n\t\t\t\t  full-bricks-per-row))\n   (mortar-bed :type 'box\n\t       :height (the mortar-joint-width)\n\t       :center (translate-along-vector (the (face-center :bottom))\n\t\t\t\t\t       (the (face-normal-vector :top))\n\t\t\t\t\t       (half (the-child height)))\n\t       :pass-down (width\n\t\t\t   length))))\n\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/wall-hint-6.lisp",
      "file_name": "wall-hint-6.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 1,
      "section": "row"
    },
    "id": "9f47f473ac2d7fe9d46215f16e821759"
  },
  {
    "text": "(define-object bricks-and-mortar (box)\n  :input-slots\n  (full-brick-row?\n   full-bricks-per-row\n   brick-height\n   brick-length\n   brick-width\n   mortar-joint-width)\n\n  :computed-slots\n  ((first-full-brick-start-point (if (the full-brick-row?)\n\t\t\t\t     (the (face-center :front))\n\t\t\t\t     (the (mortar-joint 0) (face-center :rear))))\n   \n   (first-mortar-joint-start-point (if (the full-brick-row?)\n\t\t\t\t       (the (full-brick 0) (face-center :rear))\n\t\t\t\t       (the (half-brick 0) (face-center :rear))))\n\n   (number-of-full-bricks (if (the full-brick-row?)\n\t\t\t      (the full-bricks-per-row)\n\t\t\t      (- (the full-bricks-per-row) 1)))\n\n   (number-of-mortar-joints (if (the full-brick-row?)\n\t\t\t\t(- (the number-of-full-bricks) 1)\n\t\t\t\t(+ (the number-of-full-bricks) 1)))\n\n   ;; if it isn't a full brick row then there will be an extra joint because one\n   ;; full brick is replaced with 2 half bricks so without correcting the\n   ;; mortar-joint-width the ends of a full brick row and one starting and\n   ;; finishing with half bricks won't align. So we need to correct\n   ;; the mortar-joint-width\n   (corrected-joint-width (if (the full-brick-row?)\n\t\t\t\t     (the mortar-joint-width)\n\t\t\t\t     (let ((total-gap (* (- (the number-of-mortar-joints) 1)\n\t\t\t\t\t\t\t\t\t(the mortar-joint-width))))\n\t\t\t\t       (div total-gap (the number-of-mortar-joints))))))\n  \n  :functions\n  ((first-full-brick-center!\n    ()\n    (translate-along-vector (the first-full-brick-start-point)\n\t\t\t    (the (face-normal-vector :rear))\n\t\t\t    (half (the brick-length))))\n   \n   (other-full-brick-center!\n    (index)\n    ;; if its a full brick row, (full-brick 1) is positioned relative to (joint 0)\n    ;; if its a half brick row, (full-brick 1) is positioned relative to (joint 1)\n    (let ((ind (if (the full-brick-row?) (- index 1) index)))\n\t  (translate-along-vector (the (mortar-joint ind) (face-center :rear))\n\t\t\t\t  (the (face-normal-vector :rear))\n\t\t\t\t  (half (the brick-length)))))\n   \n    (first-joint-center!\n     ()\n     (translate-along-vector (the first-mortar-joint-start-point)\n\t\t\t     (the (face-normal-vector :rear))\n\t\t\t     (half (the corrected-joint-width))))\n   (other-joint-center!\n    (index)\n    ;; if its a full brick row, (joint 1) is positioned relative to (full-brick 1)\n    ;; if its a half brick row, (joint 1) is positioned relative to (full-brick 0)\n    (let ((ind (if (the full-brick-row?) index (- index 1))))\n      (translate-along-vector (the (full-brick ind) (face-center :rear))\n\t\t\t      (the (face-normal-vector :rear))\n\t\t\t      (half (the corrected-joint-width)))))\n\n    (first-half-brick-center!\n     ()\n     (translate-along-vector (the (face-center :front))\n\t\t\t     (the (face-normal-vector :rear))\n\t\t\t     (half (half (the brick-length)))))\n   \n   (last-half-brick-center!\n     ()\n     (translate-along-vector (theo (the mortar-joint last) (face-center :rear))\n\t\t\t     (the (face-normal-vector :rear))\n\t\t\t     (half (half (the brick-length))))))\n \t\t\t     \n  \n  :objects\n  ((full-brick :type 'box\n\t       :sequence (:size (the number-of-full-bricks))\n\t       :center (if (= (the-child index) 0)\n\t\t\t   (the first-full-brick-center!)\n\t\t\t   (the (other-full-brick-center! (the-child index))))\n\t       :length (the brick-length)\n\t       :height (the brick-height)\n\t       :width (the brick-width))\n\n   (half-brick :type 'box\n\t       :sequence (:size (if (the full-brick-row?) 0 2))\n\t       :center (if (= (the-child index) 0)\n\t\t\t   (the first-half-brick-center!)\n\t\t\t   (the last-half-brick-center!))\n\t       :length (half (the brick-length))\n\t       :height (the brick-height)\n\t       :width (the brick-width))\n\n   (mortar-joint :type 'box\n\t\t :sequence (:size (the number-of-mortar-joints))\n\t\t :center (if (= (the-child index) 0)\n\t\t\t     (the first-joint-center!)\n\t\t\t  (the (other-joint-center! (the-child index))))   \n\t\t :height (the brick-height)\n\t\t :width (the brick-width)\n\t\t :length (the corrected-joint-width))))\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/wall-hint-6.lisp",
      "file_name": "wall-hint-6.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 2,
      "section": "bricks-and-mortar"
    },
    "id": "5beb18e6ca1af1362f4100525a0907f9"
  },
  {
    "text": "(in-package :gdl-user)\n\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/truss-hint-8.lisp",
      "file_name": "truss-hint-8.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 0,
      "section": "header"
    },
    "id": "74fa407df44cbf46555f12528bfc7209"
  },
  {
    "text": "(defun degrees-to-radians (degrees)\n  (div (* degrees pi) 180))\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/truss-hint-8.lisp",
      "file_name": "truss-hint-8.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 0,
      "section": "degrees-to-radians"
    },
    "id": "74fa407df44cbf46555f12528bfc7209"
  },
  {
    "text": "(define-object truss-assembly (box)\n  :computed-slots\n  ((length 200)\n   (height 200)\n   (width 200)\n   (number-of-roof-trusses 2)\n   (truss-angle 30)\n   (beam-width 30)\n   (beam-height 50)\n   (wall-thickness 3)\n   (material-density 7800)\n   (truss-offsets (list 0 500))\n   )\n  :objects\n  ((roof-truss :type 'truss\n\t       :sequence (:size (the number-of-roof-trusses))\n\t       :truss-length 1500\n\t       :center (translate-along-vector\n\t\t\t(translate-along-vector (the (edge-center :front :top))\n\t\t\t\t\t\t(the (face-normal-vector :top))\n\t\t\t\t\t\t(half (the-child height)))\n\t\t\t(the (face-normal-vector :rear))\n\t\t\t(nth (the-child index) (the truss-offsets)))\n\t       :orientation (alignment :rear (the (face-normal-vector :right))\n\t\t\t\t       :top (the (face-normal-vector :top))\n\t\t\t\t       )\t\t\n\t       :pass-down (truss-angle\n\t\t\t   beam-width\n\t\t\t   beam-height\n\t\t\t   wall-thickness\n\t\t\t   material-density)))\n  )\n\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/truss-hint-8.lisp",
      "file_name": "truss-hint-8.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 1,
      "section": "truss-assembly"
    },
    "id": "b4cc5d0467198f66a267d3af16a63c02"
  },
  {
    "text": "(define-object truss (box)\n  :input-slots\n  ((truss-length 2000)\n   (truss-height nil)\n   (truss-angle 30)\n\n   (beam-width 30)\n   (beam-height 50)\n   (wall-thickness 3)\n\n   (material-density 7800)\n   (tonne-rate 450))\n\n  :computed-slots\n  ((length (the truss-length))\n   (height (cond ((the truss-height)(the truss-height))\n\t\t ((the truss-angle) (+ (* (half (the truss-length))\n\t\t\t\t\t  (tan (degrees-to-radians (the truss-angle))))\n\t\t\t\t       (the beam-height)))))\n   (width (the beam-width))\n  \n   (truss-front-slope-vector (the (get-slope-vector! :front)))\n   (truss-rear-slope-vector (the (get-slope-vector! :rear)))\n\n   (front-slope-length (the (get-slope-length! :front)))\n   (rear-slope-length (the (get-slope-length! :rear)))\n   \n   (front-slope-center (the (get-slope-center! :front)))\n   (rear-slope-center (the (get-slope-center! :rear)))\n   \n\n   (beam-properties (mapsend (the children) :beam-properties))\n   (total-mass (round-to-nearest\n\t\t(apply '+\n\t\t       (mapcar #'(lambda(a) (getf a :mass-kg))\n\t\t\t       (the beam-properties)))\n\t\t0.001))\n   (total-cost (round-to-nearest\n\t\t(apply '+\n\t\t       (mapcar #'(lambda(a) (getf a :cost-gbp))\n\t\t\t       (the beam-properties)))\n\t\t0.01))\n   )\n\n  :functions\n  ((get-slope-vector! (beam-side)\n\t\t      (let ((v-key (the (get-v-key! beam-side)))\n\t\t\t    (l-key (the (get-l-key! beam-side))))\n\t\t      (subtract-vectors (the vertical-beam (edge-center :rear v-key))\n\t\t\t\t\t(the lower-beam (edge-center l-key :top)))))\n   (get-slope-length! (beam-side)\n\t\t      (let ((v-key (the (get-v-key! beam-side)))\n\t\t\t    (l-key (the (get-l-key! beam-side))))\n\t\t\t(3d-distance (the vertical-beam (edge-center :rear v-key))\n\t\t\t\t     (the lower-beam (edge-center l-key :top)))))\n   (get-slope-center!\n    (beam-side)\n    (let ((pt (case beam-side\n\t\t(:front (the front-slope-construction-line center))\n\t\t(:rear  (the rear-slope-construction-line center))))\n\t  (norm-vector (case beam-side\n\t\t\t (:front (the front-slope-beam (face-normal-vector :bottom)))\n\t\t\t (:rear (the rear-slope-beam (face-normal-vector :bottom))))))\n      (translate-along-vector pt\n\t\t\t      norm-vector\n\t\t\t      (half (the beam-height)))))\n   (get-v-key! (beam-side)\n\t       (case beam-side\n\t\t (:front :top)\n\t\t (:rear :bottom)))\n   (get-l-key! (beam-side)\n\t       (case beam-side\n\t\t (:front :front)\n\t\t (:rear :rear)))\n\n   \n   )\n   \n\t\t\t\t       \n  :objects\n  ((lower-beam :type 'beam\n\t       :pass-down (:beam-height :beam-width :wall-thickness :material-density :tonne-rate)\n\t       :beam-length (the truss-length)\n\t       :center (translate-along-vector (the (face-center :bottom))\n\t\t\t\t\t       (the (face-normal-vector :top))\n\t\t\t\t\t       (half (the beam-height))))\n   (vertical-beam :type 'beam\n\t\t  :pass-down (:beam-height :beam-width :wall-thickness :material-density :tonne-rate)\n\t\t  \n\t\t  :beam-length (- (the height) (the beam-height))\n\t\t  :orientation (alignment :rear (the (face-normal-vector :top))\n\t\t\t\t\t  :right (the (face-normal-vector :right)))  \n\t\t  :center (translate-along-vector (the lower-beam (face-center :top))\n\t\t\t\t\t\t  (the lower-beam (face-normal-vector :top))\n\t\t\t\t\t\t  (half (the-child beam-length))))\n   (front-slope-beam :type 'beam\n\t\t     :pass-down (:beam-height :beam-width :wall-thickness :material-density :tonne-rate)\n\t\t     :beam-length (the front-slope-length)\n\t\t     :center (the front-slope-center)\n\t\t     :orientation (alignment :rear (the truss-front-slope-vector)\n\t\t\t\t\t     :right (the (face-normal-vector :right))))\n\n   (rear-slope-beam :type 'beam\n\t\t     :pass-down (:beam-height :beam-width :wall-thickness :material-density :tonne-rate)\n\t\t     :beam-length (the rear-slope-length)\n\t\t     :center (the rear-slope-center)\n\t\t    :orientation (alignment :rear (the truss-rear-slope-vector)\n\t\t\t\t\t    :left (the (face-normal-vector :right))))\n   \n   )\n\n  :hidden-objects\n  ((front-slope-construction-line :type 'line\n\t\t\t\t  :start (the lower-beam (edge-center :front :top))\n\t\t\t\t  :end (the vertical-beam (edge-center :rear :top)))\n   (rear-slope-construction-line :type 'line\n\t\t\t\t :start (the lower-beam (edge-center :rear :top))\n\t\t\t\t :end (the vertical-beam (edge-center :rear :bottom)))\n   \n   (front-mid-pt :type 'sphere\n\t\t :display-controls (list :color :blue)\n\t\t :radius 5\n\t\t :center (the front-slope-construction-line center))\n   (rear-mid-pt :type 'sphere\n\t\t:display-controls (list :color :blue)\n\t\t:center (the rear-slope-construction-line center)\n\t\t:radius 5)\n   (pt-1 :type 'sphere\n\t :radius 5\n\t :display-controls (list :color :green)\n\t :center (the lower-beam (edge-center :rear :top)))\n   (pt-2 :type 'sphere\n\t :radius 5\n\t :display-controls (list :color :red)\n\t :center (the vertical-beam (edge-center :rear :bottom)) )\n\n   \n\n   (vector-line :type 'vector-line\n\t\t:start-point (the rear-slope-construction-line center)\n\t\t:vector (the rear-slope-beam (face-normal-vector :bottom))\n\t\t:length 150)\n   \n   ))\n\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/truss-hint-8.lisp",
      "file_name": "truss-hint-8.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 2,
      "section": "truss"
    },
    "id": "d34dc417b9f2f986fbe5f02ab07418b7"
  },
  {
    "text": "(define-object vector-line (box)\n  :input-slots\n  ((start-point (make-point 0 0 0))\n   (vector (make-vector 1 0 1))\n   (length 50)\n   (width 1))\n  :computed-slots\n  ((height (div (the length) 5)))\n  :objects\n  ((v-line :type 'line\n\t   :start (the start-point)\n\t   :display-controls (list :color :red)\n\t   :end (translate-along-vector (the start-point)\n\t\t\t\t\t(the vector)\n\t\t\t\t\t(the length)))\n   (arrow :type 'cone\n\t  :radius-1 0\n\t  :radius-2 (div (the length) 50)\n\t  :length (div (the length) 5)\n\t  :display-controls (list :color :red)\n\t  :center (translate-along-vector (the v-line end)\n\t\t\t\t\t  (the vector)\n\t\t\t\t\t  (half (the-child length)))\n\t  :orientation (alignment :front (the vector)))))\n\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/truss-hint-8.lisp",
      "file_name": "truss-hint-8.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 3,
      "section": "vector-line"
    },
    "id": "facb3e75ce377697647953fb2d6f76cc"
  },
  {
    "text": "(define-object beam (box)\n  :input-slots\n  ((beam-length 1000)\n   (beam-width 40)\n   (beam-height 50)\n   (wall-thickness 2)\n   (material-density 7800)\n   (tonne-rate 500))\n\n  :computed-slots\n  ((length (the beam-length))\n   (width (the beam-width))\n   (height (the beam-height))\n\n   (beam-volume (- (the outer volume) (the inner volume)))\n   (beam-mass (* (div (the beam-volume) 1000000000) (the material-density)))\n   (beam-cost (* (the tonne-rate) (div (the beam-mass) 1000)))\n   (beam-properties (list :volume-mm3 (the beam-volume)\n\t\t\t  :mass-kg (round-to-nearest (the beam-mass) 0.01)\n\t\t\t  :cost-gbp (round-to-nearest (the beam-cost) 0.01)\n\t\t\t  :length-mm (the beam-length)\n\t\t\t  :width-mm (the beam-width)\n\t\t\t  :height-mm (the beam-height)\n\t\t\t  :thickness-mm (the wall-thickness))))\n   \n  :objects\n  ((outer :type 'box\n\t  :length (the beam-length)\n\t  :width (the beam-width)\n\t  :height (the beam-height))\n\n   (inner :type 'box\n\t  :length (the beam-length)\n\t  :width (- (the beam-width) (twice (the wall-thickness)))\n\t  :height (- (the beam-height) (twice (the wall-thickness)))))\n  )\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/truss-hint-8.lisp",
      "file_name": "truss-hint-8.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 4,
      "section": "beam"
    },
    "id": "cfdfe856a23fc0a337c1d3eb77d9e2de"
  },
  {
    "text": "(in-package :gdl-user)\n\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/mixins.lisp",
      "file_name": "mixins.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 0,
      "section": "header"
    },
    "id": "8fd484ec0dcaa34ccc396a16ebcc2044"
  },
  {
    "text": "(define-object object-1 (box)\n\n  :input-slots\n  ((length 2)\n   (width 3)\n   (height 4))\n  )\n\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/mixins.lisp",
      "file_name": "mixins.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 0,
      "section": "object-1"
    },
    "id": "8fd484ec0dcaa34ccc396a16ebcc2044"
  },
  {
    "text": "(define-object my-object (base-object)\n  :computed-slots\n  ((volume \"not computed\"))\n  )\n   \n\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/mixins.lisp",
      "file_name": "mixins.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 1,
      "section": "my-object"
    },
    "id": "fb7c6113e82dd29ae71f91e2683d472c"
  },
  {
    "text": "(define-object object-2 (object-1 my-object)\n  )\n\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/mixins.lisp",
      "file_name": "mixins.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 2,
      "section": "object-2"
    },
    "id": "4613f55e4d66a944e039da9556955270"
  },
  {
    "text": "(define-object object-3 (my-object object-1)\n  )\n\n;;\n;; make object-1, volume is the standard box version of volume (* length width height)\n;;\n;; GDL-USER> (make-self 'object-1)\n;; #<OBJECT-1 #x21041A35AD>\n;; GDL-USER> (the volume)\n;; 24\n;;\n;; now make object-2, whilst my-object defines volume, because its mixed in after object-1, the\n;; object-1 definition for volume, which comes from box, takes precedence\n;;\n;; GDL-USER> (make-self 'object-2)\n;; #<OBJECT-2 #x21041981AD>\n;; GDL-USER> (the volume)\n;; 24\n;;\n;; now make object-3. the definition of volume from my-ovject takes precedence over the definition in\n;; object-1 which is derived from box\n;;\n;; GDL-USER> (make-self 'object-3)\n;; #<OBJECT-3 #x21042FBB5D>\n;; GDL-USER> (the volume)\n;; \"not computed\"\n;;\n;; to get an idea of whats happening, with object-3 still set as self we can send it the message (the mixins)\n;; which returns us the mixins list for object-3\n;; GDL-USER> (the mixins)\n;; (MY-OBJECT OBJECT-1)\n;;\n;; not hugely helpful. But if we send it (the all-mixins) message we get a list back of all of the mixins\n;; used in object-3 which is derived recursively, placed in order of priority and any duplicates removed\n;;\n;; GDL-USER> (the all-mixins)\n;; (MY-OBJECT BASE-OBJECT VANILLA-MIXIN VANILLA-MIXIN* STANDARD-OBJECT T GENDL::GDL-BASIS OBJECT-1 BOX)\n;;\n;; so first we get my-object, but it has base-object mixed in. base-object however mixies in vanilla-mixin\n;; which in turn mixes in vanilla-mixin* etc. when all of the mixins used in my-object have been listed\n;; we then start with object-1, which has box mixed into it, but then nothing after box...\n;;\n;; so if we make box and send it (the all-mixins) message we can see that it mixes in base-object, which we\n;; have already covered from my-object\n;;\n;; GDL-USER> (make-self 'box)\n;; #<BOX #x21044BA30D>\n;; GDL-USER> (the all-mixins)\n;; (BASE-OBJECT VANILLA-MIXIN VANILLA-MIXIN* STANDARD-OBJECT T GENDL::GDL-BASIS)\n;;\n;; (the all-mixins) effectively gives us all of the mixins in use for the current object ordered left to\n;; right by priority\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/mixins.lisp",
      "file_name": "mixins.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 3,
      "section": "object-3"
    },
    "id": "d714469466d8d2e5e197602cbf790d1c"
  },
  {
    "text": "(in-package :gdl-user)\n\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/truss-hint-2.lisp",
      "file_name": "truss-hint-2.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 0,
      "section": "header"
    },
    "id": "215076461d1f3a355fe77b2263ef014b"
  },
  {
    "text": "(define-object truss ()\n\n  :objects\n  ((lower-beam :type 'beam)\n   (vertical-beam :type 'beam)\n   (front-slope-beam :type 'beam)\n   (rear-slope-beam :type 'beam)))\n\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/truss-hint-2.lisp",
      "file_name": "truss-hint-2.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 0,
      "section": "truss"
    },
    "id": "215076461d1f3a355fe77b2263ef014b"
  },
  {
    "text": "(define-object beam (box)\n  :input-slots\n  ((beam-length 1000)\n   (beam-width 40)\n   (beam-height 50)\n   (wall-thickness 2)\n   (material-density 7800)\n   (tonne-rate 500))\n\n  :computed-slots\n  ((length (the beam-length))\n   (width (the beam-width))\n   (height (the beam-height))\n\n   (beam-volume (- (the outer volume) (the inner volume)))\n   (beam-mass (* (div (the beam-volume) 1000000000) (the material-density)))\n   (beam-cost (* (the tonne-rate) (div (the beam-mass) 1000)))\n   (beam-properties (list :volume-mm3 (the beam-volume)\n\t\t\t  :mass-kg (round-to-nearest (the beam-mass) 0.01)\n\t\t\t  :cost-gbp (round-to-nearest (the beam-cost) 0.01)\n\t\t\t  :length-mm (the beam-length)\n\t\t\t  :width-mm (the beam-width)\n\t\t\t  :height-mm (the beam-height)\n\t\t\t  :thickness-mm (the wall-thickness))))\n   \n  :objects\n  ((outer :type 'box\n\t  :length (the beam-length)\n\t  :width (the beam-width)\n\t  :height (the beam-height))\n\n   (inner :type 'box\n\t  :length (the beam-length)\n\t  :width (- (the beam-width) (twice (the wall-thickness)))\n\t  :height (- (the beam-height) (twice (the wall-thickness)))))\n  )\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/truss-hint-2.lisp",
      "file_name": "truss-hint-2.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 1,
      "section": "beam"
    },
    "id": "13699f003de00cef1ab128578de51633"
  },
  {
    "text": "(in-package :gdl-user)\n\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/using-conditionals.lisp",
      "file_name": "using-conditionals.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 0,
      "section": "header"
    },
    "id": "7877c2a5d83d81c8cb0451dc07ade713"
  },
  {
    "text": "(define-object assembly-8 (base-object)\n  :input-slots\n  ((box-lengths (list 2 5 8 12)))\n  :computed-slots\n  ((number-of-boxes (if (> (length (the box-lengths)) 3)\n\t\t\t3\n\t\t\t(length (the box-lengths))))\n\n   (box-centers (case (the number-of-boxes)\n\t\t  (1 (list (make-point 0 0 0)))\n\t\t  (2 (list (make-point 0 0 0)\n\t\t\t   (make-point 6 0 0)))\n\t\t  (3 (list (make-point 0 0 0)\n\t\t\t    (make-point 6 0 0)\n\t\t\t    (make-point 12 0 0)))))\n   \n   \n   (box-volumes (list-elements (the my-box) (the-element volume)))\n   (box-1-volume (nth 0 (the box-volumes))))\n\n  :objects\n  ((my-box :type 'box\n\t   :sequence (:size (the number-of-boxes))\n\t   :length (nth (the-child index) (the box-lengths))\n\t   :width 2\n\t   :height 1\n\t   :center (nth (the-child index) (the box-centers)))))\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/using-conditionals.lisp",
      "file_name": "using-conditionals.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 0,
      "section": "assembly-8"
    },
    "id": "7877c2a5d83d81c8cb0451dc07ade713"
  },
  {
    "text": "(in-package :gdl-user)\n\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/numbers.lisp",
      "file_name": "numbers.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 0,
      "section": "header"
    },
    "id": "c7e85d0c815c7c30e05ad008cd2f6460"
  },
  {
    "text": "(define-object numbers (base-object)\n\n  :computed-slots\n  ((my-number 10)                  ;;; 10\n   (my-float-number 10.0)          ;;; 10.0\n   (my-float-number-1 10.0001)     ;;; 10.0001\n   (my-notation-number-1 5.32E+4)  ;;; 53200.0\n   (my-notation-number-2 123d123)  ;;; 1.23E+125\n   (my-binary #b1011)              ;;; 11\n   (my-complex #c(2 1))            ;;; #C(2 1)\n   ;; note that theres no practical limit on the size of a number in lisp\n   \n   \n   ;; mathematical operations\n   (add-1 (+ (the my-number) (the my-number)))                                   ;;; 20\n   (add-2 (+ (the my-number) (the my-float-number)))                             ;;; 20.0\n   (add-3 (+ (the my-number) (the my-float-number) (the my-notation-number-1)))  ;;; 53220.0\n\n   (subtract-1 (- (the my-number) 5))                        ;;; 5\n   (subtract-2 (- (the my-number) (the my-notation-number))) ;;; - 53190.0\n\n   (multiply-1 (* (the my-number) 5))                                 ;;; 50\n   (multiply-2 (* (my-notation-number-1) (the my-notation-number-2))) ;;; 6.543600000000001E+129\n\n   (ratio-1 (/ (the my-number) 3)) ;;; 10/3\n   (ratio-2 (/ (the my-number) 4)) ;;; 5/2\n   (ratio-3 (/ (the my-number)))   ;;; 1/10\n\t       \n\n   (division-1 (div (the my-number) 3)) ;;; 3.3333333333333335\n   (division-2 (div (the my-number) 4)) ;;; 2.5\n   (division-3 (div (the my-number)))   ;;; 0.1\n\n   (half-1 (half (the my-notation-number))) ;;; 26600.0\n   (half-2 (half (the my-number)))          ;;; 5\n\n   (twice-1 (twice (the my-number))) ;;; 20\n   (twice-2 (twice (the my-binary))) ;;; 22\n   \n   )\n   )\n\n   \n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/numbers.lisp",
      "file_name": "numbers.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 0,
      "section": "numbers"
    },
    "id": "c7e85d0c815c7c30e05ad008cd2f6460"
  },
  {
    "text": "(in-package :gdl-user)\n\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/wall-hint-5.lisp",
      "file_name": "wall-hint-5.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 0,
      "section": "header"
    },
    "id": "04e66ba018a1b0234d0cb855201ff584"
  },
  {
    "text": "(define-object wall(box)\n  :input-slots\n  ((brick-height 45)\n   (brick-length 180)\n   (brick-width 90)\n   (mortar-joint-width 10)\n   (wall-length 3700)\n   (wall-height 900))\n\n  :computed-slots\n  ((row-height (+ (the brick-height) (the mortar-joint-width)))\n   (number-of-rows (round-to-nearest (div (the wall-height) (the row-height)) 1))\n   (actual-wall-height (* (the row-height) (the number-of-rows)))\n   \n   ;; for the wall-length we need the number of full bricks\n   ;; if there are n full bricks then there will be (n-1) mortar joints\n   ;; so n*brick-length + n-1*mortar-joint-width = overall-length\n   ;; or n(brick-length + mortar-join-width) - mortar-joint-width = overall-length\n   ;; or n = (overall-length - mortar-joint-width)/(brick-length + mortar-joint-width)\n   (number-of-bricks (round-to-nearest (div (- (the wall-length) (the mortar-joint-width))\n\t\t\t\t\t    (+ (the brick-length) (the mortar-joint-width)))\n\t\t\t\t       1))\n   (actual-wall-length (+ (* (the number-of-bricks) (the brick-length))\n\t\t\t  (* (- (the number-of-bricks) 1) (the mortar-joint-width))))\n\n   ;; box inputs - gives the wall bounding box\n   (height (the actual-wall-height))\n   (width (the brick-width))\n   (length (the actual-wall-length)))\n   \n     \n  :objects\n  ((row :type 'row\n     :sequence (:size (the number-of-rows))\n     :center (translate-along-vector (the (face-center :bottom))\n\t\t\t\t     (the (face-normal-vector :top))\n\t\t\t\t     (+ (half (the-child height))\n\t\t\t\t\t(* (the-child index) (the-child height))))\n     :length (the length)\n     :width (the width)\n     :height (+ (the brick-height) (the mortar-joint-width))\n     :bricks-per-row (the number-of-bricks)\n     :brick-height(the brick-height)\n     :brick-length (the brick-length)\n     :brick-width (the brick-width)\n     :mortar-joint-width (the mortar-joint-width))))\n\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/wall-hint-5.lisp",
      "file_name": "wall-hint-5.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 0,
      "section": "wall"
    },
    "id": "04e66ba018a1b0234d0cb855201ff584"
  },
  {
    "text": "(define-object row (box)\n  :input-slots\n  (brick-height\n   brick-length\n   brick-width\n   mortar-joint-width)\n\n  :objects\n  ((bricks-and-mortar :type 'bricks-and-mortar\n\t\t      :width (the width)\n\t\t      :length (the length)\n\t\t      :height (the brick-height)\n\t\t      :center (translate-along-vector (the mortar-bed (face-center :top))\n\t\t\t\t\t\t      (the mortar-bed (face-normal-vector :top))\n\t\t\t\t\t\t      (half (the-child height)))\n\t\t      :brick-height (the brick-height)\n\t\t      :brick-length (the brick-length)\n\t\t      :brick-width (the brick-width)\n\t\t      :mortar-joint-width (the mortar-joint-width))\n   (mortar-bed :type 'box\n\t       :height (the mortar-joint-width)\n\t       :width (the width)\n\t       :length (the length)\n\t       :center (translate-along-vector (the (face-center :bottom))\n\t\t\t\t\t       (the (face-normal-vector :top))\n\t\t\t\t\t       (half (the-child height))))\n   )\n  )\n\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/wall-hint-5.lisp",
      "file_name": "wall-hint-5.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 1,
      "section": "row"
    },
    "id": "2fdbb4a98a18e14fb6aa447abcc56b46"
  },
  {
    "text": "(define-object bricks-and-mortar ()\n  :input-slots\n  (brick-height\n   brick-length\n   brick-width\n   mortar-joint-width)\n  \n  :objects\n  ((full-brick :type 'box\n\t       :length (the brick-length)\n\t       :height (the brick-height)\n\t       :width (the brick-width))\n   (half-brick :type 'box\n\t       :length (half (the brick-length))\n\t       :height (the brick-height)\n\t       :width (the brick-width))\n   (mortar-joint :type 'box\n\t\t :height (the brick-height)\n\t\t :width (the brick-width)\n\t\t :length (the mortar-joint-width))))\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/wall-hint-5.lisp",
      "file_name": "wall-hint-5.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 2,
      "section": "bricks-and-mortar"
    },
    "id": "7ef7ef537d065c0a9b5be4a68530f893"
  },
  {
    "text": "(in-package :gdl-user)\n\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/building-hint-2.lisp",
      "file_name": "building-hint-2.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 0,
      "section": "header"
    },
    "id": "bda9d3e62ed2439592e5975fe9af33e0"
  },
  {
    "text": "(define-object building (box)\n  :input-slots\n  ((nominal-height 3000)\n   (nominal-width 3000)\n   (nominal-length 4000)\n   (brick-height 45)\n   (brick-length 180)\n   (brick-width 90)\n   (mortar-joint-width 10)\n   (truss-angle 30)\n   (beam-width 40)\n   (beam-height 50)\n   (wall-thickness 3)\n   (material-density 7800))\n\n  :computed-slots\n  ((length (the left-wall length))\n   (width (the rear-wall length))\n   (height (+ (the left-wall height) (the (roof-truss 0) height)))\n   (number-of-roof-trusses 3)\n   (truss-spacing (div (- (the left-wall length) (the beam-width))\n\t\t       (- (the number-of-roof-trusses) 1)))\n   (truss-offsets (let ((res nil))\n\t\t    (dotimes (n (the number-of-roof-trusses) (nreverse res))\n\t\t      (push (+ (half (the beam-width))\n\t\t\t       (* n (the truss-spacing))) res))))\n   )\n\n   \n  \n  :objects\n  ((left-wall :type 'wall\n\t      :pass-down (brick-height\n\t\t\t  brick-length\n\t\t\t  brick-width\n\t\t\t  mortar-joint-width)\n\t      :center (translate-along-vector\n\t\t       (translate-along-vector (the (edge-center :bottom :left))\n\t\t\t\t\t       (the (face-normal-vector :right))\n\t\t\t\t\t       (half (the-child width)))\n\t\t       (the (face-normal-vector :top))\n\t\t       (half (the-child height)))\n\t      :wall-length (the nominal-length)\n\t      :wall-height (the nominal-height))\n\n   (right-wall :type 'wall\n\t       :pass-down (brick-height\n\t\t\t   brick-length\n\t\t\t   brick-width\n\t\t\t   mortar-joint-width)\n\t       :center (translate-along-vector\n\t\t\t(translate-along-vector (the (edge-center :bottom :right))\n\t\t\t\t\t\t(the (face-normal-vector :left))\n\t\t\t\t\t\t(half (the-child width)))\n\t\t\t(the (face-normal-vector :top))\n\t\t\t(half (the-child height)))\n\t       :wall-length (the nominal-length)\n\t       :wall-height (the nominal-height))\n\n   (rear-wall :type 'wall\n\t      :pass-down (brick-height\n\t\t\t  brick-length\n\t\t\t  brick-width\n\t\t\t  mortar-joint-width)\n\t      :center (translate-along-vector\n\t\t\t(translate-along-vector (the (edge-center :bottom :rear))\n\t\t\t\t\t\t(the (face-normal-vector :front))\n\t\t\t\t\t\t(half (the-child width)))\n\t\t\t(the (face-normal-vector :top))\n\t\t\t(half (the-child height)))\n\t      :orientation (alignment :rear (the (face-normal-vector :right)))\n\t      :wall-length (the nominal-width)\n\t      :wall-height (the nominal-height))\n\n   (roof-truss :type 'truss\n\t       :sequence (:size (the number-of-roof-trusses))\n\t       :truss-length (the rear-wall length)\n\t       :center (translate-along-vector\n\t\t\t(translate-along-vector (the (edge-center :front :top))\n\t\t\t\t\t\t(the (face-normal-vector :bottom))\n\t\t\t\t\t\t(half (the-child height)))\n\t\t\t(the (face-normal-vector :rear))\n\t\t\t(nth (the-child index) (the truss-offsets)))\n\t       :orientation (alignment :rear (the (face-normal-vector :right)))\t\t\n\t       :pass-down (truss-angle\n\t\t\t   beam-width\n\t\t\t   beam-height\n\t\t\t   wall-thickness\n\t\t\t   material-density))\n   \n   (roof-cladding-left :type 'box)\n   (roof-cladding-right :type 'box)\n   )\n  )\n\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/building-hint-2.lisp",
      "file_name": "building-hint-2.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 0,
      "section": "building"
    },
    "id": "bda9d3e62ed2439592e5975fe9af33e0"
  },
  {
    "text": "(define-object full-start-wall (wall)\n  :input-slots\n  ((first-row :start-full)))\n\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/building-hint-2.lisp",
      "file_name": "building-hint-2.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 1,
      "section": "full-start-wall"
    },
    "id": "1c83eeeb6a024a8cd067e31bcc169d85"
  },
  {
    "text": "(define-object half-start-wall (wall)\n  :input-slots\n  ((first-row :start-half)))\n\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/building-hint-2.lisp",
      "file_name": "building-hint-2.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 2,
      "section": "half-start-wall"
    },
    "id": "7eee91cb372dd2bac7bdf3f2d1877af7"
  },
  {
    "text": "(define-object half-start-wall-front-key (wall)\n  :input-slots\n  ((first-row :start-half)\n   (front-edge :keyed)))\n\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/building-hint-2.lisp",
      "file_name": "building-hint-2.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 3,
      "section": "half-start-wall-front-key"
    },
    "id": "788d18452989562902edb8fcdfe3cd95"
  },
  {
    "text": "(define-object half-start-wall-rear-key (wall)\n  :input-slots\n  ((first-row :start-half)\n   (rear-edge :keyed)))\n\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/building-hint-2.lisp",
      "file_name": "building-hint-2.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 4,
      "section": "half-start-wall-rear-key"
    },
    "id": "4f5c4b6f193ddb8a4bee1376695a6859"
  },
  {
    "text": "(define-object half-start-wall-both-key (wall)\n  :input-slots\n  ((first-row :start-half)\n   (front-edge :keyed)\n   (rear-edge :keyed)))\n\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/building-hint-2.lisp",
      "file_name": "building-hint-2.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 5,
      "section": "half-start-wall-both-key"
    },
    "id": "c67aa0b3f7593d7f60da733da68c003b"
  },
  {
    "text": "(define-object wall(box)\n  :input-slots\n  ((brick-height 45)\n   (brick-length 180)\n   (brick-width 90)\n   (mortar-joint-width 10)\n   (wall-length 3700)\n   (wall-height 900)\n   (first-row :start-full)\n   (front-edge :full)\n   (rear-edge :full))\n\n  :computed-slots\n  ((row-height (+ (the brick-height) (the mortar-joint-width)))\n   (number-of-rows (round-to-nearest (div (the wall-height) (the row-height)) 1))\n   (actual-wall-height (* (the row-height) (the number-of-rows)))\n   \n   ;; for the wall-length we need the number of full bricks\n   ;; if there are n full bricks then there will be (n-1) mortar joints\n   ;; so n*brick-length + n-1*mortar-joint-width = overall-length\n   ;; or n(brick-length + mortar-join-width) - mortar-joint-width = overall-length\n   ;; or n = (overall-length - mortar-joint-width)/(brick-length + mortar-joint-width)\n   (number-of-bricks (round-to-nearest (div (- (the wall-length) (the mortar-joint-width))\n\t\t\t\t\t    (+ (the brick-length) (the mortar-joint-width)))\n\t\t\t\t       1))\n   (actual-wall-length (+ (* (the number-of-bricks) (the brick-length))\n\t\t\t  (* (- (the number-of-bricks) 1) (the mortar-joint-width))))\n\n   ;; box inputs - gives the wall bounding box\n   (height (the actual-wall-height))\n   (width (the brick-width))\n   (length (the actual-wall-length))\n\n   (full-bricks (apply '+ (list-elements (the row) (the-element full-bricks))))\n   (half-bricks (apply '+ (list-elements (the row) (the-element half-bricks))))\n   (mortar-volume (apply '+ (list-elements (the row) (the-element mortar-volume))))\n   (mortar-density 2162)\n   (mortar-mass (* (the mortar-density) (div (the mortar-volume) 1000000000)))\n   )\n   \n     \n  :objects\n  ((row :type 'row\n     :sequence (:size (the number-of-rows))\n     :center (translate-along-vector (the (face-center :bottom))\n\t\t\t\t     (the (face-normal-vector :top))\n\t\t\t\t     (+ (half (the-child height))\n\t\t\t\t\t(* (the-child index) (the-child height))))\n     :height (+ (the brick-height) (the mortar-joint-width))\n     :full-bricks-per-row (the number-of-bricks)\n     :pass-down (brick-height\n\t\t brick-length\n\t\t brick-width\n\t\t mortar-joint-width\n\t\t length\n\t\t width\n\t\t first-row\n\t\t front-edge\n\t\t rear-edge))))\n\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/building-hint-2.lisp",
      "file_name": "building-hint-2.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 6,
      "section": "wall"
    },
    "id": "91497bfc7275a46da81d36c0460ccd9e"
  },
  {
    "text": "(define-object row (box)\n  :input-slots\n  (full-bricks-per-row\n   brick-height\n   brick-length\n   brick-width\n   mortar-joint-width\n   first-row\n   front-edge\n   rear-edge )\n\n  :computed-slots\n  ((full-brick-row? (cond ((eq (the first-row) :start-full)\n\t\t\t   (or (zerop (the index)) (evenp (the index))))\n\t\t\t  ((eq (the first-row) :start-half)\n\t\t\t   (not (or (zerop (the index)) (evenp (the index)))))))\n\t\t    \n   (full-bricks (the bricks-and-mortar full-bricks))\n   (half-bricks (the bricks-and-mortar half-bricks))\n   (mortar-volume (+ (the bricks-and-mortar mortar-joint-volume)\n\t\t     (the mortar-bed volume))))\n\n  :objects\n  ((bricks-and-mortar :type 'bricks-and-mortar\n\t\t      :height (the brick-height)\n\t\t      :center (translate-along-vector (the mortar-bed (face-center :top))\n\t\t\t\t\t\t      (the mortar-bed (face-normal-vector :top))\n\t\t\t\t\t\t      (half (the-child height)))\n\t\t      :pass-down (width\n\t\t\t\t  length\n\t\t\t\t  full-brick-row?\n\t\t\t\t  brick-height\n\t\t\t\t  brick-length\n\t\t\t\t  brick-width\n\t\t\t\t  mortar-joint-width\n\t\t\t\t  full-bricks-per-row\n\t\t\t\t  front-edge\n\t\t\t\t  rear-edge))\n   (mortar-bed :type 'box\n\t       :height (the mortar-joint-width)\n\t       :center (translate-along-vector (the (face-center :bottom))\n\t\t\t\t\t       (the (face-normal-vector :top))\n\t\t\t\t\t       (half (the-child height)))\n\t       :pass-down (width\n\t\t\t   length))))\n\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/building-hint-2.lisp",
      "file_name": "building-hint-2.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 7,
      "section": "row"
    },
    "id": "2df3ae50fd2989f16d2e1712b1b6635a"
  },
  {
    "text": "(define-object bricks-and-mortar (box)\n  :input-slots\n  (full-brick-row?\n   full-bricks-per-row\n   brick-height\n   brick-length\n   brick-width\n   mortar-joint-width\n   front-edge\n   rear-edge)\n\n  :computed-slots\n  ((first-full-brick-start-point (if (the full-brick-row?)\n\t\t\t\t     (the (face-center :front))\n\t\t\t\t     (the (mortar-joint 0) (face-center :rear))))\n   \n   (first-mortar-joint-start-point (cond ((the full-brick-row?) (the (full-brick 0) (face-center :rear)))\n\t\t\t\t\t ((eq (the front-edge) :full) (the (half-brick 0) (face-center :rear)))\n\t\t\t\t\t ((eq (the front-edge) :keyed) (translate-along-vector (the (face-center :front))\n\t\t\t\t\t\t\t\t\t\t\t       (the (face-normal-vector :rear))\n\t\t\t\t\t\t\t\t\t\t\t       (half (the brick-length))))))\n\n   (number-of-full-bricks (if (the full-brick-row?)\n\t\t\t      (the full-bricks-per-row)\n\t\t\t      (- (the full-bricks-per-row) 1)))\n\n   (number-of-half-bricks (cond ((the full-brick-row?) 0)\n\t\t\t\t((and (eq (the front-edge) :full)(eq (the rear-edge) :full)) 2)\n\t\t\t\t((and (eq (the front-edge) :keyed) (eq (the rear-edge) :full)) 1)\n\t\t\t\t((and (eq (the front-edge) :full) (eq (the rear-edge) :keyed)) 1)\n\t\t\t\t((and (eq (the front-edge) :keyed) (eq (the rear-edge) :keyed)) 0)))\n\n   ;; whether or not the ends are :full or :keyed, the number of mortar joints remains the same since the mortar joint\n   ;; when it is :keyed is used to connect to the full brick of the other wall\n   (number-of-mortar-joints (if (the full-brick-row?)\n\t\t\t\t(- (the number-of-full-bricks) 1)\n\t\t\t\t(+ (the number-of-full-bricks) 1)))\n\n   ;; if it isn't a full brick row then there will be an extra joint because one\n   ;; full brick is replaced with 2 half bricks so without correcting the\n   ;; mortar-joint-width the ends of a full brick row and one starting and\n   ;; finishing with half bricks won't align. So we need to correct\n   ;; the mortar-joint-width\n   (corrected-joint-width (if (the full-brick-row?)\n\t\t\t\t     (the mortar-joint-width)\n\t\t\t\t     (let ((total-gap (* (- (the number-of-mortar-joints) 1)\n\t\t\t\t\t\t\t\t\t(the mortar-joint-width))))\n\t\t\t\t       (div total-gap (the number-of-mortar-joints)))))\n   ;; collating the output. We could do this analytically, but for this example we'll use the geometry\n   (full-bricks (length (list-elements (the full-brick))))\n   (half-bricks (length (list-elements (the half-brick))))\n   (mortar-joint-volume (apply '+ (list-elements (the mortar-joint)\n\t\t\t\t\t\t (the-element volume))))\n   )\n  \n  :functions\n  ((first-full-brick-center!\n    ()\n    (translate-along-vector (the first-full-brick-start-point)\n\t\t\t    (the (face-normal-vector :rear))\n\t\t\t    (half (the brick-length))))\n   \n   (other-full-brick-center!\n    (index)\n    ;; if its a full brick row, (full-brick 1) is positioned relative to (joint 0)\n    ;; if its a half brick row, (full-brick 1) is positioned relative to (joint 1)\n    (let ((ind (if (the full-brick-row?) (- index 1) index)))\n\t  (translate-along-vector (the (mortar-joint ind) (face-center :rear))\n\t\t\t\t  (the (face-normal-vector :rear))\n\t\t\t\t  (half (the brick-length)))))\n   \n    (first-joint-center!\n     ()\n     (translate-along-vector (the first-mortar-joint-start-point)\n\t\t\t     (the (face-normal-vector :rear))\n\t\t\t     (half (the corrected-joint-width))))\n   (other-joint-center!\n    (index)\n    ;; if its a full brick row, (joint 1) is positioned relative to (full-brick 1)\n    ;; if its a half brick row, (joint 1) is positioned relative to (full-brick 0)\n    (let ((ind (if (the full-brick-row?) index (- index 1))))\n      (translate-along-vector (the (full-brick ind) (face-center :rear))\n\t\t\t      (the (face-normal-vector :rear))\n\t\t\t      (half (the corrected-joint-width)))))\n\n    (first-half-brick-center!\n     ()\n     (translate-along-vector (the (face-center :front))\n\t\t\t     (the (face-normal-vector :rear))\n\t\t\t     (half (half (the brick-length)))))\n   \n   (last-half-brick-center!\n     ()\n     (translate-along-vector (theo (the mortar-joint last) (face-center :rear))\n\t\t\t     (the (face-normal-vector :rear))\n\t\t\t     (half (half (the brick-length))))))\n \t\t\t     \n  \n  :objects\n  ((full-brick :type 'box\n\t       :sequence (:size (the number-of-full-bricks))\n\t       :center (if (= (the-child index) 0)\n\t\t\t   (the first-full-brick-center!)\n\t\t\t   (the (other-full-brick-center! (the-child index))))\n\t       :length (the brick-length)\n\t       :height (the brick-height)\n\t       :width (the brick-width))\n\n   (half-brick :type 'box\n\t       :sequence (:size (the number-of-half-bricks))\n\t       :center (cond ((and (= (the-child index) 0)\n\t\t\t\t   (eq (the front-edge) :full)) (the first-half-brick-center!))\n\t\t\t     ((and (= (the-child index) 0)\n\t\t\t\t   (eq (the front-edge) :keyed)\n\t\t\t\t   (eq (the rear-edge) :full)) (the last-half-brick-center!))\n\t\t\t     ((eq (the rear-edge) :full) (the last-half-brick-center!)))\n\t       :length (half (the brick-length))\n\t       :height (the brick-height)\n\t       :width (the brick-width))\n\n   (mortar-joint :type 'box\n\t\t :sequence (:size (the number-of-mortar-joints))\n\t\t :center (if (= (the-child index) 0)\n\t\t\t     (the first-joint-center!)\n\t\t\t  (the (other-joint-center! (the-child index))))   \n\t\t :height (the brick-height)\n\t\t :width (the brick-width)\n\t\t :length (the corrected-joint-width))))\n\n\n\n\n\n\n\n\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/building-hint-2.lisp",
      "file_name": "building-hint-2.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 8,
      "section": "bricks-and-mortar"
    },
    "id": "7e8ec714e0071bb564b0dca04d37431d"
  },
  {
    "text": "(define-object truss (box)\n  :input-slots\n  ((truss-length 2000)\n   (truss-height nil)\n   (truss-angle 30)\n\n   (beam-width 30)\n   (beam-height 50)\n   (wall-thickness 3)\n\n   (material-density 7800)\n   (tonne-rate 450))\n\n  :computed-slots\n  ((length (the truss-length))\n   (height (cond ((the truss-height)(the truss-height))\n\t\t ((the truss-angle) (+ (* (half (the truss-length))\n\t\t\t\t\t  (tan (degrees-to-radians (the truss-angle))))\n\t\t\t\t       (the beam-height)))))\n   (width (the beam-width))\n  \n   (truss-front-slope-vector (the (get-slope-vector! :front)))\n   (truss-rear-slope-vector (the (get-slope-vector! :rear)))\n\n   (front-slope-length (the (get-slope-length! :front)))\n   (rear-slope-length (the (get-slope-length! :rear)))\n   \n   (front-slope-center (the (get-slope-center! :front)))\n   (rear-slope-center (the (get-slope-center! :rear)))\n   \n\n   (beam-properties (mapsend (the children) :beam-properties))\n   (total-mass (round-to-nearest\n\t\t(apply '+\n\t\t       (mapcar #'(lambda(a) (getf a :mass-kg))\n\t\t\t       (the beam-properties)))\n\t\t0.001))\n   (total-cost (round-to-nearest\n\t\t(apply '+\n\t\t       (mapcar #'(lambda(a) (getf a :cost-gbp))\n\t\t\t       (the beam-properties)))\n\t\t0.01))\n   )\n\n  :functions\n  ((get-slope-vector! (beam-side)\n\t\t      (let ((v-key (the (get-v-key! beam-side)))\n\t\t\t    (l-key (the (get-l-key! beam-side))))\n\t\t      (subtract-vectors (the vertical-beam (edge-center :rear v-key))\n\t\t\t\t\t(the lower-beam (edge-center l-key :top)))))\n   (get-slope-length! (beam-side)\n\t\t      (let ((v-key (the (get-v-key! beam-side)))\n\t\t\t    (l-key (the (get-l-key! beam-side))))\n\t\t\t(3d-distance (the vertical-beam (edge-center :rear v-key))\n\t\t\t\t     (the lower-beam (edge-center l-key :top)))))\n   (get-slope-center!\n    (beam-side)\n    (let ((pt (case beam-side\n\t\t(:front (the front-slope-construction-line center))\n\t\t(:rear  (the rear-slope-construction-line center))))\n\t  (norm-vector (case beam-side\n\t\t\t (:front (the front-slope-beam (face-normal-vector :bottom)))\n\t\t\t (:rear (the rear-slope-beam (face-normal-vector :bottom))))))\n      (translate-along-vector pt\n\t\t\t      norm-vector\n\t\t\t      (half (the beam-height)))))\n   (get-v-key! (beam-side)\n\t       (case beam-side\n\t\t (:front :top)\n\t\t (:rear :bottom)))\n   (get-l-key! (beam-side)\n\t       (case beam-side\n\t\t (:front :front)\n\t\t (:rear :rear)))\n\n   \n   )\n   \n\t\t\t\t       \n  :objects\n  ((lower-beam :type 'beam\n\t       :pass-down (:beam-height :beam-width :wall-thickness :material-density :tonne-rate)\n\t       :beam-length (the truss-length)\n\t       :center (translate-along-vector (the (face-center :bottom))\n\t\t\t\t\t       (the (face-normal-vector :top))\n\t\t\t\t\t       (half (the beam-height))))\n   (vertical-beam :type 'beam\n\t\t  :pass-down (:beam-height :beam-width :wall-thickness :material-density :tonne-rate)\n\t\t  \n\t\t  :beam-length (- (the height) (the beam-height))\n\t\t  :orientation (alignment :rear (the (face-normal-vector :top))\n\t\t\t\t\t  :right (the (face-normal-vector :right)))  \n\t\t  :center (translate-along-vector (the lower-beam (face-center :top))\n\t\t\t\t\t\t  (the lower-beam (face-normal-vector :top))\n\t\t\t\t\t\t  (half (the-child beam-length))))\n   (front-slope-beam :type 'beam\n\t\t     :pass-down (:beam-height :beam-width :wall-thickness :material-density :tonne-rate)\n\t\t     :beam-length (the front-slope-length)\n\t\t     :center (the front-slope-center)\n\t\t     :orientation (alignment :rear (the truss-front-slope-vector)\n\t\t\t\t\t     :right (the (face-normal-vector :right))))\n\n   (rear-slope-beam :type 'beam\n\t\t     :pass-down (:beam-height :beam-width :wall-thickness :material-density :tonne-rate)\n\t\t     :beam-length (the rear-slope-length)\n\t\t     :center (the rear-slope-center)\n\t\t    :orientation (alignment :rear (the truss-rear-slope-vector)\n\t\t\t\t\t    :left (the (face-normal-vector :right))))\n   \n   )\n\n  :hidden-objects\n  ((front-slope-construction-line :type 'line\n\t\t\t\t  :start (the lower-beam (edge-center :front :top))\n\t\t\t\t  :end (the vertical-beam (edge-center :rear :top)))\n   (rear-slope-construction-line :type 'line\n\t\t\t\t :start (the lower-beam (edge-center :rear :top))\n\t\t\t\t :end (the vertical-beam (edge-center :rear :bottom)))\n   \n   (front-mid-pt :type 'sphere\n\t\t :display-controls (list :color :blue)\n\t\t :radius 5\n\t\t :center (the front-slope-construction-line center))\n   (rear-mid-pt :type 'sphere\n\t\t:display-controls (list :color :blue)\n\t\t:center (the rear-slope-construction-line center)\n\t\t:radius 5)\n   (pt-1 :type 'sphere\n\t :radius 5\n\t :display-controls (list :color :green)\n\t :center (the lower-beam (edge-center :rear :top)))\n   (pt-2 :type 'sphere\n\t :radius 5\n\t :display-controls (list :color :red)\n\t :center (the vertical-beam (edge-center :rear :bottom)) )\n\n   \n\n   (vector-line :type 'vector-line\n\t\t:start-point (the rear-slope-construction-line center)\n\t\t:vector (the rear-slope-beam (face-normal-vector :bottom))\n\t\t:length 150)\n   \n   )))\n\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/building-hint-2.lisp",
      "file_name": "building-hint-2.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 9,
      "section": "truss"
    },
    "id": "c78899771299231f1726276cee41ebdf"
  },
  {
    "text": "(define-object vector-line (box)\n  :input-slots\n  ((start-point (make-point 0 0 0))\n   (vector (make-vector 1 0 1))\n   (length 50)\n   (width 1))\n  :computed-slots\n  ((height (div (the length) 5)))\n  :objects\n  ((v-line :type 'line\n\t   :start (the start-point)\n\t   :display-controls (list :color :red)\n\t   :end (translate-along-vector (the start-point)\n\t\t\t\t\t(the vector)\n\t\t\t\t\t(the length)))\n   (arrow :type 'cone\n\t  :radius-1 0\n\t  :radius-2 (div (the length) 50)\n\t  :length (div (the length) 5)\n\t  :display-controls (list :color :red)\n\t  :center (translate-along-vector (the v-line end)\n\t\t\t\t\t  (the vector)\n\t\t\t\t\t  (half (the-child length)))\n\t  :orientation (alignment :front (the vector)))))\n\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/building-hint-2.lisp",
      "file_name": "building-hint-2.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 10,
      "section": "vector-line"
    },
    "id": "791225810169d0a6bed1abedaffb006b"
  },
  {
    "text": "(define-object beam (box)\n  :input-slots\n  ((beam-length 1000)\n   (beam-width 40)\n   (beam-height 50)\n   (wall-thickness 2)\n   (material-density 7800)\n   (tonne-rate 500))\n\n  :computed-slots\n  ((length (the beam-length))\n   (width (the beam-width))\n   (height (the beam-height))\n\n   (beam-volume (- (the outer volume) (the inner volume)))\n   (beam-mass (* (div (the beam-volume) 1000000000) (the material-density)))\n   (beam-cost (* (the tonne-rate) (div (the beam-mass) 1000)))\n   (beam-properties (list :volume-mm3 (the beam-volume)\n\t\t\t  :mass-kg (round-to-nearest (the beam-mass) 0.01)\n\t\t\t  :cost-gbp (round-to-nearest (the beam-cost) 0.01)\n\t\t\t  :length-mm (the beam-length)\n\t\t\t  :width-mm (the beam-width)\n\t\t\t  :height-mm (the beam-height)\n\t\t\t  :thickness-mm (the wall-thickness))))\n   \n  :objects\n  ((outer :type 'box\n\t  :length (the beam-length)\n\t  :width (the beam-width)\n\t  :height (the beam-height))\n\n   (inner :type 'box\n\t  :length (the beam-length)\n\t  :width (- (the beam-width) (twice (the wall-thickness)))\n\t  :height (- (the beam-height) (twice (the wall-thickness)))))\n  )\n\n\n\n\n\n\n\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/building-hint-2.lisp",
      "file_name": "building-hint-2.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 11,
      "section": "beam"
    },
    "id": "e3c9c5bbcac240f55f7bfa342f7f0fda"
  },
  {
    "text": "(in-package :gdl-user)\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/define-object.lisp",
      "file_name": "define-object.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 0,
      "section": "header"
    },
    "id": "5d485382cf6e0067a48f2a3badec7036"
  },
  {
    "text": "(define-object my-box-1a (box)\n  :input-slots\n  ((length 2)\n   (width 3)\n   (height 4)))\n\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/define-object.lisp",
      "file_name": "define-object.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 0,
      "section": "my-box-1a"
    },
    "id": "5d485382cf6e0067a48f2a3badec7036"
  },
  {
    "text": "(define-object my-box-1b ()\n  :input-slots\n  ((length 2)\n   (width 3)\n   (height 4)))\n\n\n\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/define-object.lisp",
      "file_name": "define-object.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 1,
      "section": "my-box-1b"
    },
    "id": "714a91ce0b8218be6e3bdb13856de533"
  },
  {
    "text": "(define-object my-box-2 (my-box-1b box))\n\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/define-object.lisp",
      "file_name": "define-object.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 2,
      "section": "my-box-2"
    },
    "id": "b8b24bf7911a7a2dce71989f06623f83"
  },
  {
    "text": "(define-object my-box-3 (box my-box-1b))\n\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/define-object.lisp",
      "file_name": "define-object.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 3,
      "section": "my-box-3"
    },
    "id": "a421b70cee3f0f9ac1b0055ae435d977"
  },
  {
    "text": "(define-object my-box-4 (box)\n  :input-slots\n  (length\n   (width 4)\n   (height 4))\n\n  :computed-slots\n  ((density 7800)\n   (mass (* (div (the volume) 1000000000) (the density)))))\n\n\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/define-object.lisp",
      "file_name": "define-object.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 4,
      "section": "my-box-4"
    },
    "id": "580f58ba5a90c3d6269b50bbcdf78ec5"
  },
  {
    "text": "(define-object assembly-1 (base-object)\n  :objects\n  ((my-box :type 'my-box-4\n\t   :length 10)\n   \n   (my-sphere :type 'sphere\n\t      :radius (the my-box width))))\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/define-object.lisp",
      "file_name": "define-object.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 5,
      "section": "assembly-1"
    },
    "id": "aa738d8ff69d4816184d09e280e8e164"
  },
  {
    "text": "(in-package :gdl-user)\n\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/truss-hint-6.lisp",
      "file_name": "truss-hint-6.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 0,
      "section": "header"
    },
    "id": "3e9ba81f43f204de2ea13c3a7607a455"
  },
  {
    "text": "(defun degrees-to-radians (degrees)\n  (div (* degrees pi) 180))\n\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/truss-hint-6.lisp",
      "file_name": "truss-hint-6.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 0,
      "section": "degrees-to-radians"
    },
    "id": "3e9ba81f43f204de2ea13c3a7607a455"
  },
  {
    "text": "(define-object truss (box)\n  :input-slots\n  ((truss-length 2000)\n   (truss-height 800)\n   (truss-angle nil)\n\n   (beam-width 50)\n   (beam-height 50)\n   (wall-thickness 3))\n\n  :computed-slots\n  ((length (the truss-length))\n   (height (cond ((the truss-height)(the truss-height))\n\t\t ((the truss-angle) (+ (* (half (the truss-length))\n\t\t\t\t\t  (tan (degrees-to-radians (the truss-angle))))\n\t\t\t\t       (the beam-height)))))\n   (width (the beam-width))\n   (truss-front-slope-vector (subtract-vectors (the vertical-beam (edge-center :rear :top))\n\t\t\t\t\t       (the lower-beam (edge-center :front :top))))\n   (front-slope-length (3d-distance (the vertical-beam (edge-center :rear :top))\n\t\t\t\t    (the lower-beam (edge-center :front :top))))\n   (front-slope-center (translate-along-vector (the front-slope-construction-line center)\n\t\t\t\t\t       (the front-slope-beam (face-normal-vector :bottom))\n\t\t\t\t\t       (half (the beam-height))))\n   )\n\t\t\t\t       \n  :objects\n  ((lower-beam :type 'beam\n\t       :beam-height (the beam-height)\n\t       :beam-width (the beam-width)\n\t       :beam-length (the truss-length)\n\t       :center (translate-along-vector (the (face-center :bottom))\n\t\t\t\t\t       (the (face-normal-vector :top))\n\t\t\t\t\t       (half (the beam-height))))\n   (vertical-beam :type 'beam\n\t\t  :beam-length (- (the height) (the beam-height))\n\t\t  :beam-height (the beam-height)\n\t\t  :beam-width (the beam-width)\n\t\t  :orientation (alignment :rear (the (face-normal-vector :top))\n\t\t\t\t\t  :right (the (face-normal-vector :right)))\n\t\t  :center (translate-along-vector (the lower-beam (face-center :top))\n\t\t\t\t\t\t  (the lower-beam (face-normal-vector :top))\n\t\t\t\t\t\t  (half (the-child beam-length))))\n   (front-slope-beam :type 'beam\n\t\t     :beam-length (the front-slope-length)\n\t\t     :beam-height (the beam-height)\n\t\t     :beam-width (the beam-width)\n\t\t     :center (the front-slope-center)\n\t\t     :orientation (alignment :rear (the truss-front-slope-vector)\n\t\t\t\t\t     :right (the (face-normal-vector :right))))\n\n   (front-slope-construction-line :type 'line\n\t\t\t\t  :start (the lower-beam (edge-center :front :top))\n\t\t\t\t  :end (the vertical-beam (edge-center :rear :top)))\n   (mid-pt :type 'sphere\n\t   :display-controls (list :color :blue)\n\t   :radius 5\n\t   :center (the front-slope-construction-line center))\n   \n   ;;(right-slope-beam :type 'beam))\n\n   (pt-1 :type 'sphere\n\t :radius 5\n\t :display-controls (list :color :green)\n\t :center (the lower-beam (edge-center :front :top)))\n   (pt-2 :type 'sphere\n\t :radius 5\n\t :display-controls (list :color :red)\n\t :center (the vertical-beam (edge-center :rear :top)) )\n   (vector-line :type 'vector-line\n\t\t:start-point (the pt-1 center)\n\t\t:vector (the truss-front-slope-vector)\n\t\t:length 150)))\n\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/truss-hint-6.lisp",
      "file_name": "truss-hint-6.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 1,
      "section": "truss"
    },
    "id": "71118f449c33fb40ce68ad8b900201f2"
  },
  {
    "text": "(define-object vector-line (box)\n  :input-slots\n  ((start-point (make-point 0 0 0))\n   (vector (make-vector 1 0 1))\n   (length 50)\n   (width 1))\n  :computed-slots\n  ((height (div (the length) 5)))\n  :objects\n  ((v-line :type 'line\n\t   :start (the start-point)\n\t   :display-controls (list :color :red)\n\t   :end (translate-along-vector (the start-point)\n\t\t\t\t\t(the vector)\n\t\t\t\t\t(the length)))\n   (arrow :type 'cone\n\t  :radius-1 0\n\t  :radius-2 (div (the length) 50)\n\t  :length (div (the length) 5)\n\t  :display-controls (list :color :red)\n\t  :center (translate-along-vector (the v-line end)\n\t\t\t\t\t  (the vector)\n\t\t\t\t\t  (half (the-child length)))\n\t  :orientation (alignment :front (the vector)))))\n\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/truss-hint-6.lisp",
      "file_name": "truss-hint-6.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 2,
      "section": "vector-line"
    },
    "id": "0b1a4ebe3dee9dc167ea19cc3066ca71"
  },
  {
    "text": "(define-object beam (box)\n  :input-slots\n  ((beam-length 1000)\n   (beam-width 40)\n   (beam-height 50)\n   (wall-thickness 2)\n   (material-density 7800)\n   (tonne-rate 500))\n\n  :computed-slots\n  ((length (the beam-length))\n   (width (the beam-width))\n   (height (the beam-height))\n\n   (beam-volume (- (the outer volume) (the inner volume)))\n   (beam-mass (* (div (the beam-volume) 1000000000) (the material-density)))\n   (beam-cost (* (the tonne-rate) (div (the beam-mass) 1000)))\n   (beam-properties (list :volume-mm3 (the beam-volume)\n\t\t\t  :mass-kg (round-to-nearest (the beam-mass) 0.01)\n\t\t\t  :cost-gbp (round-to-nearest (the beam-cost) 0.01)\n\t\t\t  :length-mm (the beam-length)\n\t\t\t  :width-mm (the beam-width)\n\t\t\t  :height-mm (the beam-height)\n\t\t\t  :thickness-mm (the wall-thickness))))\n   \n  :objects\n  ((outer :type 'box\n\t  :length (the beam-length)\n\t  :width (the beam-width)\n\t  :height (the beam-height))\n\n   (inner :type 'box\n\t  :length (the beam-length)\n\t  :width (- (the beam-width) (twice (the wall-thickness)))\n\t  :height (- (the beam-height) (twice (the wall-thickness)))))\n  )\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/truss-hint-6.lisp",
      "file_name": "truss-hint-6.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 3,
      "section": "beam"
    },
    "id": "ab3dd25e3de7397d975a071a644498e7"
  },
  {
    "text": "(in-package :gdl-user)\n\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/truss-hint-3.lisp",
      "file_name": "truss-hint-3.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 0,
      "section": "header"
    },
    "id": "5ff2ca864e82b4e16f9619f9673c4b3e"
  },
  {
    "text": "(defun degrees-to-radians (degrees)\n  (div (* degrees pi) 180))\n\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/truss-hint-3.lisp",
      "file_name": "truss-hint-3.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 0,
      "section": "degrees-to-radians"
    },
    "id": "5ff2ca864e82b4e16f9619f9673c4b3e"
  },
  {
    "text": "(define-object truss (box)\n  :input-slots\n  ((truss-length 2000)\n   (truss-height 800)\n   (truss-angle nil)\n\n   (beam-width 50)\n   (beam-height 50)\n   (wall-thickness 3))\n\n  :computed-slots\n  ((length (the truss-length))\n   (height (cond ((the truss-height)(the truss-height))\n\t\t ((the truss-angle) (+ (* (half (the truss-length))\n\t\t\t\t\t  (tan (degrees-to-radians (the truss-angle))))\n\t\t\t\t       (the beam-height)))))\n   (width (the beam-width)))\n\t\t\t\t       \n  :objects\n   ((lower-beam :type 'beam\n\t\t:beam-height (the beam-height)\n\t\t:beam-width (the beam-width)\n\t\t:beam-length (the truss-length)\n\t\t:center (translate-along-vector (the (face-center :bottom))\n\t\t\t\t\t\t(the (face-normal-vector :top))\n\t\t\t\t\t\t(half (the beam-height))))\n    ;;(vertical-beam :type 'beam)\n    ;;(front-slope-beam :type 'beam)\n    ;;(rear-slope-beam :type 'beam))\n    ))\n\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/truss-hint-3.lisp",
      "file_name": "truss-hint-3.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 1,
      "section": "truss"
    },
    "id": "c8433145afb822c48bb8b437f1cc399d"
  },
  {
    "text": "(define-object beam (box)\n  :input-slots\n  ((beam-length 1000)\n   (beam-width 40)\n   (beam-height 50)\n   (wall-thickness 2)\n   (material-density 7800)\n   (tonne-rate 500))\n\n  :computed-slots\n  ((length (the beam-length))\n   (width (the beam-width))\n   (height (the beam-height))\n\n   (beam-volume (- (the outer volume) (the inner volume)))\n   (beam-mass (* (div (the beam-volume) 1000000000) (the material-density)))\n   (beam-cost (* (the tonne-rate) (div (the beam-mass) 1000)))\n   (beam-properties (list :volume-mm3 (the beam-volume)\n\t\t\t  :mass-kg (round-to-nearest (the beam-mass) 0.01)\n\t\t\t  :cost-gbp (round-to-nearest (the beam-cost) 0.01)\n\t\t\t  :length-mm (the beam-length)\n\t\t\t  :width-mm (the beam-width)\n\t\t\t  :height-mm (the beam-height)\n\t\t\t  :thickness-mm (the wall-thickness))))\n   \n  :objects\n  ((outer :type 'box\n\t  :length (the beam-length)\n\t  :width (the beam-width)\n\t  :height (the beam-height))\n\n   (inner :type 'box\n\t  :length (the beam-length)\n\t  :width (- (the beam-width) (twice (the wall-thickness)))\n\t  :height (- (the beam-height) (twice (the wall-thickness)))))\n  )\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/truss-hint-3.lisp",
      "file_name": "truss-hint-3.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 2,
      "section": "beam"
    },
    "id": "c478563c07bd90cf65fc197a9160f0f3"
  },
  {
    "text": "(in-package :gdl-user)\n\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/building-hint-4.lisp",
      "file_name": "building-hint-4.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 0,
      "section": "header"
    },
    "id": "90fbeb49d01c0bebc5684a66f8313264"
  },
  {
    "text": "(define-object building (box)\n  :input-slots\n  ((nominal-height 3000)\n   (nominal-width 3000)\n   (nominal-length 4000)\n   (brick-height 45)\n   (brick-length 180)\n   (brick-width 90)\n   (mortar-joint-width 10)\n   (truss-angle 30)\n   (beam-width 40)\n   (beam-height 50)\n   (wall-thickness 3)\n   (material-density 7800)\n   (roof-overhang 50)\n   (cladding-thickness 10)\n   (max-beam-spacing 1500))\n\n  :computed-slots\n  ((length (the left-wall length))\n   (width (the rear-wall length))\n   (height (+ (the left-wall height) (the (roof-truss 0) height)))\n\n   (number-of-roof-trusses (let ((trusses (ceiling (the left-wall length) 1500)))\n\t\t\t     (max trusses 2)))\n\n   (truss-spacing (div (- (the left-wall length) (the beam-width))\n\t\t       (- (the number-of-roof-trusses) 1)))\n   (truss-offsets (let ((res nil))\n\t\t    (dotimes (n (the number-of-roof-trusses) (nreverse res))\n\t\t      (push (+ (half (the beam-width))\n\t\t\t       (* n (the truss-spacing))) res))))\n\n   (roof-length (+ (the left-wall length) (twice (the roof-overhang))))\n   (roof-width (the cladding-thickness))\n   (roof-height (let ((apex (the (roof-truss 0) apex-point))\n\t\t      (gutter (the (roof-truss 0) front-gutter-point)))\n\t\t (+ (3d-distance apex gutter) (the roof-overhang))))\n   )\n\n  :functions\n  ((get-roof-mid-point! (first-gutter last-gutter last-index)\n\t\t       (let*((mid-gutter (midpoint first-gutter last-gutter))\n\t\t\t     (first-apex (the (roof-truss 0) apex-point))\n\t\t\t     (last-apex (the (roof-truss last-index) apex-point))\n\t\t\t     (mid-apex (midpoint first-apex last-apex))\n\t\t\t     (vec (subtract-vectors mid-gutter mid-apex))\n\t\t\t     (mid-edge (translate-along-vector mid-gutter vec (the roof-overhang))))\n\t\t\t (midpoint mid-apex mid-edge))) )\n  \n  :objects\n  ((left-wall :type 'wall\n\t      :pass-down (brick-height\n\t\t\t  brick-length\n\t\t\t  brick-width\n\t\t\t  mortar-joint-width)\n\t      :center (translate-along-vector\n\t\t       (translate-along-vector (the (edge-center :bottom :left))\n\t\t\t\t\t       (the (face-normal-vector :right))\n\t\t\t\t\t       (half (the-child width)))\n\t\t       (the (face-normal-vector :top))\n\t\t       (half (the-child height)))\n\t      :wall-length (the nominal-length)\n\t      :wall-height (the nominal-height))\n\n   (right-wall :type 'wall\n\t       :pass-down (brick-height\n\t\t\t   brick-length\n\t\t\t   brick-width\n\t\t\t   mortar-joint-width)\n\t       :center (translate-along-vector\n\t\t\t(translate-along-vector (the (edge-center :bottom :right))\n\t\t\t\t\t\t(the (face-normal-vector :left))\n\t\t\t\t\t\t(half (the-child width)))\n\t\t\t(the (face-normal-vector :top))\n\t\t\t(half (the-child height)))\n\t       :wall-length (the nominal-length)\n\t       :wall-height (the nominal-height))\n\n   (rear-wall :type 'wall\n\t      :pass-down (brick-height\n\t\t\t  brick-length\n\t\t\t  brick-width\n\t\t\t  mortar-joint-width)\n\t      :center (translate-along-vector\n\t\t\t(translate-along-vector (the (edge-center :bottom :rear))\n\t\t\t\t\t\t(the (face-normal-vector :front))\n\t\t\t\t\t\t(half (the-child width)))\n\t\t\t(the (face-normal-vector :top))\n\t\t\t(half (the-child height)))\n\t      :orientation (alignment :rear (the (face-normal-vector :right)))\n\t      :wall-length (the nominal-width)\n\t      :wall-height (the nominal-height))\n\n   (roof-truss :type 'truss\n\t       :sequence (:size (the number-of-roof-trusses))\n\t       :truss-length (the rear-wall length)\n\t       :center (translate-along-vector\n\t\t\t(translate-along-vector (the (edge-center :front :top))\n\t\t\t\t\t\t(the (face-normal-vector :bottom))\n\t\t\t\t\t\t(half (the-child height)))\n\t\t\t(the (face-normal-vector :rear))\n\t\t\t(nth (the-child index) (the truss-offsets)))\n\t       :orientation (alignment :rear (the (face-normal-vector :right))\n\t\t\t\t       )\t\t\n\t       :pass-down (truss-angle\n\t\t\t   beam-width\n\t\t\t   beam-height\n\t\t\t   wall-thickness\n\t\t\t   material-density))\n   \n   (roof-cladding-left\n    :type 'box\n    :length (the roof-length)\n    :height (the roof-height)\n    :width (the cladding-thickness)\n    :orientation (alignment :left (the (roof-truss 0) front-slope-normal))\n    :center (let* ((last-index (- (the number-of-roof-trusses) 1))\n\t\t   (first-gutter (the (roof-truss 0) front-gutter-point))\n\t\t   (last-gutter (the (roof-truss last-index) front-gutter-point))\n\t\t   (mid-ctr (the (get-roof-mid-point! first-gutter last-gutter last-index))))\n\t      (translate-along-vector mid-ctr\n\t\t\t\t      (the (roof-truss 0) front-slope-normal)\n\t\t\t\t      (half (the cladding-thickness)))))\n   \n   (roof-cladding-right :type 'box\n\t\t\t:length (the roof-length)\n\t\t\t:height (the roof-height)\n\t\t\t:width (the cladding-thickness)\n\t\t\t:orientation (alignment :left (the (roof-truss 0) rear-slope-normal))\n\t\t\t :center (let* ((last-index (- (the number-of-roof-trusses) 1))\n\t\t\t\t\t(first-gutter (the (roof-truss 0) rear-gutter-point))\n\t\t\t\t\t(last-gutter (the (roof-truss last-index) rear-gutter-point))\n\t\t\t\t\t(mid-ctr (the (get-roof-mid-point! first-gutter last-gutter last-index))))\n\t\t\t\t (translate-along-vector mid-ctr\n\t\t\t\t\t\t\t (the (roof-truss 0) rear-slope-normal)\n\t\t\t\t\t\t\t (half (the cladding-thickness)))))\n   )\n\n  \n\t\t       \n  )\n\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/building-hint-4.lisp",
      "file_name": "building-hint-4.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 0,
      "section": "building"
    },
    "id": "90fbeb49d01c0bebc5684a66f8313264"
  },
  {
    "text": "(define-object full-start-wall (wall)\n  :input-slots\n  ((first-row :start-full)))\n\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/building-hint-4.lisp",
      "file_name": "building-hint-4.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 1,
      "section": "full-start-wall"
    },
    "id": "358fc3c3ce55274c506f6178154c2fc1"
  },
  {
    "text": "(define-object half-start-wall (wall)\n  :input-slots\n  ((first-row :start-half)))\n\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/building-hint-4.lisp",
      "file_name": "building-hint-4.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 2,
      "section": "half-start-wall"
    },
    "id": "adf16874dc2ee0945d6cf652c4930394"
  },
  {
    "text": "(define-object half-start-wall-front-key (wall)\n  :input-slots\n  ((first-row :start-half)\n   (front-edge :keyed)))\n\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/building-hint-4.lisp",
      "file_name": "building-hint-4.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 3,
      "section": "half-start-wall-front-key"
    },
    "id": "e0f06a7e59a880996cef2b6772150a97"
  },
  {
    "text": "(define-object half-start-wall-rear-key (wall)\n  :input-slots\n  ((first-row :start-half)\n   (rear-edge :keyed)))\n\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/building-hint-4.lisp",
      "file_name": "building-hint-4.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 4,
      "section": "half-start-wall-rear-key"
    },
    "id": "fc417aa713db7ce8060677560fe54296"
  },
  {
    "text": "(define-object half-start-wall-both-key (wall)\n  :input-slots\n  ((first-row :start-half)\n   (front-edge :keyed)\n   (rear-edge :keyed)))\n\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/building-hint-4.lisp",
      "file_name": "building-hint-4.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 5,
      "section": "half-start-wall-both-key"
    },
    "id": "c5e3cdd94228068269966d4422197c7f"
  },
  {
    "text": "(define-object wall(box)\n  :input-slots\n  ((brick-height 45)\n   (brick-length 180)\n   (brick-width 90)\n   (mortar-joint-width 10)\n   (wall-length 3700)\n   (wall-height 900)\n   (first-row :start-full)\n   (front-edge :full)\n   (rear-edge :full))\n\n  :computed-slots\n  ((row-height (+ (the brick-height) (the mortar-joint-width)))\n   (number-of-rows (round-to-nearest (div (the wall-height) (the row-height)) 1))\n   (actual-wall-height (* (the row-height) (the number-of-rows)))\n   \n   ;; for the wall-length we need the number of full bricks\n   ;; if there are n full bricks then there will be (n-1) mortar joints\n   ;; so n*brick-length + n-1*mortar-joint-width = overall-length\n   ;; or n(brick-length + mortar-join-width) - mortar-joint-width = overall-length\n   ;; or n = (overall-length - mortar-joint-width)/(brick-length + mortar-joint-width)\n   (number-of-bricks (round-to-nearest (div (- (the wall-length) (the mortar-joint-width))\n\t\t\t\t\t    (+ (the brick-length) (the mortar-joint-width)))\n\t\t\t\t       1))\n   (actual-wall-length (+ (* (the number-of-bricks) (the brick-length))\n\t\t\t  (* (- (the number-of-bricks) 1) (the mortar-joint-width))))\n\n   ;; box inputs - gives the wall bounding box\n   (height (the actual-wall-height))\n   (width (the brick-width))\n   (length (the actual-wall-length))\n\n   (full-bricks (apply '+ (list-elements (the row) (the-element full-bricks))))\n   (half-bricks (apply '+ (list-elements (the row) (the-element half-bricks))))\n   (mortar-volume (apply '+ (list-elements (the row) (the-element mortar-volume))))\n   (mortar-density 2162)\n   (mortar-mass (* (the mortar-density) (div (the mortar-volume) 1000000000)))\n   )\n   \n     \n  :objects\n  ((row :type 'row\n     :sequence (:size (the number-of-rows))\n     :center (translate-along-vector (the (face-center :bottom))\n\t\t\t\t     (the (face-normal-vector :top))\n\t\t\t\t     (+ (half (the-child height))\n\t\t\t\t\t(* (the-child index) (the-child height))))\n     :height (+ (the brick-height) (the mortar-joint-width))\n     :full-bricks-per-row (the number-of-bricks)\n     :pass-down (brick-height\n\t\t brick-length\n\t\t brick-width\n\t\t mortar-joint-width\n\t\t length\n\t\t width\n\t\t first-row\n\t\t front-edge\n\t\t rear-edge))))\n\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/building-hint-4.lisp",
      "file_name": "building-hint-4.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 6,
      "section": "wall"
    },
    "id": "b516a93924cdbbe702b4420f92c65ae0"
  },
  {
    "text": "(define-object row (box)\n  :input-slots\n  (full-bricks-per-row\n   brick-height\n   brick-length\n   brick-width\n   mortar-joint-width\n   first-row\n   front-edge\n   rear-edge )\n\n  :computed-slots\n  ((full-brick-row? (cond ((eq (the first-row) :start-full)\n\t\t\t   (or (zerop (the index)) (evenp (the index))))\n\t\t\t  ((eq (the first-row) :start-half)\n\t\t\t   (not (or (zerop (the index)) (evenp (the index)))))))\n\t\t    \n   (full-bricks (the bricks-and-mortar full-bricks))\n   (half-bricks (the bricks-and-mortar half-bricks))\n   (mortar-volume (+ (the bricks-and-mortar mortar-joint-volume)\n\t\t     (the mortar-bed volume))))\n\n  :objects\n  ((bricks-and-mortar :type 'bricks-and-mortar\n\t\t      :height (the brick-height)\n\t\t      :center (translate-along-vector (the mortar-bed (face-center :top))\n\t\t\t\t\t\t      (the mortar-bed (face-normal-vector :top))\n\t\t\t\t\t\t      (half (the-child height)))\n\t\t      :pass-down (width\n\t\t\t\t  length\n\t\t\t\t  full-brick-row?\n\t\t\t\t  brick-height\n\t\t\t\t  brick-length\n\t\t\t\t  brick-width\n\t\t\t\t  mortar-joint-width\n\t\t\t\t  full-bricks-per-row\n\t\t\t\t  front-edge\n\t\t\t\t  rear-edge))\n   (mortar-bed :type 'box\n\t       :height (the mortar-joint-width)\n\t       :center (translate-along-vector (the (face-center :bottom))\n\t\t\t\t\t       (the (face-normal-vector :top))\n\t\t\t\t\t       (half (the-child height)))\n\t       :pass-down (width\n\t\t\t   length))))\n\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/building-hint-4.lisp",
      "file_name": "building-hint-4.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 7,
      "section": "row"
    },
    "id": "c767abdd59da4ccafdb329980e749065"
  },
  {
    "text": "(define-object bricks-and-mortar (box)\n  :input-slots\n  (full-brick-row?\n   full-bricks-per-row\n   brick-height\n   brick-length\n   brick-width\n   mortar-joint-width\n   front-edge\n   rear-edge)\n\n  :computed-slots\n  ((first-full-brick-start-point (if (the full-brick-row?)\n\t\t\t\t     (the (face-center :front))\n\t\t\t\t     (the (mortar-joint 0) (face-center :rear))))\n   \n   (first-mortar-joint-start-point (cond ((the full-brick-row?) (the (full-brick 0) (face-center :rear)))\n\t\t\t\t\t ((eq (the front-edge) :full) (the (half-brick 0) (face-center :rear)))\n\t\t\t\t\t ((eq (the front-edge) :keyed) (translate-along-vector (the (face-center :front))\n\t\t\t\t\t\t\t\t\t\t\t       (the (face-normal-vector :rear))\n\t\t\t\t\t\t\t\t\t\t\t       (half (the brick-length))))))\n\n   (number-of-full-bricks (if (the full-brick-row?)\n\t\t\t      (the full-bricks-per-row)\n\t\t\t      (- (the full-bricks-per-row) 1)))\n\n   (number-of-half-bricks (cond ((the full-brick-row?) 0)\n\t\t\t\t((and (eq (the front-edge) :full)(eq (the rear-edge) :full)) 2)\n\t\t\t\t((and (eq (the front-edge) :keyed) (eq (the rear-edge) :full)) 1)\n\t\t\t\t((and (eq (the front-edge) :full) (eq (the rear-edge) :keyed)) 1)\n\t\t\t\t((and (eq (the front-edge) :keyed) (eq (the rear-edge) :keyed)) 0)))\n\n   ;; whether or not the ends are :full or :keyed, the number of mortar joints remains the same since the mortar joint\n   ;; when it is :keyed is used to connect to the full brick of the other wall\n   (number-of-mortar-joints (if (the full-brick-row?)\n\t\t\t\t(- (the number-of-full-bricks) 1)\n\t\t\t\t(+ (the number-of-full-bricks) 1)))\n\n   ;; if it isn't a full brick row then there will be an extra joint because one\n   ;; full brick is replaced with 2 half bricks so without correcting the\n   ;; mortar-joint-width the ends of a full brick row and one starting and\n   ;; finishing with half bricks won't align. So we need to correct\n   ;; the mortar-joint-width\n   (corrected-joint-width (if (the full-brick-row?)\n\t\t\t\t     (the mortar-joint-width)\n\t\t\t\t     (let ((total-gap (* (- (the number-of-mortar-joints) 1)\n\t\t\t\t\t\t\t\t\t(the mortar-joint-width))))\n\t\t\t\t       (div total-gap (the number-of-mortar-joints)))))\n   ;; collating the output. We could do this analytically, but for this example we'll use the geometry\n   (full-bricks (length (list-elements (the full-brick))))\n   (half-bricks (length (list-elements (the half-brick))))\n   (mortar-joint-volume (apply '+ (list-elements (the mortar-joint)\n\t\t\t\t\t\t (the-element volume))))\n   )\n  \n  :functions\n  ((first-full-brick-center!\n    ()\n    (translate-along-vector (the first-full-brick-start-point)\n\t\t\t    (the (face-normal-vector :rear))\n\t\t\t    (half (the brick-length))))\n   \n   (other-full-brick-center!\n    (index)\n    ;; if its a full brick row, (full-brick 1) is positioned relative to (joint 0)\n    ;; if its a half brick row, (full-brick 1) is positioned relative to (joint 1)\n    (let ((ind (if (the full-brick-row?) (- index 1) index)))\n\t  (translate-along-vector (the (mortar-joint ind) (face-center :rear))\n\t\t\t\t  (the (face-normal-vector :rear))\n\t\t\t\t  (half (the brick-length)))))\n   \n    (first-joint-center!\n     ()\n     (translate-along-vector (the first-mortar-joint-start-point)\n\t\t\t     (the (face-normal-vector :rear))\n\t\t\t     (half (the corrected-joint-width))))\n   (other-joint-center!\n    (index)\n    ;; if its a full brick row, (joint 1) is positioned relative to (full-brick 1)\n    ;; if its a half brick row, (joint 1) is positioned relative to (full-brick 0)\n    (let ((ind (if (the full-brick-row?) index (- index 1))))\n      (translate-along-vector (the (full-brick ind) (face-center :rear))\n\t\t\t      (the (face-normal-vector :rear))\n\t\t\t      (half (the corrected-joint-width)))))\n\n    (first-half-brick-center!\n     ()\n     (translate-along-vector (the (face-center :front))\n\t\t\t     (the (face-normal-vector :rear))\n\t\t\t     (half (half (the brick-length)))))\n   \n   (last-half-brick-center!\n     ()\n     (translate-along-vector (theo (the mortar-joint last) (face-center :rear))\n\t\t\t     (the (face-normal-vector :rear))\n\t\t\t     (half (half (the brick-length))))))\n \t\t\t     \n  \n  :objects\n  ((full-brick :type 'box\n\t       :sequence (:size (the number-of-full-bricks))\n\t       :center (if (= (the-child index) 0)\n\t\t\t   (the first-full-brick-center!)\n\t\t\t   (the (other-full-brick-center! (the-child index))))\n\t       :length (the brick-length)\n\t       :height (the brick-height)\n\t       :width (the brick-width))\n\n   (half-brick :type 'box\n\t       :sequence (:size (the number-of-half-bricks))\n\t       :center (cond ((and (= (the-child index) 0)\n\t\t\t\t   (eq (the front-edge) :full)) (the first-half-brick-center!))\n\t\t\t     ((and (= (the-child index) 0)\n\t\t\t\t   (eq (the front-edge) :keyed)\n\t\t\t\t   (eq (the rear-edge) :full)) (the last-half-brick-center!))\n\t\t\t     ((eq (the rear-edge) :full) (the last-half-brick-center!)))\n\t       :length (half (the brick-length))\n\t       :height (the brick-height)\n\t       :width (the brick-width))\n\n   (mortar-joint :type 'box\n\t\t :sequence (:size (the number-of-mortar-joints))\n\t\t :center (if (= (the-child index) 0)\n\t\t\t     (the first-joint-center!)\n\t\t\t  (the (other-joint-center! (the-child index))))   \n\t\t :height (the brick-height)\n\t\t :width (the brick-width)\n\t\t :length (the corrected-joint-width))))\n\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/building-hint-4.lisp",
      "file_name": "building-hint-4.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 8,
      "section": "bricks-and-mortar"
    },
    "id": "caea3979cfdaff9990e2add4d83bc1a0"
  },
  {
    "text": "(defun degrees-to-radians (degrees)\n  (div (* degrees pi) 180))\n\n\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/building-hint-4.lisp",
      "file_name": "building-hint-4.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 9,
      "section": "degrees-to-radians"
    },
    "id": "7e6eef091083715a5f181d6174ffbd46"
  },
  {
    "text": "(define-object truss (box)\n  :input-slots\n  ((truss-length 2000)\n   (truss-height nil)\n   (truss-angle 30)\n\n   (beam-width 30)\n   (beam-height 50)\n   (wall-thickness 3)\n\n   (material-density 7800)\n   (tonne-rate 450))\n\n  :computed-slots\n  ((length (the truss-length))\n   (height (cond ((the truss-height)(the truss-height))\n\t\t ((the truss-angle) (+ (* (half (the truss-length))\n\t\t\t\t\t  (tan (degrees-to-radians (the truss-angle))))\n\t\t\t\t       (the beam-height)))))\n   (width (the beam-width))\n  \n   (truss-front-slope-vector (the (get-slope-vector! :front)))\n   (truss-rear-slope-vector (the (get-slope-vector! :rear)))\n\n   (front-slope-length (the (get-slope-length! :front)))\n   (rear-slope-length (the (get-slope-length! :rear)))\n   \n   (front-slope-center (the (get-slope-center! :front)))\n   (rear-slope-center (the (get-slope-center! :rear)))\n   \n\n   (beam-properties (mapsend (the children) :beam-properties))\n   (total-mass (round-to-nearest\n\t\t(apply '+\n\t\t       (mapcar #'(lambda(a) (getf a :mass-kg))\n\t\t\t       (the beam-properties)))\n\t\t0.001))\n   (total-cost (round-to-nearest\n\t\t(apply '+\n\t\t       (mapcar #'(lambda(a) (getf a :cost-gbp))\n\t\t\t       (the beam-properties)))\n\t\t0.01))\n\n   ;; messages to support roof cladding sizing and positioning\n   (apex-point (inter-line-plane (the rear-slope-construction-line end)\n\t\t\t   (the truss-rear-slope-vector)\n\t\t\t   (the lower-beam center)\n\t\t\t\t (the (face-normal-vector :rear))))\n   (front-gutter-point (the front-slope-construction-line start))\n   (rear-gutter-point (the rear-slope-construction-line start))\n   (front-slope-normal (the front-slope-beam (face-normal-vector :top)))\n   (rear-slope-normal (the rear-slope-beam (face-normal-vector :top)))\n   )\n\n  :functions\n  ((get-slope-vector! (beam-side)\n\t\t      (let ((v-key (the (get-v-key! beam-side)))\n\t\t\t    (l-key (the (get-l-key! beam-side))))\n\t\t      (subtract-vectors (the vertical-beam (edge-center :rear v-key))\n\t\t\t\t\t(the lower-beam (edge-center l-key :top)))))\n   (get-slope-length! (beam-side)\n\t\t      (let ((v-key (the (get-v-key! beam-side)))\n\t\t\t    (l-key (the (get-l-key! beam-side))))\n\t\t\t(3d-distance (the vertical-beam (edge-center :rear v-key))\n\t\t\t\t     (the lower-beam (edge-center l-key :top)))))\n   (get-slope-center!\n    (beam-side)\n    (let ((pt (case beam-side\n\t\t(:front (the front-slope-construction-line center))\n\t\t(:rear  (the rear-slope-construction-line center))))\n\t  (norm-vector (case beam-side\n\t\t\t (:front (the front-slope-beam (face-normal-vector :bottom)))\n\t\t\t (:rear (the rear-slope-beam (face-normal-vector :bottom))))))\n      (translate-along-vector pt\n\t\t\t      norm-vector\n\t\t\t      (half (the beam-height)))))\n   (get-v-key! (beam-side)\n\t       (case beam-side\n\t\t (:front :top)\n\t\t (:rear :bottom)))\n   (get-l-key! (beam-side)\n\t       (case beam-side\n\t\t (:front :front)\n\t\t (:rear :rear)))\n\n   \n   )\n   \n  :computed-slots\n  (\n   \n   )\n  \n  :objects\n  ((lower-beam :type 'beam\n\t       :pass-down (:beam-height :beam-width :wall-thickness :material-density :tonne-rate)\n\t       :beam-length (the truss-length)\n\t       :center (translate-along-vector (the (face-center :bottom))\n\t\t\t\t\t       (the (face-normal-vector :top))\n\t\t\t\t\t       (half (the beam-height))))\n   (vertical-beam :type 'beam\n\t\t  :pass-down (:beam-height :beam-width :wall-thickness :material-density :tonne-rate)\n\t\t  \n\t\t  :beam-length (- (the height) (the beam-height))\n\t\t  :orientation (alignment :rear (the (face-normal-vector :top))\n\t\t\t\t\t  :right (the (face-normal-vector :right)))  \n\t\t  :center (translate-along-vector (the lower-beam (face-center :top))\n\t\t\t\t\t\t  (the lower-beam (face-normal-vector :top))\n\t\t\t\t\t\t  (half (the-child beam-length))))\n   (front-slope-beam :type 'beam\n\t\t     :pass-down (:beam-height :beam-width :wall-thickness :material-density :tonne-rate)\n\t\t     :beam-length (the front-slope-length)\n\t\t     :center (the front-slope-center)\n\t\t     :orientation (alignment :rear (the truss-front-slope-vector)\n\t\t\t\t\t     :right (the (face-normal-vector :right))))\n\n   (rear-slope-beam :type 'beam\n\t\t    :pass-down (:beam-height :beam-width :wall-thickness :material-density :tonne-rate)\n\t\t    :beam-length (the rear-slope-length)\n\t\t    :center (the rear-slope-center)\n\t\t    :orientation (alignment :rear (the truss-rear-slope-vector)\n\t\t\t\t\t    :left (the (face-normal-vector :right))))\n   \n   )\n\n  :hidden-objects\n  ((apex-pt :type 'sphere\n\t    :radius 5\n\t    :display-controls (list :color :green)\n\t    :center (the apex))\n   (front-slope-construction-line :type 'line\n\t\t\t\t  :start (the lower-beam (edge-center :front :top))\n\t\t\t\t  :end (the vertical-beam (edge-center :rear :top)))\n   (rear-slope-construction-line :type 'line\n\t\t\t\t :start (the lower-beam (edge-center :rear :top))\n\t\t\t\t :end (the vertical-beam (edge-center :rear :bottom)))\n   \n   (front-mid-pt :type 'sphere\n\t\t :display-controls (list :color :blue)\n\t\t :radius 5\n\t\t :center (the front-slope-construction-line center))\n   (rear-mid-pt :type 'sphere\n\t\t:display-controls (list :color :blue)\n\t\t:center (the rear-slope-construction-line center)\n\t\t:radius 5)\n   (pt-1 :type 'sphere\n\t :radius 5\n\t :display-controls (list :color :green)\n\t :center (the lower-beam (edge-center :rear :top)))\n   (pt-2 :type 'sphere\n\t :radius 5\n\t :display-controls (list :color :red)\n\t :center (the vertical-beam (edge-center :rear :bottom)) )\n\n   \n\n   (vector-line :type 'vector-line\n\t\t:start-point (the rear-slope-construction-line center)\n\t\t:vector (the rear-slope-beam (face-normal-vector :bottom))\n\t\t:length 150)\n   \n   )))\n\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/building-hint-4.lisp",
      "file_name": "building-hint-4.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 10,
      "section": "truss"
    },
    "id": "af61ed9643ebcc0ae6aed0088408b986"
  },
  {
    "text": "(define-object vector-line (box)\n  :input-slots\n  ((start-point (make-point 0 0 0))\n   (vector (make-vector 1 0 1))\n   (length 50)\n   (width 1))\n  :computed-slots\n  ((height (div (the length) 5)))\n  :objects\n  ((v-line :type 'line\n\t   :start (the start-point)\n\t   :display-controls (list :color :red)\n\t   :end (translate-along-vector (the start-point)\n\t\t\t\t\t(the vector)\n\t\t\t\t\t(the length)))\n   (arrow :type 'cone\n\t  :radius-1 0\n\t  :radius-2 (div (the length) 50)\n\t  :length (div (the length) 5)\n\t  :display-controls (list :color :red)\n\t  :center (translate-along-vector (the v-line end)\n\t\t\t\t\t  (the vector)\n\t\t\t\t\t  (half (the-child length)))\n\t  :orientation (alignment :front (the vector)))))\n\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/building-hint-4.lisp",
      "file_name": "building-hint-4.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 11,
      "section": "vector-line"
    },
    "id": "ac733a53eacbecfbbcf457372bb9bf5d"
  },
  {
    "text": "(define-object beam (box)\n  :input-slots\n  ((beam-length 1000)\n   (beam-width 40)\n   (beam-height 50)\n   (wall-thickness 2)\n   (material-density 7800)\n   (tonne-rate 500))\n\n  :computed-slots\n  ((length (the beam-length))\n   (width (the beam-width))\n   (height (the beam-height))\n\n   (beam-volume (- (the outer volume) (the inner volume)))\n   (beam-mass (* (div (the beam-volume) 1000000000) (the material-density)))\n   (beam-cost (* (the tonne-rate) (div (the beam-mass) 1000)))\n   (beam-properties (list :volume-mm3 (the beam-volume)\n\t\t\t  :mass-kg (round-to-nearest (the beam-mass) 0.01)\n\t\t\t  :cost-gbp (round-to-nearest (the beam-cost) 0.01)\n\t\t\t  :length-mm (the beam-length)\n\t\t\t  :width-mm (the beam-width)\n\t\t\t  :height-mm (the beam-height)\n\t\t\t  :thickness-mm (the wall-thickness))))\n   \n  :objects\n  ((outer :type 'box\n\t  :length (the beam-length)\n\t  :width (the beam-width)\n\t  :height (the beam-height))\n\n   (inner :type 'box\n\t  :length (the beam-length)\n\t  :width (- (the beam-width) (twice (the wall-thickness)))\n\t  :height (- (the beam-height) (twice (the wall-thickness)))))\n  )\n\n\n\n\n\n\n\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/building-hint-4.lisp",
      "file_name": "building-hint-4.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 12,
      "section": "beam"
    },
    "id": "7ef0349e1c86b1d3ea5bb22a2c820764"
  },
  {
    "text": "(in-package :gdl-user)\n\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/lists.lisp",
      "file_name": "lists.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 0,
      "section": "header"
    },
    "id": "772d4e73b89e76cc1d1c04ecfb9c5efb"
  },
  {
    "text": "(define-object lists (base-object)\n\n  :computed-slots\n  ((my-number-list (list 1 2 3 4))\n   (my-plist (list :uk \"London\" :france \"Paris\" :belgium \"Brussels\"))\n   \n   ;; Length of a list\n   (length-1 (length (the my-number-list)))    ;;; 4\n   (length-2 (length nil))                     ;;; 0\n   \n\n   ;; referencing in a list (from welcome-to-lisp)\n    ;; accessing the first element of a list\n   (access-first-1 (first (the my-number-list)))    ;;; 1\n   (access-first-2 (car (the my-number-list)))      ;;; 1\n   (access-first-3 (nth 0 (the my-number-list)))    ;;; 1\n\n   ;; accessing the second element of a list\n   (access-second-1 (second (the my-number-list)))     ;;; 2\n   (access-second-2 (car (cdr (the my-number-list))))  ;;; 2\n   (access-second-3 (cadr (the my-number-list)))       ;;; 2\n   (access-second-4 (nth 1 (the my-number-list)))      ;;; 2\n\n   ;; accessing all but the first element in a list\n   (access-rest-1 (cdr (the my-number-list)))          ;;; (2 3 4))\n   (access-rest-2 (rest (the my-number-list)))         ;;; (2 3 4))\n\n   ;; accesing the last element of a list\n   (access-last-1 (car (last (the my-number-list))))                               ;;; 4 !! caution - last returns a list !!\n   (access-last-2 (nth (- (length (the my-number-list)) 1) (the my-number-list)))  ;;; 4\n   (access-last-3 (car (reverse (the my-number-list))))                            ;;; 4\n   (access-last-4 (lastcar (the my-number-list)))                                  ;;; 4\n\n   ;; access all but the last element of the list\n   (access-but-last (butlast (the my-number-list)))   ;;; (1 2 3 )\n\n   ;; appending lists\n   (add-1 (append  (the my-number-list) (the my-string-list))) ;;; (1 2 3 4 \"peter\" \"paul\" \"mike\" \"john\")\n\n   (add-2 (append (the my-number-list) (list 1)))\t      ;;; (1 2 3 4 1)\n   (add-3 (append (the my-number-list) 5))                    ;;; (1 2 3 4 . 5) if the first argument is a list this generates a dotted list.\n   (add-4 (ignore-errors (append 0 (the my-number-list))))    ;;; if the first argument isn't a list append will error\n                                                              ;;; NIL\n                                                              ;;; #<TYPE-ERROR #x210376AEED>\n   \n   (add-5 (cons 0 (the my-number-list))) ;; (0 1 2 3 4) if the second argument is a list cons will return a list\n   (add-6 (cons (the my-number-list) 5)) ;; ((1 2 3 4) . 5) note the different behaviour to append\n\n   ;; plists\n   (plist-1 (getf (the my-plist) :uk))                ;;; \"London\"\n   )\n  )\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/lists.lisp",
      "file_name": "lists.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 0,
      "section": "lists"
    },
    "id": "772d4e73b89e76cc1d1c04ecfb9c5efb"
  },
  {
    "text": "(in-package :gdl-user)\n\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/positioning-and-orientation.lisp",
      "file_name": "positioning-and-orientation.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 0,
      "section": "header"
    },
    "id": "bcf5f166cf7dd9473b0bf559cb2280bb"
  },
  {
    "text": "(define-object assembly-2 (base-object)\n\n  :objects\n  ((box-1 :type 'box\n\t  :length 5\n\t  :width 1\n\t  :height 1)\n\n   (box-2 :type 'box\n\t  :length 10\n\t  :height 5\n\t  :width 3\n\t  :center (make-point 2 2 2))\n\n   (box-3 :type 'box\n\t  :length 5\n\t  :height 5\n\t  :width 5\n\t  :center (translate-along-vector (the box-2 center)\n\t\t\t\t\t  (make-vector 1 1 0)\n\t\t\t\t\t  5))))\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/positioning-and-orientation.lisp",
      "file_name": "positioning-and-orientation.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 0,
      "section": "assembly-2"
    },
    "id": "bcf5f166cf7dd9473b0bf559cb2280bb"
  },
  {
    "text": "(define-object assembly-3 (base-object)\n\n  :objects\n  ((box-1 :type 'box\n\t  :length 5\n\t  :width 1\n\t  :height 1)\n\n   (box-2 :type 'box\n\t  :length 10\n\t  :height 5\n\t  :width 3\n\t  :center (translate-along-vector (the box-1 (face-center :rear))\n\t\t\t\t\t  (the box-1 (face-normal-vector :rear))\n\t\t\t\t\t  (half (the-child length))))\n\n   (box-3 :type 'box\n\t  :length 5\n\t  :height 5\n\t  :width 5\n\t  :center (translate-along-vector (the box-2 (face-center :rear))\n\t\t\t\t\t  (the box-2 (face-normal-vector :rear))\n\t\t\t\t\t  (half (the-child length))))))\n\n  ",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/positioning-and-orientation.lisp",
      "file_name": "positioning-and-orientation.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 1,
      "section": "assembly-3"
    },
    "id": "b1b9d4930fd6feb9d9f08680f5ea68ee"
  },
  {
    "text": "(define-object assembly-4 (base-object)\n\n  :objects\n  ((box-1 :type 'box\n\t  :length 5\n\t  :width 1\n\t  :height 1)\n\n   (box-2 :type 'box\n\t  :length 5\n\t  :width 1\n\t  :height 1\n\t  :orientation (alignment :rear (the box-1 (face-normal-vector :top))))\n   ))\n\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/positioning-and-orientation.lisp",
      "file_name": "positioning-and-orientation.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 2,
      "section": "assembly-4"
    },
    "id": "8795cc37a42a34811258d5ec8603fb0e"
  },
  {
    "text": "(define-object assembly-5 (base-object)\n\n  :objects\n  ((box-1 :type 'box\n\t  :length 5\n\t  :width 1\n\t  :orientation (alignment :rear (the (face-normal-vector :top)))\n\t  :height 1)\n\n   (box-2 :type 'box\n\t  :length 10\n\t  :height 5\n\t  :width 3\n\t :orientation (alignment :rear (the box-1 (face-normal-vector :rear)))\n\t  :center (translate-along-vector (the box-1 (face-center :rear))\n\t\t\t\t\t  (the box-1 (face-normal-vector :rear))\n\t\t\t\t\t  (half (the-child length))))\n\n   (box-3 :type 'box\n\t  :length 5\n\t  :height 5\n\t  :width 5\n\t  :orientation (alignment :rear (the box-2 (face-normal-vector :rear)))\n\t  :center (translate-along-vector (the box-2 (face-center :rear))\n\t\t\t\t\t  (the box-2 (face-normal-vector :rear))\n\t\t\t\t\t  (half (the-child length))))))\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/positioning-and-orientation.lisp",
      "file_name": "positioning-and-orientation.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 3,
      "section": "assembly-5"
    },
    "id": "e431d6000d076a2ca5392cea86103f51"
  },
  {
    "text": "(in-package :gdl-user)\n\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/strings.lisp",
      "file_name": "strings.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 0,
      "section": "header"
    },
    "id": "ff3dd2043504b837c13ce98b925aa89b"
  },
  {
    "text": "(define-object strings (base-object)\n\n  :computed-slots\n  (\n   ;;; string manipulation\n   (string-build-1 (concatenate 'string \"my\" \" \" \"string\"))                 ;;; \"my string\"\n   (string-build-2 (apply #'concatenate 'string (list \"my\" \" \" \"string\")))  ;;; \"my string\"\n   (string-build-3 (let ((a \"my\")\n\t\t\t (b \"string\"))\n\t\t     (format nil \"~a ~a\" a b)))                             ;;; \"my string\"\n\n   (reverse-string (reverse \"My String\"))                                   ;;; \"gnirtS yM\"\n   (sort-string (safe-sort (list \"My\" \"Empty\" \"String\")  #'string>))        ;;; (\"String\" \"My\" \"Empty\")\n   (split-string-1 (glisp:split-regexp \"\\\\s\" \"my Empty String\"))            ;;; (\"my\" \"Empty\" \"String\")\n   (split-string-2 (glisp:split-regexp \"\\\\s\" \"my    Empty String\"))         ;;; (\"my\" \"\" \"\" \"\" \"Empty\" \"String\")\n   (split-string-3 (glisp:split-regexp \"\\\\s+\" \"my    Empty String\"))        ;;; (\"my\" \"Empty\" \"String\")\n   (split-string-4 (glisp:split-regexp \",\" \"my,comma,delimited,String\"))    ;;; (\"my\" \"comma\" \"delimited\" \"String\")\n\n   ;; string information\n   (string-info-1 (length (the my-string)))                            ;;; 16\n   (string-info-2 (position \"s\" (the my-string) :test 'string-equal))  ;;; 3  Note that position give the position of the first occurrence\n   (string-info-3 (position \"is\" (the my-string) :test 'string-equal)) ;;; NIL\n   (string-info-4 (glisp:match-regexp \"is\" (the my-string)))           ;;; 2 this is the value thats restrned and assigned to (the string-info-4\n                                                                       ;;; 4 this is printed in the buffer but not returned, same for the 2 values below\n                                                                       ;;; #()\n                                                                       ;;; #()\n\n   (example-1 (subseq (the my-string) (the string-info-4)))            ;;; \"is is a string\"\n   \n   ;;; glisp:match-regexp returns multiple values. To access any apart from the first value we need to use multiple-value-bind\n   (string-info-5 (multiple-value-bind (a b)\n\t\t      (glisp:match-regexp \"is\" (the my-string))\n\t\t    (list :start a :end b)))                            ;;; (:START 2 :END 4)\n   (example-2 (subseq (the my-string)\n\t\t    (getf (the string-info-5) :start)))                 ;;; \"is is a string\"\n   (example-3 (subseq (the my-string)\n\t\t      (getf (the string-info-5) :end)))                 ;;; \" is a string\"\n   (example-4 (subseq (the my-string)\n\t\t      (getf (the string-info-5) :start)\n\t\t      (getf (the string-info-5) :end)))                 ;;; \"is\"\n   \n\t\t  \n\t   \n   \n\t  \n\n\n   )\n   )\n\n   \n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/strings.lisp",
      "file_name": "strings.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 0,
      "section": "strings"
    },
    "id": "ff3dd2043504b837c13ce98b925aa89b"
  },
  {
    "text": "(in-package :gdl-user)\n\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/wall-hint-3.lisp",
      "file_name": "wall-hint-3.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 0,
      "section": "header"
    },
    "id": "bd5486ce4fdd52530f05a07606f6f4bc"
  },
  {
    "text": "(define-object wall(box)\n  :input-slots\n  ((brick-height 45)\n   (brick-length 180)\n   (brick-width 90)\n   (mortar-joint-width 10)\n   (wall-length 3700)\n   (wall-height 900))\n\n  :computed-slots\n  ((row-height (+ (the brick-height) (the mortar-joint-width)))\n   (number-of-rows (round-to-nearest (div (the wall-height) (the row-height)) 1))\n   (actual-wall-height (* (the row-height) (the number-of-rows)))\n   \n   ;; for the wall-length we need the number of full bricks\n   ;; if there are n full bricks then there will be (n-1) mortar joints\n   ;; so n*brick-length + n-1*mortar-joint-width = overall-length\n   ;; or n(brick-length + mortar-join-width) - mortar-joint-width = overall-length\n   ;; or n = (overall-length - mortar-joint-width)/(brick-length + mortar-joint-width)\n   (number-of-bricks (round-to-nearest (div (- (the wall-length) (the mortar-joint-width))\n\t\t\t\t\t    (+ (the brick-length) (the mortar-joint-width)))\n\t\t\t\t       1))\n   (actual-wall-length (+ (* (the number-of-bricks) (the brick-length))\n\t\t\t  (* (- (the number-of-bricks) 1) (the mortar-joint-width))))\n\n   ;; box inputs - gives the wall bounding box\n   (height (the actual-wall-height))\n   (width (the brick-width))\n   (length (the actual-wall-length)))\n   \n     \n  :objects\n  ((row :type 'row\n     :sequence (:size (the number-of-rows))\n     :bricks-per-row (the number-of-bricks)\n     :length (the length)\n     :width (the width)\n     :brick-height(the brick-height)\n     :brick-length (the brick-length)\n     :brick-width (the brick-width)\n     :mortar-joint (the mortar-joint-width))))\n\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/wall-hint-3.lisp",
      "file_name": "wall-hint-3.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 0,
      "section": "wall"
    },
    "id": "bd5486ce4fdd52530f05a07606f6f4bc"
  },
  {
    "text": "(define-object row ()\n  :input-slots\n  (brick-height\n   brick-length\n   brick-width\n   mortar-joint-width)\n\n  :objects\n  ((bricks-and-mortar :type 'bricks-and-mortar\n\t\t      :brick-height (the brick-height)\n\t\t      :brick-length (the brick-length)\n\t\t      :brick-width (the brick-width)\n\t\t      :mortar-joint-width (the mortar-joint-width))\n   (mortar-bed :type 'box\n\t       :height (the mortar-joint-width))\n   )\n  )\n\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/wall-hint-3.lisp",
      "file_name": "wall-hint-3.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 1,
      "section": "row"
    },
    "id": "09bfaed1c4474885c2d345ac2cd3ed58"
  },
  {
    "text": "(define-object bricks-and-mortar ()\n  :input-slots\n  (brick-height\n   brick-length\n   brick-width\n   mortar-joint-width)\n  \n  :objects\n  ((full-brick :type 'box\n\t       :length (the brick-length)\n\t       :height (the brick-height)\n\t       :width (the brick-width))\n   (half-brick :type 'box\n\t       :length (half (the brick-length))\n\t       :height (the brick-height)\n\t       :width (the brick-width))\n   (mortar-joint :type 'box\n\t\t :height (the brick-height)\n\t\t :width (the brick-width)\n\t\t :length (the mortar-joint-width))))\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/wall-hint-3.lisp",
      "file_name": "wall-hint-3.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 2,
      "section": "bricks-and-mortar"
    },
    "id": "e95674f93adfe758c518113f58538ebb"
  },
  {
    "text": "(in-package :gdl-user)\n\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/functions.lisp",
      "file_name": "functions.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 0,
      "section": "header"
    },
    "id": "d0d654a9b8440e0d6a4d55d8354ed723"
  },
  {
    "text": "(defun kinetic-energy (&key (mass 5) (velocity 12)\n\t\t\t (div (* mass velocity velocity) 2)))\n\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/functions.lisp",
      "file_name": "functions.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 0,
      "section": "kinetic-energy"
    },
    "id": "d0d654a9b8440e0d6a4d55d8354ed723"
  },
  {
    "text": "(define-object function-example(base-object)\n\n  :computed-slots\n  ((mass 5)\n   (velocity 12)\n   (ke-1 (the kinetic-energy-1!))\n   (ke-2 (the kinetic-energy-2!))\n   (ke-3 (the (kinetic-energy-2! :mass 10)))\n   (ke-4 (the (kinetic-energy-2! :velocity 24)))\n   (ke-5 (the (kinetic-energy-2! :velocity 24 :mass 10)))\n\n   (ke-6 (kinetic-energy :mass 10 :velocity 24))\n   )\n\n  :functions\n  ((kinetic-energy-1! () (div (* (the mass) (the velocity) (the velocity)) 2))\n\n   (kinetic-energy-2! (&key (mass (the mass)) (velocity (the velocity)))\n\t\t      (div (* mass velocity velocity) 2))\n   )\n  )\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/functions.lisp",
      "file_name": "functions.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 1,
      "section": "function-example"
    },
    "id": "4281c430fb30a13dc74fe7e3cfac172e"
  },
  {
    "text": "(in-package :gdl-user)\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/point-and-vector-examples.lisp",
      "file_name": "point-and-vector-examples.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 0,
      "section": "header"
    },
    "id": "b4943686a4702b866da590bec85197b6"
  },
  {
    "text": "(define-object assembly (box)\n  :computed-slots\n  ((length 1)\n  (width 1)\n  (height 1)\n  (alignment-vector-1 (the (face-normal-vector :left)))\n  (alignment-vector-2 (the (face-normal-vector :rear)))\n  ;; some other ways to make vectors\n  ;; effectively the vector from 0,0,0 to 1,1,1\n  (alignment-3 (make-vector 1 1 1))\n\n  ;; points and vectors have the same structure so make-point and make-vector can be used interchangably\n  (pt-1 (make-point 1 0 0))\n  (pt-2 (make-point 2 5 6))\n  ;; subtract vectors is used to get the vector from the second point to the first point\n  ;; conceptualy (make-vector 1 1 1) is equivalent to (subtract-vectors (make-vector 1 1 1) (make-vector 0 0 0)))\n  (vector-1 (subtract-vectors (the pt-2) (the pt-1) ))\n\n  ;; distance between 2 points\n  (distance-between-points (3d-distance (the pt-1) (the pt-2)))\n\n  ;; translating a point\n  (new-point (translate-along-vector (the pt-1) (the vector-1) (the distance-between-points)))\n\n  ;; new-point should be exactly the same as pt-2, but we see some rounding has crept in as the value is #(2.0 5.0 6.000000000000001)\n  ;; to test if 2 points are the 'same' use coincident-point? the tolerance defaults to *ZERO-EPSILON* (0.001 by default)\n  (same-point? (coincident-point? (the pt-2) (the new-point) :tolerance 0.000001))\n\n  ;; getting individual x y and z values from a point\n  (new-point-x (get-x (the new-point)))\n  (new-point-y (get-y (the new-point)))\n  (new-point-z (get-z (the new-point)))\n\n  ;; orthoginal vector\n  ;; use cross vectors to get a vector that is orthogonal to the 2 input vectors\n  (ortho-vector (let ((v1 (make-vector 1 0 0))\n\t\t      (v2 (make-vector 0 1 0)))\n\t\t  (cross-vectors v1 v2)))\n  ;; returns #(0.0 0.0 1.0)\n\n  (vector-angle-rads (let ((v1 (make-vector 1 0 0))\n\t\t      (v2 (make-vector 0 1 0)))\n\t\t       (angle-between-vectors v1 v2)))\n  ;; returns 1.5707963267948966\n\n  (vector-angle-degrees (let ((v1 (make-vector 1 0 0))\n\t\t      (v2 (make-vector 0 1 0)))\n\t\t\t  (angle-between-vectors-d v1 v2)))\n  ;; returns 90\n  ;; note that by default angle-between-vectors/angle-between-vectors-d returns the smallest angle.\n  ;; However if a third vector is given it calculates the angle\n  ;; based on the RH rule, around this third vector\n\n  (vector-angle-degrees-1 (let ((v1 (make-vector 1 0 0))\n\t\t\t\t(v2 (make-vector 0 1 0))\n\t\t\t\t(ref-v (make-vector 0 0 1)))\n\t\t\t    (angle-between-vectors-d v1 v2 ref-v)))\n  ;; returns 90\n  (vector-angle-degrees-2 (let ((v1 (make-vector 1 0 0))\n\t\t\t\t(v2 (make-vector 0 1 0))\n\t\t\t\t(ref-v (make-vector 0 0 -1)))\n\t\t\t    (angle-between-vectors-d v1 v2 ref-v)))\t       \n  ;; returns 270\n  )\n  \n  \n  :objects\n  ((bottom-post :type 'post\n\t\t;; in this example we align the :top axis of the post with alignment-vector-1\n\t\t;; if we change this to bottom it will rotate the post by 180 degrees\n\t\t:orientation (alignment :top\n\t\t\t\t\t(the alignment-vector-1)))\n   (next-post :type 'post\n\t\t:orientation (alignment :top\n\t\t\t\t\t(the alignment-vector-2))))\n  )\n\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/point-and-vector-examples.lisp",
      "file_name": "point-and-vector-examples.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 0,
      "section": "assembly"
    },
    "id": "b4943686a4702b866da590bec85197b6"
  },
  {
    "text": "(define-object post (box)\n\n  :computed-slots\n  ((height (+ (the post-main height) (the base height)))\n   (length (max (the post-main length) (the base length)))\n   (width (max (the post-main width ) (the base width))))\n  \n  :objects\n  ((post-main :type 'box\n\t      :height 1000\n\t      :width 50\n\t      :length 50\n\t      :center (translate-along-vector (the (face-center :top))\n\t\t\t\t\t      (the (face-normal-vector :bottom))\n\t\t\t\t\t      (half (the-child height))))\n   (base :type 'box\n\t :height 10\n\t :width 200\n\t :length 200\n\t ;; the centre of the base will always be half the base height below the bottom of the post\n\t :center (translate-along-vector (the post-main (face-center :bottom))\n\t\t\t\t\t (the post-main (face-normal-vector :bottom))\n\t\t\t\t\t (half (the-child height)))))\n  )\n  \n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/point-and-vector-examples.lisp",
      "file_name": "point-and-vector-examples.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 1,
      "section": "post"
    },
    "id": "e2b1e35b526cb49d12be92e7467d6fec"
  },
  {
    "text": "(in-package :gdl-user)\n\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/truss-hint-5.lisp",
      "file_name": "truss-hint-5.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 0,
      "section": "header"
    },
    "id": "b64c147e899d1298753a3461c519796d"
  },
  {
    "text": "(defun degrees-to-radians (degrees)\n  (div (* degrees pi) 180))\n\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/truss-hint-5.lisp",
      "file_name": "truss-hint-5.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 0,
      "section": "degrees-to-radians"
    },
    "id": "b64c147e899d1298753a3461c519796d"
  },
  {
    "text": "(define-object truss (box)\n  :input-slots\n  ((truss-length 2000)\n   (truss-height 800)\n   (truss-angle nil)\n\n   (beam-width 30)\n   (beam-height 50)\n   (wall-thickness 3))\n\n  :computed-slots\n  ((length (the truss-length))\n   (height (cond ((the truss-height)(the truss-height))\n\t\t ((the truss-angle) (+ (* (half (the truss-length))\n\t\t\t\t\t  (tan (degrees-to-radians (the truss-angle))))\n\t\t\t\t       (the beam-height)))))\n   (width (the beam-width))\n   (truss-front-slope-vector (subtract-vectors (the vertical-beam (edge-center :rear :top))\n\t\t\t\t\t       (the lower-beam (edge-center :front :top))))\n\n  \n   )\n\t\t\t\t       \n  :objects\n  ((lower-beam :type 'beam\n\t       :beam-height (the beam-height)\n\t       :beam-width (the beam-width)\n\t       :beam-length (the truss-length)\n\t       :center (translate-along-vector (the (face-center :bottom))\n\t\t\t\t\t       (the (face-normal-vector :top))\n\t\t\t\t\t       (half (the beam-height))))\n   (vertical-beam :type 'beam\n\t\t  :beam-length (- (the height) (the beam-height))\n\t\t  :beam-height (the beam-height)\n\t\t  :beam-width (the beam-width)\n\t\t  :orientation (alignment :rear (the (face-normal-vector :top))\n\t\t\t\t\t  :right (the (face-normal-vector :right)))\n\t\t  :center (translate-along-vector (the lower-beam (face-center :top))\n\t\t\t\t\t\t  (the lower-beam (face-normal-vector :top))\n\t\t\t\t\t\t  (half (the-child beam-length))))\n   ;;(front-slope-beam :type 'beam)\n   ;;(right-slope-beam :type 'beam))\n\n   (pt-1 :type 'sphere\n\t :radius 5\n\t :display-controls (list :color :green)\n\t :center (the lower-beam (edge-center :front :top)))\n   (pt-2 :type 'sphere\n\t :radius 5\n\t :display-controls (list :color :red)\n\t :center (the vertical-beam (edge-center :rear :top)) )\n   (vector-line :type 'vector-line\n\t\t:start-point (the pt-1 center)\n\t\t:vector (the truss-front-slope-vector)\n\t\t:length 150)))\n\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/truss-hint-5.lisp",
      "file_name": "truss-hint-5.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 1,
      "section": "truss"
    },
    "id": "e3e2973d896f15c7f32ef24e3abfb6f2"
  },
  {
    "text": "(define-object vector-line (box)\n  :input-slots\n  ((start-point (make-point 0 0 0))\n   (vector (make-vector 1 0 1))\n   (length 50)\n   (width 1))\n  :computed-slots\n  ((height (div (the length) 5)))\n  :objects\n  ((v-line :type 'line\n\t   :start (the start-point)\n\t   :display-controls (list :color :red)\n\t   :end (translate-along-vector (the start-point)\n\t\t\t\t\t(the vector)\n\t\t\t\t\t(the length)))\n   (arrow :type 'cone\n\t  :radius-1 0\n\t  :radius-2 (div (the length) 50)\n\t  :length (div (the length) 5)\n\t  :display-controls (list :color :red)\n\t  :center (translate-along-vector (the v-line end)\n\t\t\t\t\t  (the vector)\n\t\t\t\t\t  (half (the-child length)))\n\t  :orientation (alignment :front (the vector)))))\n\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/truss-hint-5.lisp",
      "file_name": "truss-hint-5.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 2,
      "section": "vector-line"
    },
    "id": "b041454325ded4e5f4e7de1b1cf8cc48"
  },
  {
    "text": "(define-object beam (box)\n  :input-slots\n  ((beam-length 1000)\n   (beam-width 40)\n   (beam-height 50)\n   (wall-thickness 2)\n   (material-density 7800)\n   (tonne-rate 500))\n\n  :computed-slots\n  ((length (the beam-length))\n   (width (the beam-width))\n   (height (the beam-height))\n\n   (beam-volume (- (the outer volume) (the inner volume)))\n   (beam-mass (* (div (the beam-volume) 1000000000) (the material-density)))\n   (beam-cost (* (the tonne-rate) (div (the beam-mass) 1000)))\n   (beam-properties (list :volume-mm3 (the beam-volume)\n\t\t\t  :mass-kg (round-to-nearest (the beam-mass) 0.01)\n\t\t\t  :cost-gbp (round-to-nearest (the beam-cost) 0.01)\n\t\t\t  :length-mm (the beam-length)\n\t\t\t  :width-mm (the beam-width)\n\t\t\t  :height-mm (the beam-height)\n\t\t\t  :thickness-mm (the wall-thickness))))\n   \n  :objects\n  ((outer :type 'box\n\t  :length (the beam-length)\n\t  :width (the beam-width)\n\t  :height (the beam-height))\n\n   (inner :type 'box\n\t  :length (the beam-length)\n\t  :width (- (the beam-width) (twice (the wall-thickness)))\n\t  :height (- (the beam-height) (twice (the wall-thickness)))))\n  )\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/truss-hint-5.lisp",
      "file_name": "truss-hint-5.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 3,
      "section": "beam"
    },
    "id": "72f9988f8198b29b11f943830ffccf8d"
  },
  {
    "text": "(in-package :gdl-user)\n\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/wall-hint-1.lisp",
      "file_name": "wall-hint-1.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 0,
      "section": "header"
    },
    "id": "8d55abc7eae3629c23ed8e096e86a779"
  },
  {
    "text": "(define-object wall()\n  :objects\n  ((row :type 'row)))\n\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/wall-hint-1.lisp",
      "file_name": "wall-hint-1.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 0,
      "section": "wall"
    },
    "id": "8d55abc7eae3629c23ed8e096e86a779"
  },
  {
    "text": "(define-object row ()\n  :objects\n  ((bricks-and-mortar :type 'bricks-and-mortar)\n   (mortar-bed :type 'box)))\n\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/wall-hint-1.lisp",
      "file_name": "wall-hint-1.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 1,
      "section": "row"
    },
    "id": "46c8fc05f4a5e171b7d54f88b60c25e9"
  },
  {
    "text": "(define-object bricks-and-mortar ()\n  :objects\n  ((full-brick :type 'box)\n   (half-brick :type 'box)\n   (mortar-joint :type 'box)))\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/wall-hint-1.lisp",
      "file_name": "wall-hint-1.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 2,
      "section": "bricks-and-mortar"
    },
    "id": "510e47d45471856e017b40d0b1cd0ac6"
  },
  {
    "text": "(in-package :gdl-user)\n\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/wall-hint-4.lisp",
      "file_name": "wall-hint-4.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 0,
      "section": "header"
    },
    "id": "bdcae2709c065a6828c5328387263d3d"
  },
  {
    "text": "(define-object wall(box)\n  :input-slots\n  ((brick-height 45)\n   (brick-length 180)\n   (brick-width 90)\n   (mortar-joint-width 10)\n   (wall-length 3700)\n   (wall-height 900))\n\n  :computed-slots\n  ((row-height (+ (the brick-height) (the mortar-joint-width)))\n   (number-of-rows (round-to-nearest (div (the wall-height) (the row-height)) 1))\n   (actual-wall-height (* (the row-height) (the number-of-rows)))\n   \n   ;; for the wall-length we need the number of full bricks\n   ;; if there are n full bricks then there will be (n-1) mortar joints\n   ;; so n*brick-length + n-1*mortar-joint-width = overall-length\n   ;; or n(brick-length + mortar-join-width) - mortar-joint-width = overall-length\n   ;; or n = (overall-length - mortar-joint-width)/(brick-length + mortar-joint-width)\n   (number-of-bricks (round-to-nearest (div (- (the wall-length) (the mortar-joint-width))\n\t\t\t\t\t    (+ (the brick-length) (the mortar-joint-width)))\n\t\t\t\t       1))\n   (actual-wall-length (+ (* (the number-of-bricks) (the brick-length))\n\t\t\t  (* (- (the number-of-bricks) 1) (the mortar-joint-width))))\n\n   ;; box inputs - gives the wall bounding box\n   (height (the actual-wall-height))\n   (width (the brick-width))\n   (length (the actual-wall-length)))\n   \n     \n  :objects\n  ((row :type 'row\n     :sequence (:size (the number-of-rows))\n     :center (translate-along-vector (the (face-center :bottom))\n\t\t\t\t     (the (face-normal-vector :top))\n\t\t\t\t     (+ (half (the-child height))\n\t\t\t\t\t(* (the-child index) (the-child height))))\n     :length (the length)\n     :width (the width)\n     :height (+ (the brick-height) (the mortar-joint-width))\n     :bricks-per-row (the number-of-bricks)\n     :brick-height(the brick-height)\n     :brick-length (the brick-length)\n     :brick-width (the brick-width)\n     :mortar-joint-width (the mortar-joint-width))))\n\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/wall-hint-4.lisp",
      "file_name": "wall-hint-4.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 0,
      "section": "wall"
    },
    "id": "bdcae2709c065a6828c5328387263d3d"
  },
  {
    "text": "(define-object row (box)\n  :input-slots\n  (brick-height\n   brick-length\n   brick-width\n   mortar-joint-width)\n\n  \n\n  :objects\n  ((bricks-and-mortar :type 'bricks-and-mortar\n\t\t      :brick-height (the brick-height)\n\t\t      :brick-length (the brick-length)\n\t\t      :brick-width (the brick-width)\n\t\t      :mortar-joint-width (the mortar-joint-width))\n   (mortar-bed :type 'box\n\t       :height (the mortar-joint-width))\n   )\n  )\n\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/wall-hint-4.lisp",
      "file_name": "wall-hint-4.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 1,
      "section": "row"
    },
    "id": "698aa1eaea4b95321f369281993cd718"
  },
  {
    "text": "(define-object bricks-and-mortar ()\n  :input-slots\n  (brick-height\n   brick-length\n   brick-width\n   mortar-joint-width)\n  \n  :objects\n  ((full-brick :type 'box\n\t       :length (the brick-length)\n\t       :height (the brick-height)\n\t       :width (the brick-width))\n   (half-brick :type 'box\n\t       :length (half (the brick-length))\n\t       :height (the brick-height)\n\t       :width (the brick-width))\n   (mortar-joint :type 'box\n\t\t :height (the brick-height)\n\t\t :width (the brick-width)\n\t\t :length (the mortar-joint-width))))\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/wall-hint-4.lisp",
      "file_name": "wall-hint-4.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 2,
      "section": "bricks-and-mortar"
    },
    "id": "5f1d639e5087043c0d945d8bea0f87ea"
  },
  {
    "text": "(in-package :gdl-user)\n\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/building-hint-1.lisp",
      "file_name": "building-hint-1.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 0,
      "section": "header"
    },
    "id": "beb94d506073b4743f9b1045acc2fd65"
  },
  {
    "text": "(define-object building (box)\n  :input-slots\n  ((nominal-height 3000)\n   (nominal-width 3000)\n   (nominal-length 4000)\n   (brick-height 45)\n   (brick-length 180)\n   (brick-width 90)\n   (mortar-joint-width 10)\n   (truss-angle 30)\n   (beam-width 40)\n   (beam-height 50)\n   (wall-thickness 3)\n   (material-density 7800))\n\n  :computed-slots\n  ((length (the left-wall length))\n   (width (the rear-wall length))\n   (height (+ (the left-wall height) (the (roof-truss 0) height)))\n   (number-of-roof-trusses 3)\n   (truss-spacing (div (- (the left-wall length) (the beam-width))\n\t\t       (- (the number-of-roof-trusses) 1)))\n   (truss-offsets (let ((res nil))\n\t\t    (dotimes (n (the number-of-roof-trusses) (nreverse res))\n\t\t      (push (+ (half (the beam-width))\n\t\t\t       (* n (the truss-spacing))) res))))\n   )\n\n   \n  \n  :objects\n  ((left-wall :type 'wall\n\t      :pass-down (brick-height\n\t\t\t  brick-length\n\t\t\t  brick-width\n\t\t\t  mortar-joint-width)\n\t      :center (translate-along-vector\n\t\t       (translate-along-vector (the (edge-center :bottom :left))\n\t\t\t\t\t       (the (face-normal-vector :right))\n\t\t\t\t\t       (half (the-child width)))\n\t\t       (the (face-normal-vector :top))\n\t\t       (half (the-child height)))\n\t      :wall-length (the nominal-length)\n\t      :wall-height (the nominal-height))\n\n   (right-wall :type 'wall\n\t       :pass-down (brick-height\n\t\t\t   brick-length\n\t\t\t   brick-width\n\t\t\t   mortar-joint-width)\n\t       :center (translate-along-vector\n\t\t\t(translate-along-vector (the (edge-center :bottom :right))\n\t\t\t\t\t\t(the (face-normal-vector :left))\n\t\t\t\t\t\t(half (the-child width)))\n\t\t\t(the (face-normal-vector :top))\n\t\t\t(half (the-child height)))\n\t       :wall-length (the nominal-length)\n\t       :wall-height (the nominal-height))\n\n   (rear-wall :type 'wall\n\t      :pass-down (brick-height\n\t\t\t  brick-length\n\t\t\t  brick-width\n\t\t\t  mortar-joint-width)\n\t      :center (translate-along-vector\n\t\t\t(translate-along-vector (the (edge-center :bottom :rear))\n\t\t\t\t\t\t(the (face-normal-vector :front))\n\t\t\t\t\t\t(half (the-child width)))\n\t\t\t(the (face-normal-vector :top))\n\t\t\t(half (the-child height)))\n\t      :orientation (alignment :rear (the (face-normal-vector :right)))\n\t      :wall-length (the nominal-width)\n\t      :wall-height (the nominal-height))\n\n   (roof-truss :type 'truss\n\t       :sequence (:size (the number-of-roof-trusses))\n\t       :truss-length (the rear-wall length)\n\t       :center (translate-along-vector\n\t\t\t(translate-along-vector (the (edge-center :front :top))\n\t\t\t\t\t\t(the (face-normal-vector :bottom))\n\t\t\t\t\t\t(half (the-child height)))\n\t\t\t(the (face-normal-vector :rear))\n\t\t\t(nth (the-child index) (the truss-offsets)))\n\t       :orientation (alignment :rear (the (face-normal-vector :right)))\t\t\n\t       :pass-down (truss-angle\n\t\t\t   beam-width\n\t\t\t   beam-height\n\t\t\t   wall-thickness\n\t\t\t   material-density))\n   \n   (roof-cladding-left :type 'box)\n   (roof-cladding-right :type 'box)\n   )\n  )\n\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/building-hint-1.lisp",
      "file_name": "building-hint-1.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 0,
      "section": "building"
    },
    "id": "beb94d506073b4743f9b1045acc2fd65"
  },
  {
    "text": "(define-object wall(box)\n  :input-slots\n  ((brick-height 45)\n   (brick-length 180)\n   (brick-width 90)\n   (mortar-joint-width 10)\n   (wall-length 3700)\n   (wall-height 900))\n\n  :computed-slots\n  ((row-height (+ (the brick-height) (the mortar-joint-width)))\n   (number-of-rows (round-to-nearest (div (the wall-height) (the row-height)) 1))\n   (actual-wall-height (* (the row-height) (the number-of-rows)))\n   \n   ;; for the wall-length we need the number of full bricks\n   ;; if there are n full bricks then there will be (n-1) mortar joints\n   ;; so n*brick-length + n-1*mortar-joint-width = overall-length\n   ;; or n(brick-length + mortar-join-width) - mortar-joint-width = overall-length\n   ;; or n = (overall-length - mortar-joint-width)/(brick-length + mortar-joint-width)\n   (number-of-bricks (round-to-nearest (div (- (the wall-length) (the mortar-joint-width))\n\t\t\t\t\t    (+ (the brick-length) (the mortar-joint-width)))\n\t\t\t\t       1))\n   (actual-wall-length (+ (* (the number-of-bricks) (the brick-length))\n\t\t\t  (* (- (the number-of-bricks) 1) (the mortar-joint-width))))\n\n   ;; box inputs - gives the wall bounding box\n   (height (the actual-wall-height))\n   (width (the brick-width))\n   (length (the actual-wall-length))\n\n   (full-bricks (apply '+ (list-elements (the row) (the-element full-bricks))))\n   (half-bricks (apply '+ (list-elements (the row) (the-element half-bricks))))\n   (mortar-volume (apply '+ (list-elements (the row) (the-element mortar-volume))))\n   (mortar-density 2162)\n   (mortar-mass (* (the mortar-density) (div (the mortar-volume) 1000000000)))\n   )\n   \n     \n  :objects\n  ((row :type 'row\n     :sequence (:size (the number-of-rows))\n     :center (translate-along-vector (the (face-center :bottom))\n\t\t\t\t     (the (face-normal-vector :top))\n\t\t\t\t     (+ (half (the-child height))\n\t\t\t\t\t(* (the-child index) (the-child height))))\n     :height (+ (the brick-height) (the mortar-joint-width))\n     :full-bricks-per-row (the number-of-bricks)\n     :pass-down (brick-height\n\t\t brick-length\n\t\t brick-width\n\t\t mortar-joint-width\n\t\t length\n\t\t width))))\n\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/building-hint-1.lisp",
      "file_name": "building-hint-1.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 1,
      "section": "wall"
    },
    "id": "ac80b1898f70663c62788dcd84a6d022"
  },
  {
    "text": "(define-object row (box)\n  :input-slots\n  (full-bricks-per-row\n   brick-height\n   brick-length\n   brick-width\n   mortar-joint-width)\n\n  :computed-slots\n  ((full-brick-row? (or (zerop (the index)) (evenp (the index))))\n   (full-bricks (the bricks-and-mortar full-bricks))\n   (half-bricks (the bricks-and-mortar half-bricks))\n   (mortar-volume (+ (the bricks-and-mortar mortar-joint-volume)\n\t\t     (the mortar-bed volume))))\n\n  :objects\n  ((bricks-and-mortar :type 'bricks-and-mortar\n\t\t      :height (the brick-height)\n\t\t      :center (translate-along-vector (the mortar-bed (face-center :top))\n\t\t\t\t\t\t      (the mortar-bed (face-normal-vector :top))\n\t\t\t\t\t\t      (half (the-child height)))\n\t\t      :pass-down (width\n\t\t\t\t  length\n\t\t\t\t  full-brick-row?\n\t\t\t\t  brick-height\n\t\t\t\t  brick-length\n\t\t\t\t  brick-width\n\t\t\t\t  mortar-joint-width\n\t\t\t\t  full-bricks-per-row))\n   (mortar-bed :type 'box\n\t       :height (the mortar-joint-width)\n\t       :center (translate-along-vector (the (face-center :bottom))\n\t\t\t\t\t       (the (face-normal-vector :top))\n\t\t\t\t\t       (half (the-child height)))\n\t       :pass-down (width\n\t\t\t   length))))\n\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/building-hint-1.lisp",
      "file_name": "building-hint-1.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 2,
      "section": "row"
    },
    "id": "c3f6abdb167c65b54813d6af9dcacb67"
  },
  {
    "text": "(define-object bricks-and-mortar (box)\n  :input-slots\n  (full-brick-row?\n   full-bricks-per-row\n   brick-height\n   brick-length\n   brick-width\n   mortar-joint-width)\n\n  :computed-slots\n  ((first-full-brick-start-point (if (the full-brick-row?)\n\t\t\t\t     (the (face-center :front))\n\t\t\t\t     (the (mortar-joint 0) (face-center :rear))))\n   \n   (first-mortar-joint-start-point (if (the full-brick-row?)\n\t\t\t\t       (the (full-brick 0) (face-center :rear))\n\t\t\t\t       (the (half-brick 0) (face-center :rear))))\n\n   (number-of-full-bricks (if (the full-brick-row?)\n\t\t\t      (the full-bricks-per-row)\n\t\t\t      (- (the full-bricks-per-row) 1)))\n\n   (number-of-mortar-joints (if (the full-brick-row?)\n\t\t\t\t(- (the number-of-full-bricks) 1)\n\t\t\t\t(+ (the number-of-full-bricks) 1)))\n\n   ;; if it isn't a full brick row then there will be an extra joint because one\n   ;; full brick is replaced with 2 half bricks so without correcting the\n   ;; mortar-joint-width the ends of a full brick row and one starting and\n   ;; finishing with half bricks won't align. So we need to correct\n   ;; the mortar-joint-width\n   (corrected-joint-width (if (the full-brick-row?)\n\t\t\t\t     (the mortar-joint-width)\n\t\t\t\t     (let ((total-gap (* (- (the number-of-mortar-joints) 1)\n\t\t\t\t\t\t\t\t\t(the mortar-joint-width))))\n\t\t\t\t       (div total-gap (the number-of-mortar-joints)))))\n   ;; collating the output. We could do this analytically, but for this example we'll use the geometry\n   (full-bricks (length (list-elements (the full-brick))))\n   (half-bricks (length (list-elements (the half-brick))))\n   (mortar-joint-volume (apply '+ (list-elements (the mortar-joint)\n\t\t\t\t\t\t (the-element volume))))\n   )\n  \n  :functions\n  ((first-full-brick-center!\n    ()\n    (translate-along-vector (the first-full-brick-start-point)\n\t\t\t    (the (face-normal-vector :rear))\n\t\t\t    (half (the brick-length))))\n   \n   (other-full-brick-center!\n    (index)\n    ;; if its a full brick row, (full-brick 1) is positioned relative to (joint 0)\n    ;; if its a half brick row, (full-brick 1) is positioned relative to (joint 1)\n    (let ((ind (if (the full-brick-row?) (- index 1) index)))\n\t  (translate-along-vector (the (mortar-joint ind) (face-center :rear))\n\t\t\t\t  (the (face-normal-vector :rear))\n\t\t\t\t  (half (the brick-length)))))\n   \n    (first-joint-center!\n     ()\n     (translate-along-vector (the first-mortar-joint-start-point)\n\t\t\t     (the (face-normal-vector :rear))\n\t\t\t     (half (the corrected-joint-width))))\n   (other-joint-center!\n    (index)\n    ;; if its a full brick row, (joint 1) is positioned relative to (full-brick 1)\n    ;; if its a half brick row, (joint 1) is positioned relative to (full-brick 0)\n    (let ((ind (if (the full-brick-row?) index (- index 1))))\n      (translate-along-vector (the (full-brick ind) (face-center :rear))\n\t\t\t      (the (face-normal-vector :rear))\n\t\t\t      (half (the corrected-joint-width)))))\n\n    (first-half-brick-center!\n     ()\n     (translate-along-vector (the (face-center :front))\n\t\t\t     (the (face-normal-vector :rear))\n\t\t\t     (half (half (the brick-length)))))\n   \n   (last-half-brick-center!\n     ()\n     (translate-along-vector (theo (the mortar-joint last) (face-center :rear))\n\t\t\t     (the (face-normal-vector :rear))\n\t\t\t     (half (half (the brick-length))))))\n \t\t\t     \n  \n  :objects\n  ((full-brick :type 'box\n\t       :sequence (:size (the number-of-full-bricks))\n\t       :center (if (= (the-child index) 0)\n\t\t\t   (the first-full-brick-center!)\n\t\t\t   (the (other-full-brick-center! (the-child index))))\n\t       :length (the brick-length)\n\t       :height (the brick-height)\n\t       :width (the brick-width))\n\n   (half-brick :type 'box\n\t       :sequence (:size (if (the full-brick-row?) 0 2))\n\t       :center (if (= (the-child index) 0)\n\t\t\t   (the first-half-brick-center!)\n\t\t\t   (the last-half-brick-center!))\n\t       :length (half (the brick-length))\n\t       :height (the brick-height)\n\t       :width (the brick-width))\n\n   (mortar-joint :type 'box\n\t\t :sequence (:size (the number-of-mortar-joints))\n\t\t :center (if (= (the-child index) 0)\n\t\t\t     (the first-joint-center!)\n\t\t\t  (the (other-joint-center! (the-child index))))   \n\t\t :height (the brick-height)\n\t\t :width (the brick-width)\n\t\t :length (the corrected-joint-width))))\n\n\n\n\n\n\n\n\n\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/building-hint-1.lisp",
      "file_name": "building-hint-1.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 3,
      "section": "bricks-and-mortar"
    },
    "id": "2175665f67ed9b1a9aeab1eff25ad6cb"
  },
  {
    "text": "(defun degrees-to-radians (degrees)\n  (div (* degrees pi) 180))\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/building-hint-1.lisp",
      "file_name": "building-hint-1.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 4,
      "section": "degrees-to-radians"
    },
    "id": "6f42049c1bc05ff16ad053da04e131a6"
  },
  {
    "text": "(define-object truss-assembly (box)\n  :computed-slots\n  ((length 200)\n   (height 200)\n   (width 200)\n   (number-of-roof-trusses 2)\n   (truss-angle 30)\n   (beam-width 30)\n   (beam-height 50)\n   (wall-thickness 3)\n   (material-density 7800)\n   (truss-offsets (list 0 500))\n   )\n  :objects\n  ((roof-truss :type 'truss\n\t       :sequence (:size (the number-of-roof-trusses))\n\t       :truss-length 1500\n\t       :center (translate-along-vector\n\t\t\t(translate-along-vector (the (edge-center :front :top))\n\t\t\t\t\t\t(the (face-normal-vector :top))\n\t\t\t\t\t\t(half (the-child height)))\n\t\t\t(the (face-normal-vector :rear))\n\t\t\t(nth (the-child index) (the truss-offsets)))\n\t       :orientation (alignment :rear (the (face-normal-vector :right))\n\t\t\t\t       :top (the (face-normal-vector :top))\n\t\t\t\t       )\t\t\n\t       :pass-down (truss-angle\n\t\t\t   beam-width\n\t\t\t   beam-height\n\t\t\t   wall-thickness\n\t\t\t   material-density)))\n  )\n\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/building-hint-1.lisp",
      "file_name": "building-hint-1.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 5,
      "section": "truss-assembly"
    },
    "id": "b7a07d956adf57d356f0a5515e30d08d"
  },
  {
    "text": "(define-object truss (box)\n  :input-slots\n  ((truss-length 2000)\n   (truss-height nil)\n   (truss-angle 30)\n\n   (beam-width 30)\n   (beam-height 50)\n   (wall-thickness 3)\n\n   (material-density 7800)\n   (tonne-rate 450))\n\n  :computed-slots\n  ((length (the truss-length))\n   (height (cond ((the truss-height)(the truss-height))\n\t\t ((the truss-angle) (+ (* (half (the truss-length))\n\t\t\t\t\t  (tan (degrees-to-radians (the truss-angle))))\n\t\t\t\t       (the beam-height)))))\n   (width (the beam-width))\n  \n   (truss-front-slope-vector (the (get-slope-vector! :front)))\n   (truss-rear-slope-vector (the (get-slope-vector! :rear)))\n\n   (front-slope-length (the (get-slope-length! :front)))\n   (rear-slope-length (the (get-slope-length! :rear)))\n   \n   (front-slope-center (the (get-slope-center! :front)))\n   (rear-slope-center (the (get-slope-center! :rear)))\n   \n\n   (beam-properties (mapsend (the children) :beam-properties))\n   (total-mass (round-to-nearest\n\t\t(apply '+\n\t\t       (mapcar #'(lambda(a) (getf a :mass-kg))\n\t\t\t       (the beam-properties)))\n\t\t0.001))\n   (total-cost (round-to-nearest\n\t\t(apply '+\n\t\t       (mapcar #'(lambda(a) (getf a :cost-gbp))\n\t\t\t       (the beam-properties)))\n\t\t0.01))\n   )\n\n  :functions\n  ((get-slope-vector! (beam-side)\n\t\t      (let ((v-key (the (get-v-key! beam-side)))\n\t\t\t    (l-key (the (get-l-key! beam-side))))\n\t\t      (subtract-vectors (the vertical-beam (edge-center :rear v-key))\n\t\t\t\t\t(the lower-beam (edge-center l-key :top)))))\n   (get-slope-length! (beam-side)\n\t\t      (let ((v-key (the (get-v-key! beam-side)))\n\t\t\t    (l-key (the (get-l-key! beam-side))))\n\t\t\t(3d-distance (the vertical-beam (edge-center :rear v-key))\n\t\t\t\t     (the lower-beam (edge-center l-key :top)))))\n   (get-slope-center!\n    (beam-side)\n    (let ((pt (case beam-side\n\t\t(:front (the front-slope-construction-line center))\n\t\t(:rear  (the rear-slope-construction-line center))))\n\t  (norm-vector (case beam-side\n\t\t\t (:front (the front-slope-beam (face-normal-vector :bottom)))\n\t\t\t (:rear (the rear-slope-beam (face-normal-vector :bottom))))))\n      (translate-along-vector pt\n\t\t\t      norm-vector\n\t\t\t      (half (the beam-height)))))\n   (get-v-key! (beam-side)\n\t       (case beam-side\n\t\t (:front :top)\n\t\t (:rear :bottom)))\n   (get-l-key! (beam-side)\n\t       (case beam-side\n\t\t (:front :front)\n\t\t (:rear :rear)))\n\n   \n   )\n   \n\t\t\t\t       \n  :objects\n  ((lower-beam :type 'beam\n\t       :pass-down (:beam-height :beam-width :wall-thickness :material-density :tonne-rate)\n\t       :beam-length (the truss-length)\n\t       :center (translate-along-vector (the (face-center :bottom))\n\t\t\t\t\t       (the (face-normal-vector :top))\n\t\t\t\t\t       (half (the beam-height))))\n   (vertical-beam :type 'beam\n\t\t  :pass-down (:beam-height :beam-width :wall-thickness :material-density :tonne-rate)\n\t\t  \n\t\t  :beam-length (- (the height) (the beam-height))\n\t\t  :orientation (alignment :rear (the (face-normal-vector :top))\n\t\t\t\t\t  :right (the (face-normal-vector :right)))  \n\t\t  :center (translate-along-vector (the lower-beam (face-center :top))\n\t\t\t\t\t\t  (the lower-beam (face-normal-vector :top))\n\t\t\t\t\t\t  (half (the-child beam-length))))\n   (front-slope-beam :type 'beam\n\t\t     :pass-down (:beam-height :beam-width :wall-thickness :material-density :tonne-rate)\n\t\t     :beam-length (the front-slope-length)\n\t\t     :center (the front-slope-center)\n\t\t     :orientation (alignment :rear (the truss-front-slope-vector)\n\t\t\t\t\t     :right (the (face-normal-vector :right))))\n\n   (rear-slope-beam :type 'beam\n\t\t     :pass-down (:beam-height :beam-width :wall-thickness :material-density :tonne-rate)\n\t\t     :beam-length (the rear-slope-length)\n\t\t     :center (the rear-slope-center)\n\t\t    :orientation (alignment :rear (the truss-rear-slope-vector)\n\t\t\t\t\t    :left (the (face-normal-vector :right))))\n   \n   )\n\n  :hidden-objects\n  ((front-slope-construction-line :type 'line\n\t\t\t\t  :start (the lower-beam (edge-center :front :top))\n\t\t\t\t  :end (the vertical-beam (edge-center :rear :top)))\n   (rear-slope-construction-line :type 'line\n\t\t\t\t :start (the lower-beam (edge-center :rear :top))\n\t\t\t\t :end (the vertical-beam (edge-center :rear :bottom)))\n   \n   (front-mid-pt :type 'sphere\n\t\t :display-controls (list :color :blue)\n\t\t :radius 5\n\t\t :center (the front-slope-construction-line center))\n   (rear-mid-pt :type 'sphere\n\t\t:display-controls (list :color :blue)\n\t\t:center (the rear-slope-construction-line center)\n\t\t:radius 5)\n   (pt-1 :type 'sphere\n\t :radius 5\n\t :display-controls (list :color :green)\n\t :center (the lower-beam (edge-center :rear :top)))\n   (pt-2 :type 'sphere\n\t :radius 5\n\t :display-controls (list :color :red)\n\t :center (the vertical-beam (edge-center :rear :bottom)) )\n\n   \n\n   (vector-line :type 'vector-line\n\t\t:start-point (the rear-slope-construction-line center)\n\t\t:vector (the rear-slope-beam (face-normal-vector :bottom))\n\t\t:length 150)\n   \n   )))\n\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/building-hint-1.lisp",
      "file_name": "building-hint-1.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 6,
      "section": "truss"
    },
    "id": "e1dce2ffc43eba85ed1f6425984c4dd4"
  },
  {
    "text": "(define-object vector-line (box)\n  :input-slots\n  ((start-point (make-point 0 0 0))\n   (vector (make-vector 1 0 1))\n   (length 50)\n   (width 1))\n  :computed-slots\n  ((height (div (the length) 5)))\n  :objects\n  ((v-line :type 'line\n\t   :start (the start-point)\n\t   :display-controls (list :color :red)\n\t   :end (translate-along-vector (the start-point)\n\t\t\t\t\t(the vector)\n\t\t\t\t\t(the length)))\n   (arrow :type 'cone\n\t  :radius-1 0\n\t  :radius-2 (div (the length) 50)\n\t  :length (div (the length) 5)\n\t  :display-controls (list :color :red)\n\t  :center (translate-along-vector (the v-line end)\n\t\t\t\t\t  (the vector)\n\t\t\t\t\t  (half (the-child length)))\n\t  :orientation (alignment :front (the vector)))))\n\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/building-hint-1.lisp",
      "file_name": "building-hint-1.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 7,
      "section": "vector-line"
    },
    "id": "615f9398e7c740f463d352fa15a685c6"
  },
  {
    "text": "(define-object beam (box)\n  :input-slots\n  ((beam-length 1000)\n   (beam-width 40)\n   (beam-height 50)\n   (wall-thickness 2)\n   (material-density 7800)\n   (tonne-rate 500))\n\n  :computed-slots\n  ((length (the beam-length))\n   (width (the beam-width))\n   (height (the beam-height))\n\n   (beam-volume (- (the outer volume) (the inner volume)))\n   (beam-mass (* (div (the beam-volume) 1000000000) (the material-density)))\n   (beam-cost (* (the tonne-rate) (div (the beam-mass) 1000)))\n   (beam-properties (list :volume-mm3 (the beam-volume)\n\t\t\t  :mass-kg (round-to-nearest (the beam-mass) 0.01)\n\t\t\t  :cost-gbp (round-to-nearest (the beam-cost) 0.01)\n\t\t\t  :length-mm (the beam-length)\n\t\t\t  :width-mm (the beam-width)\n\t\t\t  :height-mm (the beam-height)\n\t\t\t  :thickness-mm (the wall-thickness))))\n   \n  :objects\n  ((outer :type 'box\n\t  :length (the beam-length)\n\t  :width (the beam-width)\n\t  :height (the beam-height))\n\n   (inner :type 'box\n\t  :length (the beam-length)\n\t  :width (- (the beam-width) (twice (the wall-thickness)))\n\t  :height (- (the beam-height) (twice (the wall-thickness)))))\n  )\n\n\n\n\n\n\n\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/building-hint-1.lisp",
      "file_name": "building-hint-1.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 8,
      "section": "beam"
    },
    "id": "526191cfc64be18b230d155329fd03bf"
  },
  {
    "text": "(in-package :gdl-user)\n\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/truss-hint-1.lisp",
      "file_name": "truss-hint-1.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 0,
      "section": "header"
    },
    "id": "2331aa747a1959cd4ef7ac0f47480e34"
  },
  {
    "text": "(define-object truss ()\n  :objects\n  ((lower-beam :type 'beam)\n   (vertical-beam :type 'beam)\n   (front-slope-beam :type 'beam)\n   (rear-slope-beam :type 'beam)))\n\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/truss-hint-1.lisp",
      "file_name": "truss-hint-1.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 0,
      "section": "truss"
    },
    "id": "2331aa747a1959cd4ef7ac0f47480e34"
  },
  {
    "text": "(define-object beam ()\n  :objects\n  ((outer :type 'box)\n   (inner :type 'box)))\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/truss-hint-1.lisp",
      "file_name": "truss-hint-1.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 1,
      "section": "beam"
    },
    "id": "39c239e635a2474f4fdf44c639df7d92"
  },
  {
    "text": "(in-package :gdl-user)\n\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/using-lists.lisp",
      "file_name": "using-lists.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 0,
      "section": "header"
    },
    "id": "b0dc90718d81244e624ff97bb3ceeb6c"
  },
  {
    "text": "(define-object assembly-8 (base-object)\n\n  :computed-slots\n  ((box-lengths (list 2 5 8))\n   (box-centers (list (make-point 0 0 0)\n\t\t      (make-point 6 0 0)\n\t\t      (make-point 12 0 0)))\n   (number-of-boxes (length (the box-lengths)))\n   (box-volumes (list-elements (the my-box) (the-element volume)))\n   (box-1-volume (nth 0 (the box-volumes))))\n\n  :objects\n  ((my-box :type 'box\n\t   :sequence (:size (the number-of-boxes))\n\t   :length (nth (the-child index) (the box-lengths))\n\t   :width 2\n\t   :height 1\n\t   :center (nth (the-child index) (the box-centers)))))\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/using-lists.lisp",
      "file_name": "using-lists.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 0,
      "section": "assembly-8"
    },
    "id": "b0dc90718d81244e624ff97bb3ceeb6c"
  },
  {
    "text": "(in-package :gdl-user)\n\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/truss-hint-7.lisp",
      "file_name": "truss-hint-7.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 0,
      "section": "header"
    },
    "id": "b742dc5024169f6ef4055de605cbcbba"
  },
  {
    "text": "(defun degrees-to-radians (degrees)\n  (div (* degrees pi) 180))\n\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/truss-hint-7.lisp",
      "file_name": "truss-hint-7.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 0,
      "section": "degrees-to-radians"
    },
    "id": "b742dc5024169f6ef4055de605cbcbba"
  },
  {
    "text": "(define-object truss (box)\n  :input-slots\n  ((truss-length 2000)\n   (truss-height 800)\n   (truss-angle nil)\n\n   (beam-width 50)\n   (beam-height 50)\n   (wall-thickness 3))\n\n  :computed-slots\n  ((length (the truss-length))\n   (height (cond ((the truss-height)(the truss-height))\n\t\t ((the truss-angle) (+ (* (half (the truss-length))\n\t\t\t\t\t  (tan (degrees-to-radians (the truss-angle))))\n\t\t\t\t       (the beam-height)))))\n   (width (the beam-width))\n  \n\n   (truss-front-slope-vector (the (get-slope-vector! :front)))\n   (truss-rear-slope-vector (the (get-slope-vector! :rear)))\n\n   (front-slope-length (the (get-slope-length! :front)))\n   (rear-slope-length (the (get-slope-length! :rear)))\n   \n   (front-slope-center (the (get-slope-center! :front)))\n   (rear-slope-center (the (get-slope-center! :rear)))\n   )\n\n  :functions\n  ((get-slope-vector! (beam-side)\n\t\t      (let ((v-key (the (get-v-key! beam-side)))\n\t\t\t    (l-key (the (get-l-key! beam-side))))\n\t\t      (subtract-vectors (the vertical-beam (edge-center :rear v-key))\n\t\t\t\t\t(the lower-beam (edge-center l-key :top)))))\n   (get-slope-length! (beam-side)\n\t\t      (let ((v-key (the (get-v-key! beam-side)))\n\t\t\t    (l-key (the (get-l-key! beam-side))))\n\t\t\t(3d-distance (the vertical-beam (edge-center :rear v-key))\n\t\t\t\t     (the lower-beam (edge-center l-key :top)))))\n\n   (get-slope-center! (beam-side)\n\t\t      (let ((pt (case beam-side\n\t\t\t\t  (:front (the front-slope-construction-line center))\n\t\t\t\t  (:rear  (the rear-slope-construction-line center))))\n\t\t\t    (norm-vector (case beam-side\n\t\t\t\t\t    (:front (the front-slope-beam (face-normal-vector :bottom)))\n\t\t\t\t\t    (:rear (the rear-slope-beam (face-normal-vector :bottom))))))\n\t\t\t(translate-along-vector pt\n\t\t\t\t\t\tnorm-vector\n\t\t\t\t\t\t(half (the beam-height)))))\n   (get-v-key! (beam-side)\n\t       (case beam-side\n\t\t (:front :top)\n\t\t (:rear :bottom)))\n   (get-l-key! (beam-side)\n\t       (case beam-side\n\t\t (:front :front)\n\t\t (:rear :rear))))\n   \n\t\t\t\t       \n  :objects\n  ((lower-beam :type 'beam\n\t       :beam-height (the beam-height)\n\t       :beam-width (the beam-width)\n\t       :beam-length (the truss-length)\n\t       :center (translate-along-vector (the (face-center :bottom))\n\t\t\t\t\t       (the (face-normal-vector :top))\n\t\t\t\t\t       (half (the beam-height))))\n   (vertical-beam :type 'beam\n\t\t  :beam-length (- (the height) (the beam-height))\n\t\t  :beam-height (the beam-height)\n\t\t  :beam-width (the beam-width)\n\t\t  :orientation (alignment :rear (the (face-normal-vector :top))\n\t\t\t\t\t  :right (the (face-normal-vector :right)))\n\t\t  :center (translate-along-vector (the lower-beam (face-center :top))\n\t\t\t\t\t\t  (the lower-beam (face-normal-vector :top))\n\t\t\t\t\t\t  (half (the-child beam-length))))\n   (front-slope-beam :type 'beam\n\t\t     :beam-length (the front-slope-length)\n\t\t     :beam-height (the beam-height)\n\t\t     :beam-width (the beam-width)\n\t\t     :center (the front-slope-center)\n\t\t     :orientation (alignment :rear (the truss-front-slope-vector)\n\t\t\t\t\t     :right (the (face-normal-vector :right))))\n\n   (rear-slope-beam :type 'beam\n\t\t     :beam-length (the rear-slope-length)\n\t\t     :beam-height (the beam-height)\n\t\t     :beam-width (the beam-width)\n\t\t     :center (the rear-slope-center)\n\t\t    :orientation (alignment :rear (the truss-rear-slope-vector)\n\t\t\t\t\t    :left (the (face-normal-vector :right)))))\n\n  :hidden-objects\n  ((front-slope-construction-line :type 'line\n\t\t\t\t  :start (the lower-beam (edge-center :front :top))\n\t\t\t\t  :end (the vertical-beam (edge-center :rear :top)))\n   (rear-slope-construction-line :type 'line\n\t\t\t\t :start (the lower-beam (edge-center :rear :top))\n\t\t\t\t :end (the vertical-beam (edge-center :rear :bottom)))\n   (front-mid-pt :type 'sphere\n\t\t :display-controls (list :color :blue)\n\t\t :radius 5\n\t\t :center (the front-slope-construction-line center))\n   (rear-mid-pt :type 'sphere\n\t\t:display-controls (list :color :blue)\n\t\t:center (the rear-slope-construction-line center)\n\t\t:radius 5)\n   (pt-1 :type 'sphere\n\t :radius 5\n\t :display-controls (list :color :green)\n\t :center (the lower-beam (edge-center :rear :top)))\n   (pt-2 :type 'sphere\n\t :radius 5\n\t :display-controls (list :color :red)\n\t :center (the vertical-beam (edge-center :rear :top)) )\n   (vector-line :type 'vector-line\n\t\t:start-point (the pt-1 center)\n\t\t:vector (the truss-rear-slope-vector)\n\t\t:length 150)))\n\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/truss-hint-7.lisp",
      "file_name": "truss-hint-7.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 1,
      "section": "truss"
    },
    "id": "921f78234be3973b11456e4628a53a14"
  },
  {
    "text": "(define-object vector-line (box)\n  :input-slots\n  ((start-point (make-point 0 0 0))\n   (vector (make-vector 1 0 1))\n   (length 50)\n   (width 1))\n  :computed-slots\n  ((height (div (the length) 5)))\n  :objects\n  ((v-line :type 'line\n\t   :start (the start-point)\n\t   :display-controls (list :color :red)\n\t   :end (translate-along-vector (the start-point)\n\t\t\t\t\t(the vector)\n\t\t\t\t\t(the length)))\n   (arrow :type 'cone\n\t  :radius-1 0\n\t  :radius-2 (div (the length) 50)\n\t  :length (div (the length) 5)\n\t  :display-controls (list :color :red)\n\t  :center (translate-along-vector (the v-line end)\n\t\t\t\t\t  (the vector)\n\t\t\t\t\t  (half (the-child length)))\n\t  :orientation (alignment :front (the vector)))))\n\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/truss-hint-7.lisp",
      "file_name": "truss-hint-7.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 2,
      "section": "vector-line"
    },
    "id": "80ef514dce6909ddcf2e351a4cbd68e9"
  },
  {
    "text": "(define-object beam (box)\n  :input-slots\n  ((beam-length 1000)\n   (beam-width 40)\n   (beam-height 50)\n   (wall-thickness 2)\n   (material-density 7800)\n   (tonne-rate 500))\n\n  :computed-slots\n  ((length (the beam-length))\n   (width (the beam-width))\n   (height (the beam-height))\n\n   (beam-volume (- (the outer volume) (the inner volume)))\n   (beam-mass (* (div (the beam-volume) 1000000000) (the material-density)))\n   (beam-cost (* (the tonne-rate) (div (the beam-mass) 1000)))\n   (beam-properties (list :volume-mm3 (the beam-volume)\n\t\t\t  :mass-kg (round-to-nearest (the beam-mass) 0.01)\n\t\t\t  :cost-gbp (round-to-nearest (the beam-cost) 0.01)\n\t\t\t  :length-mm (the beam-length)\n\t\t\t  :width-mm (the beam-width)\n\t\t\t  :height-mm (the beam-height)\n\t\t\t  :thickness-mm (the wall-thickness))))\n   \n  :objects\n  ((outer :type 'box\n\t  :length (the beam-length)\n\t  :width (the beam-width)\n\t  :height (the beam-height))\n\n   (inner :type 'box\n\t  :length (the beam-length)\n\t  :width (- (the beam-width) (twice (the wall-thickness)))\n\t  :height (- (the beam-height) (twice (the wall-thickness)))))\n  )\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/truss-hint-7.lisp",
      "file_name": "truss-hint-7.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 3,
      "section": "beam"
    },
    "id": "b5cfb83c0f4d21000a81557f40543088"
  },
  {
    "text": "(in-package :gdl-user)\n\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/building-hint-6.lisp",
      "file_name": "building-hint-6.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 0,
      "section": "header"
    },
    "id": "306580deedd625fc2206dd183a384d8e"
  },
  {
    "text": "(defun building-bom (&key (nominal-height 3000)\n\t\t       (nominal-width 3000)\n\t\t       (nominal-length 3000)\n\t\t       (roof-angle 30))\n  (let ((obj (make-object 'building\n\t\t\t  :nominal-height nominal-height\n\t\t\t  :nominal-width nominal-width\n\t\t\t  :nominal-length nominal-length\n\t\t\t  :truss-angle roof-angle)))\n    (theo obj bom-formatted)))\n\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/building-hint-6.lisp",
      "file_name": "building-hint-6.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 0,
      "section": "building-bom"
    },
    "id": "306580deedd625fc2206dd183a384d8e"
  },
  {
    "text": "(define-object building (box)\n  :input-slots\n  ((nominal-height 3000)\n   (nominal-width 3000)\n   (nominal-length 4000)\n   (brick-height 45)\n   (brick-length 180)\n   (brick-width 90)\n   (mortar-joint-width 10)\n   (truss-angle 30)\n   (beam-width 40)\n   (beam-height 50)\n   (wall-thickness 3)\n   (material-density 7800)\n   (roof-overhang 50)\n   (cladding-thickness 10)\n   (max-beam-spacing 1500))\n\n  :computed-slots\n  ((length (the left-wall length))\n   (width (the rear-wall length))\n   (height (+ (the left-wall height) (the (roof-truss 0) height)))\n\n   (number-of-roof-trusses (let ((trusses (ceiling (the left-wall length) 1500)))\n\t\t\t     (max trusses 2)))\n\n   (truss-spacing (div (- (the left-wall length) (the beam-width))\n\t\t       (- (the number-of-roof-trusses) 1)))\n   (truss-offsets (let ((res nil))\n\t\t    (dotimes (n (the number-of-roof-trusses) (nreverse res))\n\t\t      (push (+ (half (the beam-width))\n\t\t\t       (* n (the truss-spacing))) res))))\n\n   (roof-length (+ (the left-wall length) (twice (the roof-overhang))))\n   (roof-width (the cladding-thickness))\n   (roof-height (let ((apex (the (roof-truss 0) apex-point))\n\t\t      (gutter (the (roof-truss 0) front-gutter-point)))\n\t\t  (+ (3d-distance apex gutter) (the roof-overhang))))\n\n   ;; building properties\n   (walls (remove nil (mapcar #'(lambda(a) (when (typep a 'wall) a)) (the children))))\n   (full-bricks (apply '+ (mapsend (the walls) :full-bricks)))\n   (half-bricks (apply '+ (mapsend (the walls) :half-bricks)))\n   (mortar-volume (apply '+ (mapsend (the walls) :mortar-volume)))\n   (cladding-dimensions (list :length (the roof-length)\n\t\t\t      :width (the roof-height)))\n   (beam-properties (the (roof-truss 0) beam-properties))\n   (beam-qty-by-size (let ((res nil))\n\t\t       (dolist (plis (the beam-properties) )\n\t\t\t (let* ((trusses (the number-of-roof-trusses))\n\t\t\t\t(l (getf plis :length-mm))\n\t\t\t\t(p (position l res :key #'(lambda(a) (getf a :length-mm))))\n\t\t\t\t(qty (when p (getf (nth p res) :qty))))\n\t\t\t   (if p (setf (getf (nth p res) :qty) (+ qty trusses))\n\t\t\t       (setq res (append (list (list :length-mm l :qty trusses)) res)))))\n\t\t       (safe-sort res '< :key #'(lambda(a) (getf a :length-mm)))))\n\t\t       \n\n   (roof-truss-mass (* (apply '+ (mapcar #'(lambda(a) (getf a :mass-kg))\n\t\t\t\t\t (the beam-properties)))\n\t\t       (the number-of-roof-trusses)))\n\n   (building-materials (list :full-bricks (the full-bricks)\n\t\t\t     :half-bricks (the half-bricks)\n\t\t\t     :mortar-volume-m3 (div (the mortar-volume) 1000000000)\n\t\t\t     :beams (the beam-qty-by-size)\n\t\t\t     :roof-cladding (append (the cladding-dimensions) (list :qty 2))))\n\n  (bom-formatted (let* ((bom (the building-materials))\n\t\t\t(cladding (getf bom :roof-cladding))\n\t\t\t(bricks (format nil \"Bricks~%======~%  Full Bricks ~a~%  Half Bricks ~a~%\" \n\t\t\t\t\t(getf bom :full-bricks) \n\t\t\t\t\t(getf bom :half-bricks)))\n\t\t\t(mortar (format nil \"Mortar~%======~%  Volume ~,3f m^3~%\" \n\t\t\t\t\t(getf bom :mortar-volume-m3)))\n\t\t\t(l (round-to-nearest (getf cladding :length) 1))\n\t\t\t(w (round-to-nearest (getf cladding :width) 1))\n\t\t\t(roof (format nil \"Roof Cladding~%======~%  Qty ~a~%  Dimensions (L x W x T) ~d x ~d x ~d~%\" \n\t\t\t\t      (getf cladding :qty)\n\t\t\t\t      l w (the cladding-thickness)))\n\t\t\t(beams (getf (the building-materials) :beams))\n\t\t\t(beams-list (flatten\n\t\t\t\t     (mapcar #'(lambda(a)\n\t\t\t\t\t\t (list (getf a :qty) (round-to-nearest (getf a :length-mm) 1)))\n\t\t\t\t\t     beams)))\n\t\t\t\n\t\t\t(beams-header (format nil \"Beams~%=====~%  Section (H x W x T) ~a x ~a x ~a~%\"\n\t\t\t\t\t\t (the beam-height) (the beam-width) (the wall-thickness)))\n\t\t\t(beam-lengths (format nil \"~{  Qty ~a Length ~a~%~}\" beams-list)))\n\t\t   (format nil \"~@{~a~}\" bricks mortar roof beams-header beam-lengths))) \n   \n\t\t\n   )\n\n  :functions\n  ((get-roof-mid-point! (first-gutter last-gutter last-index)\n\t\t       (let*((mid-gutter (midpoint first-gutter last-gutter))\n\t\t\t     (first-apex (the (roof-truss 0) apex-point))\n\t\t\t     (last-apex (the (roof-truss last-index) apex-point))\n\t\t\t     (mid-apex (midpoint first-apex last-apex))\n\t\t\t     (vec (subtract-vectors mid-gutter mid-apex))\n\t\t\t     (mid-edge (translate-along-vector mid-gutter vec (the roof-overhang))))\n\t\t\t (midpoint mid-apex mid-edge))) )\n  \n  :objects\n  ((left-wall :type 'wall\n\t      :pass-down (brick-height\n\t\t\t  brick-length\n\t\t\t  brick-width\n\t\t\t  mortar-joint-width)\n\t      :center (translate-along-vector\n\t\t       (translate-along-vector (the (edge-center :bottom :left))\n\t\t\t\t\t       (the (face-normal-vector :right))\n\t\t\t\t\t       (half (the-child width)))\n\t\t       (the (face-normal-vector :top))\n\t\t       (half (the-child height)))\n\t      :wall-length (the nominal-length)\n\t      :wall-height (the nominal-height))\n\n   (right-wall :type 'wall\n\t       :pass-down (brick-height\n\t\t\t   brick-length\n\t\t\t   brick-width\n\t\t\t   mortar-joint-width)\n\t       :center (translate-along-vector\n\t\t\t(translate-along-vector (the (edge-center :bottom :right))\n\t\t\t\t\t\t(the (face-normal-vector :left))\n\t\t\t\t\t\t(half (the-child width)))\n\t\t\t(the (face-normal-vector :top))\n\t\t\t(half (the-child height)))\n\t       :wall-length (the nominal-length)\n\t       :wall-height (the nominal-height))\n\n   (rear-wall :type 'wall\n\t      :pass-down (brick-height\n\t\t\t  brick-length\n\t\t\t  brick-width\n\t\t\t  mortar-joint-width)\n\t      :center (translate-along-vector\n\t\t\t(translate-along-vector (the (edge-center :bottom :rear))\n\t\t\t\t\t\t(the (face-normal-vector :front))\n\t\t\t\t\t\t(half (the-child width)))\n\t\t\t(the (face-normal-vector :top))\n\t\t\t(half (the-child height)))\n\t      :orientation (alignment :rear (the (face-normal-vector :right)))\n\t      :wall-length (the nominal-width)\n\t      :wall-height (the nominal-height))\n\n   (roof-truss :type 'truss\n\t       :sequence (:size (the number-of-roof-trusses))\n\t       :truss-length (the rear-wall length)\n\t       :center (translate-along-vector\n\t\t\t(translate-along-vector (the (edge-center :front :top))\n\t\t\t\t\t\t(the (face-normal-vector :bottom))\n\t\t\t\t\t\t(half (the-child height)))\n\t\t\t(the (face-normal-vector :rear))\n\t\t\t(nth (the-child index) (the truss-offsets)))\n\t       :orientation (alignment :rear (the (face-normal-vector :right))\n\t\t\t\t       )\t\t\n\t       :pass-down (truss-angle\n\t\t\t   beam-width\n\t\t\t   beam-height\n\t\t\t   wall-thickness\n\t\t\t   material-density))\n   \n   (roof-cladding-left\n    :type 'box\n    :length (the roof-length)\n    :height (the roof-height)\n    :width (the cladding-thickness)\n    :orientation (alignment :left (the (roof-truss 0) front-slope-normal))\n    :center (let* ((last-index (- (the number-of-roof-trusses) 1))\n\t\t   (first-gutter (the (roof-truss 0) front-gutter-point))\n\t\t   (last-gutter (the (roof-truss last-index) front-gutter-point))\n\t\t   (mid-ctr (the (get-roof-mid-point! first-gutter last-gutter last-index))))\n\t      (translate-along-vector mid-ctr\n\t\t\t\t      (the (roof-truss 0) front-slope-normal)\n\t\t\t\t      (half (the cladding-thickness)))))\n   \n   (roof-cladding-right :type 'box\n\t\t\t:length (the roof-length)\n\t\t\t:height (the roof-height)\n\t\t\t:width (the cladding-thickness)\n\t\t\t:orientation (alignment :left (the (roof-truss 0) rear-slope-normal))\n\t\t\t :center (let* ((last-index (- (the number-of-roof-trusses) 1))\n\t\t\t\t\t(first-gutter (the (roof-truss 0) rear-gutter-point))\n\t\t\t\t\t(last-gutter (the (roof-truss last-index) rear-gutter-point))\n\t\t\t\t\t(mid-ctr (the (get-roof-mid-point! first-gutter last-gutter last-index))))\n\t\t\t\t (translate-along-vector mid-ctr\n\t\t\t\t\t\t\t (the (roof-truss 0) rear-slope-normal)\n\t\t\t\t\t\t\t (half (the cladding-thickness)))))\n   )\n\n  \n\t\t       \n  )\n\n\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/building-hint-6.lisp",
      "file_name": "building-hint-6.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 1,
      "section": "building"
    },
    "id": "84406d680307dfb47b2182ef5231519b"
  },
  {
    "text": "(define-object wall(box)\n  :input-slots\n  ((brick-height 45)\n   (brick-length 180)\n   (brick-width 90)\n   (mortar-joint-width 10)\n   (wall-length 3700)\n   (wall-height 900)\n   (first-row :start-full)\n   (front-edge :full)\n   (rear-edge :full))\n\n  :computed-slots\n  ((row-height (+ (the brick-height) (the mortar-joint-width)))\n   (number-of-rows (round-to-nearest (div (the wall-height) (the row-height)) 1))\n   (actual-wall-height (* (the row-height) (the number-of-rows)))\n   \n   ;; for the wall-length we need the number of full bricks\n   ;; if there are n full bricks then there will be (n-1) mortar joints\n   ;; so n*brick-length + n-1*mortar-joint-width = overall-length\n   ;; or n(brick-length + mortar-join-width) - mortar-joint-width = overall-length\n   ;; or n = (overall-length - mortar-joint-width)/(brick-length + mortar-joint-width)\n   (number-of-bricks (round-to-nearest (div (- (the wall-length) (the mortar-joint-width))\n\t\t\t\t\t    (+ (the brick-length) (the mortar-joint-width)))\n\t\t\t\t       1))\n   (actual-wall-length (+ (* (the number-of-bricks) (the brick-length))\n\t\t\t  (* (- (the number-of-bricks) 1) (the mortar-joint-width))))\n\n   ;; box inputs - gives the wall bounding box\n   (height (the actual-wall-height))\n   (width (the brick-width))\n   (length (the actual-wall-length))\n\n   (full-bricks (apply '+ (list-elements (the row) (the-element full-bricks))))\n   (half-bricks (apply '+ (list-elements (the row) (the-element half-bricks))))\n   (mortar-volume (apply '+ (list-elements (the row) (the-element mortar-volume))))\n   (mortar-density 2162)\n   (mortar-mass (* (the mortar-density) (div (the mortar-volume) 1000000000)))\n   )\n   \n     \n  :objects\n  ((row :type 'row\n     :sequence (:size (the number-of-rows))\n     :center (translate-along-vector (the (face-center :bottom))\n\t\t\t\t     (the (face-normal-vector :top))\n\t\t\t\t     (+ (half (the-child height))\n\t\t\t\t\t(* (the-child index) (the-child height))))\n     :height (+ (the brick-height) (the mortar-joint-width))\n     :full-bricks-per-row (the number-of-bricks)\n     :pass-down (brick-height\n\t\t brick-length\n\t\t brick-width\n\t\t mortar-joint-width\n\t\t length\n\t\t width\n\t\t first-row\n\t\t front-edge\n\t\t rear-edge))))\n\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/building-hint-6.lisp",
      "file_name": "building-hint-6.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 2,
      "section": "wall"
    },
    "id": "0291488ccfe0c1dfa690155b2339edb0"
  },
  {
    "text": "(define-object row (box)\n  :input-slots\n  (full-bricks-per-row\n   brick-height\n   brick-length\n   brick-width\n   mortar-joint-width\n   first-row\n   front-edge\n   rear-edge )\n\n  :computed-slots\n  ((full-brick-row? (cond ((eq (the first-row) :start-full)\n\t\t\t   (or (zerop (the index)) (evenp (the index))))\n\t\t\t  ((eq (the first-row) :start-half)\n\t\t\t   (not (or (zerop (the index)) (evenp (the index)))))))\n\t\t    \n   (full-bricks (the bricks-and-mortar full-bricks))\n   (half-bricks (the bricks-and-mortar half-bricks))\n   (mortar-volume (+ (the bricks-and-mortar mortar-joint-volume)\n\t\t     (the mortar-bed volume))))\n\n  :objects\n  ((bricks-and-mortar :type 'bricks-and-mortar\n\t\t      :height (the brick-height)\n\t\t      :center (translate-along-vector (the mortar-bed (face-center :top))\n\t\t\t\t\t\t      (the mortar-bed (face-normal-vector :top))\n\t\t\t\t\t\t      (half (the-child height)))\n\t\t      :pass-down (width\n\t\t\t\t  length\n\t\t\t\t  full-brick-row?\n\t\t\t\t  brick-height\n\t\t\t\t  brick-length\n\t\t\t\t  brick-width\n\t\t\t\t  mortar-joint-width\n\t\t\t\t  full-bricks-per-row\n\t\t\t\t  front-edge\n\t\t\t\t  rear-edge))\n   (mortar-bed :type 'box\n\t       :height (the mortar-joint-width)\n\t       :center (translate-along-vector (the (face-center :bottom))\n\t\t\t\t\t       (the (face-normal-vector :top))\n\t\t\t\t\t       (half (the-child height)))\n\t       :pass-down (width\n\t\t\t   length))))\n\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/building-hint-6.lisp",
      "file_name": "building-hint-6.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 3,
      "section": "row"
    },
    "id": "c6928234c2313c0a5f2bfadbee77d15e"
  },
  {
    "text": "(define-object bricks-and-mortar (box)\n  :input-slots\n  (full-brick-row?\n   full-bricks-per-row\n   brick-height\n   brick-length\n   brick-width\n   mortar-joint-width\n   front-edge\n   rear-edge)\n\n  :computed-slots\n  ((first-full-brick-start-point (if (the full-brick-row?)\n\t\t\t\t     (the (face-center :front))\n\t\t\t\t     (the (mortar-joint 0) (face-center :rear))))\n   \n   (first-mortar-joint-start-point (cond ((the full-brick-row?) (the (full-brick 0) (face-center :rear)))\n\t\t\t\t\t ((eq (the front-edge) :full) (the (half-brick 0) (face-center :rear)))\n\t\t\t\t\t ((eq (the front-edge) :keyed) (translate-along-vector (the (face-center :front))\n\t\t\t\t\t\t\t\t\t\t\t       (the (face-normal-vector :rear))\n\t\t\t\t\t\t\t\t\t\t\t       (half (the brick-length))))))\n\n   (number-of-full-bricks (if (the full-brick-row?)\n\t\t\t      (the full-bricks-per-row)\n\t\t\t      (- (the full-bricks-per-row) 1)))\n\n   (number-of-half-bricks (cond ((the full-brick-row?) 0)\n\t\t\t\t((and (eq (the front-edge) :full)(eq (the rear-edge) :full)) 2)\n\t\t\t\t((and (eq (the front-edge) :keyed) (eq (the rear-edge) :full)) 1)\n\t\t\t\t((and (eq (the front-edge) :full) (eq (the rear-edge) :keyed)) 1)\n\t\t\t\t((and (eq (the front-edge) :keyed) (eq (the rear-edge) :keyed)) 0)))\n\n   ;; whether or not the ends are :full or :keyed, the number of mortar joints remains the same since the mortar joint\n   ;; when it is :keyed is used to connect to the full brick of the other wall\n   (number-of-mortar-joints (if (the full-brick-row?)\n\t\t\t\t(- (the number-of-full-bricks) 1)\n\t\t\t\t(+ (the number-of-full-bricks) 1)))\n\n   ;; if it isn't a full brick row then there will be an extra joint because one\n   ;; full brick is replaced with 2 half bricks so without correcting the\n   ;; mortar-joint-width the ends of a full brick row and one starting and\n   ;; finishing with half bricks won't align. So we need to correct\n   ;; the mortar-joint-width\n   (corrected-joint-width (if (the full-brick-row?)\n\t\t\t\t     (the mortar-joint-width)\n\t\t\t\t     (let ((total-gap (* (- (the number-of-mortar-joints) 1)\n\t\t\t\t\t\t\t\t\t(the mortar-joint-width))))\n\t\t\t\t       (div total-gap (the number-of-mortar-joints)))))\n   ;; collating the output. We could do this analytically, but for this example we'll use the geometry\n   (full-bricks (length (list-elements (the full-brick))))\n   (half-bricks (length (list-elements (the half-brick))))\n   (mortar-joint-volume (apply '+ (list-elements (the mortar-joint)\n\t\t\t\t\t\t (the-element volume))))\n   )\n  \n  :functions\n  ((first-full-brick-center!\n    ()\n    (translate-along-vector (the first-full-brick-start-point)\n\t\t\t    (the (face-normal-vector :rear))\n\t\t\t    (half (the brick-length))))\n   \n   (other-full-brick-center!\n    (index)\n    ;; if its a full brick row, (full-brick 1) is positioned relative to (joint 0)\n    ;; if its a half brick row, (full-brick 1) is positioned relative to (joint 1)\n    (let ((ind (if (the full-brick-row?) (- index 1) index)))\n\t  (translate-along-vector (the (mortar-joint ind) (face-center :rear))\n\t\t\t\t  (the (face-normal-vector :rear))\n\t\t\t\t  (half (the brick-length)))))\n   \n    (first-joint-center!\n     ()\n     (translate-along-vector (the first-mortar-joint-start-point)\n\t\t\t     (the (face-normal-vector :rear))\n\t\t\t     (half (the corrected-joint-width))))\n   (other-joint-center!\n    (index)\n    ;; if its a full brick row, (joint 1) is positioned relative to (full-brick 1)\n    ;; if its a half brick row, (joint 1) is positioned relative to (full-brick 0)\n    (let ((ind (if (the full-brick-row?) index (- index 1))))\n      (translate-along-vector (the (full-brick ind) (face-center :rear))\n\t\t\t      (the (face-normal-vector :rear))\n\t\t\t      (half (the corrected-joint-width)))))\n\n    (first-half-brick-center!\n     ()\n     (translate-along-vector (the (face-center :front))\n\t\t\t     (the (face-normal-vector :rear))\n\t\t\t     (half (half (the brick-length)))))\n   \n   (last-half-brick-center!\n     ()\n     (translate-along-vector (theo (the mortar-joint last) (face-center :rear))\n\t\t\t     (the (face-normal-vector :rear))\n\t\t\t     (half (half (the brick-length))))))\n \t\t\t     \n  \n  :objects\n  ((full-brick :type 'box\n\t       :sequence (:size (the number-of-full-bricks))\n\t       :center (if (= (the-child index) 0)\n\t\t\t   (the first-full-brick-center!)\n\t\t\t   (the (other-full-brick-center! (the-child index))))\n\t       :length (the brick-length)\n\t       :height (the brick-height)\n\t       :width (the brick-width))\n\n   (half-brick :type 'box\n\t       :sequence (:size (the number-of-half-bricks))\n\t       :center (cond ((and (= (the-child index) 0)\n\t\t\t\t   (eq (the front-edge) :full)) (the first-half-brick-center!))\n\t\t\t     ((and (= (the-child index) 0)\n\t\t\t\t   (eq (the front-edge) :keyed)\n\t\t\t\t   (eq (the rear-edge) :full)) (the last-half-brick-center!))\n\t\t\t     ((eq (the rear-edge) :full) (the last-half-brick-center!)))\n\t       :length (half (the brick-length))\n\t       :height (the brick-height)\n\t       :width (the brick-width))\n\n   (mortar-joint :type 'box\n\t\t :sequence (:size (the number-of-mortar-joints))\n\t\t :center (if (= (the-child index) 0)\n\t\t\t     (the first-joint-center!)\n\t\t\t  (the (other-joint-center! (the-child index))))   \n\t\t :height (the brick-height)\n\t\t :width (the brick-width)\n\t\t :length (the corrected-joint-width))))\n\n\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/building-hint-6.lisp",
      "file_name": "building-hint-6.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 4,
      "section": "bricks-and-mortar"
    },
    "id": "dad9793ada90ee6ec07285bd77d616b8"
  },
  {
    "text": "(defun degrees-to-radians (degrees)\n  (div (* degrees pi) 180))\n\n\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/building-hint-6.lisp",
      "file_name": "building-hint-6.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 5,
      "section": "degrees-to-radians"
    },
    "id": "c2ca118baeb234604266ea1a494b0256"
  },
  {
    "text": "(define-object truss (box)\n  :input-slots\n  ((truss-length 2000)\n   (truss-height nil)\n   (truss-angle 30)\n\n   (beam-width 30)\n   (beam-height 50)\n   (wall-thickness 3)\n\n   (material-density 7800)\n   (tonne-rate 450))\n\n  :computed-slots\n  ((length (the truss-length))\n   (height (cond ((the truss-height)(the truss-height))\n\t\t ((the truss-angle) (+ (* (half (the truss-length))\n\t\t\t\t\t  (tan (degrees-to-radians (the truss-angle))))\n\t\t\t\t       (the beam-height)))))\n   (width (the beam-width))\n  \n   (truss-front-slope-vector (the (get-slope-vector! :front)))\n   (truss-rear-slope-vector (the (get-slope-vector! :rear)))\n\n   (front-slope-length (the (get-slope-length! :front)))\n   (rear-slope-length (the (get-slope-length! :rear)))\n   \n   (front-slope-center (the (get-slope-center! :front)))\n   (rear-slope-center (the (get-slope-center! :rear)))\n   \n\n   (beam-properties (mapsend (the children) :beam-properties))\n   (total-mass (round-to-nearest\n\t\t(apply '+\n\t\t       (mapcar #'(lambda(a) (getf a :mass-kg))\n\t\t\t       (the beam-properties)))\n\t\t0.001))\n   (total-cost (round-to-nearest\n\t\t(apply '+\n\t\t       (mapcar #'(lambda(a) (getf a :cost-gbp))\n\t\t\t       (the beam-properties)))\n\t\t0.01))\n\n   ;; messages to support roof cladding sizing and positioning\n   (apex-point (inter-line-plane (the rear-slope-construction-line end)\n\t\t\t   (the truss-rear-slope-vector)\n\t\t\t   (the lower-beam center)\n\t\t\t\t (the (face-normal-vector :rear))))\n   (front-gutter-point (the front-slope-construction-line start))\n   (rear-gutter-point (the rear-slope-construction-line start))\n   (front-slope-normal (the front-slope-beam (face-normal-vector :top)))\n   (rear-slope-normal (the rear-slope-beam (face-normal-vector :top)))\n   )\n\n  :functions\n  ((get-slope-vector! (beam-side)\n\t\t      (let ((v-key (the (get-v-key! beam-side)))\n\t\t\t    (l-key (the (get-l-key! beam-side))))\n\t\t      (subtract-vectors (the vertical-beam (edge-center :rear v-key))\n\t\t\t\t\t(the lower-beam (edge-center l-key :top)))))\n   (get-slope-length! (beam-side)\n\t\t      (let ((v-key (the (get-v-key! beam-side)))\n\t\t\t    (l-key (the (get-l-key! beam-side))))\n\t\t\t(3d-distance (the vertical-beam (edge-center :rear v-key))\n\t\t\t\t     (the lower-beam (edge-center l-key :top)))))\n   (get-slope-center!\n    (beam-side)\n    (let ((pt (case beam-side\n\t\t(:front (the front-slope-construction-line center))\n\t\t(:rear  (the rear-slope-construction-line center))))\n\t  (norm-vector (case beam-side\n\t\t\t (:front (the front-slope-beam (face-normal-vector :bottom)))\n\t\t\t (:rear (the rear-slope-beam (face-normal-vector :bottom))))))\n      (translate-along-vector pt\n\t\t\t      norm-vector\n\t\t\t      (half (the beam-height)))))\n   (get-v-key! (beam-side)\n\t       (case beam-side\n\t\t (:front :top)\n\t\t (:rear :bottom)))\n   (get-l-key! (beam-side)\n\t       (case beam-side\n\t\t (:front :front)\n\t\t (:rear :rear)))\n\n   \n   )\n   \n  \n  \n  :objects\n  ((lower-beam :type 'beam\n\t       :pass-down (:beam-height :beam-width :wall-thickness :material-density :tonne-rate)\n\t       :beam-length (the truss-length)\n\t       :center (translate-along-vector (the (face-center :bottom))\n\t\t\t\t\t       (the (face-normal-vector :top))\n\t\t\t\t\t       (half (the beam-height))))\n   (vertical-beam :type 'beam\n\t\t  :pass-down (:beam-height :beam-width :wall-thickness :material-density :tonne-rate)\n\t\t  \n\t\t  :beam-length (- (the height) (the beam-height))\n\t\t  :orientation (alignment :rear (the (face-normal-vector :top))\n\t\t\t\t\t  :right (the (face-normal-vector :right)))  \n\t\t  :center (translate-along-vector (the lower-beam (face-center :top))\n\t\t\t\t\t\t  (the lower-beam (face-normal-vector :top))\n\t\t\t\t\t\t  (half (the-child beam-length))))\n   (front-slope-beam :type 'beam\n\t\t     :pass-down (:beam-height :beam-width :wall-thickness :material-density :tonne-rate)\n\t\t     :beam-length (the front-slope-length)\n\t\t     :center (the front-slope-center)\n\t\t     :orientation (alignment :rear (the truss-front-slope-vector)\n\t\t\t\t\t     :right (the (face-normal-vector :right))))\n\n   (rear-slope-beam :type 'beam\n\t\t    :pass-down (:beam-height :beam-width :wall-thickness :material-density :tonne-rate)\n\t\t    :beam-length (the rear-slope-length)\n\t\t    :center (the rear-slope-center)\n\t\t    :orientation (alignment :rear (the truss-rear-slope-vector)\n\t\t\t\t\t    :left (the (face-normal-vector :right))))\n   \n   )\n\n  :hidden-objects\n  ((apex-pt :type 'sphere\n\t    :radius 5\n\t    :display-controls (list :color :green)\n\t    :center (the apex-point))\n   (front-slope-construction-line :type 'line\n\t\t\t\t  :start (the lower-beam (edge-center :front :top))\n\t\t\t\t  :end (the vertical-beam (edge-center :rear :top)))\n   (rear-slope-construction-line :type 'line\n\t\t\t\t :start (the lower-beam (edge-center :rear :top))\n\t\t\t\t :end (the vertical-beam (edge-center :rear :bottom)))\n   \n   (front-mid-pt :type 'sphere\n\t\t :display-controls (list :color :blue)\n\t\t :radius 5\n\t\t :center (the front-slope-construction-line center))\n   (rear-mid-pt :type 'sphere\n\t\t:display-controls (list :color :blue)\n\t\t:center (the rear-slope-construction-line center)\n\t\t:radius 5)\n   (pt-1 :type 'sphere\n\t :radius 5\n\t :display-controls (list :color :green)\n\t :center (the lower-beam (edge-center :rear :top)))\n   (pt-2 :type 'sphere\n\t :radius 5\n\t :display-controls (list :color :red)\n\t :center (the vertical-beam (edge-center :rear :bottom)) )\n\n   \n\n   (vector-line :type 'vector-line\n\t\t:start-point (the rear-slope-construction-line center)\n\t\t:vector (the rear-slope-beam (face-normal-vector :bottom))\n\t\t:length 150)\n   \n   ))\n\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/building-hint-6.lisp",
      "file_name": "building-hint-6.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 6,
      "section": "truss"
    },
    "id": "79ded26c0937f57c18714dcc5e3e96a3"
  },
  {
    "text": "(define-object vector-line (box)\n  :input-slots\n  ((start-point (make-point 0 0 0))\n   (vector (make-vector 1 0 1))\n   (length 50)\n   (width 1))\n  :computed-slots\n  ((height (div (the length) 5)))\n  :objects\n  ((v-line :type 'line\n\t   :start (the start-point)\n\t   :display-controls (list :color :red)\n\t   :end (translate-along-vector (the start-point)\n\t\t\t\t\t(the vector)\n\t\t\t\t\t(the length)))\n   (arrow :type 'cone\n\t  :radius-1 0\n\t  :radius-2 (div (the length) 50)\n\t  :length (div (the length) 5)\n\t  :display-controls (list :color :red)\n\t  :center (translate-along-vector (the v-line end)\n\t\t\t\t\t  (the vector)\n\t\t\t\t\t  (half (the-child length)))\n\t  :orientation (alignment :front (the vector)))))\n\n\t\t\t \n\t\t  \n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/building-hint-6.lisp",
      "file_name": "building-hint-6.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 7,
      "section": "vector-line"
    },
    "id": "a1ae1c3277868af52aa42cf0d1de579f"
  },
  {
    "text": "(define-object beam (box)\n  :input-slots\n  ((beam-length 1000)\n   (beam-width 40)\n   (beam-height 50)\n   (wall-thickness 2)\n   (material-density 7800)\n   (tonne-rate 500))\n\n  :computed-slots\n  ((length (the beam-length))\n   (width (the beam-width))\n   (height (the beam-height))\n\n   (beam-volume (- (the outer volume) (the inner volume)))\n   (beam-mass (* (div (the beam-volume) 1000000000) (the material-density)))\n   (beam-cost (* (the tonne-rate) (div (the beam-mass) 1000)))\n   (beam-properties (list :volume-mm3 (the beam-volume)\n\t\t\t  :mass-kg (round-to-nearest (the beam-mass) 0.01)\n\t\t\t  :cost-gbp (round-to-nearest (the beam-cost) 0.01)\n\t\t\t  :length-mm (the beam-length)\n\t\t\t  :width-mm (the beam-width)\n\t\t\t  :height-mm (the beam-height)\n\t\t\t  :thickness-mm (the wall-thickness))))\n   \n  :objects\n  ((outer :type 'box\n\t  :length (the beam-length)\n\t  :width (the beam-width)\n\t  :height (the beam-height))\n\n   (inner :type 'box\n\t  :length (the beam-length)\n\t  :width (- (the beam-width) (twice (the wall-thickness)))\n\t  :height (- (the beam-height) (twice (the wall-thickness)))))\n  )\n\n\n\n\n\n\n\n\n\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/building-hint-6.lisp",
      "file_name": "building-hint-6.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 8,
      "section": "beam"
    },
    "id": "97195e784d7fed72fa554b2959507f66"
  },
  {
    "text": "(in-package :gdl-user)\n\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/more-on-lists.lisp",
      "file_name": "more-on-lists.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 0,
      "section": "header"
    },
    "id": "745ff06926c7cf9470d712134d50b247"
  },
  {
    "text": "(defun subseq-safe (sequence start &optional end)\n  ;; if either the start or end inputs to subseq are more than the length of the list, then subseq will error\n  ;; also subseq is only valid for sequences, so strings and lists\n  ;; if any of the cases that would cause subseq to error are encountered, subseq-safe returns nil, otherwise it\n  ;; returns the value subseq would normally return\n  (when (or (stringp sequence) (listp sequence))\n    (cond ((>= start (length sequence)) nil)\n\t  ((and end (> end (length sequence))) (subseq sequence start))\n\t  (t (subseq sequence start end)))))\n\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/more-on-lists.lisp",
      "file_name": "more-on-lists.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 0,
      "section": "subseq-safe"
    },
    "id": "745ff06926c7cf9470d712134d50b247"
  },
  {
    "text": "(define-object more-on-lists (base-object)\n\n  :computed-slots\n  ((my-number-list (list 1 2 3 4))\n   (my-number-list-1 (list 1 2 3 4))\n   (my-string-list (list \"peter\" \"paul\" \"mike\" \"john\"))\n   (my-plist (list :uk \"London\" :france \"Paris\" :belgium \"Brussels\"))\n   \n   ;; Length of a list\n   (length-1 (length (the my-number-list)))    ;;; 4\n   (length-2 (length nil))                     ;;; 0\n   \n\n\n   ;; member of a list\n   (member-1 (member 2 (the my-number-list)))                           ;;; (2 3 4)\n   (member-2 (member \"paul\" (the my-string-list)))                      ;;; returns nil because the default test for equality is eql\n                                                                        ;;; use the :test input to specify what test for equality is to be used\n   (member-2a (member \"paul\" (the my-string-list) :test 'string-equal)) ;; (\"paul\" \"mike\" \"john\") (or 'string=)\n\n   ;; parts of lists\n   (part-1 (subseq (the my-number-list) 1))    ;;; (2 3 4) anything from the first element onwards is retained\n   (part-2 (subseq (the my-number-list) 0 3))  ;;; (1 2 3) anything beyond the 3rd element is removed\n   ;; if you trim beyond the end of the list an error is generated\n   (part-3 (ignore-errors (subseq (the my-number-list) 0 10))) ;;; NIL\n\t\t\t\t\t                       ;;; #<SIMPLE-ERROR #x210376DFFD>\n\n\n\n   ;; removing elements from lists\n   (remove-1 (remove 3 (the my-number-list)))                           ;;; (1 2 4)\n   (remove-2 (remove \"mike\" (the my-string-list)))                      ;;; (\"peter\" \"paul\" \"mike\" \"john\") same as member, we have to specify the correct :test\n   (remove-3 (remove \"mike\" (the my-string-list) :test 'string-equal))  ;;; (\"peter\" \"paul\" \"john\")\n\n   ;; removing duplicates\n   (remove-duplicates-1 (remove-duplicates (list 1 2 3 4 2 3)))                              ;;; (1 4 2 3)\n\n   ;; we can also define what we mean by a duplicate, for example when working on float numbers\n   (remove-duplicates-2 (remove-duplicates (list 15.0 112.0 5.1 77.8 15.1)\n\t\t\t\t\t       :test #'(lambda (a b) (near-to? a b 0.5))))  ;;; (112.0 5.1 77.8 15.1)\n   \n   (list-remove-duplicates-3 (remove-duplicates (list \"string-1\" \"string-2\" \"string-3\" \"string-1\" \"string-3\")))\n                                                                                            ;;; (\"string-1\" \"string-2\" \"string-3\" \"string-1\" \"string-3\")\n   \n   (list-remove-duplicates-4 (remove-duplicates (list \"string-1\" \"string-2\" \"string-3\" \"string-1\" \"string-3\")\n\t\t\t\t\t\t:test #'(lambda (a b) (string-equal a b)))) ;; (\"string-2\" \"string-1\" \"string-3\")\n\n   ;; sorting\n   (sort-1 (sort  (the my-number-list-1) #'>)) ;;; (4 3 2 1) BUT if we then evaluate (the my-number-list-1) is returns (1).\n\t                                      ;;; This is because sort is DESTRUCTIVE - it modifies the supplied list\n\t  \n   (sort-2 (safe-sort (the my-number-list) #'>))              ;;; (4 3 2 1) and (the my-number-list) is unchanged\t   \n   (sort-3 (safe-sort (the my-string-list) #'string-lessp))   ;;; (\"john\" \"mike\" \"paul\" \"peter\")\t   \n   (sort-4 (safe-sort (the my-string-list) #'string<))\t      ;;; (\"john\" \"mike\" \"paul\" \"peter\")\n\n   \n   ;; flattening lists\n   (flatten-1 (flatten (list 1 2 (list 3 4 (list 5 6))))) ;;; (1 2 3 4 5 6) - conceptually it just removes all of the parens, no matter how deeply nested a list is\n   (flatten-2 (flatten (list 1 2 3 nil 4 5)))             ;;; (1 2 3 4 5) - flatten removes nil because nil is an empty list\n\n  \n\n   \n   \n   )\n\n  \n   \n)\n\n\n",
    "metadata": {
      "source": "gornschool-training/t2/resources/source/more-on-lists.lisp",
      "file_name": "more-on-lists.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_2_object_definition",
      "chunk_id": 1,
      "section": "more-on-lists"
    },
    "id": "3903d095074b5df35d8fc3985e681f09"
  },
  {
    "text": "(in-package :training-3)\n\n",
    "metadata": {
      "source": "gornschool-training/t3/source/working-with-packages.lisp",
      "file_name": "working-with-packages.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_3_object_definition",
      "chunk_id": 0,
      "section": "header"
    },
    "id": "df5d033f1e407839ac3c32f5dee1f8a6"
  },
  {
    "text": "(define-object working-with-packages (base-training-sheet)\n  :input-slots\n  (getting-started-url)\n\n  :computed-slots\n  ((index-words (list \"define-package\" \"in-package\" \":use\" \":export\" \"Fully qualified\"))\n\n   (code-1 (list \"(in-package :gdl-user)\"\n\t\t \"\"\n\t\t \"",
    "metadata": {
      "source": "gornschool-training/t3/source/working-with-packages.lisp",
      "file_name": "working-with-packages.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_3_object_definition",
      "chunk_id": 0,
      "section": "working-with-packages"
    },
    "id": "df5d033f1e407839ac3c32f5dee1f8a6"
  },
  {
    "text": "(define-package :my-app)\"))\n   \n   (code-2 (list \"(in-package :gdl-user)\"\n\t\t \"\"\n\t\t \"",
    "metadata": {
      "source": "gornschool-training/t3/source/working-with-packages.lisp",
      "file_name": "working-with-packages.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_3_object_definition",
      "chunk_id": 1,
      "section": ":my-app"
    },
    "id": "7d5dd0db3b0547b8a288944b0f5c6822"
  },
  {
    "text": "(define-package :my-app\"\n\t\t \"    (:export #:my-slot))\"))\n\n   (code-3 (list \"(in-package :functions)\"\n\t\t \"(eval-when (load eval) (export 'average))\"\n\t\t \"",
    "metadata": {
      "source": "gornschool-training/t3/source/working-with-packages.lisp",
      "file_name": "working-with-packages.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_3_object_definition",
      "chunk_id": 2,
      "section": ":my-app\""
    },
    "id": "144f9ae26a9c417045fa85f33fa080a0"
  },
  {
    "text": "(defun average (lis)\"\n\t\t \"  (/ (apply '+ lis) (length lis)))\"))\n   \n   (code-4 (list \"(in-package :gdl-user)\"\n\t\t \"\"\n\t\t \"",
    "metadata": {
      "source": "gornschool-training/t3/source/working-with-packages.lisp",
      "file_name": "working-with-packages.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_3_object_definition",
      "chunk_id": 3,
      "section": "average"
    },
    "id": "203c99a7240b2e68b73aa5ed182918c6"
  },
  {
    "text": "(define-package :my-other-app\"\n\t\t \"    (:use :my-app))\"))\n   \n\n   \n   (repl-1 (list (list :command \"(in-package :my-app)\"\n\t\t       :output \"#<Package \\\"MY-APP\\\">\")\n\t\t (list :prompt \"MY-APP> \")))\n\n   (repl-2 (list (list \n\t\t       :command \"(setq my-slot 2)\"\n\t\t       :output 2)\n\t\t (list :prompt \"MY-APP> \"\n\t\t       :command \"(in-package :my-other-app)\"\n\t\t       :output \"#<Package \\\"MY-OTHER-APP\\\">\")\n\t\t (list :prompt \"MY-OTHER-APP> \"\n\t\t       :command \"my-slot\"\n\t\t       :error \"; Evaluation aborted on #<UNBOUND-VARIABLE #x2103BF155D>.\")))\n\n   (repl-3 (list (list :command (list \"",
    "metadata": {
      "source": "gornschool-training/t3/source/working-with-packages.lisp",
      "file_name": "working-with-packages.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_3_object_definition",
      "chunk_id": 4,
      "section": ":my-other-app\""
    },
    "id": "6d96e598fdb13edf1ca2d6ac84edc635"
  },
  {
    "text": "(define-package package-a\"\n\t\t\t\t      \"   (:export x))\")\n\t\t       :output \"#<Package \\\"PACKAGE-A\\\">\")\n\t\t (list :command \"",
    "metadata": {
      "source": "gornschool-training/t3/source/working-with-packages.lisp",
      "file_name": "working-with-packages.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_3_object_definition",
      "chunk_id": 5,
      "section": "package-a\""
    },
    "id": "12230013abaf7498bae7ed266ffd56f2"
  },
  {
    "text": "(define-package package-b)\"\n\t\t       :output \"#<Package \\\"PACKAGE-B\\\">\")\n\t\t (list :command (list \"",
    "metadata": {
      "source": "gornschool-training/t3/source/working-with-packages.lisp",
      "file_name": "working-with-packages.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_3_object_definition",
      "chunk_id": 6,
      "section": "package-b"
    },
    "id": "61565807e854434034ddba4e4504661d"
  },
  {
    "text": "(define-package package-c\"\n\t\t\t\t      \"   (:use a))\")\n\t\t       :output \"#<Package \\\"PACKAGE-C\\\">\")\n\t\t (list :command \"(in-package package-a)\"\n\t\t       :output \"#<Package \\\"PACKAGE-A\\\">\")\n\t\t (list :prompt \"PACKAGE-A>\"\n\t\t       :command \"(setq x 1)\"\n\t\t       :output 1)\n\t\t (list :prompt \"PACKAGE-A>\"\n\t\t       :command \"(setq y 2)\"\n\t\t       :output 1)\n\t\t (list :prompt \"PACKAGE-A>\"\n\t\t       :command \"(in-package package-b)\"\n\t\t       :output \"#<Package \\\"B\\\">\")\n\t\t (list :prompt \"PACKAGE-B>\"\n\t\t       :command \"x\"\n\t\t       :error \"; Evaluation aborted on #<UNBOUND-VARIABLE #x2103CD8FCD>.\")\n\t\t (list :prompt \"PACKAGE-B>\"\n\t\t       :command \"y\"\n\t\t       :error \"; Evaluation aborted on #<UNBOUND-VARIABLE #x2103CD8FCD>.\")\n\t\t (list :prompt \"PACKAGE-B>\"\n\t\t\t:command \"package-a:x\"\n\t\t       :output 1)\n\t\t (list :prompt \"PACKAGE-B>\"\n\t\t\t:command \"package-a:y\"\n\t\t       :error \"; Evaluation aborted on #<SIMPLE-ERROR #x2103CA28BD>.\")\n\t\t (list :prompt \"PACKAGE-B>\"\n\t\t       :command \"package-a::y\"\n\t\t       :output 2)\n\t\t (list :prompt \"PACKAGE-B>\"\n\t\t       :command \"(in-package c)\"\n\t\t       :output \"#<Package \\\"C\\\">\")\n\t\t (list :prompt \"PACKAGE-C>\"\n\t\t       :command \"x\"\n\t\t       :output 1)\n\t\t (list :prompt \"PACKAGE-C>\"\n\t\t       :command \"y\"\n\t\t       :output \"; Evaluation aborted on #<UNBOUND-VARIABLE #x2103CD8FCD>.\")\n\t\t (list :prompt \"PACKAGE-C>\"\n\t\t       :command \"package-a:y\"\n\t\t       :output \"; Evaluation aborted on #<SIMPLE-ERROR #x2103CA28BD>.\")\n\t\t (list :prompt \"PACKAGE-C>\"\n\t\t       :command \"package-a::y\"\n\t\t       :output 2)))\n\n   (body-content (with-cl-who-string()\n\t\t   ((:div :class \"main-page-container\" :style \"grid-template-columns: 650px auto;\")\n\t\t    ((:div :class \"main-page-item\")\n\t\t     (:p \"Packages represent \"(:em \"namespaces\") \" for Lisp symbols. You can think of them like an \\\"area-code\\\" for symbols.\")\n\t\t     (:p \"In the \" (if (the getting-started-url) (htm ((:a :href (the getting-started-url))\"Getting Started with GendL\")) \"Getting Started with GendL \")\n\t\t\t \" tutorial, all of the example code that was provided started with the \"\n\t\t\t (:em (:b \"(in-package :gdl-user)\"))\" statement. All of the symbols created when objects were defined, belonged to the \"\n\t\t\t ((:span :class \"package-name\")\":gdl-user\")\" package. Because all source code files stared with the \"\n\t\t\t (:em (:b \"(in-package :gdl-user)\"))\" statement we don't need to qualify any of the symbols, we just use their name. But if we wanted to use a symbol from another package that wasn't used by \"\n\t\t\t ((:span :class \"package-name\")\":gdl-user\")\" we would need to qualify that symbol with a package name. \")\n\t\t     (:p \"To create a package, we\"\n\t\t\t (:ul (:li \"Call the Gendl macro \"((:span :class \"macro\")\"define-package\"))\n\t\t\t      (:li \"Define the \"(:em (:b \"name\"))\" of the new package\")\n\t\t\t      (:li \"Optionally provide a list of packages it will \"\n\t\t\t\t   ((:span :class \"object-keyword\")\":use\")\". Note that \"\n\t\t\t\t   ((:span :class \"macro\")\"define-package\")\" automatically includes the following packages: \"\n\t\t\t\t   (:ul (:li ((:span :class \"package-name\")\":common-lisp\"))\n\t\t\t\t\t(:li ((:span :class \"package-name\")\":gdl\"))\n\t\t\t\t\t(:li ((:span :class \"package-name\")\":geom-base\"))\n\t\t\t\t\t(:li ((:span :class \"package-name\")\":surf\"))))\n\t\t\t      (:li \"Optionally define a list of symbols that the package will \"((:span :class \"object-keyword\")\":export\")))\n\t\t\t\n\t\t\t \"In most cases we create a lisp file, normally called package.lisp \"\n\t\t\t (:em \"(this is just a convention, not a requirement)\")\" to do this. We need to set a working pakage and for this the \"\n\t\t\t ((:span :class \"package-name\")\":gdl-user\")\" package is suitable. The we call the GendL \"\n\t\t\t ((:span :class \"macro\")\"define-package\")\" macro. So if we define some package code like this\")\n\t\t     (str (code-example (the code-1)))\n\t\t     (:p \"Then in the REPL we can use the \"((:span :class \"function\")\"in-package\")\" function to switch to out new package\")\n\t\t     (str (repl-example (the repl-1)))\n\t\t     (:h3 \"The :export option\")\n\t\t     (:p \"When we define a new package we can \"\n\t\t\t ((:span :class \"object-keyword\")\":export\")\" symbols from that package for external use. Whilst symbols from that package can still be accessed even if the aren't \"\n\t\t\t ((:span :class \"object-keyword\")\"exported\")\", it isn't considered to be good practice to do this, it's up to the package owner to choose to \"\n\t\t\t ((:span :class \"object-keyword\")\"export\")\" or \"\n\t\t\t (:em \"expose\")\" which symbols are for external use. A good watchword is \"\n\t\t\t (:ul (:li (:em (:b \"\\\"Not Exported = Unsupported\\\"\")))))\n\t\t     (:p \"Extending our \"\n\t\t\t ((:span :class \"macro\")\"define-package\")\" example to \"\n\t\t\t ((:span :class \"object-keyword\")\":export\")\" a symbol \"\n\t\t\t ((:span :class \"slot\")\"my-slot\")\" from our package would look like this\")\n\t\t     (str (code-example (the code-2)))\n\t\t     (:p \"In some cases it is convenient to \"\n\t\t\t ((:span :class \"object-keyword\")\":export\")\" a symbol after \"\n\t\t\t ((:span :class \"macro\")\"define-package\")\" has been evaluated. This may be the case, for example, where we have a number of functions to be \"\n\t\t\t ((:span :class \"object-keyword\")\":exported\")\" and it is easier to manage the \"\n\t\t\t ((:span :class \"object-keyword\")\":export\")\" from within the functions source code file. To do this we can use the Common Lisp Special Operator \"\n\t\t\t ((:span :class \"special-operator\")\"eval-when\")\" as shown in the example below\")\n\t\t     (str (code-example (the code-3)))\n\t\t     (:p \"In this example the function \"\n\t\t\t ((:span :class \"function\")\"average\")\" is exported from the \"\n\t\t\t ((:span :class \"object-keyword\")\":functions\")\" package when either a top-level form in a compiled file is being loaded (\"\n\t\t\t (:em (:b \"load\"))\") or when the expression would be evaluated anyway (\"\n\t\t\t (:em (:b \"eval\"))\")\")\n\t\t     (:h3 \"The :use option\")\n\t\t     (:p \"To access a symbol which has been \"\n\t\t\t ((:span :class \"object-keyword\")\"exported\")\" from a package we need to use the fully qualified name for that symbol - in other words its package and symbol seperated by a colon. However, if we \"\n\t\t\t ((:span :class \"object-keyword\")\":use\")\" a package when we create a new package, we can access \"\n\t\t\t ((:span :class \"object-keyword\")\"exported\")\" symbols using their symbol only. Creating a new package which  \"\n\t\t\t ((:span :class \"object-keyword\")\"uses\")\" the package created earlier would look like this\")\n\t\t\n\t\t     (str (code-example (the code-4)))\n\t\t     (:h3 \"Bringing it all together\")\n\t\t     (:p \"Let's consider 3 packages, \"\n\t\t\t ((:span :class \"package-name\")\"package-a\")\", \"\n\t\t\t ((:span :class \"package-name\")\"package-b\")\" and \"\n\t\t\t ((:span :class \"package-name\")\"package-c\")\". Package \"\n\t\t\t ((:span :class \"package-name\")\"package-a\")\" \"\n\t\t\t ((:span :class \"object-keyword\")\"exports\")\" a symbol \"\n\t\t\t ((:span :class \"slot\")\"x\")\" and also defines another symbol \"\n\t\t\t ((:span :class \"slot\")\"y\")\". Package \"\n\t\t\t ((:span :class \"package-name\")\"package-b\")\" doesn't \"\n\t\t\t ((:span :class \"object-keyword\")\":export\")\" any symbols and doesn't \"\n\t\t\t ((:span :class \"object-keyword\")\":use\")\" any other packages. Package \"\n\t\t\t ((:span :class \"package-name\")\"package-c\")\" \"\n\t\t\t ((:span :class \"object-keyword\")\":uses\")\" package \"\n\t\t\t ((:span :class \"package-name\")\"package-a\"))\n\t\t     (str (repl-example (the repl-3)))\n\t\t     (:p \"When we are in package \"\n\t\t\t ((:span :class \"package-name\")\"package-b\")\", which does not \"\n\t\t\t ((:span :class \"object-keyword\")\":use\")\" package \"\n\t\t\t ((:span :class \"package-name\")\"package-a\")\n\t\t\t (:ul (:li \"we can access exported symbols from package \"\n\t\t\t\t   ((:span :class \"package-name\")\"package-a\")\" but need to qualify the symbol with the \"\n\t\t\t\t   (:em (:b \"package name and a single colon\")))\n\t\t\t      (:li \"we can access unexported symbols from package \"\n\t\t\t\t   ((:span :class \"package-name\")\"package-a\")\" but need to qualify the symbol with the \"\n\t\t\t\t   (:em (:b \"package name and double colon\"))))\n\t\t\t (:p \"When we are in package \"\n\t\t\t     ((:span :class \"package-name\")\"package-c\")\", which does \"\n\t\t\t     ((:span :class \"object-keyword\")\":use\")\" package \"\n\t\t\t     ((:span :class \"package-name\")\"package-a\")\n\t\t\t     (:ul (:li \"we can access exported symbols from package \"\n\t\t\t\t       ((:span :class \"package-name\")\"package-a\")\" just by their name\")\n\t\t\t\t  (:li \"we can access unexported symbols from package \"\n\t\t\t\t       ((:span :class \"package-name\")\"package-a\")\" but need to qualify the symbol with the \"(:em (:b \"package name and a double colon\")))))))\n\t\t    ((:div :class \"main-page-item\")\n\t\t     (:h2 \"Resources\")\n\t\t     (str (the resource-links))))))))\n\n\t\t\t\n\n\t\t\t\n",
    "metadata": {
      "source": "gornschool-training/t3/source/working-with-packages.lisp",
      "file_name": "working-with-packages.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_3_object_definition",
      "chunk_id": 7,
      "section": "package-c\""
    },
    "id": "77f151fb5a2134193abe9e852a606647"
  },
  {
    "text": "(in-package :gdl-user)\n\n(gwl:define-package :training-3\n    (:use :training-common)\n  (:shadow #:*home*)\n  (:export #:assembly))\n\n",
    "metadata": {
      "source": "gornschool-training/t3/source/package.lisp",
      "file_name": "package.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_3_package",
      "chunk_id": 0,
      "section": "header"
    },
    "id": "e5c6ec3ba1df785e2ff4a22bc29b7f19"
  },
  {
    "text": "(in-package :training-3)\n\n",
    "metadata": {
      "source": "gornschool-training/t3/source/package-tips.lisp",
      "file_name": "package-tips.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_3_object_definition",
      "chunk_id": 0,
      "section": "header"
    },
    "id": "69d410adbc34365bf88c1dfefd536923"
  },
  {
    "text": "(define-object package-tips (base-training-sheet)\n\n  :computed-slots\n  ((index-words (list \"define-package\" \"in-package\" \":use\" \":export\" \"Interned\"))\n\n   (body-content (with-cl-who-string()\n\t\t   ((:div :class \"main-page-container\" :style \"grid-template-columns: 600px auto;\")\n\t\t    ((:div :class \"main-page-item\")\n\t\t     (:h3 \"When to use packages\")\n\t\t     (:ul (:li \"If you are starting a new application or project\")\n\t\t\t  (:li \"If you find yourself copying and pasting from another project/application (create a new package that would be shared between the 2 projects/applications, put the code in that new package and export the symbol\")\n\t\t\t  (:li \"If you are writing some general purpose functions which you intend to share\"))\n\t\t\t\n\t\t     (:h3 \"Some package guidelines\")\n\t\t     (:p \"When working with packages theres a few things you need to know to make it all work smoothly\")\n\t\t     (:ol (:li (:em (:b \"Packages must be defined before you can Load or Compile a file containing an in-package statement refering to that package\"))\n\t\t\t       (:p \"This means there is an order in which files must be loaded, in turn implying that the code defining a package should be in a separate file to code that uses those packages. We'll get onto both of these topics later\"))\n\t\t\t  (:li (:em (:b \"Packages must be defined before other packages can refer to them\"))\n\t\t\t       (:p \"Practically this means avoiding circularities in the \"\n\t\t\t\t   ((:span :class \"object-keyword\")\":use\")\" statement, but again implies form form of load order which again means keeping code defining packages in separate files\"))\n\t\t\t  (:li (:em (:b \"Code files should contain one, \"\n\t\t\t\t\t(:em \"and only one\")\", \"\n\t\t\t\t\t((:span :class \"function\")\"in-package\")\" statement and this should be the first line of code in that file\"))\n\t\t\t       (:p \"As far as Common Lisp is concerned you can put multiple in-package statements in a file. There are however 2 reasons why this approach would be considered good practice\"\n\t\t\t\t   (:ul (:li \"It avoids confusing humand who might not notice a second or third in-package statement\")\n\t\t\t\t\t(:li \"The emacs/SLIME development environment look for the in-package statement to determine the package to be used when communicationg with Common Lisp and multiple in-package statement may confuse these tools\"))))\n\t\t\t  (:li (:em (:b \"A final consideration is naming of Packages and particularly avoiding package name clashes.\"))\n\t\t\t       (:p \"This isn't generally a problem when you are only using packages that you have developed, but if you are sharing them with other programmers, or using third party packages this needs to be considered, with some kind of naming convention. As a package name is just a text string you can adopt any convention you choose. A trend seems to be a reverse internet domain name followed by a description, for example com.genworks.my-app\")))\n\n\t\t     (:h3 \"Some package gotcha's\")\n\t\t     (:p \"Generally once you've got working with packages you won't need to think about them that much, they just do what they're supposed to do. But occasionally, and mainly when setting up new packages, there can be a few 'odd' errors. Perhaps the most common is symbol conflicts. Consider the following case\"\n\t\t\t (:ul (:li \"You create a package, say \"\n\t\t\t\t   ((:span :class \"package-name\")\"my-package\")\", which you expect to use a function, say \"\n\t\t\t\t   ((:span :class \"function\")\"test-function\")\", which is \"\n\t\t\t\t   ((:span :class \"object-keyword\")\":exported\")\" from another package \"\n\t\t\t\t   ((:span :class \"package-name\")\"my-functions\"))\n\t\t\t      (:li \"In the source code for the app using \"\n\t\t\t\t   ((:span :class \"package-name\")\"my-package\")\", you refer to \"\n\t\t\t\t   ((:span :class \"function\")\"test-function\")\" by its symbol only - which is fine because its \"\n\t\t\t\t   ((:span :class \"object-keyword\")\"exported\"))\n\t\t\t      (:li \"But you've forgotten to \"\n\t\t\t\t   ((:span :class \"object-keyword\")\":use\")\" \"\n\t\t\t\t   ((:span :class \"package-name\")\"my-functions\")\" when defining the package \"\n\t\t\t\t   ((:span :class \"package-name\")\"my-package\"))\n\t\t\t      \"So when you try to run the compiled code, you'll get an \"\n\t\t\t      (:em (:b \"'undefined function'\"))\" error. No problem, you return to the \"\n\t\t\t      ((:span :class \"macro\")\"define-package\")\" statement for \"\n\t\t\t      ((:span :class \"package-name\")\"my-package\")\", add \"\n\t\t\t      (:em (:b \"(:use my-functions)\"))\" and then try to run again. This time you get a \"\n\t\t\t      (:em (:b \"conflicting symbols\"))\" error! Whats happened here is that the first time you run the code the the symbol \"\n\t\t\t      ((:span :class \"function\")\"test-function\")\" is interned in \"\n\t\t\t      ((:span :class \"package-name\")\"my-package\")\". Then you \"\n\t\t\t      ((:span :class \"object-keyword\")\":use\")\" \"\n\t\t\t      ((:span :class \"package-name\")\"my-functions\")\" from which \"\n\t\t\t      ((:span :class \"function\")\"test-function\")\" is exported so you've got a \"\n\t\t\t      (:em (:b \"conflicting symbol\"))\" clash! The solution is to accept the restart to unintern \"\n\t\t\t      ((:span :class \"function\")\"test-function\")\" from \"\n\t\t\t      ((:span :class \"package-name\")\"my-package\")\" and then recompile the \"\n\t\t\t      ((:span :class \"package-name\")\"my-package\")\" package\"))\n\t\t     (:p \"Another issue potential issue is\"\n\t\t\t (:ul (:li \"You create a package, say \"\n\t\t\t\t   ((:span :class \"package-name\")\"my-package\")\", which \"\n\t\t\t\t   ((:span :class \"object-keyword\")\":uses\")\" \"\n\t\t\t\t   ((:span :class \"package-name\")\"my-functions\"))\n\t\t\t      (:li ((:span :class \"package-name\")\"my-functions\")\" \"\n\t\t\t\t   ((:span :class \"object-keyword\")\":exports\")\" a number of functions\")\n\t\t\t      (:li \"You then define a function in \"\n\t\t\t\t   ((:span :class \"package-name\")\"my-package\")\" which has the same symbol as a function \"\n\t\t\t\t   ((:span :class \"object-keyword\")\":exported\")\" from \"\n\t\t\t\t   ((:span :class \"package\")\"my-functions\")))\n\t\t\t \"What will happen here is that your function in \"\n\t\t\t ((:span :class \"package-name\")\"my-package\")\" will effectively overwrite the function of the same name in \"\n\t\t\t ((:span :class \"package-name\")\"my-functions\")\". In most Lisps you'll get a warning that a symbol is being redefined, but its not classed as an error\")\n\t\t     (:p \"A final package-related issue is to do with dropping out of Geysr into the REPL to do some debugging. If the debugging is referring to slots defined in a package other than the REPL's current package, when you try to evaluate the slot you'll get an 'undefined function' error. The simple solution to this is to change the REPL's package, using the in-package function, to the package of the code that you're working with and evaluate the expression again\"))))))\n  )\n",
    "metadata": {
      "source": "gornschool-training/t3/source/package-tips.lisp",
      "file_name": "package-tips.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_3_object_definition",
      "chunk_id": 0,
      "section": "package-tips"
    },
    "id": "69d410adbc34365bf88c1dfefd536923"
  },
  {
    "text": "(in-package :training-3)\n\n(defparameter *publish-prefix* \"t3\")  \n\n",
    "metadata": {
      "source": "gornschool-training/t3/source/assembly.lisp",
      "file_name": "assembly.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_3_object_definition",
      "chunk_id": 0,
      "section": "header"
    },
    "id": "2a5ccc1ebdfc9471e7e675ac2d8f9979"
  },
  {
    "text": "(define-object assembly (base-tutorial-sheet)\n  :input-slots\n  ((getting-started-url nil)\n   (tutorial-name \"Organising your code\"))\n\n  :computed-slots\n  ((introduction (with-cl-who-string ()\n\t\t   (:p \"Now that you have completed the Getting Started with GendL tutorial, its worth giving some thought to the way you may want to organise and load the code you will be writing. This tutorial covers some basic principles and provides a few guidelines that we would consider to be best practice.\")\n\t\t   (:p \"The best time to get organised is right at the start as it will avoid getting locked in to less then optimal working practices, or needing to go through all your code at a later date to retro-fit it to your chosen organisation structure or methodology\"))))\n\n  :objects\n  ((working-with-packages :type 'working-with-packages\n\t\t\t  :pass-down (page-objects)\n\t\t\t  :publish-prefix *publish-prefix*\n\t\t\t  :page 1\n\t\t\t  :page-title \"Working with Packages\"\n\t\t\t  :getting-started-url (the getting-started-url)\n\t\t\t  :resources (list \"packages.lisp\"))\n   \n   (package-tips :type 'package-tips\n\t\t :pass-down (page-objects)\n\t\t :publish-prefix *publish-prefix*\n\t\t :page 2\n\t\t :page-title \"Package Tips\")\n   \n   (code-structuring :type 'code-structuring\n\t\t     :pass-down (page-objects)\n\t\t     :publish-prefix *publish-prefix*\n\t\t     :page 3\n\t\t     :page-title \"Code Structuring\")\n   \n   (loading-code :type 'loading-code\n\t\t :pass-down (page-objects)\n\t\t :publish-prefix *publish-prefix*\n\t\t :page 4\n\t\t :page-title \"Loading Code with cl-lite\"))\n\n  )\n\n\n\n\n\n\n\n\n",
    "metadata": {
      "source": "gornschool-training/t3/source/assembly.lisp",
      "file_name": "assembly.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_3_object_definition",
      "chunk_id": 0,
      "section": "assembly"
    },
    "id": "2a5ccc1ebdfc9471e7e675ac2d8f9979"
  },
  {
    "text": "(in-package :training-3)\n\n",
    "metadata": {
      "source": "gornschool-training/t3/source/code-structuring.lisp",
      "file_name": "code-structuring.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_3_object_definition",
      "chunk_id": 0,
      "section": "header"
    },
    "id": "953d2270ff4a61a28d4f933d6b96f05b"
  },
  {
    "text": "(define-object code-structuring (base-training-sheet)\n  :computed-slots\n  ((body-content (with-cl-who-string ()\n\t\t   ((:div :class \"main-page-container\" :style \"grid-template-columns: 500px auto;\")\n\t\t    ((:div :class \"main-page-item\")\n\t\t     (:p \"These are just recomendations based on experience and convenience\")\n\t\t     (:h3 \"Source Code Files\")\n\t\t     (:ul (:li \"If the code is in a discrete package, ensure there is a separate package.lisp file to define the package\")\n\t\t\t  (:li \"Where possible or feasible one object/function per file. (\"(:em \"Whilst you can open the file containing an object or function code from in emacs by positioning the cursor in the object/function name and using \"(:b \"Meta-.\")\", the one object/function per file goal does make life easier)\"))))\n\t\t    ((:div :class \"main-page-item\"))\n\t\t    ((:div :class \"main-page-item\")\n\t\t     (:h3 \"Directory organisation\")\n\t\t     (:ul (:li \"Where possible and practical arrange the directory structure so that it mirrors the applications object structure\")\n\t\t\t  (:li \"Strike a balance between granularity - some logical separation is good, but avoid separating too much\")\n\t\t\t  (:li \"For each module create a \"(:em (:b \"source\"))\" directory for the source code files\")\n\t\t\t  (:li \"In larger projects define a \"(:em (:b \"common\"))\" folder for code that is shared between the other modules\"))\n\t\t     (:p \"In the example on the right, the airplane/source directory would be used for the source code assembling the different modules into an airplane. The common directory would be used for shared objects/functions and the main application code would be stored in the source directories of each module - engine, wing, fuselage. Some considertion ought to be given at this stage to the package design; a single :airplane package may be adequate or the packages could be broken down by module, each of the sub-modules using airplane-common and the top level airplane package using all of the sub-module packages.A bit of time spent at the outset of a project is usuually time well spent, although the result doesn't need to be perfect since it is easy enough to change as the project/application evolves\")\n\t\t     (:p \"The suggested codebase structure is also compatible with cl-lite, GendL's code loading utility which is discussed in the next topic\"))\n\t\t    ((:div :class \"main-page-item\")\n\t\t     ((:img :src (format nil \"/~a-images/codebase.png\" *publish-prefix*) :style \"width: auto; height: 300px; margin: 1em 0 1em 3% ;\"))))))))\n  \n",
    "metadata": {
      "source": "gornschool-training/t3/source/code-structuring.lisp",
      "file_name": "code-structuring.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_3_object_definition",
      "chunk_id": 0,
      "section": "code-structuring"
    },
    "id": "953d2270ff4a61a28d4f933d6b96f05b"
  },
  {
    "text": "(in-package :training-3)\n\n",
    "metadata": {
      "source": "gornschool-training/t3/source/loading-code.lisp",
      "file_name": "loading-code.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_3_object_definition",
      "chunk_id": 0,
      "section": "header"
    },
    "id": "2b8e62330259a3309c932e8e1466b206"
  },
  {
    "text": "(define-object loading-code (base-training-sheet)\n  :computed-slots\n  ((code-1 (list \"(cl-lite \\\"/codebase/airplane\\\")\"))\n   (code-2 (list \"(\\\"common\\\" \\\"wing\\\" \\\"fuselage\\\" \\\"engine\\\" \\\"source\\\")\"))\n   (code-3 (list \"(\\\"package\\\")\"))\n   (code-4 (list \"(\\\"engine\\\")\"))\n   (body-content (with-cl-who-string ()\n\t\t   ((:div :class \"main-page-container\" :style \"grid-template-columns: 600px auto;\")\n\t\t    ((:div :class \"main-page-item\")\n\t\t     (:p \"In previous topics, we have seen that there is some requirement to manage the load order. With small numbers of source files this is manageable manually, but once the number of source files exceeds maybe 5 or 6, this becomes an onerous and somewhat tedious task\")\n\t\t     (:p \"GendL has a utility to support this called \"\n\t\t\t (:span :class \"function\" \"cl-lite\")\". It can be called from either the REPL or it can be initiated from the init file (gdlinit.cl). \"\n\t\t\t (:span :class \"function\" \"cl-lite\")\" supports the following features\"\n\t\t\t (:ul (:li \"It will load any .lisp file found in any \"\n\t\t\t\t   (:em (:b \"source\"))\" directory below the target directory. So in the example codebase on the right, if \"\n\t\t\t\t   (:span :class \"function\" \"cl-lite\")\" was applied to the \"\n\t\t\t\t   (:em (:b \"airplane\"))\" directory it would load .lisp files from \"\n\t\t\t\t   (:em (:b \"source\"))\", \"\n\t\t\t\t   (:em (:b \"common/source\"))\", \"\n\t\t\t\t   (:em (:b \"engine/source\"))\", \"\n\t\t\t\t   (:em (:b \"fuselage/source\"))\" and \"\n\t\t\t\t   (:em (:b \"wing/source\")))\n\t\t\t      (:li \"The order in which directories are loaded may be specified at any level using a \"\n\t\t\t\t   (:b \"system-ordering.isc\")\" file\")\n\t\t\t      (:li \"The order in which files in a source folder are loaded may be specified for that \"\n\t\t\t\t   (:em (:b \"source\"))\" directory in a \"\n\t\t\t\t   (:b \"file-ordering.isc\")\" file\")\n\t\t\t      (:li \"Directories or files to be ignored can be specified in an  \"\n\t\t\t\t   (:b \"ignore-list.isc\")\" file\")))\n\t\t     (:p \"The structure of the \"\n\t\t\t (:b \"system-ordering.isc\")\", \"\n\t\t\t (:b \"file-ordering.isc\")\" and \"\n\t\t\t (:b \"ignore-list.isc\")\" is identical; it is a literal list of strings identifying target folders or files. Note that \"\n\t\t\t (:b \"ignore-list.isc\")\" may apply to either directories or files whilst \"\n\t\t\t (:b \"system-ordering.isc\")\" only applies to directories and \"\n\t\t\t (:b \"file-ordering.isc\")\" only applies to files\"))\n\t\t    ((:div :class \"main-page-item\")\n\t\t     ((:img :src (format nil \"/~a-images/codebase.png\" *publish-prefix*) :style \"width: auto; height: 300px; margin: 0 0 0 0 ;\")))\n\t\t    ((:div :class \"main-page-item\")\n\t\t     (:h3 \"Executing cl-lite\")\n\t\t     (:p (:span :class \"function\" \"cl-lite\")\" takes a pathname argument. The pathname may be a string or a logical pathname\")\n\t\t     (str (code-example (the code-1)))\n\t\t     (:p \"If we wanted to enforce a \"\n\t\t\t (:em \"load order\")\" for the directories we would use the \"\n\t\t\t (:b \"system-ordering.isc file\")\". In this example, assuming multiple packages which mirror the directory structure, we would probably want to load \"\n\t\t\t (:em (:b \"common\"))\" first, then \"\n\t\t\t (:em (:b \"engine\"))\", \"\n\t\t\t (:em (:b \"wing\"))\" and \"\n\t\t\t (:em (:b \"fuselage\"))\" (since they would \"\n\t\t\t (:span :class \"object-keyword\" \":use\")\" the \"\n\t\t\t (:span :class \"package-name\" \":airplane-common\")\" package) and lastly the \"\n\t\t\t (:em (:b \"source\"))\" directory since it would \"\n\t\t\t (:span :class \"object-keyword\" \":use\")\" all of the previously defined packages. So \"\n\t\t\t (:b \"system-ordering.isc\")\" would look like this\")\n\t\t     (str (code-example (the code-2)))\n\t\t     (:p \"Assuming each of the folders has a package file, we would want to load that as the first file when the directory is loaded, so each \"\n\t\t\t (:em  (:b\"source\"))\" folder would have a \"\n\t\t\t (:b \"file-ordering.isc\")\" file like this\")\n\t\t     (str (code-example (the code-3)))\n\t\t     (:p \"2 things to note here\"\n\t\t\t (:ul (:li \"There is no need to specify the file extension\")\n\t\t\t      (:li \"There is only a requirement to specify files which have special load order, any other files in the folder are loaded by default in alphabetical order\")))\n\t\t     (:p \"Finally, if for some reason we wished to suppress the load of the engine module, we would use the \"\n\t\t\t (:b \"ignore-list.isc\")\" file in the \"\n\t\t\t (:em  (:b \"airplane\"))\" directory as shown below\")\n\t\t     (str (code-example (the code-4)))))))))\n\n\t\t\t\n",
    "metadata": {
      "source": "gornschool-training/t3/source/loading-code.lisp",
      "file_name": "loading-code.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_3_object_definition",
      "chunk_id": 0,
      "section": "loading-code"
    },
    "id": "2b8e62330259a3309c932e8e1466b206"
  },
  {
    "text": "(in-package :gdl-user)\n\n",
    "metadata": {
      "source": "gornschool-training/t3/resources/source/packages.lisp",
      "file_name": "packages.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_3",
      "chunk_id": 0,
      "section": "header"
    },
    "id": "bbb5f998110568684b0e91b7d8b828c7"
  },
  {
    "text": "(define-package :my-app\n    (:export #:my-slot))\n\n",
    "metadata": {
      "source": "gornschool-training/t3/resources/source/packages.lisp",
      "file_name": "packages.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_3",
      "chunk_id": 0,
      "section": ":my-app"
    },
    "id": "bbb5f998110568684b0e91b7d8b828c7"
  },
  {
    "text": "(define-package :my-other-app\n    (:use :my-app))\n\n",
    "metadata": {
      "source": "gornschool-training/t3/resources/source/packages.lisp",
      "file_name": "packages.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_3",
      "chunk_id": 1,
      "section": ":my-other-app"
    },
    "id": "0ff2037122e3a42fd8d2a10d0d302bc1"
  },
  {
    "text": "(define-package :yet-another-app\n  (:export #:my-slot-1\n\t   #:my-slot-2)\n  (:use :my-app))\n",
    "metadata": {
      "source": "gornschool-training/t3/resources/source/packages.lisp",
      "file_name": "packages.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_3",
      "chunk_id": 2,
      "section": ":yet-another-app"
    },
    "id": "a16d30432f2127393972eaa882041b14"
  },
  {
    "text": "(in-package :training-6)\n\n",
    "metadata": {
      "source": "gornschool-training/t6/source/wall-example-with-form.lisp",
      "file_name": "wall-example-with-form.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_6_object_definition",
      "chunk_id": 0,
      "section": "header"
    },
    "id": "30c72fc308a0272936640cf8058b60e0"
  },
  {
    "text": "(define-object wall-example-with-form (base-training-sheet)\n  :input-slots\n  ((getting-started-tutorial nil)\n   (io-tutorial nil))\n\n  :computed-slots\n  ((code-1 (list \"",
    "metadata": {
      "source": "gornschool-training/t6/source/wall-example-with-form.lisp",
      "file_name": "wall-example-with-form.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_6_object_definition",
      "chunk_id": 0,
      "section": "wall-example-with-form"
    },
    "id": "30c72fc308a0272936640cf8058b60e0"
  },
  {
    "text": "(define-object wall(box)\"\n\t\t \" :input-slots\"\n\t\t \" ((brick-height 45)\"\n\t\t \"  (brick-length 180)\"\n\t\t \"  (brick-width 90)\"\n\t\t \"  (mortar-joint-width 10)\"\n\t\t \"  (wall-length 3700)\"\n\t\t \"  (wall-height 900))\"\n\t\t \"...\"\n\t\t \")\"))\n   (code-2 (list \"",
    "metadata": {
      "source": "gornschool-training/t6/source/wall-example-with-form.lisp",
      "file_name": "wall-example-with-form.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_6_object_definition",
      "chunk_id": 1,
      "section": "wall"
    },
    "id": "f67e34b609b062f7d9860af177eaec42"
  },
  {
    "text": "(define-object wall-example-form (base-html-page)\"\n\t\t \" :objects\"\n\t\t \" ((brick-height-fc :type 'number-form-control\"\n\t\t \"                      :prompt \\\"Brick Height (mm)\\\"\"\n\t\t \"                      :default 45\"\n\t\t \"                      :ajax-submit-on-change? t)\"\n\t\t \"  (brick-length-fc :type 'number-form-control\"\n\t\t \"                      :default 180\"\n\t\t \"                      :prompt \\\"Brick Length (mm)\\\"\"\n\t\t \"                      :ajax-submit-on-change? t)\"\n\t\t \"  (brick-width-fc :type 'number-form-control\"\n\t\t \"                     :default 90\"\n\t\t \"                     :prompt \\\"Brick Width (mm)\\\"\"\n\t\t \"                     :ajax-submit-on-change? t)\"\n\t\t \"  (mortar-width-fc :type 'number-form-control\"\n\t\t \"                      :default 10\"\n\t\t \"                      :prompt \\\"Mortar Joint Width (mm)\\\"\"\n\t\t \"                      :ajax-submit-on-change? t)\"\n\t\t \"  (wall-length :type 'number-form-control\"\n\t\t \"                  :default 3700\"\n\t\t \"                  :prompt \\\"Nominal Wall Length (mm)\\\"\"\n\t\t \"                  :ajax-submit-on-change? t)\"\n\t\t \"  (wall-height :type 'number-form-control\"\n\t\t \"                  :default 3700\"\n\t\t \"                  :prompt \\\"Nominal Wall Height (mm)\\\"\"\n\t\t \"                  :ajax-submit-on-change? t)))\"))\n\n   (code-3 (list \"",
    "metadata": {
      "source": "gornschool-training/t6/source/wall-example-with-form.lisp",
      "file_name": "wall-example-with-form.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_6_object_definition",
      "chunk_id": 2,
      "section": "wall-example-form"
    },
    "id": "3149f7ea52b3540758e4bfac0a747b4f"
  },
  {
    "text": "(define-object wall-example-form (base-html-page)\"\n\t\t \" :computed-slots\"\n\t\t \" ((main-sheet-body (with-lhtml-string ()\"\n\t\t \"                     (:table\" \n\t\t \"                       (:tr\"\n\t\t \"                         (:td (str (the form-controls-section div))))))))\"\n\n\t\t \":objects\"\n\t\t \" ((form-controls-section \"\n\t\t \"         :type 'base-html-div\"\n\t\t \"         :inner-html (with-lhtml-string ()\"\n\t\t \"                         (:table\"\n\t\t \"                           (dolist (obj (the form-controls))\"\n\t\t \"                             (htm (:tr (:td (str (theo obj prompt)))\"\n\t\t \"                                          (:td (str (theo obj form-control)))))))))\"\n\t\t \"...\"\n\t\t \"))\"))\n\n   (code-4 (list \"",
    "metadata": {
      "source": "gornschool-training/t6/source/wall-example-with-form.lisp",
      "file_name": "wall-example-with-form.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_6_object_definition",
      "chunk_id": 3,
      "section": "wall-example-form"
    },
    "id": "46cbfa2a1472b9a834e77510ef0891bd"
  },
  {
    "text": "(define-object wall-example-form (base-html-page)\"\n\t\t \"...\"\n\t\t \"...\"\n\t\t \" :objects\"\n\t\t \" ((wall :type 'gdl-user::wall\"\n\t\t \"          :brick-height (the brick-height-fc value)\"\n\t\t \"          :brick-length (the brick-length-fc value)\"\n\t\t \"          :brick-width (the brick-width-fc value)\"\n\t\t \"          :mortar-joint-width (the mortar-width-fc value)\"\n\t\t \"          :wall-length (the wall-length value)\"\n\t\t \"          :wall-height  (the wall-height value))\"\n\t\t \"  ...\"\n\t\t \"  ...\"\n\t\t \")\"\n\t\t \")\"))\n\n   (code-5 (list \"",
    "metadata": {
      "source": "gornschool-training/t6/source/wall-example-with-form.lisp",
      "file_name": "wall-example-with-form.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_6_object_definition",
      "chunk_id": 4,
      "section": "wall-example-form"
    },
    "id": "b7e1fcd690b76d046d8f9ae78a0982ff"
  },
  {
    "text": "(define-object wall-example-form (base-html-page)\"\n\t\t \" :computed-slots\"\n\t\t \" ((main-sheet-body (with-lhtml-string ()\"\n\t\t \"                      (:table \"\n\t\t \"                        (:tr \"\n\t\t \"                          (:td (str (the form-controls-section div)))\"\n\t\t \"                          (:td (str (the report-section div)))))))\"\n\t\t \" )\"\n\t\t \" :objects\"\n\t\t \" (\"\n\t\t \"   ...\"\n\t\t \"   ...\"\n\t\t \"  (report-section \"\n\t\t \"       :type 'base-html-div\"\n\t\t \"       :inner-html (with-lhtml-string ()\"\n\t\t \"                      (:table\"\n\t\t \"                        (:tr \"\n\t\t \"                          (:td \\\"Actual Wall Length\\\")\"\n\t\t \"                          (:td (str (the wall actual-wall-length))))\"\n\t\t \"                        (:tr \"\n\t\t \"                          (:td \\\"Actual Wall Height\\\")\"\n\t\t \"                          (:td (str (the wall actual-wall-height))))\"\n\t\t \"                        (:tr \"\n\t\t \"                          (:td \\\"Number of Full Bricks\\\")\"\n\t\t \"                          (:td (str (the wall full-bricks))))\"\n\t\t \"                        (:tr \"\n\t\t \"                          (:td \\\"Number of Half Bricks\\\")\"\n\t\t \"                          (:td (str (the wall half-bricks))))\"\n\t\t \"                        (:tr \"\n\t\t \"                          (:td \\\"Mortar Mass\\\")\"\n\t\t \"                          (:td (fmt \\\"~,1f\\\" (the wall mortar-mass)))))))\"\n\t\t \"         ...\"\n\t\t \"         ...\"\n\t\t \"  ))\"))\n\n   (getting-started-title (if (the getting-started-tutorial) (the getting-started-tutorial tutorial-name) \"Getting Started with GendL\"))\n   (getting-started-url (when (the getting-started-tutorial) (the getting-started-tutorial url)))\n   (io-title (if (the io-tutorial) (the io-tutorial tutorial-name) \"Reading From and Writing To Files\"))\n   (io-url (when (the io-tutorial) (the io-tutorial url)))\t\t\t\n   (body-content (with-cl-who-string()\n\t\t   (:div :class \"main-page-container\"\n\t\t\t (:div :class \"main-page-item\"\n\t\t\t       (:div :class \"grid-container-2-650px\"\n\t\t\t\t     (:div :class \"grid-item\")\n\t\t\t\t     (:p \"In the tutorial \" (if (the getting-started-url)\n\t\t\t\t\t\t\t\t(htm (:a :href (the getting-started-url) (str (the getting-started-title))))\n\t\t\t\t\t\t\t\t(htm (str (the getting-started-title))))\n\t\t\t\t\t \" we developed an example application to build a model of a brick built wall. In that application, all inputs were provided as \"\n\t\t\t\t\t (:span :class \"object-keyword\" \"input-slots\")\" with default values. In this topic, we'll use the wall application and extend it to include a web based front end to gather inputs via a form.\")\n\t\t\t\t     (:p \"The basic design concept is to have a web page as a top level object, which gathers the inputs and passes them to the wall application, which is defined as a child object of the web form. We will then retrieve the outputs from the wall application and display these on the web form\")\n\t\t\t\t     (:p \"So first, we need to familiarise ourselves with the required inputs\")\n\t\t\t\t     (str (code-example (the code-1)))\n\t\t\t\t     (:p \"Now we define the \"\n\t\t\t\t\t (:span :class \"object\" \"form-controls\")\" to capture these inputs\")\n\t\t\t\t     (str (code-example (the code-2)))\n\t\t\t\t     (:p \"Having done that, we need to present them on the web page; using a \"\n\t\t\t\t\t (:span :class \"object\" \"base-html-div\")\" is a convenient way to do this. Note that we use the \"\n\t\t\t\t\t (:span :class \"slot\" \"form-controls\")\" slot to iterate through all the \"\n\t\t\t\t\t (:span :class \"object\" \"form-control\") \" objects to present them on the web page. Also we would normally define \"\n\t\t\t\t\t (:span :class \"object-keyword\" \"validation-function\")\" inputs, but have skipped those in this example\")\n\t\t\t\t     (str (code-example (the code-3)))\n\t\t\t\t     (:p \"Then we need to link the  \"\n\t\t\t\t\t (:span :class \"object\" \"form-control\")\" \"\n\t\t\t\t\t (:span :class \"slot\" \"value\")\" slots to the \"\n\t\t\t\t\t (:span :class \"object-keyword\" \":inputs\")\" to the wall object\")\n\t\t\t\t     (str (code-example (the code-4)))\n\t\t\t\t     (:p \"Finally, we need to define a \"\n\t\t\t\t\t (:span :class \"object\" \"base-html-div\")\" to present the wall outputs on the web page. Because all of the \"\n\t\t\t\t\t (:span :class \"object\" \"form-control\")\" objects have been defined with \"\n\t\t\t\t\t (:span :class \"object-keyword\" \":ajax-submit-on-change?\")\" set to T, any change to the form inputs will automatically trigger an update to the outputs display\")\n\t\t\t\t     (str (code-example (the code-5)))\n\t\t\t\t     (:image :src (format nil \"/~a-images/building-example.png\" (the publish-prefix)) :style \"border: 2px solid; margin: 5px 0 0 3% ;width: auto; height: 200px;\" )\t \n\t\t\t\t     )\n\t\t\t       ((:div :class \"main-page-item\")\n\t\t\t\t(:h2 \"Resources\")\n\t\t\t\t(str (the resource-links)))))))\n\n  \n  ))\n",
    "metadata": {
      "source": "gornschool-training/t6/source/wall-example-with-form.lisp",
      "file_name": "wall-example-with-form.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_6_object_definition",
      "chunk_id": 5,
      "section": "wall-example-form"
    },
    "id": "7fc11afa77fae077457b27be70e0d677"
  },
  {
    "text": "(in-package :gdl-user)\n\n(gwl:define-package :training-6\n    (:use :training-common)\n  (:shadow #:*home*)\n  (:export #:assembly))\n\n",
    "metadata": {
      "source": "gornschool-training/t6/source/package.lisp",
      "file_name": "package.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_6_package",
      "chunk_id": 0,
      "section": "header"
    },
    "id": "ac25c5bf9b7cd97e4139a1a531167cd1"
  },
  {
    "text": "(in-package :training-6)\n\n(defparameter *publish-prefix* \"t6\")\n(defparameter *home* (merge-pathnames \"../\" (make-pathname :name nil :type nil :defaults (glisp:source-pathname))))\n\n(with-all-servers\n    (server)\n    (gwl::publish-directory :prefix (format nil \"/~a-css\" *publish-prefix*)\n                            :server server\n                            :destination (namestring\n                                          (merge-pathnames \"resources/css/\" *home*))))\n\n",
    "metadata": {
      "source": "gornschool-training/t6/source/assembly.lisp",
      "file_name": "assembly.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_6_object_definition",
      "chunk_id": 0,
      "section": "header"
    },
    "id": "736ba399d942eb9bcf46bc137a86c423"
  },
  {
    "text": "(define-object assembly (base-tutorial-sheet)\n  :input-slots\n  ((previous-page nil)\n   (next-page nil)\n   (getting-started-tutorial nil)\n   (io-tutorial nil)\n   \n   ",
    "metadata": {
      "source": "gornschool-training/t6/source/assembly.lisp",
      "file_name": "assembly.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_6_object_definition",
      "chunk_id": 0,
      "section": "assembly"
    },
    "id": "736ba399d942eb9bcf46bc137a86c423"
  },
  {
    "text": "(define-object-url nil)\n   (wall-example-url nil)\n   (truss-example-url nil)\n   (tutorial-name \"Integrating with GendL's web server\"))\n\n  :computed-slots\n  ((introduction (with-lhtml-string ()\n\t\t   (:p \"One of the great features of GendL is its inbuilt webserver, the ability to generate web pages and the ability to link these web pages to the underlying GendL model. This tutorial cover the basics of delivering web pages and linking them with applications.\")\n\n                   (:p (:i \"Note: The examples in this Tutorial depend on some patches to the GWL component of GendL which may not yet be built into the GendL distribution \nyou are currently running. These patches can be loaded from the source file \"\n                           (:span :class \"general-keyword\" \"gwl-patches.lisp\")\n                           \" in the Resources section of the first slide linked below.\")))))\n\n  :objects\n  ((simple-html-page :type 'simple-html-page\n\t\t       :pass-down (page-objects)\n\t\t       :publish-prefix *publish-prefix*\n\t\t       :page 1\n\t\t       :page-title \"Creating and Publishing web pages\"\n\t\t       :resources (list \"gwl-patches.lisp\"\n\t\t\t\t\t\"basic-define-and-publish.lisp\"\n                                        (list :url (format nil \"/~a-images/logo.png\" *publish-prefix*) :title \"Genworks Logo\")\n\t\t\t\t\t(list :url (format nil \"/~a-css/my-style.css\" *publish-prefix*) :title\"my-style.css\")))\n   \n   (using-with-lhtml-string :type 'using-with-lhtml-string\n\t\t\t     :pass-down (page-objects)\n\t\t\t     :publish-prefix *publish-prefix*\n\t\t\t     :page 2\n\t\t\t     :page-title \"Using with-lhtml-string\"\n\t\t\t     :resources nil)\n   \n   (using-base-html-divs :type 'using-base-html-divs\n\t\t   :pass-down (page-objects)\n\t\t   :publish-prefix *publish-prefix*\n\t\t   :page 3\n\t\t   :page-title \"Building pages from base-html-divs\"\n\t\t   :resources (list \"gwl-patches.lisp\" \"using-page-sections.lisp\" )\n\t\t   :simple-html-page-title (the simple-html-page page-title)\n\t\t   :simple-html-page-url (the simple-html-page url)\n\t\t   :using-ajax-title (the using-ajax page-title)\n\t\t   :using-ajax-url (the using-ajax url))\n   \n   (using-form-controls :type 'using-form-controls\n\t\t\t:pass-down (page-objects)\n\t\t\t:publish-prefix *publish-prefix*\n\t\t\t:page 4\n\t\t\t:page-title \"Gathering inputs using form-controls\"\n\t\t\t:resources (list \"gwl-patches.lisp\" \"basic-form-controls.lisp\" \"using-form-controls.lisp\" ))\n   \n   (using-ajax :type 'using-ajax\n\t       :pass-down (page-objects)\n\t       :publish-prefix *publish-prefix*\n\t       :simple-html-page (the simple-html-page)\n\t       :using-form-controls (the using-form-controls)\n\t       :using-base-html-divs (the using-base-html-divs)\n\t       :page 5\n\t       :page-title \"Using AJAX\"\n\t       :resources nil)\n   \n   (file-io-1 :type 'file-io\n\t    :pass-down (page-objects)\n\t    :publish-prefix *publish-prefix*\n\t    :page 6\n\t    :page-title \"Writing output for download\"\n\t      :resources (list \"gwl-patches.lisp\" \"simple-file-output.lisp\"))\n   \n   (file-io-2 :type 'file-io-2\n\t    :pass-down (page-objects)\n\t    :publish-prefix *publish-prefix*\n\t    :page 7\n\t    :page-title \"Uploading files\"\n\t      :resources (list \"gwl-patches.lisp\" \"file-upload-1.lisp\" \"file-upload-2.lisp\" \"file-upload-3.lisp\" \"birthdays.txt\"))\n\n   (displaying-graphics :type 'displaying-graphics\n\t\t\t:pass-down (page-objects)\n\t\t\t:publish-prefix *publish-prefix*\n\t\t\t:page 8\n\t\t\t:page-title \"Displaying GendL graphics\"\n\t\t\t:resources nil)\n   \n   (wall-example-form :type 'wall-example-with-form\n\t\t     :pass-down (page-objects)\n\t\t     :publish-prefix *publish-prefix*\n\t\t     :page 9\n\t\t     :getting-started-tutorial (the getting-started-tutorial)\n\t\t     :io-tutorial (the io-tutorial)\n\t\t     :page-title \"Wall example - taking inputs from a form\"\n\t\t     :resources (list \"gwl-patches.lisp\"\"wall.lisp\" \"wall-example-form.lisp\"))\n   \n   (building-example-file :type 'building-example-file\n\t\t      :pass-down (page-objects)\n\t\t      :publish-prefix *publish-prefix*\n\t\t      :page 10\n\t\t      :getting-started-tutorial (the getting-started-tutorial)\n\t\t      :io-tutorial (the io-tutorial)\n\t\t      :page-title \"Wall example - taking inputs from a file\"\n\t\t      :resources (list \"gwl-patches.lisp\"\"building-application-file.lisp\" \"building-bom-input-output.lisp\" \"building-input.txt\")))\n   )\n   \n\t       \n   \n  \n\n;;(publish-gwl-app \"/t6\" \"training-6::assembly\")\n\n;;(defparameter *t6-home*\n;;  (merge-pathnames \"../\" (make-pathname :name nil :type nil :defaults (glisp:source-pathname))))\n\n;;(gwl::publish-directory :prefix (format nil \"/~a-images\" *publish-prefix*)\n;;\t\t\t:destination (namestring (merge-pathnames \"images/\"  *t6-home*)))\n\n;;(gwl::publish-directory :prefix (format nil \"/~a-resources\" *publish-prefix*)\n;;\t\t\t:destination (namestring (merge-pathnames \"resources/source/\" *t6-home*)))\n;;(gwl::publish-directory :prefix (format nil \"/~a-resource-images\" *publish-prefix*)\n;;\t\t\t:destination (namestring (merge-pathnames \"resources/images/\" *t6-home*)))\n;;\n;;(gwl::publish-file :path \"/style.css\"\n;;\t\t   :file (namestring (merge-pathnames \"css/style.css\" *t6-home*)))\n\n\n\n\n\n\n\n\n\n\n",
    "metadata": {
      "source": "gornschool-training/t6/source/assembly.lisp",
      "file_name": "assembly.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_6_object_definition",
      "chunk_id": 1,
      "section": "nil"
    },
    "id": "fae0d73b7c2829137534404099cffd02"
  },
  {
    "text": "(in-package :training-6)\n\n",
    "metadata": {
      "source": "gornschool-training/t6/source/displaying-graphics.lisp",
      "file_name": "displaying-graphics.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_6_object_definition",
      "chunk_id": 0,
      "section": "header"
    },
    "id": "c323ca3f124075facd8a1fcbe327683e"
  },
  {
    "text": "(define-object displaying-graphics (base-training-sheet)\n  :computed-slots\n  ((:body-content (with-cl-who-string()\n\t\t   (:div :class \"main-page-container\"\n\t\t\t (:div :class \"main-page-item\"\n\t\t\t       (:div :class \"grid-container-2-650px\"\n\t\t\t\t     (:div :class \"grid-item\")\n\t\t\t\t     (:p \"We're still working on this, should be available soon!\"))))))))\n",
    "metadata": {
      "source": "gornschool-training/t6/source/displaying-graphics.lisp",
      "file_name": "displaying-graphics.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_6_object_definition",
      "chunk_id": 0,
      "section": "displaying-graphics"
    },
    "id": "c323ca3f124075facd8a1fcbe327683e"
  },
  {
    "text": "(in-package :training-6)\n\n",
    "metadata": {
      "source": "gornschool-training/t6/source/using-form-controls.lisp",
      "file_name": "using-form-controls.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_6_object_definition",
      "chunk_id": 0,
      "section": "header"
    },
    "id": "9d1890fe0d9c98576a9512ac3a01cb44"
  },
  {
    "text": "(define-object using-form-controls (base-training-sheet)\n\n  :computed-slots\n  ((index-words (list \"error\" \"failed-value\" \"html-string\" \"form control validation\" \"restore-defaults!\" \"Reset a form control\" \"form-control\"))\n\n   (code-1 (list \"",
    "metadata": {
      "source": "gornschool-training/t6/source/using-form-controls.lisp",
      "file_name": "using-form-controls.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_6_object_definition",
      "chunk_id": 0,
      "section": "using-form-controls"
    },
    "id": "9d1890fe0d9c98576a9512ac3a01cb44"
  },
  {
    "text": "(define-object form-control-layout (base-html-page)\"\n\t\t \"\"\n\t\t \" :computed-slots\"\n\t\t \" ((additional-header-content (with-lhtml-string()\"\n\t\t \"                                ((:link :rel \\\"stylesheet\\\" :href \\\"/style.css\\\"))))\"\n\t\t \"\"\n\t\t \"  (body (with-lhtml-string ()\"\n\t\t \"                      (when gwl:*developing?* (str (the development-links)))\"\n\t\t \"                      (:h3 \\\"Just using the form-control message\\\")\"\n\t\t \"                      (str (the fc-1 form-control))\"\n\t\t \"                      (:h3 \\\"Using :prompt and form-control in my own table layout\\\")\"\n\t\t \"                      (:table (:tr (:td (str (the fc-2 prompt)))\"\n\t\t \"                                   (:td (str (the fc-2 form-control)))))\"\n\t\t \"                      (:h3 \\\"Using html-string (defaulting to :layout-position :as-div)\\\")\"\n\t\t \"                      (str (the fc-3 html-string))\"\n\t\t \"                      (:h3 \\\"Using other :layout-position\\\")\"\n\t\t \"                      (str (the fc-4 html-string))\"\n\t\t \"                      (:br)\"\n\t\t \"                      (str (the fc-5 html-string)))))\"\n\t\t \" :objects\"\n\t\t \" ((fc-1 :type 'text-form-control\"\n\t\t \"        :size 12\"\n\t\t \"        :default nil)\"\n\t\t \"  (fc-2 :type 'text-form-control\"\n\t\t \"        :size 12\"\n\t\t \"        :prompt \\\"My form control\\\"\"\n\t\t \"        :default nil)\"\n\t\t \"  (fc-3 :type 'text-form-control\"\n\t\t \"        :size 12\"\n\t\t \"        :prompt \\\"My form control with html-string\\\"\"\n\t\t \"        :default nil)\"\n\t\t \"  (fc-4 :type 'text-form-control\"\n\t\t \"        :size 12\"\n\t\t \"        :prompt \\\"Label display #1 - prepended label\\\"\"\n\t\t \"        :default nil\"\n\t\t \"        :label-position :prepend)\"\n\t\t \"  (fc-5 :type 'text-form-control\"\n\t\t \"        :size 12\"\n\t\t \"        :prompt \\\"Label display #2 - appended label\\\"\"\n\t\t \"        :default nil\"\n\t\t \"        :label-position :append)))\"))\n\n   (repl-1 (list (list :prompt \"GWL-USER\"\n\t\t       :command (list \"(make-self 'menu-form-control\"\n\t\t\t\t      \":size 1\"\n\t\t\t\t      \":choice-list (list \\\"Peter\\\" \\\"Paul\\\" \\\"John\\\")\"\n\t\t\t\t      \":default \\\"Peter\\\")\")\n\t\t       :output \"#<MENU-FORM-CONTROL #x2104C2296D>\")\n\t\t (list :prompt \"GWL-USER\"\n\t\t       :command \"(the form-control)\"\n\t\t       :output (list \"\\\"\"\n\t\t\t\t     \"<select name=\\\"TklM\\\" id=\\\"TklM\\\" size=\\\"1\\\">\"\n\t\t\t\t     \"   <option value=\\\"Peter\\\" selected=\\\"selected\\\">Peter</option>\"\n\t\t\t\t     \"   <option value=\\\"Paul\\\">Paul</option>\"\n\t\t\t\t     \"   <option value=\\\"John\\\">John</option>\"\n                                     \"</select>\\\"\"))\n\t\t (list :prompt \"GWL-USER\"\n\t\t       :command \"(the value)\"\n\t\t       :output \"\\\"Peter\\\"\")))\n   (repl-2 (list (list :prompt \"GWL-USER\"\n\t\t       :command (list \"(make-self 'menu-form-control\"\n\t\t\t\t      \":size 1\"\n\t\t\t\t      \":choice-plist (list :name-1 \\\"Peter\\\" \"\n\t\t\t\t      \"                    :name-2 \\\"Paul\\\" \"\n\t\t\t\t      \"                    :name-3 \\\"John\\\")\"\n\t\t\t\t      \":default \\\"Peter\\\")\")\n\t\t       :output \"#<MENU-FORM-CONTROL #x2104C2296D>\")\n\t\t (list :prompt \"GWL-USER\"\n\t\t       :command \"(the form-control)\"\n\t\t       :output (list \"\\\"\"\n\t\t\t\t     \"<select name=\\\"TklM\\\" id=\\\"TklM\\\" size=\\\"1\\\">\"\n\t\t\t\t     \"   <option value=\\\":NAME-1\\\" selected=\\\"selected\\\">Peter</option>\"\n\t\t\t\t     \"   <option value=\\\":NAME-2\\\">Paul</option>\"\n\t\t\t\t     \"   <option value=\\\":NAME-3\\\">John</option>\"\n                                     \"</select>\\\"\"))\n\t\t (list :prompt \"GWL-USER\"\n\t\t       :command \"(the value)\"\n\t\t       :output \":NAME-1\")))\n   \n   (code-2 (list \"",
    "metadata": {
      "source": "gornschool-training/t6/source/using-form-controls.lisp",
      "file_name": "using-form-controls.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_6_object_definition",
      "chunk_id": 1,
      "section": "form-control-layout"
    },
    "id": "f031e7b631d3fd8f1f7927de6d3167f5"
  },
  {
    "text": "(define-object form-control-validation (base-html-page)\"\n\t\t \" :computed-slots\"\n\t\t \" ((main-sheet-body (with-lhtml-string ()\"\n\t\t \"                       (when gwl:*developing?* (str (the development-links)))\"\n\t\t \"                       (:h3 \\\"Form control validation\\\")\"\n\t\t \"                       (str (the fc-section main-div)))))\"\n\t\t \" :objects\"\n\t\t \" ((fc-section :type 'sheet-section\"\n\t\t \"              :inner-html (with-lhtml-string ()\"\n\t\t \"                               (:p (str (the number-fc html-string)))\"\n\t\t \"                               (when (the number-fc value)\"\n\t\t \"                                   (htm (:p (fmt \\\"the number value is ~a\\\"\"\n\t\t \"                                                (the number-fc value)))))\"\n\t\t \"                               (when (the number-fc error)\"\n\t\t \"                                   (html (:p (fmt \\\"error is ~a, failed value is ~a\\\"\"\n\t\t \"                                                (the number-fc error)\"\n\t\t \"                                                (the number-fc failed-value)))))))\"\n\t\t \"\"\n\t\t \" (number-fc :type 'number-form-control\"\n\t\t \"            :default nil\"\n\t\t \"            :size 12\"\n\t\t \"            :ajax-submit-on-change? t\"\n\t\t \"            :validation-function #'(lambda(input)\"\n\t\t \"                                       (cond ((or (<= input 50) (>= input 60))\"\n\t\t \"                                              (list :validated-value input\"\n\t\t \"                                                    :error :value-out-of-range))\"\n\t\t \"                                             (T T))))))\"))\n\n   \n   (body-content (with-lhtml-string ()\n\t\t   (:div :class \"main-page-container\"\n\t\t\t (:div :class \"main-page-item\"\n\t\t\t       (:div :class \"grid-container-2-650px\"\n\t\t\t\t     (:div :class \"grid-item\"\n\t\t\t\t\t   (:p \"html defines a number of input types which are used to gather inputs from users. In GendL, each input type is called a form control. Form Controls are implemented as objects. The following table shows the most commonly used html form types and the associated gendL object\")\n\t\t\t\t\t   (:table :border 1 :border-style \"solid\"\n\t\t\t\t\t     (:tr (:th \"html type\") (:th \"GendL object\"))\n\t\t\t\t\t     (:tr (:td (esc \"<input type=\\\"text\\\">\"))(:td \"text-form-control\"))\n\t\t\t\t\t     (:tr (:td (esc \"<input type=\\\"number\\\">\"))(:td \"number-form-control\"))\n\t\t\t\t\t     (:tr (:td (esc \"<input type=\\\"password\\\">\"))(:td \"password-form-control\"))\n\t\t\t\t\t     (:tr (:td (esc \"<input type=\\\"checkbox\\\">\"))(:td \"checkbox-form-control\"))\n\t\t\t\t\t     (:tr (:td (esc \"<input type=\\\"radio\\\">\"))(:td \"radio-form-control\"))\n\t\t\t\t\t     (:tr (:td (esc \"<select>\")) (:td \"menu-form-control\")))\n\t\t\t\t\t   (:h3 \"Displaying a form control\")\n\t\t\t\t\t   (:p \"Once a form control object has been created, there are a number of ways to display it in a web form\"\n\t\t\t\t\t       (:ul (:li \"Use the form control objects \"\n\t\t\t\t\t\t\t (:span :class \"general-keyword\" \":form-control\")\" message. This evaluates to the basic html string required for the form control\")\n\t\t\t\t\t\t\t     \n\t\t\t\t\t\t    (:li \"Define a \"(:span :class \"object-keyword\" \":prompt\")\" input for the form control object and use the form control objects \"\n\t\t\t\t\t\t\t (:span :class \"general-keyword\" \":prompt\")\" and \"\n\t\t\t\t\t\t\t (:span :class \"general-keyword\" \":form-control\")\" messages and do your own custom layout\")\n\t\t\t\t\t\t    (:li \"Define a \"(:span :class \"object-keyword\" \":prompt\")\" input for the form control object and use the form control objects \"\n\t\t\t\t\t\t\t (:span :class \"general-keyword\" \":html-string\")\" message to display a label and the form control html\")\n\t\t\t\t\t\t    (:li \"Define a \"\n\t\t\t\t\t\t\t (:span :class \"object-keyword\" \":layout-position\")\" input for the form control object to give more control over where the label is positioned in the html-string \")\n\t\t\t\t\t\t    )))\n\t\t\t\t\t \n\t\t\t\t     (:div :class \"grid-item\")\n\t\t\t\t     (:div :class \"grid-item\"\n\t\t\t\t\t   (str (code-example (the code-1))))\n\t\t\t\t     (:div :class \"grid-item\"\n\t\t\t\t\t   (:image :src (format nil \"/~a-images/fc-display.png\" (the publish-prefix))\n\t\t\t\t\t\t   :style \"border: 2px solid; margin: 5px 0 0 3% ;width: auto; height: 300px;\" ))\n\t\t\t\t     (:div :class \"grid-item\"\n\t\t\t\t\t   (:h3 \"Form control inputs\")\n\t\t\t\t\t   (:p \"Form controls can take a large number of inputs to provide the desired control. YADD provides a comprehensive guide to these inputs (GWL..base-form-control). We won't cover them all here, but the most common are\")\n\t\t\t\t\t   (:p (:ul (:li (:span :class \"object-keyword\" \":default\")\" (required) - the default value for the form control\")\n\t\t\t\t\t\t    (:li (:span :class \"object-keyword\" \":prompt\")\" (optional) - the label associated with the form control\")\n\t\t\t\t\t\t    (:li (:span :class \"object-keyword\" \":layout-position\")\" (optional) - control over where the label is presented in the html-string message\")\n\t\t\t\t\t\t    (:li (:span :class \"object-keyword\" \":size\")\" (optional) - for text, number and password form controls it defines the length of the input box. For menu form controls it defines the number of options displayed\")\n\t\t\t\t\t\t    (:li (:span :class \"object-keyword\" \":choice-list\")\" (optional) - for menu and radio form controls, defines the options to be displayed. When selected the displayed value is the value returned by the form control\")\n\t\t\t\t\t\t    (:li (:span :class \"object-keyword\" \":choice-plist\")\" (optional) - for menu and radio form controls, defines the options to be displayed (value element of the plist). In contrast to choice-list, when an option is selected the form controls returns the plist keyword associated with the selected value\"))))\n\t\t\t\t     (:div :class \"grid-item\")\n\t\t\t\t     (:div :class \"grid-item\" (str (repl-example (the repl-1))))\n\t\t\t\t     (:div :class \"grid-item\" (str (repl-example (the repl-2))))\n\t\t\t\t     (:div :class \"grid-item\"\n\t\t\t\t\t   (:h3 \"Returning values from Form Controls\")\n\t\t\t\t\t   (:p \"Every form control support the \"\n\t\t\t\t\t       (:span :class \"general-keyword\" \":value\")\" message, which is the selected or entered value for the form control following form submission\")\n\t\t\t\t\t   (:p \"Note that for text form controls, if the form control is empty on submission then NIL will be returned if the \"\n\t\t\t\t\t       (:span :class \"object-keyword\" \":nullify-empty-string?\")\" input to the form control is T, otherwise an empty string will be returned\")\n\t\t\t\t\t\t      \n\t\t\t\t\t   (:h3 \"Capturing a form control value\")\n\t\t\t\t\t   (:p \"Any form containing form controls needs to be submitted in order for the form control entered value to be captured. The simplest, and reccomended, way to do this, is to use the \"\n\t\t\t\t\t       (:span :class \"object-keyword\" \":ajax-submit-on-change?\")\" input to the form control. With this set to T whenever the form control value is changed an AJAX update will be performed to submit the form and capture the value. We'll cover using AJAX in the next topic.\")\n\t\t\t\t\t\t\n\t\t\t\t\t   (:h3 \"Resetting a form control\")\n\t\t\t\t\t   (:p \"Every form constrol support a function \"(:span :class \"function\" \"restore-defaults!\")\" which sets \"\n\t\t\t\t\t       (:span :class \"object-keyword\" \":value\")\", \"\n\t\t\t\t\t       (:span :class \"object-keyword\" \":failed-value\")\" and \"\n\t\t\t\t\t       (:span :class \"object-keyword\" \":error\")\" back to default values\")\n\t\t\t\t\t   (:h3 \"Validating inputs\")\n\t\t\t\t\t   (:p \"All form controls have a \"\n\t\t\t\t\t       (:span :class \"object-keyword\" \":validation-function\")\" input. This function defines the rule(s) against which the provided input is tested to determine if it is valid. Any function may be used, but quite often a lambda function is a good solution as the validation is generally specific to the form control and its applcation. The function return values are used to determine what happens with the input\"\n\t\t\t\t\t       (:ul (:li \"If it returns nil, the input is considered invalid and the \"\n\t\t\t\t\t\t\t (:span :class \"slot\" \"error\")\" slot is set to \"\n\t\t\t\t\t\t\t (:span :class \"general-keyword\" \":unspecified-validation-fail\"))\n\t\t\t\t\t\t    (:li \"It may return a plist with keys \"\n\t\t\t\t\t\t\t (:span :class \"general-keyword\" \":validated-value\")\" and \"\n\t\t\t\t\t\t\t (:span :class \"general-keyword\" \":error\")\". If \"\n\t\t\t\t\t\t\t (:span :class \"general-keyword\" \":error\")\" is non-nil this signifies validation has failed and the error value will be appended to \"\n\t\t\t\t\t\t\t (:span :class \"slot\" \"html-string\"))\n\t\t\t\t\t\t    (:li \"If any other value is returned, the input is considered valid\")))\n\t\t\t\t\t   )\n\t\t\t\t     (:div :class \"grid-item\")\n\t\t\t\t     (:div :class \"grid-item\"\n\t\t\t\t\t   (str (code-example (the code-2))))\n\t\t\t\t     (:div :class \"grid-item\"\n\t\t\t\t\t   (:image :src (format nil \"/~a-images/valid-fc.png\" (the publish-prefix))\n\t\t\t\t\t\t   :style \"border: 2px solid; margin: 5px 0 0 3% ;width: auto; height: 200px;\" )\n\t\t\t\t\t   (:br)\n\t\t\t\t\t   (:image :src (format nil \"/~a-images/invalid-fc.png\" (the publish-prefix))\n\t\t\t\t\t\t   :style \"border: 2px solid; margin: 5px 0 0 3% ;width: auto; height: 200px;\" ))\n\t\t\t\t     (:div :class \"grid-item\"\n\t\t\t\t\t   (:p \"Note that in the invalid entry, the text formatted red is output (and styled) as part of \"\n\t\t\t\t\t       (:span :class \"slot\" \"html-string\")\", whilst the strings below it directly access the \"\n\t\t\t\t\t       (:span :class \"slot\" \"value\")\", \"\n\t\t\t\t\t       (:span :class \"slot\" \"error\")\" and \"\n\t\t\t\t\t       (:span :class \"slot\" \"failed-value\")\" slots\"))))\n\t\t\t\t\t\t   \n\t\t\t     \n\t\t\t ((:div :class \"main-page-item\")\n\t\t\t  (:h2 \"Resources\")\n\t\t\t  (str (the resource-links))))))\n  ))\n\n",
    "metadata": {
      "source": "gornschool-training/t6/source/using-form-controls.lisp",
      "file_name": "using-form-controls.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_6_object_definition",
      "chunk_id": 2,
      "section": "form-control-validation"
    },
    "id": "3126bc69c671904d8595deb45e4e773f"
  },
  {
    "text": "(in-package :training-6)\n\n",
    "metadata": {
      "source": "gornschool-training/t6/source/building-example-file.lisp",
      "file_name": "building-example-file.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_6_object_definition",
      "chunk_id": 0,
      "section": "header"
    },
    "id": "a69f3d3822741e222a9c67b975243cb0"
  },
  {
    "text": "(define-object building-example-file (base-training-sheet)\n  :input-slots\n  ((getting-started-tutorial nil)\n   (io-tutorial nil))\n  :computed-slots\n  ((getting-started-title (if (the getting-started-tutorial) (the getting-started-tutorial tutorial-name) \"Getting Started with GendL\"))\n   (getting-started-url (when (the getting-started-tutorial) (the getting-started-tutorial url)))\n   (io-title (if (the io-tutorial) (the io-tutorial tutorial-name) \"Reading From and Writing To Files\"))\n   (io-url (when (the io-tutorial) (the io-tutorial url)))\n\n   (code-1 (list \"(in-package :gwl-user)\"\n\t\t \"\"\n\t\t \" ",
    "metadata": {
      "source": "gornschool-training/t6/source/building-example-file.lisp",
      "file_name": "building-example-file.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_6_object_definition",
      "chunk_id": 0,
      "section": "building-example-file"
    },
    "id": "a69f3d3822741e222a9c67b975243cb0"
  },
  {
    "text": "(define-object building-application-file (base-ajax-sheet)\"\n\t\t \"\"\n\t\t \"  :computed-slots\"\n\t\t \"  ((uploaded-path \\\"\\\" :settable)\"\n\t\t \"   (main-sheet-body (with-cl-who-string ()\"\n\t\t \"               (str (the development-links))\"\n\t\t \"               (when (= (length (the uploaded-path)) 0)\"\n\t\t \"                  (htm (with-html-form (:multipart? t :cl-who? t)\"\n\t\t \"                            (:table \"\n\t\t \"                              (:tr \"\n\t\t \"                                (:td\"\n\t\t \"                                  (:input :type \\\"file\\\" :name :uploaded-path)))\"\n\t\t \"                                    (:tr (:td (:input :type \\\"submit\\\" :name \\\"upload\\\" :value \\\"Upload\\\")))))))))\"\n\t\t \")\"\n\t\t \"\"\n\t\t \" :objects\"\n\t\t \" ((building :type 'building\"\n\t\t \"            :input-filename (when (> (length (the uploaded-path)) 1) (the uploaded-path)))\"))\n\n  (code-2 (list \"",
    "metadata": {
      "source": "gornschool-training/t6/source/building-example-file.lisp",
      "file_name": "building-example-file.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_6_object_definition",
      "chunk_id": 1,
      "section": "building-application-file"
    },
    "id": "783bd7c8bee2eb71d84f7bce40b20a4d"
  },
  {
    "text": "(define-object building-application-file (base-ajax-sheet)\"\n\t\t\"\"\n\t\t\" :computed-slots\"\n\t\t\" ((uploaded-path \\\"\\\" :settable)\"\n\t\t\"  (output-path (merge-pathnames \\\"building-output.txt\\\" (the uploaded-path)))\"\n\t\t\"  (main-sheet-body (with-cl-who-string ()\"\n\t\t\"                     (str (the development-links))\"\n\t\t\"                     (when (= (length (the uploaded-path)) 0)\"\n\t\t\"                        (htm (with-html-form (:multipart? t :cl-who? t)\"\n\t\t\"                            (:table\"\n\t\t\"                              (:tr\"\n\t\t\"                                (:td \"\n\t\t\"                                  (:input :type \\\"file\\\" :name :uploaded-path)))\"\n\t\t\"                              (:tr \"\n\t\t\"                                (:td \"\n\t\t\"                                  (:input :type \\\"submit\\\" :name \\\"upload\\\" :value \\\"Upload\\\")))))))\"\n\t\t\"                     (when (> (length (the uploaded-path)) 1)\"\n\t\t\"                         (htm (:p \\\"Click \\\"(:a :href (the output-url) \\\"here\\\") \"\n\"                                                  \\\" to download the output\\\")))))\"\n\t\t\"\"\n\t\t\"   (output-url (let ((url \\\"/output.txt\\\"))\"\n\t\t\"                 (the building write-bom-file!)\"\n\t\t\"                 (gwl::unpublish url)\"\n\t\t\"                 (gwl::publish-file :path url\"\n\t\t\"                                    :file (the output-path))\"\n\t\t\"                 url)))\"\n\t\t\"\"\n\t\t\" :objects\"\n\t\t\" ((building :type 'building\"\n\t\t\"            :input-filename (when (> (length (the uploaded-path)) 1) (the uploaded-path))\"\n\t\t\"            :output-filename (when (> (length (the uploaded-path)) 1) (the output-path)) )))\"))\n\t     \n   (body-content (with-cl-who-string()\n\t\t   (:div :class \"main-page-container\"\n\t\t\t (:div :class \"main-page-item\"\n\t\t\t       (:div :class \"grid-container-2-650px\"\n\t\t\t\t     (:div :class \"grid-item\")\n\t\t\t\t     (:p \"In the tutorial \" (if (the getting-started-url)\n\t\t\t\t\t\t\t\t(htm (:a :href (the getting-started-url) (str (the getting-started-title))))\n\t\t \t\t\t\t\t\t(htm (str (the getting-started-title))))\n\t\t\t\t\t \" we developed an example application to build a model of a building. In that application, all inputs were provided as \"\n\t\t\t\t\t (:span :class \"keyword\" \"input-slots\")\" with default values. We then extended that in the tutorial \"\n\t\t\t\t\t (if (the io-url)\n\t\t\t\t\t     (htm (:a :href (the io-url) (str (the io-title))))\n\t\t\t\t\t     (htm (str (the io-title))))\n\t\t\t\t\t \" to take inputs from a file and deliver the output as a file. In this topic, we'll use the building application and extend it to include a web based front end to upload a file via a form.\")\n\t\t\t\t     (:p \"The basic design concept is to have a web page as a top level object, which provides a form to upload an input file. The building application based on file inputs will be a child object of the file upload form, and once the file has been uploaded it will be passed to te building application as an inout. An output file will be written and a link to that file displayed on the file upload page\")\n\t\t\t\t     (:p \"The first step is to create a file upload form and incorporate the building application as a child object\")\n\t\t\t\t     (str (code-example (the code-1)))\n\t\t\t\t     (:p \"Not that for expediency, the building object has been moved to the gwl-user package for this example\")\n\t\t\t\t     (:p \"To generate the output, we need to run the write-bom-file! function in the bulding object, following which we need to publish that file and provide a link to it on the web page. As we will demand the url of the published file, we can use side effecting to run the file generation and publishing, rather than running them as a function. To do this we use a computed-slot output-url and the body form of the let macro to evaulate the file write and publish functions sequentially. We've also defined the output filename, such that it will be in the same directory as the uploaded file, but with a different name\"))))))))\n",
    "metadata": {
      "source": "gornschool-training/t6/source/building-example-file.lisp",
      "file_name": "building-example-file.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_6_object_definition",
      "chunk_id": 2,
      "section": "building-application-file"
    },
    "id": "6e64f846297b93805cdb08e10b4c6189"
  },
  {
    "text": "(in-package :training-6)\n\n",
    "metadata": {
      "source": "gornschool-training/t6/source/file-io-2.lisp",
      "file_name": "file-io-2.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_6_object_definition",
      "chunk_id": 0,
      "section": "header"
    },
    "id": "b1cae3e23db0bad7133bc80df9f3f849"
  },
  {
    "text": "(define-object file-io-2 (base-training-sheet)\n\n\n  :computed-slots\n  ((index-words (list \"after-set!\" \"upload\" \":enctype\" \"multipart/form-data\" \"with-form-string\" \"with-lhtml-string\"))\n   \n   (code-1 (list \"",
    "metadata": {
      "source": "gornschool-training/t6/source/file-io-2.lisp",
      "file_name": "file-io-2.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_6_object_definition",
      "chunk_id": 0,
      "section": "file-io-2"
    },
    "id": "b1cae3e23db0bad7133bc80df9f3f849"
  },
  {
    "text": "(define-object file-upload-1 (base-html-page)\"\n\t\t \"  :computed-slots\"\n\t\t \"  ((uploaded-path  \\\" \\\" :settable)\"\n\t\t \"   (body\"\n\t\t \"     (with-lhtml-string ()\"\n\t\t \"        (str (the development-links))\"\n\t\t \"        (str (with-form-string (:enctype  \\\"multipart/form-data \\\")\"\n\t\t \"           (:table (:tr (:td (:input :type  \\\"file \\\" :name :uploaded-path :value (the uploaded-path))))\"\n\t\t \"                   (:tr (:td (:input :type  \\\"submit \\\" :name  \\\"upload \\\" :value  \\\"Upload \\\"))\"\n                 \"                   (:td (str (the uploaded-path)))))))))))\"))\n\n   (code-2 (list \"",
    "metadata": {
      "source": "gornschool-training/t6/source/file-io-2.lisp",
      "file_name": "file-io-2.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_6_object_definition",
      "chunk_id": 1,
      "section": "file-upload-1"
    },
    "id": "b9a14a8c0da59aaf8f723301b2fd4d9c"
  },
  {
    "text": "(define-object file-upload-2 (base-html-page)\"\n\t\t \"  :computed-slots\"\n\t\t \"  ((uploaded-path  \\\" \\\" :settable)\"\n\t\t \"   (body\"\n\t\t \"     (with-lhtml-string ()\"\n\t\t \"        (str (the development-links))\"\n\t\t \"        (when (= (length (the uploaded-path)) 0)\"\n\t\t \"          (htm (str (with-form-string (:enctype  \\\"multipart/form-data \\\")\"\n\t\t \"             (:table (:tr (:td (:input :type  \\\"file \\\" :name :uploaded-path :value (the uploaded-path))))\"\n\t\t \"                     (:tr (:td (:input :type  \\\"submit \\\" :name  \\\"upload \\\" :value  \\\"Upload \\\"))))))))\"\n\t\t \"        (when (> (length (the uploaded-path)) 0)\"\n\t\t \"          (htm (str (fmt  \\\"The file has been uploaded to ~a\\\" (the uploaded-path)))\"\n\t\t \"               (str (with-form-string (:enctype \\\"multipart/form-data\\\")\"\n\t\t \"                          (:input :type \\\"submit\\\" :name \\\"reset\\\" :value \\\"Reset Form\\\")))))))\"\n\t\t \" :functions\"\n\t\t \"  ((after-set! ()\"\n\t\t \"            (when (member \\\"Reset Form\\\" (the query-plist) :test 'equalp)\"\n\t\t \"                 (when (probe-file (the uploaded-path)) (delete-file (the uploaded-path)))\"\n\t\t \"                 (the (restore-slot-default! :uploaded-path ))))))\"))\n\n   (code-3 (list \"",
    "metadata": {
      "source": "gornschool-training/t6/source/file-io-2.lisp",
      "file_name": "file-io-2.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_6_object_definition",
      "chunk_id": 2,
      "section": "file-upload-2"
    },
    "id": "cfdd25fe603498370ba25152645e96e3"
  },
  {
    "text": "(define-object file-upload-3 (base-html-page)\"\n\t\t \"  :computed-slots\"\n\t\t \"  ((uploaded-path  \\\" \\\" :settable)\"\n\t\t \"   (body\"\n\t\t \"     (with-lhtml-string ()\"\n\t\t \"        (str (the development-links))\"\n\t\t \"        (when (= (length (the uploaded-path)) 0)\"\n\t\t \"          (htm (str (with-form-string (:enctype  \\\"multipart/form-data \\\")\"\n\t\t \"             (:table (:tr (:td (:input :type  \\\"file \\\" :name :uploaded-path :value (the uploaded-path))))\"\n\t\t \"                     (:tr (:td (:input :type  \\\"submit \\\" :name  \\\"upload \\\" :value  \\\"Upload \\\"))))))))\"\n\t\t \"        (when (> (length (the uploaded-path)) 0)\"\n\t\t \"          (htm (str (fmt  \\\"The file has been uploaded to ~a\\\" (the uploaded-path)))\"\n\t\t \"               (:p \\\"The file contents are\\\")\"\n\t\t \"                (:table :border 1 (:tr (:td :colspan 2 (str (first (first (the file-content))))))\"\n\t\t \"                     (dolist (line (cdr (the file-content)))\"\n\t\t \"                          (htm (:tr (:td (str (first line)))\"\n\t\t \"                                    (:td (str (second line)))))))\"\n\t\t \"               (str (with-form-string (:enctype \\\"multipart/form-data\\\")\"\n\t\t \"                          (:input :type \\\"submit\\\" :name \\\"reset\\\" :value \\\"Reset Form\\\")))))))\"\n\t\t \" :functions\"\n\t\t \"  ((after-set! ()\"\n\t\t \"            (when (member \\\"Reset Form\\\" (the query-plist) :test 'equalp)\"\n\t\t \"                 (when (probe-file (the uploaded-path)) (delete-file (the uploaded-path)))\"\n\t\t \"                 (the (restore-slot-default! :uploaded-path ))))))\"))\n                                    \n   \n   (body-content (with-cl-who-string ()\n\t\t   (:div :class \"main-page-container\"\n\t\t\t (:div :class \"main-page-item\"\n\t\t\t       (:div :class \"grid-container-2-650px\"\n\t\t\t\t     (:div :class \"grid-item\"\n\t\t\t\t\t   (:h3 \"Uploading files\")\n\t\t\t\t\t   (:p \"To upload a file we need to submit a form, containing the file, to the server. This is a traditional multipart form submission.\")\n\t\t\t\t\t   (:p \"Gendl provides the \"\n\t\t\t\t\t       (:span :class \"macro\" \"with-form-string\") \" macro to create a form. When using this macro for file uploads we must specify the keyword argunemt \"(:span :class \"general-keyword\" \"enctype\") \" with a value of \"\n\t\t\t\t\t       (:em (:b \"multipart/form-data\")) \" to ensure the file is ransmited to the server correctly\")\n\t\t\t\t\t   (:p \"Within the body of the form we need two \"\n\t\t\t\t\t       (:em (:b \"input\")) \" tags. \"\n\t\t\t\t\t       (:ul\n\t\t\t\t\t\t(:li \"The first is of type file which gives us a Browse button to enable a file to be selected. Within this tag we also need to assign a :name, the value of which must correspond with the name of a :settable :computed-slot (its symbol name, so preceeded witha : character). The default value of that slot shoud be an empty string\")\n\n\t\t\t\t\t\t(:li \"The second is a standard submit button, which submits the form\")))\n\t\t\t\t\t   (str (code-example (the code-1)))\n\t\t\t\t\t   (:p \"In the above example we also include an output of the value of \"\n\t\t\t\t\t       (:span :class \"slot\" \"uploaded-path\") \" The value of this slot is automatically set to the location of the uploaded file \"\n\t\t\t\t\t       (:b \"on the server\") \" when the form is submitted\")\n\t\t\t\t\t   \n\t\t\t\t\t   (:p \"Screenshot on opening the form \")\n\t\t\t\t\t   (:image :src (format nil \"/~a-images/upload-1.png\" (the publish-prefix))\n\t\t\t\t\t\t   :style \"border: 2px solid; margin: 5px 0 0 3% ;width: auto; height: 160px;\" )\n\t\t   \n\t\t   \n\t\t\t\t\t   (:p \"Once a file has been selected the \"\n\t\t\t\t\t       (:em (:b \"no file selected\")) \" text changes to the filename of the selected file. \")\n\t\t\t\t\t   (:p \"Screenshot after selecting the file, but before hitting \"\n\t\t\t\t\t       (:em (:b \"Upload\")))\n\t\t\t\t\t   (:image :src (format nil \"/~a-images/upload-1a.png\" (the publish-prefix))\n\t\t\t\t\t\t   :style \"border: 2px solid; margin: 5px 0 0 3% ;width: auto; height: 160px;\" )\n\t\t\t\t\t   (:p \"If \" (:em (:b \"Upload\")) \" is then clicked the file is uploaded to the server and the text alongside the Browse button will revert to \"\n\t\t\t\t\t       (:em (:b \"no file selected\")) \". As part of this upload, as well as transmitting the file to the server, the slot representing the server pathname to the file (in this case \"\n\t\t\t\t\t       (:span :class \"slot\" \":uploaded-path\") \") is set. One important thing to note: the default value for \"\n\t\t\t\t\t       (:span :class \"slot\" \"uploaded-path\")\" is set to an empty string, rather then nil. This is to ensure that when the \"\n\t\t\t\t\t       (:span :class \"slot\" \"uploaded-path\")\" value is set as part of the upload it is set to a string value and not a symbol - on Windows in particular with a drive letter followed by a \"\n\t\t\t\t\t       (:em (:b \":\"))\" character this will cause problems as Lisp will believe its a package...\")\n\t\t\t\t\t   (:image :src (format nil \"/~a-images/upload-1b.png\" (the publish-prefix))\n\t\t\t\t\t\t   :style \"border: 2px solid; margin: 5px 0 0 3% ;width: auto; height: 160px;\" )\n\t\t\t\t\t   (:p \"It is often useful to conditionalise the display of the Browse and Submit buttons depending on the value of the uploaded file slot and\npossibly present an alternative button which will reset the form to original values. The code below includes a \"\n\t\t\t\t\t       (:em (:b \"Reset\")) \" button to perform the reset. We use the \"\n\t\t\t\t\t       (:span :class \"function\" \"after-set!\")\" function, check what values are in the \"\n\t\t\t\t\t       (:span :class \"slot\" \"query-plist\")\" and if the value of this button \"\n\t\t\t\t\t       (:em (:b \"(\\\"Reset Form\\\")\")) \" is present firstly delete the uploaded file if it exists and then run the \"\n\t\t\t\t\t       (:span :class \"function\" \"restore-slot-default!\")\" function on \"\n\t\t\t\t\t       (:span :class \"slot\" \"upoaded-path\") )\n\t\t\t\t\t   (str (code-example (the code-2)))\n\t\t\t\t\t   \n\t\t\t\t\t   (:p \"Screenshot after hitting \"(:em (:b \"Upload\")))\n\t\t\t\t\t   (:image :src (format nil \"/~a-images/upload-2.png\" (the publish-prefix))\n\t\t\t\t\t\t   :style \"border: 2px solid; margin: 5px 0 0 3% ;width: auto; height: 130px;\" )\n\t\t\t\t\t   (:p \"Screenshot after hitting \"(:em (:b \"Reset Form\")))\n\t\t\t\t\t   (:image :src (format nil \"/~a-images/upload-3.png\" (the publish-prefix))\n\t\t\t\t\t\t   :style \"border: 2px solid; margin: 5px 0 0 3% ;width: auto; height: 130px;\" )\n\t\t\t\t\t   (:p \"Once the file has been uploaded to the server, it will generally need processing to access the data it contains. In the example below the uploaded file is processed as the page demands \"\n\t\t\t\t\t       (:span :class \"slot\" \"(the file-content)\")\" to be evaluated, but for more complex data processing we may use the \"\n\t\t\t\t\t       (:span :class \"function\" \"after-set!\")\" function, test for presence of the Upload Button value (\"(:em (:b \"Upload\"))\") in the \"(:span :class \"slot\" \"query-plist\")\" and initiate processing based on that. (Note that the function \"(:span :class \"function\" \"read-file\")\" is a custom function included in the resources file)\")\n\t\t\t\t\t   (str (code-example (the code-3)))\n\t\t\t\t\t   (:image :src (format nil \"/~a-images/upload-4.png\" (the publish-prefix))\n\t\t\t\t\t\t   :style \"border: 2px solid; margin: 5px 0 0 3% ;width: auto; height: 170px;\" ))))\n\t\t\t (:div :class \"main-page-item\"\n\t\t\t       (:h2 \"Resources\")\n\t\t\t       (str (the resource-links))))))))\n",
    "metadata": {
      "source": "gornschool-training/t6/source/file-io-2.lisp",
      "file_name": "file-io-2.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_6_object_definition",
      "chunk_id": 3,
      "section": "file-upload-3"
    },
    "id": "ea610063540df1a77af37fae2ca5e065"
  },
  {
    "text": "(in-package :training-6)\n\n",
    "metadata": {
      "source": "gornschool-training/t6/source/simple-html-page.lisp",
      "file_name": "simple-html-page.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_6_object_definition",
      "chunk_id": 0,
      "section": "header"
    },
    "id": "2123d892360f133b6afe44ddedaa94fc"
  },
  {
    "text": "(define-object simple-html-page (base-training-sheet)\n\n  :computed-slots\n  ((index-words (list \"with-lhtml-string\" \"gwl:*delevoping?*\" \"publish-gwl-app\" \"base-html-page\" \"merge-pathnames\"\n\t\t      \"gwl::publish-file\" \"publish-file\" \"gwl::publish-directory\" \"publish-directory\" \"CSS\" \"images\"\n\t\t      \"body\" \"additional-header-content\" \"development-links\"))\n\t\t\n   (code-1 (list\"(in-package :gwl-user)\"\n\t\t\"\"\n\t\t\"",
    "metadata": {
      "source": "gornschool-training/t6/source/simple-html-page.lisp",
      "file_name": "simple-html-page.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_6_object_definition",
      "chunk_id": 0,
      "section": "simple-html-page"
    },
    "id": "2123d892360f133b6afe44ddedaa94fc"
  },
  {
    "text": "(define-object sample-page (base-html-page)\"\n\t\t\"  :computed-slots\"\n\t\t\"   ((body \\\"My first web page\\\")))\"\n\t\t\"\"\n\t\t\"(publish-gwl-app \\\"/sample-page\\\" 'sample-page)\"))\n\n   (code-2 (list \"",
    "metadata": {
      "source": "gornschool-training/t6/source/simple-html-page.lisp",
      "file_name": "simple-html-page.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_6_object_definition",
      "chunk_id": 1,
      "section": "sample-page"
    },
    "id": "c13936acc628c838ac48cb8d66bb4876"
  },
  {
    "text": "(define-object sample-html-page (base-html-page)\"\n\t\t \"  :computed-slots\"\n\t\t \"  ((body (with-lhtml-string ()\"\n\t\t \"                        (:table\"\n\t\t \"                            (:tr (:th \\\"Day\\\") (:th \\\"Number\\\"))\"\n\t\t \"                            (:tr (:td \\\"Sunday\\\") (:td \\\"1\\\"))\"\n\t\t \"                            (:tr (:td \\\"Monday\\\") (:td \\\"2\\\"))\"\n\t\t \"                            (:tr (:td \\\"Tuesday\\\") (:td \\\"3\\\"))\"\n\t\t \"                            (:tr (:td \\\"Wednesday\\\") (:td \\\"4\\\"))\"\n\t\t \"                            (:tr (:td \\\"Thursday\\\") (:td \\\"5\\\"))\"\n\t\t \"                            (:tr (:td \\\"Friday\\\") (:td \\\"6\\\"))\"\n\t\t \"                            (:tr (:td \\\"Saturday\\\") (:td \\\"7\\\")))))))\"\n\t\t \"\"\n\t\t \"(publish-gwl-app \\\"/sample-html-page\\\" 'sample-html-page)\"))\n\n   (code-3 (list \"",
    "metadata": {
      "source": "gornschool-training/t6/source/simple-html-page.lisp",
      "file_name": "simple-html-page.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_6_object_definition",
      "chunk_id": 2,
      "section": "sample-html-page"
    },
    "id": "a3a04e817b370728dc552e4e0d6ee32c"
  },
  {
    "text": "(define-object sample-inline-styled-html-page  (base-html-page)\"\n\t\t \"  :computed-slots\"\n\t\t \"  ((body (with-lhtml-string ()\"\n\t\t \"              (:table :style \\\"border-style: solid;\\\"\"\n\t\t \"                (:tr (:th \\\"Day\\\") (:th \\\"Number\\\"))\"\n\t\t \"                (:tr (:td \\\"Sunday\\\") (:td :style \\\"text-align: center;\\\" \\\"1\\\"))\"\n\t\t \"                (:tr (:td \\\"Monday\\\") (:td :style \\\"text-align: center;\\\" \\\"2\\\"))\"\n\t\t \"                (:tr (:td \\\"Tuesday\\\") (:td :style \\\"text-align: center;\\\" \\\"3\\\"))\"\n\t\t \"                (:tr (:td \\\"Wednesday\\\") (:td :style \\\"text-align: center;\\\" \\\"4\\\"))\"\n\t\t \"                (:tr (:td \\\"Thursday\\\") (:td :style \\\"text-align: center;\\\" \\\"5\\\"))\"\n\t\t \"                (:tr (:td \\\"Friday\\\") (:td :style \\\"text-align: center;\\\" \\\"6\\\"))\"\n\t\t \"                (:tr (:td \\\"Saturday\\\") (:td :style \\\"text-align: center;\\\" \\\"7\\\")))))))\"\n\t\t \"\"\n\t\t \"(publish-gwl-app \\\"/sample-inline-styled-html-page\\\" 'sample-inline-styled-html-page)\"))\n   (css-1 (list \"table {border-style: solid;}\"\n\t\t\"td {text-align: center;\"\n\t\t\"    font-size: 12px;}\"))\n\n   (code-4 (list \"(defparameter *home*\"\n\t\t \"(merge-pathnames \\\"../\\\" \"\n\t\t \"                  (make-pathname :name nil\" \n\t\t \"                                 :type nil\"\n\t\t \"                                 :defaults (glisp:source-pathname))))\"\n\t\t \"(gwl::publish-file :path \\\"/my-style.css\\\"\"\n\t\t \"                   :file (namestring (merge-pathnames \\\"css/my-style.css\\\" *home*)))\" ))\n   \n   (code-5 (list \"",
    "metadata": {
      "source": "gornschool-training/t6/source/simple-html-page.lisp",
      "file_name": "simple-html-page.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_6_object_definition",
      "chunk_id": 3,
      "section": "sample-inline-styled-html-page"
    },
    "id": "7befed8d8df76b3909d195dbcb925240"
  },
  {
    "text": "(define-object sample-external-styled-html-page (base-html-page)\"\n\t\t \"  :computed-slots\"\n\t\t \"  ((additional-header-content (with-lhtmlstring()\n\t\t\t\t                 ((:link :rel \\\"stylesheet\\\" :href \\\"/my-style.css\\\"))))\"\n\t\t \"   (main-sheet-body \"\n\t\t \"    (with-lhtml-string ()\"\n\t\t \"     (:table\"\n\t\t \"      (:tr (:th \\\"Day\\\") (:th \\\"Number\\\"))\"\n\t\t \"      (:tr (:td \\\"Sunday\\\") (:td \\\"1\\\"))\"\n\t\t \"      (:tr (:td \\\"Monday\\\") (:td \\\"2\\\"))\"\n\t\t \"      (:tr (:td \\\"Tuesday\\\") (:td \\\"3\\\"))\"\n\t\t \"      (:tr (:td \\\"Wednesday\\\") (:td \\\"4\\\"))\"\n\t\t \"      (:tr (:td \\\"Thursday\\\") (:td \\\"5\\\"))\"\n\t\t \"      (:tr (:td \\\"Friday\\\") (:td \\\"6\\\"))\"\n\t\t \"      (:tr (:td \\\"Saturday\\\") (:td \\\"7\\\")))))))\"\n\t\t \"\"\n\t\t \"(publish-gwl-app \\\"/sample-external-styled-html-page\\\" 'sample-external-styled-html-page)\"))\n\n   (code-6 (list \"(gwl::publish-directory :prefix \\\"/images\\\"\"\n\t\t \"                        :destination (namestring (merge-pathnames\"\n\t\t \"                                                     \\\"images/\\\"\"\n\t\t \"                                                     *home*)))\"))\n\n   \n   (code-7 (list \"",
    "metadata": {
      "source": "gornschool-training/t6/source/simple-html-page.lisp",
      "file_name": "simple-html-page.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_6_object_definition",
      "chunk_id": 4,
      "section": "sample-external-styled-html-page"
    },
    "id": "5bffdd7cfb4996abbd5c06a3c5731808"
  },
  {
    "text": "(define-object sample-image-html-page (base-html-page)\"\n\t\t \" :computed-slots\"\n\t\t \" ((additional-header-content (with-lhtml-string()\"\n\t\t \"                              (:link :rel \\\"stylesheet\\\" :href \\\"/my-style.css\\\")))\"\n\t\t \"  (body (with-lhtml-string ()\"\n\t\t \"              (:p \\\"The Genworks International Logo\\\")\"\n\t\t \"              (:img :src \\\"/images/logo.png\\\")))))\"\n\t\t \"\"\n\t\t \"(publish-gwl-app \\\"/sample-image-html-page\\\" 'sample-image-html-page)\"))\n   \n   (code-8 (list \"",
    "metadata": {
      "source": "gornschool-training/t6/source/simple-html-page.lisp",
      "file_name": "simple-html-page.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_6_object_definition",
      "chunk_id": 5,
      "section": "sample-image-html-page"
    },
    "id": "e5e946bd6e123490606503e49db115bf"
  },
  {
    "text": "(define-object sample-image-development-links (base-html-page)\"\n\t\t \" :computed-slots\"\n\t\t \" ((additional-header-content (with-lhtml-string()\"\n\t\t \"                              (:link :rel \\\"stylesheet\\\" :href \\\"/my-style.css\\\")))\"\n\t\t \"  (body (with-lhtml-string ()\"\n\t\t \"            (when gwl:*developing?* (str (the development-links)))\"\n\t\t \"              (:p \\\"The Genworks International Logo\\\")\"\n\t\t \"              (:img :src \\\"/images/logo.png\\\")))))\"\n\t\t \" \"\n                 \" (publish-gwl-app \\\"/sample-image-development-links\\\" 'sample-image-development-links)\"))\n\n   \n   (body-content (with-lhtml-string ()\n\t\t   (:div :class \"grid-container-2-650px\"\n\t\t\t (:div :class \"grid-item\"\n\t\t\t       (:p \"Fundamentally, the steps for creating and publishing a web page are:\"\n\t\t\t\t   (:ul (:li \"Define an object mixing in \" (:span :class \"object\" \"base-html-page\"))\n\t\t\t\t\t(:li \"In that object define a slot called \"\n\t\t\t\t\t     (:span :class \"slot\" \"body\"))\n\t\t\t\t\t(:li \"Assign a string, or a function/macro that evaluates to a string, to the slot \"\n\t\t\t\t\t     (:span :class \"slot\" \"body\"))\n\t\t\t\t\t(:li \"Call the function \"\n\t\t\t\t\t     (:span :class \"function\" \"publish-gwl-app\") \"to publish the object to a specified url\"))\n                                   \"The above steps are sufficient to spin up the web page while using your currently running GendL\n                                   development session as the host (server). Running this way, and as described in the rest of this Tutorial, you as well as colleagues/clients\non your local private network will be able to access the web page/application as you are developing it. If you want to distribute and scale up your website/application\nmore broadly, then you'd have to arrange for appropriate hosting and devops/continuous integration resources to launch and maintain your site. \"\n                                   (:a :href \"https://infra.gornskew.com\" \"Gorn Skew Infrastructure\")\n                                   \" (a sibling entity to the Gorn School) hopes soon to start offering turnkey hosting services for Gendl applications, so please stay tuned if you are interested.\")\n                               \n\t\t\t       (:p \"Now on to some examples. Consider the following code\"\n\t\t\t\t   (str (code-example (the code-1))))\n\t\t\t       (:p \"The first thing to note is that we are working in the \"\n\t\t\t\t   (:span :class \"package-name\" \"gwl-user\")\n                                   \" package. This is a pre-defined package which gives us access to all the same symbols as \"\n                                   (:span :class \"package-name\" \"gdl-user\") \n                                   \" does, plus some extra web-specific ones.\"\n                                   \"The object is using the \"\n\t\t\t\t   (:span :class \"object\" \"base-html-page\") \" mixin and we have just assigned a simple string to the \"\n\t\t\t\t   (:span :class \"slot\" \"body\")\" slot. In order to publish the web page, we use the \"\n\t\t\t\t   (:span :class \"function\" \"publish-gwl-app\")\" function. The first argument is the url that we wish to publish to and the second-argument is the object being used to deliver the web page content. \"\n\t\t\t\t   (:em \"Note that we are prepending the object name with the package-name.\")\" If we now go to a web browser and evaluate \"\n\t\t\t\t   (:em (:b \"http://localhost:9080/basic\"))\" (assuming your GendL session is running on post 9080 we will see the following)\")\n\t\t\t       (:image :src (format nil \"/~a-images/basic-page.png\" (the publish-prefix)) :style \"margin: 5px 0 0 3% ;width: auto; height: 100px;\" )\n\t\t\t       (:p \"A couple of things to note here:\"\n\t\t\t\t   (:ul (:li \"Although we entered a url \"\n\t\t\t\t\t     (:em (:b \"basic\"))\", the url has been re-written once the page has presented. This is done automatically to allow GendL to track sessions and deliver pages to the correct session\")\n\t\t\t\t\t(:li \"The browser tab is automatically named with the object being displayed (although this behaviour can be over-ridden)\")))\n\t\t\t       (:h3 \"Writing html\")\n\t\t\t       (:p \"Within the text body of the slot \"\n\t\t\t\t   (:span :class \"slot\" \"body\")\", standard html may be included. However, using the \"\n\t\t\t\t   (:span :class \"macro\" \"with-lhtml-string\")\" macro enables html markup to be specified in a lisp-like way. We'll cover \"\n\t\t\t\t   (:span :class \"macro\" \"with-lhtml-string\")\" in more detail later, but just as a taster heres what it looks like\"\n\t\t\t\t   (str (code-example (the code-2)))\n\t\t\t\t   \"which generates the web page below\")\n\t\t\t       (:image :src (format nil \"/~a-images/basic-lhtml.png\" (the publish-prefix)) :style \"margin: 5px 0 0 3% ;width: auto; height: 200px;\" )\n\t\t\t       (:h3 \"Applying Style\")\n\t\t\t       (:p \"There are 2 general approached we can take for stying a page, in-line style or incorporation of a cascading style sheet (CSS)\")\n\t\t\t       (:p \"In-line style is just a case of updaing the html with style attributes\"\n\t\t\t\t   (str (code-example (the code-3)))\n\t\t\t\t   \"which generates the web page below\")\n\t\t\t       (:image :src (format nil \"/~a-images/basic-styled.png\" (the publish-prefix)) :style \"margin: 5px 0 0 3% ;width: auto; height: 200px;\" )\n\t\t\t       (:p \"If we want to use a style sheet there are 3 steps\"\n\t\t\t\t   (:ul (:li \"Define the style sheet\")\n\t\t\t\t\t(:li \"Publish the style sheet\")\n\t\t\t\t\t(:li \"Load the style sheet in the page by including it in the additional-header-content slot\")\n\t\t\t\t\t(:li \"Update the html to reference the style class\")))\n\t\t\t       (:p \"So, first the cascading style sheet which we have named my-style.css\")\n\t\t\t       (str (code-example (the css-1)))\n\t\t\t       (:p \"We are storing the css file in a folder called css at the same level as the source file folder. To publish the style sheet we have to povide its location in the filesystem. We could do this explicitly, and that may be fine if the code is being developed on the same operating system as it is deployed on. However if that isn't the case then the pathnames would be different (drive letter for windows, // for unix or linux). So you get around that we can use the \"\n\t\t\t\t   (:span :class \"function\" \"merge-pathnames\")\" function which provides operating system independency. We would still need to maintain the relative location of the source code folder and the css folder, but if we could do this then the \"\n\t\t\t\t   (:span :class \"function\" \"merge-pathnames\")\" approach is quite an attractive solution. We choose to define a home directory as the folder above the source code folder and assign it as a parameter \"\n\t\t\t\t   (:em (:b \"*home*\"))\" so we can access it globally. Having done that we then call the \"\n\t\t\t\t   (:span :class \"function\" \"gwl::publish-file\")\" function, referencing our stylesheet and publishing it as \\\"/my-style.css\\\"\")\n\t\t\t       (str (code-example (the code-4)))\n\t\t\t       (:p \"Next we add a slot to our object called \"\n\t\t\t\t   (:span :class \"slot\" \"additional-header-content\")\" and specify a stylesheet link to the my-style.css. Because the stylesheet specifies styles for the \"\n\t\t\t\t   (:em (:b \"table\"))\" and \"\n\t\t\t\t   (:em (:b \"td\"))\" html tags we don't need to add any class attributes to the html. Finally we publish the object using \"\n\t\t\t\t   (:span :class \"function\" \"publish-gwl-app\"))\n\t\t\t       (str (code-example (the code-5)))\n\t\t\t       (:p \"The resulting web-page will look like this\")\n\t\t\t       (:image :src (format nil \"/~a-images/basic-css.png\" (the publish-prefix)) :style \"margin: 5px 0 0 3% ;width: auto; height: 200px;\" )\n\t\t\t       (:h3 \"Adding images\")\n\t\t\t       (:p \"The process of adding an image is similar to the style sheet process\"\n\t\t\t\t   (:ul (:li \"Store an image on the file system\")\n\t\t\t\t\t(:li \"Publish the image\")\n\t\t\t\t\t(:li \"Reference the published image in the web page object\")))\n\t\t\t       (:p \"We could use the \"\n\t\t\t\t   (:span :class \"function\" \"gwl::publish-file\")\" function to publish the image, however we may have a number of images so the \"\n\t\t\t\t   (:span :class \"function\" \"gwl::publish-directory\")\" function is quite a useful alternative. It simply takes a directory and publishes each file in that directory, using the files name and extension, optionally with a prepended virtual directory. In the case below all the files in the images folder below \"\n\t\t\t\t   (:em (:b \"*home*\"))\" are being published to the /images virtual directory\")\n\t\t\t       (str (code-example (the code-6)))\n\t\t\t       (:p \"Finally we use the :img tag to display the image stores in our images folder\")\n\t\t\t       (str (code-example (the code-7)))\n\t\t\t       (:image :src (format nil \"/~a-images/basic-logo.png\" (the publish-prefix)) :style \"margin: 5px 0 0 3% ;width: auto; height: 200px;\" )\n\t\t\t       (:h3 \"Debugging Aids\")\n\t\t\t       (:p \"When developing web page content, it is often useful to incorporate a few debugging aids. The most important is probably to include links to enable the object model to be updated dynamically (equivalent to Mode..Update in Geysr or \"\n\t\t\t\t   (:span :class \"function\" \"(the update!)\")\" in the REPL) and to be able to break on the object model directly from the web page itself (equivalent to Mode..Set Self in Geysr). To do this, we print a predefined slot \"\n\t\t\t\t   (:span :class \"slot\" \"(the development-links)\")\" onto the web page. For convenience its often useful to conditionalise this based on the value of a paremeter indication whether or not we are in development mode. In this case we are using the \"\n\t\t\t\t   (:em (:b \"gwl:*developing?*\"))\" parameter, which defaults to T\")\n\t\t\t       (str (code-example (the code-8))) \n\t\t\t       (:image :src (format nil \"/~a-images/basic-devlinks.png\" (the publish-prefix)) :style \"margin: 5px 0 0 3% ;width: auto; height: 200px;\" ))\n\t\t\t (:div :class \"grid-item\"\n\t\t\t       (:h2 \"Resources\")\n\t\t\t       (str (the resource-links))))))))\n\n\n",
    "metadata": {
      "source": "gornschool-training/t6/source/simple-html-page.lisp",
      "file_name": "simple-html-page.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_6_object_definition",
      "chunk_id": 6,
      "section": "sample-image-development-links"
    },
    "id": "73f68f66ec9d7d9f7ee2e39210dbbb91"
  },
  {
    "text": "(in-package :training-6)\n\n",
    "metadata": {
      "source": "gornschool-training/t6/source/using-ajax.lisp",
      "file_name": "using-ajax.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_6_object_definition",
      "chunk_id": 0,
      "section": "header"
    },
    "id": "54650d2d07974d82ee1ea5a888de4c05"
  },
  {
    "text": "(define-object using-ajax (base-training-sheet)\n\n  :input-slots\n  (simple-html-page\n      using-form-controls\n    using-base-html-divs)\n  \n  :computed-slots\n  ((index-words (list \"AJAX\" \"main-div\" \"base-ajax-sheet\" \"sheet-section\" \":ajax-submit-on-change?\"))\n\n   (body-content (with-lhtml-string()\n\t\t   (:div :class \"grid-container-2-650px\"\n\t\t\t (:div :class \"grid-item\"\n\t\t\t       (:h3 \"What is AJAX?\")\n\t\t\t       (:p \"AJAX is a term you don't hear much anymore but it originally stood for \\\"Asynchronous JavaScript and XML.\\\"\nThis is technique for updating one or more sections of a web page based on a request sent to the web server.\")\n\t\t\t       (:p \"Early web applications were limited to transmitting information to and from the sever using \nsynchronous requests, one page at a time. It means your user would fill out a form, hit submit, and get directed to a new page with new \ninformation from the server. With AJAX, when you click a button, change a value, or do certain other interactions with a page,\nthe JavaScript engine running in your browser will make a request to the server, which interprets the results and sends a response,\nthen the JavaScript engine will update the user's web page accordingly. The user would not be directly made aware \nthat anything was transmitted to and from the server.\")\n\t\t\t       \n\t\t\t       (:h3 \"Using AJAX with GendL\")\n\t\t\t       (:p \"The most basic requirement is to use \"\n\t\t\t\t   (:span :class \"mixin\" \"base-html-page\")\" as your web pages mixin. This provides most \nof the functionality, and was covered in the first topic of this tutorial, \"\n\t\t\t\t   (:a :href (theo (the simple-html-page) url) (str (theo (the simple-html-page) page-title)) ))\n\t\t\t       (:p \"Next, to trigger an AJAX submit, form controls need to have their input \"\n\t\t\t\t   (:span :class \"general-keyword\" \":ajax-submit-on-change?\")\" set to T. This was covered \nin the tutorial topic \"\n\t\t\t\t   (:a :href (theo (the using-form-controls) url) (str (theo (the using-form-controls) page-title))))\n\t\t\t       (:p \"And finally, the page is best constructed from \"(:span :class \"object\" \"base-html-divs\")\n\t\t\t\t   \", as shown in the topic \"\n\t\t\t\t   (:a :href (theo (the using-base-html-divs) url) (str (theo (the using-base-html-divs) page-title))))\n\n\t\t\t       (:h3 \"Performance Considerations\")\n\t\t\t       (:p \"The javascript update is performed by GendL at the \"\n\t\t\t\t   (:span :class \"object\" \"base-html-div\")\" level; GendL identifies which \"\n\t\t\t\t   (:span :class \"object\" \"base-html-divs\")\" will be impacted by the change to the \nform control(s), recomputes the value of the \"\n\t\t\t\t   (:span :class \"object\" \"base-html-divs\")\" \"\n\t\t\t\t   (:span :class \"slot\" \"div\")\" and updates the page with that content. So for best \nperformance there is a balance to be struck between having sufficient \"\n\t\t\t\t   (:span :class \"object\" \"base-html-divs\")\" so that large sections of the page which \ndon't change are updated and sent from the server to the browser, and having the page defined with so much \ngranularity that a large number of (smaller) inserts/updates have to be made\")\n\t\t\t       (:p \"In the main, however, any optimisation can be performed at the end of the \ndevelopment cycle although it is worth bearing in mind the simplicity/granularity tradeoff when building \nthe page in the first place. This was also discussed in the topic \"\n\t\t\t\t   (:a :href (theo (the using-base-html-divs) url) (str (theo (the using-base-html-divs) page-title))))\n\t\t\t       (:p \"Using AJAX with GendL is really this simple!\")))))\n\t\t      \n\n    \n   ))\n",
    "metadata": {
      "source": "gornschool-training/t6/source/using-ajax.lisp",
      "file_name": "using-ajax.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_6_object_definition",
      "chunk_id": 0,
      "section": "using-ajax"
    },
    "id": "54650d2d07974d82ee1ea5a888de4c05"
  },
  {
    "text": "(in-package :training-6)\n\n",
    "metadata": {
      "source": "gornschool-training/t6/source/using-base-html-divs.lisp",
      "file_name": "using-base-html-divs.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_6_object_definition",
      "chunk_id": 0,
      "section": "header"
    },
    "id": "566391f8a48c32faa385a7775f783e3c"
  },
  {
    "text": "(define-object using-base-html-divs (base-training-sheet)\n  :input-slots\n  (simple-html-page-title\n      simple-html-page-url\n    using-ajax-title\n    using-ajax-url)\n  \n  :computed-slots\n  ((index-words (list \"base-html-div\" \"div\" \"inner-html\" \"AJAX\"))\n   (code-1 (list \"(in-package :gwl-user)\"\n\t\t \"",
    "metadata": {
      "source": "gornschool-training/t6/source/using-base-html-divs.lisp",
      "file_name": "using-base-html-divs.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_6_object_definition",
      "chunk_id": 0,
      "section": "using-base-html-divs"
    },
    "id": "566391f8a48c32faa385a7775f783e3c"
  },
  {
    "text": "(define-object simple-page-with-section (base-html-page)\"\n\t\t \"\"\n\t\t \" :computed-slots\"\n\t\t \" ((body \"\n\t\t \"       (with-lhtml-string ()\"\n\t\t \"          (when gwl:*developing?* (str (the development-links)))\"\n\t\t \"          (:h2 \\\"Basic Page Sections\\\")\"\n\t\t \"          (str (the section-1 div)))))\"\n\t\t \" :objects\"\n\t\t \" ((section-1 :type 'base-html-div\"\n\t\t \"                   :inner-html\" \n\t\t \"                        (with-litml-string ()\"\n\t\t \"                           (:p \\\"Using page sections to provide content\\\")))))\"\n\t\t \"\"\n\t\t \"(publish-gwl-app \\\"/simple-base-html-div\\\" \\\"gwl-user::simple-page-with-section\\\")\"))\n\n   (code-2 (list \"(in-package :gwl-user)\"\n\t\t \"",
    "metadata": {
      "source": "gornschool-training/t6/source/using-base-html-divs.lisp",
      "file_name": "using-base-html-divs.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_6_object_definition",
      "chunk_id": 1,
      "section": "simple-page-with-section"
    },
    "id": "d96f1e8288181873c0e4e709220f4383"
  },
  {
    "text": "(define-object simple-page-with-custom-section (base-html-page)\"\n\t\t \"\"\n\t\t \" :computed-slots\"\n\t\t \" ((input-list (list 1 2 3))\"\n\t\t \"  (body \"\n\t\t \"       (with-lhtml-string ()\"\n\t\t \"          (when gwl:*developing?* (str (the development-links)))\"\n\t\t \"          (:h2 \\\"Basic Page Sections\\\")\"\n\t\t \"          (str (the section-1 div)))))\"\n\t\t \" :objects\"\n\t\t \" ((section-1 :type 'base-html-div-1\"\n\t\t \"                   :input-list (the input-list))))\"\n\t\t \"\"\n\t\t \"",
    "metadata": {
      "source": "gornschool-training/t6/source/using-base-html-divs.lisp",
      "file_name": "using-base-html-divs.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_6_object_definition",
      "chunk_id": 2,
      "section": "simple-page-with-custom-section"
    },
    "id": "3c4f3b8d39624340e2526ad5ed92cddc"
  },
  {
    "text": "(define-object base-html-div-1 (base-html-div)\"\n\t\t \" :input-slots\"\n\t\t \" (input-list)\"\n\t\t \" :computed-slots\"\n\t\t \" ((inner-html (with-lhtml-string ()\"\n\t\t \"                    (:table :border 1\"\n\t\t \"                        (:tr (:th \\\"Content\\\"))\"\n\t\t \"                        (dolist (c (the input-list))\"\n\t\t \"                            (htm (:tr (:td (fmt \\\"Cell ~a content\\\" c))))))))))\"\n\t\t \"\"\n\t\t \"(publish-gwl-app \\\"/simple-page-with-custom-section\\\" \\\"gwl-user::\\simple-page-with-custom-section\\\")\"))\n\n   (repl-1 (list (list :prompt \"GWL-USER\"\n\t\t       :command \"(make-self 'base-html-div-object)\"\n\t\t       :output \"#<BASE-HTML-DIV-OBJECT #x210462B07D>\")\n\t\t (list :prompt \"GWL-USER\"\n\t\t       :command \"(the section-1 inner-html)\"\n\t\t       :output (list \"<table border=\\\"1\\\">\"\n\t\t\t\t     \"  <tr><th>Content</th></tr>\"\n\t\t\t\t     \"  <tr><td>Cell 1 content</td></tr>\"\n\t\t\t\t     \"  <tr><td>Cell 2 content</td></tr>\"\n\t\t\t\t     \"  <tr><td>Cell 3 content</td></tr>\"\n\t\t\t\t     \"</table>\"))\n\t\t (list :prompt \"GWL-USER\"\n\t\t       :command \"(the section-1 div)\"\n\t\t       :output (list \"<div id=\\\"KDpTSEVFVC1TRUNUSU9OLTEp\\\">\"\n\t\t\t\t     \"  <table border=\\\"1\\\">\"\n\t\t\t\t     \"    <tr><th>Content</th></tr>\"\n\t\t\t\t     \"    <tr><td>Cell 1 content</td></tr>\"\n\t\t\t\t     \"    <tr><td>Cell 2 content</td></tr>\"\n\t\t\t\t     \"    <tr><td>Cell 3 content</td></tr>\"\n\t\t\t\t     \"  </table>\"\n\t\t\t\t     \"</div>\"))))\n\n   (body-content (with-lhtml-string()\n\t\t   (:div :class \"main-page-container\"\n\t\t\t (:div :class \"main-page-item\"\n\t\t\t       (:div :class \"grid-container-2-650px\"\n\t\t\t             (:div :class \"grid-item\"\n\t\t\t\t           (:p \"In the \" (:a :href (the simple-html-page-url) (str (the simple-html-page-title))) \" topic, the slot \"\n\t\t\t\t               (:span :class \"slot\" \"body\")\" was identified as the slot that needed to be populated with a html string in order for the object to be rendered as a web page. The whole page and be defined as a single string in this slot if required, but building a page from \"(:span :class \"object\" \"base-html-divs\")\" may lead to an easier to manage page and encourages modularity and reuse, which in turn provides a common look and feel to pages\")\n\t\t\t\t           (:p \"A \"\n\t\t\t\t               (:span :class \"object\" \"base-html-div\")\" is an object, which evaluates the \"\n\t\t\t\t               (:span :class \"slot\" \"div\")\" message to a html string and then we include that message in the objects parent \"\n\t\t\t\t               (:span :class \"slot\" \"body\")\". To populate the \"\n\t\t\t\t               (:span :class \"slot\" \"div\")\" slot, we need to write a html string to the \"\n\t\t\t\t               (:span :class \"slot\" \"inner-html\")\" slot. The \"\n\t\t\t\t               (:span :class \"object\" \"base-html-div\")\" object then wraps this string with some standard html when \"\n\t\t\t\t               (:span :class \"object\" \"div\")\" is evaluated.\"))\n\t\t\t             (:div :class \"grid-item\")\n\t\t\t             (:div :class \"grid-item\" \n\t\t\t\t           (str (code-example (the code-1))))\n\t\t\t             (:div :class \"grid-item\" \n\t\t\t\t           (:image :src (format nil \"/~a-images/simple-base-html-div.png\" (the publish-prefix)) :style \"border: 2px solid; margin: 5px 0 0 3% ;width: auto; height: 200px;\" ))\n\t\t\t             (:div :class \"grid-item\"\n\t\t\t\t           (:p \"This method, passing the value of \"\n\t\t\t\t               (:span :class \"slot\" \"inner-html\")\" directly into a \"\n\t\t\t\t               (:span :class \"object\" \"base-html-div\")\" object works well for fairly simple cases and avoids the need for creating bespoke objects based on \"\n\t\t\t\t               (:span :class \"object\" \"base-html-div\")\", but for more complex calculations of the \"\n\t\t\t\t               (:span :class \"slot\" \"inner-html\")\" value, potentially involving a number of different inputs, it is often more practical and manageable to create specific objects by mixing in \"\n\t\t\t\t               (:span :class \"object\" \"base-html-div\")))\n\t\t\t             (:div :class \"grid-item\")\n\t\t\t             (:div :class \"grid-item\" \n\t\t\t\t           (str (code-example (the code-2))))\n\t\t\t             (:div :class \"grid-item\" \n\t\t\t\t           (:image :src (format nil \"/~a-images/base-html-div-object.png\" (the publish-prefix)) :style \"border: 2px solid; margin: 5px 0 0 3% ;width: auto; height: 200px;\" ))\n\t\t\t             (:div :class \"grid-item\"\n\t\t\t\t           (:p \"The difference between a \"\n\t\t\t\t               (:span :class \"object\" \"base-html-div\")\" \"\n\t\t\t\t               (:span :class \"slot\" \"inner-html\")\" and \"\n\t\t\t\t               (:span :class \"slot\" \"div\")\" is that \"\n\t\t\t\t               (:span :class \"slot\" \"div\")\" wraps the html defined in \"\n\t\t\t\t               (:span :class \"slot\" \"inner-html\")\" with a html div tag and an internally generated id attribue for that tag. \"\n\t\t\t\t               (str (repl-example (the repl-1)))\n\t\t\t\t               \"This div may then be surgically updated using AJAX, without the page being resubmitted. We'll cover using AJAX with GendL in the \"\n\t\t\t\t               (:a :href (the using-ajax-url) (str (the using-ajax-title))) \" topic, but for now the main thing to take away is how the use of AJAX may affect the granularity of a \"\n\t\t\t\t               (:span :class \"object\" \"base-html-div\")\". If a single \"\n\t\t\t\t               (:span :class \"object\" \"base-html-div\")\" was used for the whole page, then an AJAX update would have only marginal impact on both speed of display and bandwidth used. If every element in the page was its own \"\n\t\t\t\t               (:span :class \"object\" \"base-html-div\")\" the overhead would be significant. So there's obviously a compromise somewhere in the middle. Best advice would be to group elements likely to be updated as a result of the same event together in the same \"\n\t\t\t\t               (:span :class \"object\" \"base-html-div\")\" if possible.\"))))\n\t\t\t ((:div :class \"main-page-item\")\n\t\t\t  (:h2 \"Resources\")\n\t\t\t  (str (the resource-links))))))))\n\n\t\t\t\t      \n",
    "metadata": {
      "source": "gornschool-training/t6/source/using-base-html-divs.lisp",
      "file_name": "using-base-html-divs.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_6_object_definition",
      "chunk_id": 3,
      "section": "base-html-div-1"
    },
    "id": "8d241ab6f7f0b68bfc1fbde0855fe98a"
  },
  {
    "text": "(in-package :training-6)\n\n",
    "metadata": {
      "source": "gornschool-training/t6/source/using-with-lhtml-string.lisp",
      "file_name": "using-with-lhtml-string.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_6_object_definition",
      "chunk_id": 0,
      "section": "header"
    },
    "id": "5fc8b6ce96d0dd5e468d402cc3303b24"
  },
  {
    "text": "(define-object using-with-lhtml-string (base-training-sheet)\n\n  :computed-slots\n  ((index-words (list \"lhtml\" \"with-lhtml-string\"  \"str\" \"htm\" \"fmt\"))\n\n   (repl-0 (list (list :prompt \"GWL-USER\"\n\t\t       :command (list \"(with-lhtml-string ()\"\n\t\t\t\t      \"   (:table (:tr (:td))))\")\n\t\t       :output \"\\\"<table><tr><td></td></tr></table>\\\"\")\n\t\t (list :prompt \"GWL-USER\"\n\t\t       :command (list \"(with-lhtml-string (:indent t)\"\n\t\t\t\t      \"   (:table (:tr (:td))))\")\n\t\t       :output (list \"\\\"\"\n\t\t\t\t     \"<table>\"\n\t\t\t\t     \"  <tr>\"\n\t\t\t\t     \"    <td></td>\"\n\t\t\t\t     \"  </tr>\"\n\t\t\t\t     \"</table>\\\"\"))))\n\t\t       \n   (repl-1 (list (list :prompt \"GWL-USER\"\n\t\t       :command (list \"(with-lhtml-string()\"\n\t\t\t\t      \"  (:br))\")\n\t\t       :output \"<br />\")))\n\n   (repl-2 (list (list :prompt \"GWL-USER\"\n\t\t       :command (list \"(with-lhtml-string()\"\n\t\t\t\t      \"  (:span :class \\\"myclass\\\"))\")\n\t\t       :output \"\\\"<span class=\\\"myclass\\\"></span>\\\"\")))\n   (repl-3 (list (list :prompt \"GWL-USER\"\n\t\t       :command (list \"(with-lhtml-string()\"\n\t\t\t\t      \"  (:table :border 1 :cellspacing 3 :cell-padding 5))\")\n\t\t       :output \"\\\"<table border=\\\"1\\\" cellspacing=\\\"3\\\" cell-padding=\\\"5\\\"></table>\\\"\")))\n   (repl-4 (list (list :prompt \"GWL-USER\"\n\t\t       :command (list \"(with-lhtml-string()\"\n\t\t\t\t      \"  (:p \\\"This is content\\\"))\")\n\t\t       :output \"\\\"<p>This is content</p>\\\"\")\n\t\t (list :prompt \"GWL-USER\"\n\t\t       :command (list \"(with-lhtml-string()\"\n\t\t\t\t      \"  (:span :class \\\"myclass\\\" \\\"This is more content\\\"))\")\n\t\t       :output \"\\\"<span class=\\\"myclass\\\">This is more content</span>\\\"\")))\n   (repl-5 (list (list :prompt \"GWL-USER\"\n\t\t       :command (list \"(with-lhtml-string()\"\n\t\t\t\t      \"  (:span :class \\\"myclass\\\" \\\"This is more content\\\"))\")\n\t\t       :output \"\\\"<span class=\\\"myclass\\\">This is more content</span>\\\"\")\n\t\t (list :prompt \"GWL-USER\"\n\t\t       :command (list \"(with-lhtml-string()\"\n\t\t\t\t      \"  ((:span :class \\\"myclass\\\") \\\"This is more content\\\")))\")\n\t\t       :output \"\\\"<span class=\\\"myclass\\\">This is more content</span>\\\"\")))\n   (repl-6 (list (list :prompt \"GWL-USER\"\n\t\t       :command (list \"(with-lhtml-string()\"\n\t\t\t\t      \"  (:table :border 1\" \n\t\t\t\t      \"    (:tr\"  \n\t\t\t\t      \"      (:td \\\"Cell 1\\\")\"\n\t\t\t\t      \"      (:td \\\"Cell 2\\\"))))\")\n\t\t       :output \"\\\"<table border=\\\"1\\\"><tr><td>Cell 1</td><td>Cell 2</td></tr></table>\\\"\")))\n   (repl-7 (list (list :prompt \"GWL-USER\"\n\t\t       :command (list \"(let ((cell-1 \\\"Cell 1 content\\\")\"\n\t\t\t\t      \"      (cell-2 \\\"Cell 2 content\\\"))\"\n\t\t\t\t      \"  (with-lhtml-string ()\"\n\t\t\t\t      \"     (:table (:tr (:td (str cell-1)) \"\n\t\t\t\t      \"                  (:td (str cell-2))))))\")\n\t\t       :output \"\\\"<table><tr><td>Cell 1 content</td><td>Cell 2 content</td></tr></table>\\\"\")))\n   (repl-8 (list (list :prompt \"GWL-USER\"\n\t\t       :command (list \"(let ((cell-1 1)\"\n\t\t\t\t      \"      (cell-2 2))\"\n\t\t\t\t      \"  (with-lhtml--string ()\"\n\t\t\t\t      \"     (:table (:tr (:td (fmt \\\"Cell ~a content\\\" cell-1)) \"\n\t\t\t\t      \"                  (:td (fmt \\\"Cell ~a content\\\" cell-2))))))\")\n\t\t       :output \"\\\"<table><tr><td>Cell 1 content</td><td>Cell 2 content</td></tr></table>\\\"\")))\n\n   (repl-9 (list (list :prompt \"GWL-USER\"\n\t\t       :command (list \"(with-lhtml-string ()\"\n\t\t\t\t      \"  (:table (:tr \"\n\t\t\t\t      \"     (let ((lis (list 1 2)))\"\n\t\t\t\t      \"        (dolist (a lis)\"\n\t\t\t\t      \"           (htm (:td (fmt \\\"Cell ~a\\\" a))))))))\")\n\t\t       :output \"\\\"<table><tr><td>Cell 1</td><td>Cell 2</td></tr></table>\\\"\")))\t       \n\t\t       \n\n   (body-content (with-lhtml-string ()\n\t\t   (:div :class \"grid-container-2-650px\"\n\t\t\t (:div :class \"grid-item\"\n\t\t\t       (:p (:em (:b \"LHTML\")) \" is a Markup Language included in Gendl (standing for \"\n\t\t\t\t   (:i \"Lisp HTML\")\") which provides a convenient way to generate html using lisp-like expressions. It is intended to be portable and shoud work with all ANSI standard Common Lisp Implementations.\")\n\t\t\t       (:p \"The main element of \"(:em (:b \"lhtml\"))\" is the macro \"\n\t\t\t\t   (:span :class \"macro\" \"with-lhtml-string\")\", which transforms its body into a html string\")\n\t\t\t       \n\t\t\t       (:p \"In general, we use \"\n\t\t\t\t   (:span :class \"macro\" \"with-lhtml-string\")\" when creating html strings for use in GWL web pages\")\n\t\t\t       (:p (:span :class \"macro\" \"with-lhtml-string\")\" takes an optional input \"\n\t\t\t\t   (:span :class \"general-keyword\" \":indent\")\". By default it is nil which results in html with no unnecessary whitespace to minimise the bandwith being used. But for debugging purposes, the resulting html may be difficult to read. Setting \"\n\t\t\t\t   (:span :class \"general-keyword\" \":indent\")\" to t causes line breaks to be inserted and nested tags properly indented\"\n\t\t\t\t   (str (repl-example (the repl-0))))\n\t\t\t       (:h3 \"Markup\")\n\t\t\t       (:p \"To generate html we use a nested list of s-expressions. Each list beginning with a keyword is transformed into a html tag of the same name by the following rules:\"\n\t\t\t\t   (:ul (:li \"If the list contains nothing but a \"\n\t\t\t\t\t     (:em (:b \"keyword\"))\" an empty element is written\"\n\t\t\t\t\t     (str (repl-example (the repl-1))))\n\t\t\t\t\t(:li \"If the \"\n\t\t\t\t\t     (:em (:b \"keyword\"))\" is followed by another \"\n\t\t\t\t\t     (:em (:b \"keyword\"))\", it's interpreted as an attribute and the next form is the value of that attribute\"\n\t\t\t\t\t     (str (repl-example (the repl-2))))\n\t\t\t\t\t(:li \"Multiple \"\n\t\t\t\t\t     (:em (:b \"attribute-value pairs\"))\" may be specified\"\n\t\t\t\t\t     (str (repl-example (the repl-3))))\n\t\t\t\t\t(:li \"The first form which isn't a keyword and follows either the tag or an attribute value is interpreted as the \"\n\t\t\t\t\t     (:em (:b \"tag content\"))\n\t\t\t\t\t     (str (repl-example (the repl-4))))\n\t\t\t\t\t(:li \"To make it slightly easier to read, the \"\n\t\t\t\t\t     (:em (:b \"tag and all attribute-value pairs\"))\" may be enclosed in an additional list, but this is purely optional\"\n\t\t\t\t\t     (str (repl-example (the repl-5))))\n\t\t\t\t\t(:li \"Tags may be embedded in other tags\"\n\t\t\t\t\t     (str (repl-example (the repl-6))))))\n\t\t\t       (:h3 \"Markup with computed content\")\n\t\t\t       (:p \"So far any tag content we have shown is static, so how do we handle computed content? If we just wish to output the value of a slot, we must wrap that slot with the macro \"\n\t\t\t\t   (:span :class \"macro\" \"str\")\n\t\t\t\t   (str (repl-example (the repl-7))))\n\t\t\t       (:p \"If we want to present the value of a slot with some formatting, rather than use the format function to format the value of the slot, we could wrap the value in the macro \"\n\t\t\t\t   (:span :class \"macro\" \"fmt\")\", which takes the same directives as the \"\n\t\t\t\t   (:span :class \"function\" \"format\") \"function\"\n\t\t\t\t   (str (repl-example (the repl-8))) )\n\t\t\t       (:p \"It is also possible to embed any type of Lisp processing within the body of \"\n\t\t\t\t   (:span :class \"macro\" \"with-lhtml-string\")\", although whenever we break out of the html generation to do some processing, once we restart html generation again we need to wrap the html generation in the \" (:span :class \"macro\" \"htm\")\" macro\"\n\t\t\t\t   (str (repl-example (the repl-9))))\n\t\t\t       (:p \"Finally, a word of warning. \"\n\t\t\t\t   (:em (:b \" lhtml knows nothing about html, it just processes what it is given according to the rules above\")\". So there is no checking to see if the first keyword is a valid html tag, or if the second keyword is a valid tag attribute. Thats your job!\"))))))))\n",
    "metadata": {
      "source": "gornschool-training/t6/source/using-with-lhtml-string.lisp",
      "file_name": "using-with-lhtml-string.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_6_object_definition",
      "chunk_id": 0,
      "section": "using-with-lhtml-string"
    },
    "id": "5fc8b6ce96d0dd5e468d402cc3303b24"
  },
  {
    "text": "(in-package :training-6)\n\n",
    "metadata": {
      "source": "gornschool-training/t6/source/file-io.lisp",
      "file_name": "file-io.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_6_object_definition",
      "chunk_id": 0,
      "section": "header"
    },
    "id": "842ab8f936a2739abf0f2169db321934"
  },
  {
    "text": "(define-object file-io (base-training-sheet)\n\n  :computed-slots\n  ((code-1 (list \"(in-package :gwl-user)\"\n\t\t \"\"\n\t\t\"",
    "metadata": {
      "source": "gornschool-training/t6/source/file-io.lisp",
      "file_name": "file-io.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_6_object_definition",
      "chunk_id": 0,
      "section": "file-io"
    },
    "id": "842ab8f936a2739abf0f2169db321934"
  },
  {
    "text": "(define-object simple-file-output (base-html-page)\"\n\t\t\" (:computed-slots\"\n\t\t\"  ((file-contents (let ((line (list 1 2 3 4 5 6 7)))\"\n\t\t\"                    (format nil \\\"~{Line ~a of my file~^~%~}\\\" line))))\"\n\t\t \"  ))\"))\n   (code-2 (list \"(in-package :gwl-user)\"\n\t\t \"\"\n\t\t \"",
    "metadata": {
      "source": "gornschool-training/t6/source/file-io.lisp",
      "file_name": "file-io.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_6_object_definition",
      "chunk_id": 1,
      "section": "simple-file-output"
    },
    "id": "6014902a81e08c6571e0ed4088f14cdf"
  },
  {
    "text": "(define-object simple-file-output (base-html-page)\"\n\t\t \" :computed-slots\"\n\t\t \"  ((file-contents (let ((line (list 1 2 3 4 5 6 7)))\"\n\t\t \"                        (format nil \\\"~{Line ~a of my file~^~%~}\\\" line)))\"\n\t\t \"\"\n\t\t \"   (text-physical-file (let ((file-path (make-pathname :defaults (glisp:temporary-file)\"\n                 \"                                                           :type \\\"txt\\\")))\"\n                 \"                               (with-open-file (f file-path :direction :output :if-exists :supersede)\"\n                 \"                                      (write-string (the file-contents) f))\"\n\t\t \"                               file-path))\"\n\t\t \"  )\"))\n   (code-3 (list \"(in-package :gwl-user)\"\n\t\t \"\"\n\t\t \"",
    "metadata": {
      "source": "gornschool-training/t6/source/file-io.lisp",
      "file_name": "file-io.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_6_object_definition",
      "chunk_id": 2,
      "section": "simple-file-output"
    },
    "id": "3912b3cc623ce9b4d7fdf8544aa68742"
  },
  {
    "text": "(define-object simple-file-output (base-html-page)\"\n\t\t \" :computed-slots\"\n\t\t \"  ((file-contents (let ((line (list 1 2 3 4 5 6 7)))\"\n\t\t \"                        (format nil \\\"~{Line ~a of my file~^~%~}\\\" line)))\"\n\t\t \"\"\n\t\t \"   (text-physical-file-url (let ((url (format nil \\\"/file-output-~a.txt\\\" (get-current-date-time)))\"\n\t\t \"                                         (file-path (make-pathname :defaults (glisp:temporary-file)\"\n                 \"                                                                          :type \\\"txt\\\")))\"\n                 \"                                   (with-open-file (f file-path :direction :output :if-exists :supersede)\"\n                 \"                                          (write-string (the file-contents) f))\"\n\t\t \"                                   (publish-file :path url\"\n                 \"                                                 :content-type \\\"text/plain\\\"\"\n                 \"                                                 :file file-path)\"\n\t\t \"                                    url))\"\n\t\t \"   (text-file-url (let ((url (format nil \\\"/stream-output-~a.txt\\\" (get-current-date-time))))\"\n                 \"                      (publish :path url\"\n                 \"                                  :content-type \\\"text/plain\\\"\"\n                 \"                                  :function #'(lambda(req ent)\"\n                 \"                                      (with-http-response (req ent)\"\n                 \"                                         (with-http-body (req ent)\"\n                 \"                                            (write-string (the file-contents) *html-stream*)))))\"\n                 \"                       url))\"\n\t\t \"  ))\"))\n   \n\n   (code-4 (list \"(in-package :gwl-user)\"\n\t\t \"\"\n\t\t \"",
    "metadata": {
      "source": "gornschool-training/t6/source/file-io.lisp",
      "file_name": "file-io.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_6_object_definition",
      "chunk_id": 3,
      "section": "simple-file-output"
    },
    "id": "52485bfb4cddc557dd6c27f877272418"
  },
  {
    "text": "(define-object simple-file-output (base-html-page)\"\n\t\t \" :computed-slots\"\n\t\t \" (\"\n\t\t \"  ...\"\n\t\t \"  ...\"\n\t\t \"  (body (with-lhtml-string ()\"\n\t\t \"              (str (the development-links))\"\n\t\t \"              (str (the export-section div))))\"\n\t\t \" )\"\n\t\t \" :objects\"\n\t\t \" (((export-section :type 'page-section\"\n\t\t \"                       :inner-html (with-lhtml-string ()\"\n                 \"                                      (:p \\\"Click \\\"\"\n                 \"                                      (:a :href (the text-file-url) \"\n\t\t \"                                          :download \\\"virtual-text-file.txt\\\" \\\"Here\\\")\"\n                 \"                                       \\\" to download a virtual text file.\\\")\"\n                 \"                                      (:p \\\"Click \\\"\"\n                 \"                                      (:a :href (the text-physical-file-url) \"\n\t\t \"                                           :download \\\"physical-text-file.txt\\\" \\\"Here\\\")\"\n                 \"                                       \\\" to download a physical text file.\\\")))))\"\n\t\t \")\"))\n\n   \n\t\t \n\n   \n\n   (body-content (with-lhtml-string ()\n\t\t   (:div :class \"main-page-container\"\n\t\t\t (:div :class \"main-page-item\"\n\t\t\t       (:div :class \"grid-container-2-650px\"\n\t\t\t\t     (:div :class \"grid-item\"\n\t\t\t\t\t   (:h3 \"Generating text output for download\")\n\t\t\t\t\t   (:p \"There is often a requirement to generate output as a file which can then be downloaded. There are 4 basic steps to this process\"\n\t\t\t\t\t       (:ul (:li \"Generate the file content\")\n\t\t\t\t\t\t    (:li \"Write the content to either a static file or a html stream\")\n\t\t\t\t\t\t    (:li \"Publish the output\")\n\t\t\t\t\t\t    (:li \"Provide a link to the output on your web page\")))\n\t\t\t\t\t   (:h4 (:b (:em \"Generate the content\")))\n\t\t\t\t\t   (:p \"In general this will involve writing a formatted string\")\n\t\t\t\t\t   (str (code-example (the code-1)))\n\t\t\t\t\t   (:h4 (:b (:em \"Write the static output\")))\n\t\t\t\t\t   (:p \"This is just standard file output, as described in the tutorial \"(:em (:b \"File I/0\")) \" and its associated topic \"(:em (:b \"Writing to a file\")))\n\t\t\t\t\t   (str (code-example (the code-2)))\n\t\t\t\t\t   (:p \"The slot \"(:span :class \"slot\" \"text-physical-file\")\" returns the pathname of the physical file. We'll cover writing the content directly to a html stream in the next part as its done at the same time as publishing\")\n\t\t\t\t\t   (:h4 (:b (:em \"Publish the output\")))\n\t\t\t\t\t   (:p \"Publishing the output is done by \"(:em \"side affecting\")\". For the static file we define the url, write the static file to disc, publish the static file to the url and then return the url. (Note that the slot has been renamed in this example). For the output direct to the html stream we define a function as part of the publish to write the content on the fly and return the url.\")\n\t\t\t\t\t   (str (code-example (the code-3)))    \n\t\t\t\t\t   (:p \"Note that when publishing the stream output we have to provide a \"\n\t\t\t\t\t       (:span :class \"general-keyword\" \":function\")\" argument to \"\n\t\t\t\t\t       (:span :class \"function\" \"publish\")\" function. We use a lambda function, and whilst it may appear somewhat complex it is a fairly standard boilerplate solution/syntax which may be used elsewhere\")   \n\t\t\t\t\t   (:h4 (:b (:em \"Provide a link for download\")))\n\t\t\t\t\t   (:p \"A \"\n\t\t\t\t\t       (:span :class \"object\" \"page-section\")\" is defined comprising links to each of the download options, and then displayed on the page by including its \"\n\t\t\t\t\t       (:span :class \"slot\" \"div\")\" in the \"\n\t\t\t\t\t       (:span :class \"slot\" \"body\") \" slot. Note the use of the :download atribute for the links, this ensures that on clicking the link the file is downloaded and gives the download file a name which appears in the browsers download window\")\n\t\t\t\t\t   (str (code-example (the code-4)))    \n\t\t\t\t\t   (:image :src (format nil \"/~a-images/file-download.png\" (the publish-prefix))\n\t\t\t\t\t\t   :style \"border: 2px solid; margin: 5px 0 0 3% ;width: auto; height: 300px;\" )))\n\t\t\t       ((:div :class \"main-page-item\")\n\t\t\t\t(:h2 \"Resources\")\n\t\t\t\t(str (the resource-links))))))))\n\t\t   \n  )\n",
    "metadata": {
      "source": "gornschool-training/t6/source/file-io.lisp",
      "file_name": "file-io.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_6_object_definition",
      "chunk_id": 4,
      "section": "simple-file-output"
    },
    "id": "6da667e29386395862bec6a99e79ee7d"
  },
  {
    "text": ";;\n;; FLAG -- Below \"newnames\" code to be copied to \n;;\n\n(in-package :gwl)\n\n(eval-when (:compile-toplevel :load-toplevel :execute)\n\n  ",
    "metadata": {
      "source": "gornschool-training/t6/resources/source/gwl-patches.lisp",
      "file_name": "gwl-patches.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_6_object_definition",
      "chunk_id": 0,
      "section": "header"
    },
    "id": "7e4e76d237895d577bcb51e579daffbd"
  },
  {
    "text": "(defmacro with-lhtml-string ((&rest args) &body body)\n    \"Form. Sets up body to be evaluated as lhtml and to return the resulting string.\"\n    (let ((string-stream (gensym)))\n      `(with-output-to-string (,string-stream)\n         (cl-who:with-html-output (,string-stream nil ,@args)\n           ,@body))))\n  \n  ",
    "metadata": {
      "source": "gornschool-training/t6/resources/source/gwl-patches.lisp",
      "file_name": "gwl-patches.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_6_object_definition",
      "chunk_id": 0,
      "section": "with-lhtml-string"
    },
    "id": "7e4e76d237895d577bcb51e579daffbd"
  },
  {
    "text": "(define-object base-html-page (base-ajax-sheet)\n\n    :input-slots\n    ((doctype-string (call-next-method))\n\n     (head-class (call-next-method))\n     \n     (title (call-next-method))\n\n     (additional-header-content nil)\n\n     (local-assets? t)\n     (use-x3dom? t)\n     (use-svgpanzoom? t)\n     (use-fontawesome? nil)\n     (use-anyresize? nil)\n     (use-ajax? t)\n     \n     (\"String of HTML. The main body of the page. \nThis can be specified as input or overridden in subclass, otherwise it defaults\nto the content produced by the :output-function of the same name \nin the applicable lens for  html-format.\"\n      body \"Empty Page Body\")\n\n     (body-attributes (list :class (the body-class)\n                            :onpageshow (the body-onpageshow)\n                            :onload (the body-onload)\n                            :onresize (the body-onresize)))\n     \n     (body-class (call-next-method))\n     (body-onpageshow (call-next-method))\n     (body-onload (call-next-method))\n     (body-onresize (call-next-method))\n     (html-class (call-next-method))\n     (lang \"en\")\n     (charset \"UTF-8\")\n     (favicon-type \"image/x-icon\")\n     (favicon-path \"/static/gwl/images/favicon.ico\")\n     \n     )\n\n    :computed-slots\n    ((main-sheet (with-lhtml-string ()\n                   (str (the doctype-string))\n                   ((:html :lang (the lang) :class (the html-class))\n                    ((:head :class (the head-class))\n                     (:title (str (the title)))\n                     (:meta :charset (the charset))\n                     (:link :rel \"icon\" :type (the favicon-type) :href (the favicon-path))\n                     (str (the additional-header-content))\n                     (when (the use-x3dom?)\n\t               (htm ((:script :src (if (the local-assets?)\n\t\t\t\t               \"/static/3rdpty/x3dom/x3dom.js\"\n\t\t\t\t               \"https://www.x3dom.org/download/1.8.1/x3dom.js\")\n\t\t                      :id \"x3dom_script\"))))\n                     (when (the use-svgpanzoom?)\n\t               (htm ((:script\n\t                      :id \"svg-panzoom\"\n\t                      :src (if (the local-assets?)\n\t\t\t               \"/static/3rdpty/svgpanzoom/svg-pan-zoom.min.js\"\n\t\t\t               \"https://cdn.jsdelivr.net/npm/svg-pan-zoom@3.6.1/dist/svg-pan-zoom.min.js\")))))\n                     (when (the use-fontawesome?)\n\t               (htm ((:link :id \"fontawesome-css\"\n\t\t                    :rel \"stylesheet\"\n\t\t                    :href (if (the local-assets?)\n\t\t\t                      \"/static/3rdpty/fa/css/all.min.css\"\n\t\t\t                      \"https://use.fontawesome.com/releases/v5.3.1/css/all.css\")\n\t\t                    :integrity (unless (the local-assets?)\n\t\t\t\t                 \"sha384-mzrmE5qonljUremFsqc01SB46JvROS7bZs3IO2EmfFsd15uHvIt+Y8vEf7N7fWAU\")\n\t\t                    :crossorigin \"anonymous\"))))\n                     (when (the use-anyresize?)\n\t               (htm ((:script :id \"anyresize-script\"\n\t\t                      :src (if (the local-assets?)\n\t\t\t\t               \"/static/3rdpty/resize/any-resize-event.js\"\n\t\t\t\t               \"https://is.gd/sAeEPt\")))))\n                     (when (the use-ajax?)\n\t               (htm\n\t                ((:script) (fmt \"~%var gdliid = '~a';\" (the instance-id)))\n\t                ((:script :src (if (the local-assets?)\n\t\t\t                   \"/static/gwl/js/gdlajax1595.js\"\n\t\t\t                   \"https://genworks.com/static/gwl/js/gdlajax1595.js\"))))))\n\n                    ((:body :class (the body-class)\n\t                    :onpageshow (the body-onpageshow)\n                            :onload (the body-onload)\n\t                    :onresize (the body-onresize))\n                     (the reset-html-sections!)\n                     \n                     (str (the body)))))))\n\n    :functions\n    ((write-html-sheet\n      ()\n      (with-format (html-format *html-stream*)\n        (write-string (the main-sheet) *html-stream*)))))\n\n\n  ",
    "metadata": {
      "source": "gornschool-training/t6/resources/source/gwl-patches.lisp",
      "file_name": "gwl-patches.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_6_object_definition",
      "chunk_id": 1,
      "section": "base-html-page"
    },
    "id": "7bb77fde138e3aa7e5b4f0822145b437"
  },
  {
    "text": "(define-object base-html-div (sheet-section)\n    :computed-slots ((div (the main-div))))\n\n  ",
    "metadata": {
      "source": "gornschool-training/t6/resources/source/gwl-patches.lisp",
      "file_name": "gwl-patches.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_6_object_definition",
      "chunk_id": 2,
      "section": "base-html-div"
    },
    "id": "ae1eb98b4f4524963aaa0e67bc110808"
  },
  {
    "text": "(define-object viewport-html-div (base-html-div)\n    :input-slots ((display-list-objects nil) (display-list-object-roots nil))\n    :objects ((view-object :type 'web-drawing\n                           :objects (the display-list-objects)\n                           :object-roots (the display-list-object-roots))))\n\n  \n  ",
    "metadata": {
      "source": "gornschool-training/t6/resources/source/gwl-patches.lisp",
      "file_name": "gwl-patches.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_6_object_definition",
      "chunk_id": 3,
      "section": "viewport-html-div"
    },
    "id": "83775dfe4c70ad5bb0365c24e3abe849"
  },
  {
    "text": "(defun publish-relative-file (&key home relative (path (string-append \"/\" relative)))\n    (let ((file (probe-file (merge-pathnames relative home))))\n      (if file (setq file (namestring file)) (error \"Trying to publish ~a but it cannot be found.~%\" file))\n      (publish-file :path path :file file) path))\n\n\n  ",
    "metadata": {
      "source": "gornschool-training/t6/resources/source/gwl-patches.lisp",
      "file_name": "gwl-patches.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_6_object_definition",
      "chunk_id": 4,
      "section": "publish-relative-file"
    },
    "id": "a51ffd19b2855aa1713a8a65fd919d98"
  },
  {
    "text": "(defun publish-relative-directory (&key home relative (prefix (string-append \"/\" (subseq relative 0 (1- (length relative))))))\n    (let ((relative-namestring (namestring relative)))\n      (unless (eql (aref relative-namestring (1- (length relative-namestring))) #\\/)\n        (error \"Relative name must end with a slash (\\\"/\\\"), but ~a does not\" relative-namestring)))\n    (let ((destination (probe-file (merge-pathnames relative home))))\n      (if destination (setq destination (namestring destination)) (error \"Trying to publish ~a but it cannot be found.~%\" destination))\n\n      (print-variables destination prefix)\n      \n      (publish-directory :prefix prefix :destination destination) prefix))\n  \n  (export  '(base-html-page base-html-div viewport-html-div with-lhtml-string publish-relative-file\n             publish-relative-directory page-viewport-div with-tagged-body) :gwl))\n\n\n\n",
    "metadata": {
      "source": "gornschool-training/t6/resources/source/gwl-patches.lisp",
      "file_name": "gwl-patches.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_6_object_definition",
      "chunk_id": 5,
      "section": "publish-relative-directory"
    },
    "id": "2eeb8417396850ec51d9c06f9a2aadbf"
  },
  {
    "text": "(defmacro with-form-string ((&key id name enctype target requestor on-submit local-anchor indent) &body body)\n  (let ((fixed-prefix (gensym)))\n    `(let ((,fixed-prefix (let ((prefix (the fixed-url-prefix)))\n\t\t\t    (and prefix (string-append \"/\" prefix)))))\n       (with-lhtml-string (:indent ,indent)\n         (:form :method :post\n                :id ,(or id `(format nil \"~a-form\" (the root-path-string)))\n                :name ,(or name `(format nil \"~a-form\" (the root-path-string)))\n                :action (string-append\n                         (or ,fixed-prefix \"\")\n                         ,(if local-anchor `(format nil \"/answer#~a\" local-anchor) \"/answer\"))\n                :enctype ,enctype\n                :target ,target\n                :on-submit ,on-submit\n                (:input :type :hidden :name :|requestor| :value ,(if (null requestor) `(the url-encoded-root-path)\n                                                                     `(the-object ,requestor url-encoded-root-path)))\n                (:input :type :hidden :name :|iid| :value (the instance-id))\n                ,@body)))))\n\n\n(eval-when (:compile-toplevel :load-toplevel :execute) (export '(with-form-string) :gwl))\n\n\n                     \n\n;;\n;; FLAG -- end of  \"newnames\" code to be copied to \n;;\n\n\n;;\n;; Patch to allegroserve to make file uplaods work in non-allegro\n;;\n#-allegro\n(in-package :net.aserve)\n\n#-allegro\n(defmethod get-multipart-sequence ((req http-request)\n\t\t\t\t   buffer\n\t\t\t\t   &key (start 0)\n\t\t\t\t     (end (length buffer))\n\t\t\t\t     (external-format \n\t\t\t\t      *default-aserve-external-format* \n\t\t\t\t      ef-spec))\n  ;; fill the buffer with the chunk of data.\n  ;; start at 'start' and go no farther than (1- end) in the buffer\n  ;; return the index of the first character not placed in the buffer.\n  \n  \n  ;; Since external-format not used in all versions\n  (declare (ignorable external-format ef-spec))\n\n\n  (let* ((mp-info (getf (request-reply-plist req) 'mp-info))\n\t mpbuffer \n\t cur\n\t pos\n\t kind\n\t text-mode\n\t after)\n\n    \n    (typecase buffer\n      ((array (unsigned-byte 8) (*))\n       )\n      ((array character (*))\n       (setq text-mode t))\n      (t \n       (error \n\t\"This function only accepts (array (unsigned-byte 8)) or character arrays\")))\n    (if* (null mp-info)\n       then (error \"get-multipart-sequence called before get-multipart-header\"))\n    \n    (setq mpbuffer (mp-info-buffer mp-info)\n\t  cur      (mp-info-cur mp-info))\n\n    (loop\n      (case (mp-info-state mp-info)\n\t((:header :boundary :last-boundary)\n                                        ; no data left\n\t (return-from get-multipart-sequence nil))\n\t(:start\n\t (error \"get-multipart-sequence called before get-multipart-header\"))\n\t((:body :partial)\n\t (if* (eq (mp-info-state mp-info) :partial)\n\t    then      ; this was set below. we will return the partial\n                                        ; at then end of the buffer\n\t\t      (setf (mp-info-state mp-info) :body)\n\t\t      (setq pos (mp-info-end mp-info))\n\t    else (multiple-value-setq (pos kind after) (scan-forward mp-info))\n\t\t (setf (mp-info-after mp-info) after)\n\t\t (setq cur (mp-info-cur mp-info)) ; scan-forward can change\n\t\t )\n\t \n\t (if* (> pos cur)\n\t    then                        ; got something to return\n\t\t (let* ((tocopy (min (- end start) (- pos cur)))\n\t\t\t(items tocopy))\n\n                   \n\t\t   (if* text-mode\n\t\t      then\n\t\t\t  (dotimes (i tocopy)\n\t\t\t    (setf (aref buffer (+ start i))\n\t\t\t          (code-char (aref mpbuffer (+ cur i)))))\n\t\t      else \n\t\t\t   (dotimes (i tocopy)\n\t\t\t     (setf (aref buffer (+ start i))\n\t\t\t           (aref mpbuffer (+ cur i)))))\n\n                   \n\t\t   (if* (zerop items)\n\t\t      then         ; didn't find enough bytes to make \n                                        ; a character\n\t\t\t           (if* (null (shift-buffer-up-and-read mp-info))\n\t\t\t              then ; no more bytes available\n\t\t\t\t           (return-from get-multipart-sequence nil))\n                                        ; loop around\n\t\t      else (setf (mp-info-cur mp-info) (+ cur tocopy))\n\t\t\t   (return-from get-multipart-sequence \n\t\t\t     (+ start items))))\n\t  elseif (eq kind :partial)\n\t    then                       ; may be a boundary, can't tell\n\t\t  (if* (null (shift-buffer-up-and-read mp-info))\n\t\t     then     ; no more data, partial will never match\n                                        ; so return the partial, this special\n                                        ; state is recognized in this routine\n\t\t\t      (setf (mp-info-state mp-info) :partial)\n                                        ; loop around\n\t\t\t      )\n\t  elseif (or (eq kind :boundary)\n\t\t     (eq kind :last-boundary))\n\t    then              ; hit a boundary, nothing more to return\n\t\t (setf (mp-info-state mp-info) kind\n\t\t       (mp-info-cur   mp-info) pos)\n\t\t (return-from get-multipart-sequence nil)))))))\n\n\n\n\n",
    "metadata": {
      "source": "gornschool-training/t6/resources/source/gwl-patches.lisp",
      "file_name": "gwl-patches.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_6_object_definition",
      "chunk_id": 6,
      "section": "with-form-string"
    },
    "id": "2bd7e856d5be05b777b53bfd9f3798f8"
  },
  {
    "text": "(in-package :gwl-user)\n\n",
    "metadata": {
      "source": "gornschool-training/t6/resources/source/define-basic.lisp",
      "file_name": "define-basic.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_6_object_definition",
      "chunk_id": 0,
      "section": "header"
    },
    "id": "3928cce4d93abafe38e8eaec1da503f0"
  },
  {
    "text": "(define-object define-basic (base-html-page)\n  :computed-slots\n  ((body \"My first web page\"))\n  )\n\n",
    "metadata": {
      "source": "gornschool-training/t6/resources/source/define-basic.lisp",
      "file_name": "define-basic.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_6_object_definition",
      "chunk_id": 0,
      "section": "define-basic"
    },
    "id": "3928cce4d93abafe38e8eaec1da503f0"
  },
  {
    "text": "(define-object define-basic-lhtml (base-html-page)\n  :computed-slots\n  ((body (with-lhtml-string ()\n\t\t      (:table\n\t\t\t  (:tr (:th \"Day\") (:th \"Number\"))\n\t\t\t(:tr (:td \"Sunday\") (:td \"1\"))\n\t\t\t(:tr (:td \"Monday\") (:td \"2\"))\n\t\t\t(:tr (:td \"Tuesday\") (:td \"3\"))\n\t\t\t(:tr (:td \"Wednesday\") (:td \"4\"))\n\t\t\t(:tr (:td \"Thursday\") (:td \"5\"))\n\t\t\t(:tr (:td \"Friday\") (:td \"6\"))\n\t\t\t(:tr (:td \"Saturday\") (:td \"7\"))))))\n\t\t\t\n  )\n\n",
    "metadata": {
      "source": "gornschool-training/t6/resources/source/define-basic.lisp",
      "file_name": "define-basic.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_6_object_definition",
      "chunk_id": 1,
      "section": "define-basic-lhtml"
    },
    "id": "7c868c88b48d753e2965bf8adb96dcb9"
  },
  {
    "text": "(define-object define-basic-styled (base-html-page)\n  :computed-slots\n  ((body (with-lhtml-string ()\n\t\t      (:table :style \"border-style: solid;\"\n\t\t\t  (:tr (:th \"Day\") (:th \"Number\"))\n\t\t\t(:tr (:td \"Sunday\") (:td :style \"text-align: center;\" \"1\"))\n\t\t\t(:tr (:td \"Monday\") (:td :style \"text-align: center;\" \"2\"))\n\t\t\t(:tr (:td \"Tuesday\") (:td :style \"text-align: center;\" \"3\"))\n\t\t\t(:tr (:td \"Wednesday\") (:td :style \"text-align: center;\" \"4\"))\n\t\t\t(:tr (:td \"Thursday\") (:td :style \"text-align: center;\" \"5\"))\n\t\t\t(:tr (:td \"Friday\") (:td :style \"text-align: center;\" \"6\"))\n\t\t\t(:tr (:td \"Saturday\") (:td :style \"text-align: center;\" \"7\"))))))\n\t\t\t\n  )\n\n\n",
    "metadata": {
      "source": "gornschool-training/t6/resources/source/define-basic.lisp",
      "file_name": "define-basic.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_6_object_definition",
      "chunk_id": 2,
      "section": "define-basic-styled"
    },
    "id": "c1af64b1998a81c6a3e56177c246876e"
  },
  {
    "text": "(define-object define-basic-css (base-ajax-sheet)\n  :computed-slots\n  ((additional-header-content (with-cl-who-string()\n\t\t\t\t(:link :rel \"stylesheet\" :href \"/my-style.css\")))\n   (main-sheet-body (with-cl-who-string ()\n\t\t      (:table\n\t\t\t  (:tr (:th \"Day\") (:th \"Number\"))\n\t\t\t(:tr (:td \"Sunday\") (:td \"1\"))\n\t\t\t(:tr (:td \"Monday\") (:td \"2\"))\n\t\t\t(:tr (:td \"Tuesday\") (:td \"3\"))\n\t\t\t(:tr (:td \"Wednesday\") (:td \"4\"))\n\t\t\t(:tr (:td \"Thursday\") (:td  \"5\"))\n\t\t\t(:tr (:td \"Friday\") (:td \"6\"))\n\t\t\t(:tr (:td \"Saturday\") (:td \"7\"))))))\n\t\t\t\n  )\n\n",
    "metadata": {
      "source": "gornschool-training/t6/resources/source/define-basic.lisp",
      "file_name": "define-basic.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_6_object_definition",
      "chunk_id": 3,
      "section": "define-basic-css"
    },
    "id": "73665ab2650ba96bc10dcf4c717029f6"
  },
  {
    "text": "(define-object define-basic-image (base-ajax-sheet)\n  :computed-slots\n  ((additional-header-content (with-cl-who-string()\n\t\t\t\t(:link :rel \"stylesheet\" :href \"/my-style.css\")))\n   (main-sheet-body (with-cl-who-string ()\n\t\t      (:p \"The Genworks International Logo\")\n\t\t      (:img :src \"/images/logo.png\"))))\n\t\t\t\n  )\n",
    "metadata": {
      "source": "gornschool-training/t6/resources/source/define-basic.lisp",
      "file_name": "define-basic.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_6_object_definition",
      "chunk_id": 4,
      "section": "define-basic-image"
    },
    "id": "1c5417879e52f9b177c2ff02c6b7d1f2"
  },
  {
    "text": "(define-object define-basic-image-links (base-ajax-sheet)\n  :computed-slots\n  ((additional-header-content (with-cl-who-string()\n\t\t\t\t(:link :rel \"stylesheet\" :href \"/my-style.css\")))\n   (main-sheet-body (with-cl-who-string ()\n\t\t      (when gwl:*developing?* (str (the development-links)))\n\t\t      (:p \"The Genworks International Logo\")\n\t\t      (:img :src \"/images/logo.png\"))))\n\t\t\t\n  )\n(publish-gwl-app \"/basic\" \"gwl-user::define-basic\")\n(publish-gwl-app \"/basic-lhtml\" \"gwl-user::define-basic-lhtml\")\n(publish-gwl-app \"/basic-styled\" \"gwl-user::define-basic-styled\")\n(publish-gwl-app \"/basic-css\" \"gwl-user::define-basic-css\")\n(publish-gwl-app \"/basic-image\" \"gwl-user::define-basic-image\")\n(publish-gwl-app \"/basic-image-links\" \"gwl-user::define-basic-image-links\") \n\n;; this parameter plus the following publishing assumes a directory structure as follows\n;; some-path/source - LISP source files\n;; some-path/css - CSS files\n;; some-path/images - image files\n;; the actual value of some-patch doesn't matter providing the 3 folder above have the same root path\n\n(defparameter *home*\n  (merge-pathnames \"../\" (make-pathname :name nil :type nil :defaults (glisp:source-pathname))))\n\n(gwl::publish-file :path \"/my-style.css\"\n\t\t   :file (namestring (merge-pathnames \"css/my-style.css\" *home*)))\n\n(gwl::publish-directory :prefix \"/images\"\n\t\t\t:destination (namestring (merge-pathnames \"images/\"  *home*)))\n",
    "metadata": {
      "source": "gornschool-training/t6/resources/source/define-basic.lisp",
      "file_name": "define-basic.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_6_object_definition",
      "chunk_id": 5,
      "section": "define-basic-image-links"
    },
    "id": "62f37c116119eaccb82aada57ef5d1e1"
  },
  {
    "text": "(in-package :gwl-user)\n\n",
    "metadata": {
      "source": "gornschool-training/t6/resources/source/building-bom-input-output.lisp",
      "file_name": "building-bom-input-output.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_6_object_definition",
      "chunk_id": 0,
      "section": "header"
    },
    "id": "06581eb52c57bd08cda917f2f78fb65e"
  },
  {
    "text": "(defun read-file (file )\n  (let ((result))\n    (with-open-file (str file :direction :input)\n      (do ((line (read-line str nil 'eof)\n\t\t (read-line str nil 'eof)))\n\t  ((eql line 'eof) result)\n\t(setq result (append result (list line)))))))\n\n",
    "metadata": {
      "source": "gornschool-training/t6/resources/source/building-bom-input-output.lisp",
      "file_name": "building-bom-input-output.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_6_object_definition",
      "chunk_id": 0,
      "section": "read-file"
    },
    "id": "06581eb52c57bd08cda917f2f78fb65e"
  },
  {
    "text": "(defun import-building-data (file)\n  (let* ((raw-data (read-file file))\n\t (res (mapcar #'(lambda(a) (glisp:split-regexp \"\\\\s+\" a)) raw-data)))\n    (mapcan #'(lambda(a) (list\n\t\t\t  (make-keyword (first a))\n\t\t\t  (read-safe-string (second a)))) res)))\n       \n\n",
    "metadata": {
      "source": "gornschool-training/t6/resources/source/building-bom-input-output.lisp",
      "file_name": "building-bom-input-output.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_6_object_definition",
      "chunk_id": 1,
      "section": "import-building-data"
    },
    "id": "698f33e930c8988b3f0b585df139137c"
  },
  {
    "text": "(defun building-bom (&key (nominal-height nil) \n\t\t       (nominal-width nil)\n\t\t       (nominal-length nil)\n\t\t       (roof-angle nil)\n\t\t       (input-filename nil)\n\t\t       (output-filename nil))\n  (let ((obj (make-object 'building\n\t\t\t  :function-nominal-height nominal-height\n\t\t\t  :function-nominal-width nominal-width\n\t\t\t  :function-nominal-length nominal-length\n\t\t\t  :function-truss-angle roof-angle\n\t\t\t  :output-filename output-filename\n\t\t\t  :input-filename input-filename)))\n    (if output-filename (theo obj write-bom-file!)\n\t(theo obj bom-formatted))))\n\n",
    "metadata": {
      "source": "gornschool-training/t6/resources/source/building-bom-input-output.lisp",
      "file_name": "building-bom-input-output.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_6_object_definition",
      "chunk_id": 2,
      "section": "building-bom"
    },
    "id": "2ebae10068110d7ab8a6a15921d09537"
  },
  {
    "text": "(define-object building (box)\n  :input-slots\n  ((function-nominal-height nil)\n   (function-nominal-width nil)\n   (function-nominal-length nil)\n   (function-truss-angle  nil)\n   (input-filename nil)\n   (output-filename nil)\n   \n   (brick-height (or (getf (the file-inputs) :brick-height) 45))\n   (brick-length (or (getf (the file-inputs) :brick-length) 180))\n   (brick-width (or (getf (the file-inputs) :brick-width) 90))\n   (mortar-joint-width (or (getf (the file-inputs) :mortar-joint-width) 10))\n   (beam-width (or (getf (the file-inputs) :beam-width) 40))\n   (beam-height (or (getf (the file-inputs) :beam-height) 50))\n   (wall-thickness (or (getf (the file-inputs) :wall-thickness) 3))\n   (material-density (or (getf (the file-inputs) :material-density) 7800))\n   (roof-overhang (or (getf (the file-inputs) :roof-overhang) 50))\n   (cladding-thickness (or (getf (the file-inputs) :cladding-thickness) 10))\n   (max-beam-spacing (or (getf (the file-inputs) :max-beam-spacing) 1500))\n   )\n\n  :computed-slots\n  ((file-inputs (when (the input-filename) (import-building-data (the input-filename))))\n   (nominal-height (or (the function-nominal-height)\n\t\t       (getf (the file-inputs) :nominal-height)\n\t\t       3000))\n   (nominal-width (or (the function-nominal-width)\n\t\t      (getf (the file-inputs) :nominal-width)\n\t\t      3000))\n   (nominal-length (or (the function-nominal-length)\n\t\t       (getf (the file-inputs) :nominal-length)\n\t\t       4000))\n   (truss-angle (or (the function-truss-angle)\n\t\t    (getf (the file-inputs) :truss-angle)\n\t\t    30))\n\n   \n   \n   (length (the left-wall length))\n   (width (the rear-wall length))\n   (height (+ (the left-wall height) (the (roof-truss 0) height)))\n\n   (number-of-roof-trusses (let ((trusses (ceiling (the left-wall length) 1500)))\n\t\t\t     (max trusses 2)))\n\n   (truss-spacing (div (- (the left-wall length) (the beam-width))\n\t\t       (- (the number-of-roof-trusses) 1)))\n   (truss-offsets (let ((res nil))\n\t\t    (dotimes (n (the number-of-roof-trusses) (nreverse res))\n\t\t      (push (+ (half (the beam-width))\n\t\t\t       (* n (the truss-spacing))) res))))\n\n   (roof-length (+ (the left-wall length) (twice (the roof-overhang))))\n   (roof-width (the cladding-thickness))\n   (roof-height (let ((apex (the (roof-truss 0) apex-point))\n\t\t      (gutter (the (roof-truss 0) front-gutter-point)))\n\t\t  (+ (3d-distance apex gutter) (the roof-overhang))))\n\n   ;; building properties\n   (walls (remove nil (mapcar #'(lambda(a) (when (typep a 'wall) a)) (the children))))\n   (full-bricks (apply '+ (mapsend (the walls) :full-bricks)))\n   (half-bricks (apply '+ (mapsend (the walls) :half-bricks)))\n   (mortar-volume (apply '+ (mapsend (the walls) :mortar-volume)))\n   (cladding-dimensions (list :length (the roof-length)\n\t\t\t      :width (the roof-height)))\n   (beam-properties (the (roof-truss 0) beam-properties))\n   (beam-qty-by-size (let ((res nil))\n\t\t       (dolist (plis (the beam-properties) )\n\t\t\t (let* ((trusses (the number-of-roof-trusses))\n\t\t\t\t(l (getf plis :length-mm))\n\t\t\t\t(p (position l res :key #'(lambda(a) (getf a :length-mm))))\n\t\t\t\t(qty (when p (getf (nth p res) :qty))))\n\t\t\t   (if p (setf (getf (nth p res) :qty) (+ qty trusses))\n\t\t\t       (setq res (append (list (list :length-mm l :qty trusses)) res)))))\n\t\t       (safe-sort res '< :key #'(lambda(a) (getf a :length-mm)))))\n\t\t       \n\n   (roof-truss-mass (* (apply '+ (mapcar #'(lambda(a) (getf a :mass-kg))\n\t\t\t\t\t (the beam-properties)))\n\t\t       (the number-of-roof-trusses)))\n\n   (building-materials (list :full-bricks (the full-bricks)\n\t\t\t     :half-bricks (the half-bricks)\n\t\t\t     :mortar-volume-m3 (div (the mortar-volume) 1000000000)\n\t\t\t     :beams (the beam-qty-by-size)\n\t\t\t     :roof-cladding (append (the cladding-dimensions) (list :qty 2))))\n\n  (bom-formatted (let* ((bom (the building-materials))\n\t\t\t(cladding (getf bom :roof-cladding))\n\t\t\t(bricks (format nil \"Bricks~%======~%  Full Bricks ~a~%  Half Bricks ~a~%\" \n\t\t\t\t\t(getf bom :full-bricks) \n\t\t\t\t\t(getf bom :half-bricks)))\n\t\t\t(mortar (format nil \"Mortar~%======~%  Volume ~,3f m^3~%\" \n\t\t\t\t\t(getf bom :mortar-volume-m3)))\n\t\t\t(l (round-to-nearest (getf cladding :length) 1))\n\t\t\t(w (round-to-nearest (getf cladding :width) 1))\n\t\t\t(roof (format nil \"Roof Cladding~%======~%  Qty ~a~%  Dimensions (L x W x T) ~d x ~d x ~d~%\" \n\t\t\t\t      (getf cladding :qty)\n\t\t\t\t      l w (the cladding-thickness)))\n\t\t\t(beams (getf (the building-materials) :beams))\n\t\t\t(beams-list (flatten\n\t\t\t\t     (mapcar #'(lambda(a)\n\t\t\t\t\t\t (list (getf a :qty) (round-to-nearest (getf a :length-mm) 1)))\n\t\t\t\t\t     beams)))\n\t\t\t\n\t\t\t(beams-header (format nil \"Beams~%=====~%  Section (H x W x T) ~a x ~a x ~a~%\"\n\t\t\t\t\t\t (the beam-height) (the beam-width) (the wall-thickness)))\n\t\t\t(beam-lengths (format nil \"~{  Qty ~a Length ~a~%~}\" beams-list)))\n\t\t   (format nil \"~@{~a~}\" bricks mortar roof beams-header beam-lengths))) \n   \n\t\t\n   )\n\n  :functions\n  ((write-bom-file! ()\n\t\t    (with-open-file (s (the output-filename) :direction :output\n\t\t\t\t\t\t:if-exists :supersede\n\t\t\t\t\t\t:if-does-not-exist :create)\n\t\t      (format t \"Exporting the BOM to ~a~%\" (the output-filename))\n\t\t      (format s \"~a\" (the bom-formatted))\n\t\t      (format t \"Exporting complete~%\")))\n\n\n\n   (get-roof-mid-point! (first-gutter last-gutter last-index)\n\t\t       (let*((mid-gutter (midpoint first-gutter last-gutter))\n\t\t\t     (first-apex (the (roof-truss 0) apex-point))\n\t\t\t     (last-apex (the (roof-truss last-index) apex-point))\n\t\t\t     (mid-apex (midpoint first-apex last-apex))\n\t\t\t     (vec (subtract-vectors mid-gutter mid-apex))\n\t\t\t     (mid-edge (translate-along-vector mid-gutter vec (the roof-overhang))))\n\t\t\t (midpoint mid-apex mid-edge))) )\n  \n  :objects\n  ((left-wall :type 'wall\n\t      :pass-down (brick-height\n\t\t\t  brick-length\n\t\t\t  brick-width\n\t\t\t  mortar-joint-width)\n\t      :center (translate-along-vector\n\t\t       (translate-along-vector (the (edge-center :bottom :left))\n\t\t\t\t\t       (the (face-normal-vector :right))\n\t\t\t\t\t       (half (the-child width)))\n\t\t       (the (face-normal-vector :top))\n\t\t       (half (the-child height)))\n\t      :wall-length (the nominal-length)\n\t      :wall-height (the nominal-height))\n\n   (right-wall :type 'wall\n\t       :pass-down (brick-height\n\t\t\t   brick-length\n\t\t\t   brick-width\n\t\t\t   mortar-joint-width)\n\t       :center (translate-along-vector\n\t\t\t(translate-along-vector (the (edge-center :bottom :right))\n\t\t\t\t\t\t(the (face-normal-vector :left))\n\t\t\t\t\t\t(half (the-child width)))\n\t\t\t(the (face-normal-vector :top))\n\t\t\t(half (the-child height)))\n\t       :wall-length (the nominal-length)\n\t       :wall-height (the nominal-height))\n\n   (rear-wall :type 'wall\n\t      :pass-down (brick-height\n\t\t\t  brick-length\n\t\t\t  brick-width\n\t\t\t  mortar-joint-width)\n\t      :center (translate-along-vector\n\t\t\t(translate-along-vector (the (edge-center :bottom :rear))\n\t\t\t\t\t\t(the (face-normal-vector :front))\n\t\t\t\t\t\t(half (the-child width)))\n\t\t\t(the (face-normal-vector :top))\n\t\t\t(half (the-child height)))\n\t      :orientation (alignment :rear (the (face-normal-vector :right)))\n\t      :wall-length (the nominal-width)\n\t      :wall-height (the nominal-height))\n\n   (roof-truss :type 'truss\n\t       :sequence (:size (the number-of-roof-trusses))\n\t       :truss-length (the rear-wall length)\n\t       :center (translate-along-vector\n\t\t\t(translate-along-vector (the (edge-center :front :top))\n\t\t\t\t\t\t(the (face-normal-vector :bottom))\n\t\t\t\t\t\t(half (the-child height)))\n\t\t\t(the (face-normal-vector :rear))\n\t\t\t(nth (the-child index) (the truss-offsets)))\n\t       :orientation (alignment :rear (the (face-normal-vector :right))\n\t\t\t\t       )\t\t\n\t       :pass-down (truss-angle\n\t\t\t   beam-width\n\t\t\t   beam-height\n\t\t\t   wall-thickness\n\t\t\t   material-density))\n   \n   (roof-cladding-left\n    :type 'box\n    :length (the roof-length)\n    :height (the roof-height)\n    :width (the cladding-thickness)\n    :orientation (alignment :left (the (roof-truss 0) front-slope-normal))\n    :center (let* ((last-index (- (the number-of-roof-trusses) 1))\n\t\t   (first-gutter (the (roof-truss 0) front-gutter-point))\n\t\t   (last-gutter (the (roof-truss last-index) front-gutter-point))\n\t\t   (mid-ctr (the (get-roof-mid-point! first-gutter last-gutter last-index))))\n\t      (translate-along-vector mid-ctr\n\t\t\t\t      (the (roof-truss 0) front-slope-normal)\n\t\t\t\t      (half (the cladding-thickness)))))\n   \n   (roof-cladding-right :type 'box\n\t\t\t:length (the roof-length)\n\t\t\t:height (the roof-height)\n\t\t\t:width (the cladding-thickness)\n\t\t\t:orientation (alignment :left (the (roof-truss 0) rear-slope-normal))\n\t\t\t :center (let* ((last-index (- (the number-of-roof-trusses) 1))\n\t\t\t\t\t(first-gutter (the (roof-truss 0) rear-gutter-point))\n\t\t\t\t\t(last-gutter (the (roof-truss last-index) rear-gutter-point))\n\t\t\t\t\t(mid-ctr (the (get-roof-mid-point! first-gutter last-gutter last-index))))\n\t\t\t\t (translate-along-vector mid-ctr\n\t\t\t\t\t\t\t (the (roof-truss 0) rear-slope-normal)\n\t\t\t\t\t\t\t (half (the cladding-thickness)))))\n   )\n\n  \n\t\t       \n  )\n\n\n",
    "metadata": {
      "source": "gornschool-training/t6/resources/source/building-bom-input-output.lisp",
      "file_name": "building-bom-input-output.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_6_object_definition",
      "chunk_id": 3,
      "section": "building"
    },
    "id": "493c57d2fd5261b724c6f40cc82385b5"
  },
  {
    "text": "(define-object wall(box)\n  :input-slots\n  ((brick-height 45)\n   (brick-length 180)\n   (brick-width 90)\n   (mortar-joint-width 10)\n   (wall-length 3700)\n   (wall-height 900)\n   (first-row :start-full)\n   (front-edge :full)\n   (rear-edge :full))\n\n  :computed-slots\n  ((row-height (+ (the brick-height) (the mortar-joint-width)))\n   (number-of-rows (round-to-nearest (div (the wall-height) (the row-height)) 1))\n   (actual-wall-height (* (the row-height) (the number-of-rows)))\n   \n   ;; for the wall-length we need the number of full bricks\n   ;; if there are n full bricks then there will be (n-1) mortar joints\n   ;; so n*brick-length + n-1*mortar-joint-width = overall-length\n   ;; or n(brick-length + mortar-join-width) - mortar-joint-width = overall-length\n   ;; or n = (overall-length - mortar-joint-width)/(brick-length + mortar-joint-width)\n   (number-of-bricks (round-to-nearest (div (- (the wall-length) (the mortar-joint-width))\n\t\t\t\t\t    (+ (the brick-length) (the mortar-joint-width)))\n\t\t\t\t       1))\n   (actual-wall-length (+ (* (the number-of-bricks) (the brick-length))\n\t\t\t  (* (- (the number-of-bricks) 1) (the mortar-joint-width))))\n\n   ;; box inputs - gives the wall bounding box\n   (height (the actual-wall-height))\n   (width (the brick-width))\n   (length (the actual-wall-length))\n\n   (full-bricks (apply '+ (list-elements (the row) (the-element full-bricks))))\n   (half-bricks (apply '+ (list-elements (the row) (the-element half-bricks))))\n   (mortar-volume (apply '+ (list-elements (the row) (the-element mortar-volume))))\n   (mortar-density 2162)\n   (mortar-mass (* (the mortar-density) (div (the mortar-volume) 1000000000)))\n   )\n   \n     \n  :objects\n  ((row :type 'row\n     :sequence (:size (the number-of-rows))\n     :center (translate-along-vector (the (face-center :bottom))\n\t\t\t\t     (the (face-normal-vector :top))\n\t\t\t\t     (+ (half (the-child height))\n\t\t\t\t\t(* (the-child index) (the-child height))))\n     :height (+ (the brick-height) (the mortar-joint-width))\n     :full-bricks-per-row (the number-of-bricks)\n     :pass-down (brick-height\n\t\t brick-length\n\t\t brick-width\n\t\t mortar-joint-width\n\t\t length\n\t\t width\n\t\t first-row\n\t\t front-edge\n\t\t rear-edge))))\n\n",
    "metadata": {
      "source": "gornschool-training/t6/resources/source/building-bom-input-output.lisp",
      "file_name": "building-bom-input-output.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_6_object_definition",
      "chunk_id": 4,
      "section": "wall"
    },
    "id": "6310c4c32ccf22cbe14aece80e1ae705"
  },
  {
    "text": "(define-object row (box)\n  :input-slots\n  (full-bricks-per-row\n   brick-height\n   brick-length\n   brick-width\n   mortar-joint-width\n   first-row\n   front-edge\n   rear-edge )\n\n  :computed-slots\n  ((full-brick-row? (cond ((eq (the first-row) :start-full)\n\t\t\t   (or (zerop (the index)) (evenp (the index))))\n\t\t\t  ((eq (the first-row) :start-half)\n\t\t\t   (not (or (zerop (the index)) (evenp (the index)))))))\n\t\t    \n   (full-bricks (the bricks-and-mortar full-bricks))\n   (half-bricks (the bricks-and-mortar half-bricks))\n   (mortar-volume (+ (the bricks-and-mortar mortar-joint-volume)\n\t\t     (the mortar-bed volume))))\n\n  :objects\n  ((bricks-and-mortar :type 'bricks-and-mortar\n\t\t      :height (the brick-height)\n\t\t      :center (translate-along-vector (the mortar-bed (face-center :top))\n\t\t\t\t\t\t      (the mortar-bed (face-normal-vector :top))\n\t\t\t\t\t\t      (half (the-child height)))\n\t\t      :pass-down (width\n\t\t\t\t  length\n\t\t\t\t  full-brick-row?\n\t\t\t\t  brick-height\n\t\t\t\t  brick-length\n\t\t\t\t  brick-width\n\t\t\t\t  mortar-joint-width\n\t\t\t\t  full-bricks-per-row\n\t\t\t\t  front-edge\n\t\t\t\t  rear-edge))\n   (mortar-bed :type 'box\n\t       :height (the mortar-joint-width)\n\t       :center (translate-along-vector (the (face-center :bottom))\n\t\t\t\t\t       (the (face-normal-vector :top))\n\t\t\t\t\t       (half (the-child height)))\n\t       :pass-down (width\n\t\t\t   length))))\n\n",
    "metadata": {
      "source": "gornschool-training/t6/resources/source/building-bom-input-output.lisp",
      "file_name": "building-bom-input-output.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_6_object_definition",
      "chunk_id": 5,
      "section": "row"
    },
    "id": "066823728e73c54159f5d1e4efac8140"
  },
  {
    "text": "(define-object bricks-and-mortar (box)\n  :input-slots\n  (full-brick-row?\n   full-bricks-per-row\n   brick-height\n   brick-length\n   brick-width\n   mortar-joint-width\n   front-edge\n   rear-edge)\n\n  :computed-slots\n  ((first-full-brick-start-point (if (the full-brick-row?)\n\t\t\t\t     (the (face-center :front))\n\t\t\t\t     (the (mortar-joint 0) (face-center :rear))))\n   \n   (first-mortar-joint-start-point (cond ((the full-brick-row?) (the (full-brick 0) (face-center :rear)))\n\t\t\t\t\t ((eq (the front-edge) :full) (the (half-brick 0) (face-center :rear)))\n\t\t\t\t\t ((eq (the front-edge) :keyed) (translate-along-vector (the (face-center :front))\n\t\t\t\t\t\t\t\t\t\t\t       (the (face-normal-vector :rear))\n\t\t\t\t\t\t\t\t\t\t\t       (half (the brick-length))))))\n\n   (number-of-full-bricks (if (the full-brick-row?)\n\t\t\t      (the full-bricks-per-row)\n\t\t\t      (- (the full-bricks-per-row) 1)))\n\n   (number-of-half-bricks (cond ((the full-brick-row?) 0)\n\t\t\t\t((and (eq (the front-edge) :full)(eq (the rear-edge) :full)) 2)\n\t\t\t\t((and (eq (the front-edge) :keyed) (eq (the rear-edge) :full)) 1)\n\t\t\t\t((and (eq (the front-edge) :full) (eq (the rear-edge) :keyed)) 1)\n\t\t\t\t((and (eq (the front-edge) :keyed) (eq (the rear-edge) :keyed)) 0)))\n\n   ;; whether or not the ends are :full or :keyed, the number of mortar joints remains the same since the mortar joint\n   ;; when it is :keyed is used to connect to the full brick of the other wall\n   (number-of-mortar-joints (if (the full-brick-row?)\n\t\t\t\t(- (the number-of-full-bricks) 1)\n\t\t\t\t(+ (the number-of-full-bricks) 1)))\n\n   ;; if it isn't a full brick row then there will be an extra joint because one\n   ;; full brick is replaced with 2 half bricks so without correcting the\n   ;; mortar-joint-width the ends of a full brick row and one starting and\n   ;; finishing with half bricks won't align. So we need to correct\n   ;; the mortar-joint-width\n   (corrected-joint-width (if (the full-brick-row?)\n\t\t\t\t     (the mortar-joint-width)\n\t\t\t\t     (let ((total-gap (* (- (the number-of-mortar-joints) 1)\n\t\t\t\t\t\t\t\t\t(the mortar-joint-width))))\n\t\t\t\t       (div total-gap (the number-of-mortar-joints)))))\n   ;; collating the output. We could do this analytically, but for this example we'll use the geometry\n   (full-bricks (length (list-elements (the full-brick))))\n   (half-bricks (length (list-elements (the half-brick))))\n   (mortar-joint-volume (apply '+ (list-elements (the mortar-joint)\n\t\t\t\t\t\t (the-element volume))))\n   )\n  \n  :functions\n  ((first-full-brick-center!\n    ()\n    (translate-along-vector (the first-full-brick-start-point)\n\t\t\t    (the (face-normal-vector :rear))\n\t\t\t    (half (the brick-length))))\n   \n   (other-full-brick-center!\n    (index)\n    ;; if its a full brick row, (full-brick 1) is positioned relative to (joint 0)\n    ;; if its a half brick row, (full-brick 1) is positioned relative to (joint 1)\n    (let ((ind (if (the full-brick-row?) (- index 1) index)))\n\t  (translate-along-vector (the (mortar-joint ind) (face-center :rear))\n\t\t\t\t  (the (face-normal-vector :rear))\n\t\t\t\t  (half (the brick-length)))))\n   \n    (first-joint-center!\n     ()\n     (translate-along-vector (the first-mortar-joint-start-point)\n\t\t\t     (the (face-normal-vector :rear))\n\t\t\t     (half (the corrected-joint-width))))\n   (other-joint-center!\n    (index)\n    ;; if its a full brick row, (joint 1) is positioned relative to (full-brick 1)\n    ;; if its a half brick row, (joint 1) is positioned relative to (full-brick 0)\n    (let ((ind (if (the full-brick-row?) index (- index 1))))\n      (translate-along-vector (the (full-brick ind) (face-center :rear))\n\t\t\t      (the (face-normal-vector :rear))\n\t\t\t      (half (the corrected-joint-width)))))\n\n    (first-half-brick-center!\n     ()\n     (translate-along-vector (the (face-center :front))\n\t\t\t     (the (face-normal-vector :rear))\n\t\t\t     (half (half (the brick-length)))))\n   \n   (last-half-brick-center!\n     ()\n     (translate-along-vector (theo (the mortar-joint last) (face-center :rear))\n\t\t\t     (the (face-normal-vector :rear))\n\t\t\t     (half (half (the brick-length))))))\n \t\t\t     \n  \n  :objects\n  ((full-brick :type 'box\n\t       :sequence (:size (the number-of-full-bricks))\n\t       :center (if (= (the-child index) 0)\n\t\t\t   (the first-full-brick-center!)\n\t\t\t   (the (other-full-brick-center! (the-child index))))\n\t       :length (the brick-length)\n\t       :height (the brick-height)\n\t       :width (the brick-width))\n\n   (half-brick :type 'box\n\t       :sequence (:size (the number-of-half-bricks))\n\t       :center (cond ((and (= (the-child index) 0)\n\t\t\t\t   (eq (the front-edge) :full)) (the first-half-brick-center!))\n\t\t\t     ((and (= (the-child index) 0)\n\t\t\t\t   (eq (the front-edge) :keyed)\n\t\t\t\t   (eq (the rear-edge) :full)) (the last-half-brick-center!))\n\t\t\t     ((eq (the rear-edge) :full) (the last-half-brick-center!)))\n\t       :length (half (the brick-length))\n\t       :height (the brick-height)\n\t       :width (the brick-width))\n\n   (mortar-joint :type 'box\n\t\t :sequence (:size (the number-of-mortar-joints))\n\t\t :center (if (= (the-child index) 0)\n\t\t\t     (the first-joint-center!)\n\t\t\t  (the (other-joint-center! (the-child index))))   \n\t\t :height (the brick-height)\n\t\t :width (the brick-width)\n\t\t :length (the corrected-joint-width))))\n\n\n",
    "metadata": {
      "source": "gornschool-training/t6/resources/source/building-bom-input-output.lisp",
      "file_name": "building-bom-input-output.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_6_object_definition",
      "chunk_id": 6,
      "section": "bricks-and-mortar"
    },
    "id": "b5b88f86db7071f208127d8f292e8f03"
  },
  {
    "text": "(defun degrees-to-radians (degrees)\n  (div (* degrees pi) 180))\n\n\n",
    "metadata": {
      "source": "gornschool-training/t6/resources/source/building-bom-input-output.lisp",
      "file_name": "building-bom-input-output.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_6_object_definition",
      "chunk_id": 7,
      "section": "degrees-to-radians"
    },
    "id": "b56300ef209aab947aca7eeb09f10f5f"
  },
  {
    "text": "(define-object truss (box)\n  :input-slots\n  ((truss-length 2000)\n   (truss-height nil)\n   (truss-angle 30)\n\n   (beam-width 30)\n   (beam-height 50)\n   (wall-thickness 3)\n\n   (material-density 7800)\n   (tonne-rate 450))\n\n  :computed-slots\n  ((length (the truss-length))\n   (height (cond ((the truss-height)(the truss-height))\n\t\t ((the truss-angle) (+ (* (half (the truss-length))\n\t\t\t\t\t  (tan (degrees-to-radians (the truss-angle))))\n\t\t\t\t       (the beam-height)))))\n   (width (the beam-width))\n  \n   (truss-front-slope-vector (the (get-slope-vector! :front)))\n   (truss-rear-slope-vector (the (get-slope-vector! :rear)))\n\n   (front-slope-length (the (get-slope-length! :front)))\n   (rear-slope-length (the (get-slope-length! :rear)))\n   \n   (front-slope-center (the (get-slope-center! :front)))\n   (rear-slope-center (the (get-slope-center! :rear)))\n   \n\n   (beam-properties (mapsend (the children) :beam-properties))\n   (total-mass (round-to-nearest\n\t\t(apply '+\n\t\t       (mapcar #'(lambda(a) (getf a :mass-kg))\n\t\t\t       (the beam-properties)))\n\t\t0.001))\n   (total-cost (round-to-nearest\n\t\t(apply '+\n\t\t       (mapcar #'(lambda(a) (getf a :cost-gbp))\n\t\t\t       (the beam-properties)))\n\t\t0.01))\n\n   ;; messages to support roof cladding sizing and positioning\n   (apex-point (inter-line-plane (the rear-slope-construction-line end)\n\t\t\t   (the truss-rear-slope-vector)\n\t\t\t   (the lower-beam center)\n\t\t\t\t (the (face-normal-vector :rear))))\n   (front-gutter-point (the front-slope-construction-line start))\n   (rear-gutter-point (the rear-slope-construction-line start))\n   (front-slope-normal (the front-slope-beam (face-normal-vector :top)))\n   (rear-slope-normal (the rear-slope-beam (face-normal-vector :top)))\n   )\n\n  :functions\n  ((get-slope-vector! (beam-side)\n\t\t      (let ((v-key (the (get-v-key! beam-side)))\n\t\t\t    (l-key (the (get-l-key! beam-side))))\n\t\t      (subtract-vectors (the vertical-beam (edge-center :rear v-key))\n\t\t\t\t\t(the lower-beam (edge-center l-key :top)))))\n   (get-slope-length! (beam-side)\n\t\t      (let ((v-key (the (get-v-key! beam-side)))\n\t\t\t    (l-key (the (get-l-key! beam-side))))\n\t\t\t(3d-distance (the vertical-beam (edge-center :rear v-key))\n\t\t\t\t     (the lower-beam (edge-center l-key :top)))))\n   (get-slope-center!\n    (beam-side)\n    (let ((pt (case beam-side\n\t\t(:front (the front-slope-construction-line center))\n\t\t(:rear  (the rear-slope-construction-line center))))\n\t  (norm-vector (case beam-side\n\t\t\t (:front (the front-slope-beam (face-normal-vector :bottom)))\n\t\t\t (:rear (the rear-slope-beam (face-normal-vector :bottom))))))\n      (translate-along-vector pt\n\t\t\t      norm-vector\n\t\t\t      (half (the beam-height)))))\n   (get-v-key! (beam-side)\n\t       (case beam-side\n\t\t (:front :top)\n\t\t (:rear :bottom)))\n   (get-l-key! (beam-side)\n\t       (case beam-side\n\t\t (:front :front)\n\t\t (:rear :rear)))\n\n   \n   )\n   \n  \n  \n  :objects\n  ((lower-beam :type 'beam\n\t       :pass-down (:beam-height :beam-width :wall-thickness :material-density :tonne-rate)\n\t       :beam-length (the truss-length)\n\t       :center (translate-along-vector (the (face-center :bottom))\n\t\t\t\t\t       (the (face-normal-vector :top))\n\t\t\t\t\t       (half (the beam-height))))\n   (vertical-beam :type 'beam\n\t\t  :pass-down (:beam-height :beam-width :wall-thickness :material-density :tonne-rate)\n\t\t  \n\t\t  :beam-length (- (the height) (the beam-height))\n\t\t  :orientation (alignment :rear (the (face-normal-vector :top))\n\t\t\t\t\t  :right (the (face-normal-vector :right)))  \n\t\t  :center (translate-along-vector (the lower-beam (face-center :top))\n\t\t\t\t\t\t  (the lower-beam (face-normal-vector :top))\n\t\t\t\t\t\t  (half (the-child beam-length))))\n   (front-slope-beam :type 'beam\n\t\t     :pass-down (:beam-height :beam-width :wall-thickness :material-density :tonne-rate)\n\t\t     :beam-length (the front-slope-length)\n\t\t     :center (the front-slope-center)\n\t\t     :orientation (alignment :rear (the truss-front-slope-vector)\n\t\t\t\t\t     :right (the (face-normal-vector :right))))\n\n   (rear-slope-beam :type 'beam\n\t\t    :pass-down (:beam-height :beam-width :wall-thickness :material-density :tonne-rate)\n\t\t    :beam-length (the rear-slope-length)\n\t\t    :center (the rear-slope-center)\n\t\t    :orientation (alignment :rear (the truss-rear-slope-vector)\n\t\t\t\t\t    :left (the (face-normal-vector :right))))\n   \n   )\n\n  :hidden-objects\n  ((apex-pt :type 'sphere\n\t    :radius 5\n\t    :display-controls (list :color :green)\n\t    :center (the apex-point))\n   (front-slope-construction-line :type 'line\n\t\t\t\t  :start (the lower-beam (edge-center :front :top))\n\t\t\t\t  :end (the vertical-beam (edge-center :rear :top)))\n   (rear-slope-construction-line :type 'line\n\t\t\t\t :start (the lower-beam (edge-center :rear :top))\n\t\t\t\t :end (the vertical-beam (edge-center :rear :bottom)))\n   \n   (front-mid-pt :type 'sphere\n\t\t :display-controls (list :color :blue)\n\t\t :radius 5\n\t\t :center (the front-slope-construction-line center))\n   (rear-mid-pt :type 'sphere\n\t\t:display-controls (list :color :blue)\n\t\t:center (the rear-slope-construction-line center)\n\t\t:radius 5)\n   (pt-1 :type 'sphere\n\t :radius 5\n\t :display-controls (list :color :green)\n\t :center (the lower-beam (edge-center :rear :top)))\n   (pt-2 :type 'sphere\n\t :radius 5\n\t :display-controls (list :color :red)\n\t :center (the vertical-beam (edge-center :rear :bottom)) )\n\n   \n\n   (vector-line :type 'vector-line\n\t\t:start-point (the rear-slope-construction-line center)\n\t\t:vector (the rear-slope-beam (face-normal-vector :bottom))\n\t\t:length 150)\n   \n   ))\n\n",
    "metadata": {
      "source": "gornschool-training/t6/resources/source/building-bom-input-output.lisp",
      "file_name": "building-bom-input-output.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_6_object_definition",
      "chunk_id": 8,
      "section": "truss"
    },
    "id": "f465100e38334491fde125e040c20be4"
  },
  {
    "text": "(define-object vector-line (box)\n  :input-slots\n  ((start-point (make-point 0 0 0))\n   (vector (make-vector 1 0 1))\n   (length 50)\n   (width 1))\n  :computed-slots\n  ((height (div (the length) 5)))\n  :objects\n  ((v-line :type 'line\n\t   :start (the start-point)\n\t   :display-controls (list :color :red)\n\t   :end (translate-along-vector (the start-point)\n\t\t\t\t\t(the vector)\n\t\t\t\t\t(the length)))\n   (arrow :type 'cone\n\t  :radius-1 0\n\t  :radius-2 (div (the length) 50)\n\t  :length (div (the length) 5)\n\t  :display-controls (list :color :red)\n\t  :center (translate-along-vector (the v-line end)\n\t\t\t\t\t  (the vector)\n\t\t\t\t\t  (half (the-child length)))\n\t  :orientation (alignment :front (the vector)))))\n\n\t\t\t \n\t\t  \n",
    "metadata": {
      "source": "gornschool-training/t6/resources/source/building-bom-input-output.lisp",
      "file_name": "building-bom-input-output.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_6_object_definition",
      "chunk_id": 9,
      "section": "vector-line"
    },
    "id": "cbed2f384d3137ca0976aff483280d94"
  },
  {
    "text": "(define-object beam (box)\n  :input-slots\n  ((beam-length 1000)\n   (beam-width 40)\n   (beam-height 50)\n   (wall-thickness 2)\n   (material-density 7800)\n   (tonne-rate 500))\n\n  :computed-slots\n  ((length (the beam-length))\n   (width (the beam-width))\n   (height (the beam-height))\n\n   (beam-volume (- (the outer volume) (the inner volume)))\n   (beam-mass (* (div (the beam-volume) 1000000000) (the material-density)))\n   (beam-cost (* (the tonne-rate) (div (the beam-mass) 1000)))\n   (beam-properties (list :volume-mm3 (the beam-volume)\n\t\t\t  :mass-kg (round-to-nearest (the beam-mass) 0.01)\n\t\t\t  :cost-gbp (round-to-nearest (the beam-cost) 0.01)\n\t\t\t  :length-mm (the beam-length)\n\t\t\t  :width-mm (the beam-width)\n\t\t\t  :height-mm (the beam-height)\n\t\t\t  :thickness-mm (the wall-thickness))))\n   \n  :objects\n  ((outer :type 'box\n\t  :length (the beam-length)\n\t  :width (the beam-width)\n\t  :height (the beam-height))\n\n   (inner :type 'box\n\t  :length (the beam-length)\n\t  :width (- (the beam-width) (twice (the wall-thickness)))\n\t  :height (- (the beam-height) (twice (the wall-thickness)))))\n  )\n\n\n\n\n\n\n\n\n\n",
    "metadata": {
      "source": "gornschool-training/t6/resources/source/building-bom-input-output.lisp",
      "file_name": "building-bom-input-output.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_6_object_definition",
      "chunk_id": 10,
      "section": "beam"
    },
    "id": "e0a901e88a58ac033b7da7fd848f0cc9"
  },
  {
    "text": "(in-package :gdl-user)\n\n",
    "metadata": {
      "source": "gornschool-training/t6/resources/source/wall.lisp",
      "file_name": "wall.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_6_object_definition",
      "chunk_id": 0,
      "section": "header"
    },
    "id": "891569d057e7f524f365781e5ef6a92f"
  },
  {
    "text": "(define-object wall(box)\n  :input-slots\n  ((brick-height 45)\n   (brick-length 180)\n   (brick-width 90)\n   (mortar-joint-width 10)\n   (wall-length 3700)\n   (wall-height 900))\n\n  :computed-slots\n  ((row-height (+ (the brick-height) (the mortar-joint-width)))\n   (number-of-rows (round-to-nearest (div (the wall-height) (the row-height)) 1))\n   (actual-wall-height (* (the row-height) (the number-of-rows)))\n   \n   ;; for the wall-length we need the number of full bricks\n   ;; if there are n full bricks then there will be (n-1) mortar joints\n   ;; so n*brick-length + n-1*mortar-joint-width = overall-length\n   ;; or n(brick-length + mortar-join-width) - mortar-joint-width = overall-length\n   ;; or n = (overall-length - mortar-joint-width)/(brick-length + mortar-joint-width)\n   (number-of-bricks (round-to-nearest (div (- (the wall-length) (the mortar-joint-width))\n\t\t\t\t\t    (+ (the brick-length) (the mortar-joint-width)))\n\t\t\t\t       1))\n   (actual-wall-length (+ (* (the number-of-bricks) (the brick-length))\n\t\t\t  (* (- (the number-of-bricks) 1) (the mortar-joint-width))))\n\n   ;; box inputs - gives the wall bounding box\n   (height (the actual-wall-height))\n   (width (the brick-width))\n   (length (the actual-wall-length))\n\n   (full-bricks (apply '+ (list-elements (the row) (the-element full-bricks))))\n   (half-bricks (apply '+ (list-elements (the row) (the-element half-bricks))))\n   (mortar-volume (apply '+ (list-elements (the row) (the-element mortar-volume))))\n   (mortar-density 2162)\n   (mortar-mass (* (the mortar-density) (div (the mortar-volume) 1000000000)))\n   )\n   \n     \n  :objects\n  ((row :type 'row\n     :sequence (:size (the number-of-rows))\n     :center (translate-along-vector (the (face-center :bottom))\n\t\t\t\t     (the (face-normal-vector :top))\n\t\t\t\t     (+ (half (the-child height))\n\t\t\t\t\t(* (the-child index) (the-child height))))\n     :height (+ (the brick-height) (the mortar-joint-width))\n     :full-bricks-per-row (the number-of-bricks)\n     :pass-down (brick-height\n\t\t brick-length\n\t\t brick-width\n\t\t mortar-joint-width\n\t\t length\n\t\t width))))\n\n",
    "metadata": {
      "source": "gornschool-training/t6/resources/source/wall.lisp",
      "file_name": "wall.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_6_object_definition",
      "chunk_id": 0,
      "section": "wall"
    },
    "id": "891569d057e7f524f365781e5ef6a92f"
  },
  {
    "text": "(define-object row (box)\n  :input-slots\n  (full-bricks-per-row\n   brick-height\n   brick-length\n   brick-width\n   mortar-joint-width)\n\n  :computed-slots\n  ((full-brick-row? (or (zerop (the index)) (evenp (the index))))\n   (full-bricks (the bricks-and-mortar full-bricks))\n   (half-bricks (the bricks-and-mortar half-bricks))\n   (mortar-volume (+ (the bricks-and-mortar mortar-joint-volume)\n\t\t     (the mortar-bed volume))))\n\n  :objects\n  ((bricks-and-mortar :type 'bricks-and-mortar\n\t\t      :height (the brick-height)\n\t\t      :center (translate-along-vector (the mortar-bed (face-center :top))\n\t\t\t\t\t\t      (the mortar-bed (face-normal-vector :top))\n\t\t\t\t\t\t      (half (the-child height)))\n\t\t      :pass-down (width\n\t\t\t\t  length\n\t\t\t\t  full-brick-row?\n\t\t\t\t  brick-height\n\t\t\t\t  brick-length\n\t\t\t\t  brick-width\n\t\t\t\t  mortar-joint-width\n\t\t\t\t  full-bricks-per-row))\n   (mortar-bed :type 'box\n\t       :height (the mortar-joint-width)\n\t       :center (translate-along-vector (the (face-center :bottom))\n\t\t\t\t\t       (the (face-normal-vector :top))\n\t\t\t\t\t       (half (the-child height)))\n\t       :pass-down (width\n\t\t\t   length))))\n\n",
    "metadata": {
      "source": "gornschool-training/t6/resources/source/wall.lisp",
      "file_name": "wall.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_6_object_definition",
      "chunk_id": 1,
      "section": "row"
    },
    "id": "4d30cc6832646a2fd58096a8f2baa32c"
  },
  {
    "text": "(define-object bricks-and-mortar (box)\n  :input-slots\n  (full-brick-row?\n   full-bricks-per-row\n   brick-height\n   brick-length\n   brick-width\n   mortar-joint-width)\n\n  :computed-slots\n  ((first-full-brick-start-point (if (the full-brick-row?)\n\t\t\t\t     (the (face-center :front))\n\t\t\t\t     (the (mortar-joint 0) (face-center :rear))))\n   \n   (first-mortar-joint-start-point (if (the full-brick-row?)\n\t\t\t\t       (the (full-brick 0) (face-center :rear))\n\t\t\t\t       (the (half-brick 0) (face-center :rear))))\n\n   (number-of-full-bricks (if (the full-brick-row?)\n\t\t\t      (the full-bricks-per-row)\n\t\t\t      (- (the full-bricks-per-row) 1)))\n\n   (number-of-mortar-joints (if (the full-brick-row?)\n\t\t\t\t(- (the number-of-full-bricks) 1)\n\t\t\t\t(+ (the number-of-full-bricks) 1)))\n\n   ;; if it isn't a full brick row then there will be an extra joint because one\n   ;; full brick is replaced with 2 half bricks so without correcting the\n   ;; mortar-joint-width the ends of a full brick row and one starting and\n   ;; finishing with half bricks won't align. So we need to correct\n   ;; the mortar-joint-width\n   (corrected-joint-width (if (the full-brick-row?)\n\t\t\t\t     (the mortar-joint-width)\n\t\t\t\t     (let ((total-gap (* (- (the number-of-mortar-joints) 1)\n\t\t\t\t\t\t\t\t\t(the mortar-joint-width))))\n\t\t\t\t       (div total-gap (the number-of-mortar-joints)))))\n   ;; collating the output. We could do this analytically, but for this example we'll use the geometry\n   (full-bricks (length (list-elements (the full-brick))))\n   (half-bricks (length (list-elements (the half-brick))))\n   (mortar-joint-volume (apply '+ (list-elements (the mortar-joint)\n\t\t\t\t\t\t (the-element volume))))\n   )\n  \n  :functions\n  ((first-full-brick-center!\n    ()\n    (translate-along-vector (the first-full-brick-start-point)\n\t\t\t    (the (face-normal-vector :rear))\n\t\t\t    (half (the brick-length))))\n   \n   (other-full-brick-center!\n    (index)\n    ;; if its a full brick row, (full-brick 1) is positioned relative to (joint 0)\n    ;; if its a half brick row, (full-brick 1) is positioned relative to (joint 1)\n    (let ((ind (if (the full-brick-row?) (- index 1) index)))\n\t  (translate-along-vector (the (mortar-joint ind) (face-center :rear))\n\t\t\t\t  (the (face-normal-vector :rear))\n\t\t\t\t  (half (the brick-length)))))\n   \n    (first-joint-center!\n     ()\n     (translate-along-vector (the first-mortar-joint-start-point)\n\t\t\t     (the (face-normal-vector :rear))\n\t\t\t     (half (the corrected-joint-width))))\n   (other-joint-center!\n    (index)\n    ;; if its a full brick row, (joint 1) is positioned relative to (full-brick 1)\n    ;; if its a half brick row, (joint 1) is positioned relative to (full-brick 0)\n    (let ((ind (if (the full-brick-row?) index (- index 1))))\n      (translate-along-vector (the (full-brick ind) (face-center :rear))\n\t\t\t      (the (face-normal-vector :rear))\n\t\t\t      (half (the corrected-joint-width)))))\n\n    (first-half-brick-center!\n     ()\n     (translate-along-vector (the (face-center :front))\n\t\t\t     (the (face-normal-vector :rear))\n\t\t\t     (half (half (the brick-length)))))\n   \n   (last-half-brick-center!\n     ()\n     (translate-along-vector (theo (the mortar-joint last) (face-center :rear))\n\t\t\t     (the (face-normal-vector :rear))\n\t\t\t     (half (half (the brick-length))))))\n \t\t\t     \n  \n  :objects\n  ((full-brick :type 'box\n\t       :sequence (:size (the number-of-full-bricks))\n\t       :center (if (= (the-child index) 0)\n\t\t\t   (the first-full-brick-center!)\n\t\t\t   (the (other-full-brick-center! (the-child index))))\n\t       :length (the brick-length)\n\t       :height (the brick-height)\n\t       :width (the brick-width))\n\n   (half-brick :type 'box\n\t       :sequence (:size (if (the full-brick-row?) 0 2))\n\t       :center (if (= (the-child index) 0)\n\t\t\t   (the first-half-brick-center!)\n\t\t\t   (the last-half-brick-center!))\n\t       :length (half (the brick-length))\n\t       :height (the brick-height)\n\t       :width (the brick-width))\n\n   (mortar-joint :type 'box\n\t\t :sequence (:size (the number-of-mortar-joints))\n\t\t :center (if (= (the-child index) 0)\n\t\t\t     (the first-joint-center!)\n\t\t\t  (the (other-joint-center! (the-child index))))   \n\t\t :height (the brick-height)\n\t\t :width (the brick-width)\n\t\t :length (the corrected-joint-width))))\n\n\n\n\n\n\n",
    "metadata": {
      "source": "gornschool-training/t6/resources/source/wall.lisp",
      "file_name": "wall.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_6_object_definition",
      "chunk_id": 2,
      "section": "bricks-and-mortar"
    },
    "id": "c0616e2e7f733f221fcc0118818a7378"
  },
  {
    "text": "(in-package :gwl-user)\n\n",
    "metadata": {
      "source": "gornschool-training/t6/resources/source/file-upload-3.lisp",
      "file_name": "file-upload-3.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_6_object_definition",
      "chunk_id": 0,
      "section": "header"
    },
    "id": "85f2c9abc059ed4575eb9936e623a2de"
  },
  {
    "text": "(define-object file-upload-3 (base-html-page)\n  :computed-slots\n  ((uploaded-path \"\" :settable)\n   (file-content (let ((lines (read-file (the uploaded-path))))\n\t\t   (mapcar #'(lambda(a) (glisp::split-regexp \",\" a)) lines)))\n   (body\n    (with-lhtml-string ()\n       (str (the development-links))\n       (when (= (length (the uploaded-path)) 0)\n\t (htm (str (with-form-string (:enctype \"multipart/form-data\")\n\t\t(:table\n\t\t    (:tr (:td (:input :type \"file\" :name :uploaded-path :value (the uploaded-path))))\n\t\t  (:tr (:td (:input :type \"submit\" :name \"upload\" :value \"Upload\"))))))))\n\n      (when (> (length (the uploaded-path)) 0)\n\t(htm (str (fmt \"The file has been uploaded to ~a\" (the uploaded-path)))\n\t     (:p \"The file contents are\")\n\t     (:table :border 1 (:tr (:td :colspan 2 (str (first (first (the file-content))))))\n\t       (dolist (line (cdr (the file-content)))\n\t\t (htm (:tr (:td (str (first line)))\n\t\t\t   (:td (str (second line)))))))\n\t     \n\t(str (with-form-string (:enctype \"multipart/form-data\")\n\t       (:input :type \"submit\" :name \"reset\" :value \"Reset Form\"))))))))\n\n  :functions\n  ((after-set! ()\n\t       (when (member \"Reset Form\" (the query-plist) :test 'equalp)\n\t\t \n\t\t (when (probe-file (the uploaded-path)) (delete-file (the uploaded-path)))\n\t\t (the (restore-slot-default! :uploaded-path ))))))\n\n",
    "metadata": {
      "source": "gornschool-training/t6/resources/source/file-upload-3.lisp",
      "file_name": "file-upload-3.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_6_object_definition",
      "chunk_id": 0,
      "section": "file-upload-3"
    },
    "id": "85f2c9abc059ed4575eb9936e623a2de"
  },
  {
    "text": "(defun read-file (file )\n  (let ((result))\n    (with-open-file (str file :direction :input)\n      (do ((line (read-line str nil 'eof)\n\t\t (read-line str nil 'eof)))\n\t  ((eql line 'eof) result)\n\t(setq result (append result (list line)))))))\n\n(publish-gwl-app \"/file-upload-3\" \"gwl-user::file-upload-3\")\n",
    "metadata": {
      "source": "gornschool-training/t6/resources/source/file-upload-3.lisp",
      "file_name": "file-upload-3.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_6_object_definition",
      "chunk_id": 1,
      "section": "read-file"
    },
    "id": "2944628f139d6db1429ad700fe7d8d16"
  },
  {
    "text": "(in-package :gwl-user)\n\n",
    "metadata": {
      "source": "gornschool-training/t6/resources/source/file-upload-1.lisp",
      "file_name": "file-upload-1.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_6_object_definition",
      "chunk_id": 0,
      "section": "header"
    },
    "id": "7f49d9e8e6e1c66cac2d66c5e5724b76"
  },
  {
    "text": "(define-object file-upload-1 (base-html-page)\n  :computed-slots\n  ((uploaded-path \"\" :settable)\n   (body\n    (with-lhtml-string () (str (the development-links))\n      (str\n       (with-form-string (:enctype \"multipart/form-data\")\n         (:table (:tr (:td (:input :type \"file\" :name :uploaded-path :value (the uploaded-path))))\n           (:tr (:td (:input :type \"submit\" :name \"upload\" :value \"Upload\"))\n                (:td (str (the uploaded-path)))))))))))\n\n(publish-gwl-app \"/file-upload-1\" \"gwl-user::file-upload-1\")\n",
    "metadata": {
      "source": "gornschool-training/t6/resources/source/file-upload-1.lisp",
      "file_name": "file-upload-1.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_6_object_definition",
      "chunk_id": 0,
      "section": "file-upload-1"
    },
    "id": "7f49d9e8e6e1c66cac2d66c5e5724b76"
  },
  {
    "text": "(in-package :gwl-user)\n\n",
    "metadata": {
      "source": "gornschool-training/t6/resources/source/using-form-controls.lisp",
      "file_name": "using-form-controls.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_6_object_definition",
      "chunk_id": 0,
      "section": "header"
    },
    "id": "23c6ae89e2a1db8c3d75f4403b936207"
  },
  {
    "text": "(define-object form-control-layout (base-html-page)\n  :computed-slots ((additional-header-content\n                    (with-cl-who-string()\n                      ((:link :rel \"stylesheet\" :href *css-published-path*))))\n                   (body\n                    (with-cl-who-string ()\n                      (when gwl:*developing?* (str (the development-links)))\n                      (:h3 \"Just using the form-control message\")\n                      (str (the fc-1 form-control))\n                      (:h3 \"Using :prompt and form-control in my own table layout\")\n                      (:table (:tr\n                               (:td (str (the fc-2 prompt)))\n                               (:td (str (the fc-2 form-control)))))\n                      (:h3 \"Using html-string (defaulting to :layout-position :as-div)\")\n                      (str (the fc-3 html-string))\n                      (:h3 \"Using other :layout-position\")\n                      (str (the fc-4 html-string))\n                      (:br)\n                      (str (the fc-5 html-string)))))\n  :objects  ((fc-1 :type 'text-form-control\n                   :size 12\n                   :default nil)\n             (fc-2 :type 'text-form-control\n                   :size 12\n                   :prompt \"My form control\":default nil)\n             (fc-3 :type 'text-form-control\n                   :size 12\n                   :prompt \"My form control with html-string\":default nil)\n             (fc-4 :type 'text-form-control\n                   :size 12\n                   :prompt \"Label display #1 - prepended label\"\n                   :default nil\n                   :label-position :prepend)\n             (fc-5 :type 'text-form-control\n                   :size 12\n                   :prompt \"Label display #2 - appended label\"\n                   :default nil\n                   :label-position :append)))\n(publish-gwl-app \"/form-control-layout\" 'form-control-layout)\n\n",
    "metadata": {
      "source": "gornschool-training/t6/resources/source/using-form-controls.lisp",
      "file_name": "using-form-controls.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_6_object_definition",
      "chunk_id": 0,
      "section": "form-control-layout"
    },
    "id": "23c6ae89e2a1db8c3d75f4403b936207"
  },
  {
    "text": "(define-object form-control-validation (base-html-page)\n  :computed-slots\n  ((body (with-lhtml-string ()\n\t   (when gwl:*developing?* (str (the development-links)))\n\t   (:h3 \"Form control validation\")\n\t   (str (the fc-section div)))))\n  :objects\n  ((fc-section :type 'base-html-div\n\t       :inner-html (with-lhtml-string ()\n\t\t\t     (:p (str (the number-fc html-string)))\n\t\t\t     (when (the number-fc value)\n\t\t\t       (htm (:p (fmt \"the number value is ~a\"\n\t\t\t\t\t     (the number-fc value)))))\n\t\t\t     (when (the number-fc error)\n\t\t\t       (html (:p (fmt \"error is ~a, failed value is ~a\"\n\t\t\t\t\t      (the number-fc error)\n\t\t\t\t\t      (the number-fc failed-value)))))))\n   (number-fc :type 'number-form-control\n\t      :default nil\n\t      :size 12\n\t      :ajax-submit-on-change? t\n\t      :validation-function #'(lambda(input)\n\t\t\t\t       (cond ((or (<= input 50) (>= input 60))\n\t\t\t\t\t      (list :validated-value input\n\t\t\t\t\t\t    :error :value-out-of-range))\n\t\t\t\t\t     (t t))))))\n(publish-gwl-app \"/form-control-validation\" 'form-control-validation)\n",
    "metadata": {
      "source": "gornschool-training/t6/resources/source/using-form-controls.lisp",
      "file_name": "using-form-controls.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_6_object_definition",
      "chunk_id": 1,
      "section": "form-control-validation"
    },
    "id": "e9994f9fb7862db481f6969c1e3644f8"
  },
  {
    "text": "(in-package :gwl-user)\n\n",
    "metadata": {
      "source": "gornschool-training/t6/resources/source/wall-example-form.lisp",
      "file_name": "wall-example-form.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_6_object_definition",
      "chunk_id": 0,
      "section": "header"
    },
    "id": "4c7d2a2f446903b8eebbe561febb0e19"
  },
  {
    "text": "(define-object wall-example-form (base-html-page)\n\n  :computed-slots\n  ((body (with-lhtml-string ()\n\t\t      (:table (:tr (:td (str (the form-controls-section div)))\n\t\t\t       (:td (str (the report-section div)))))))\n   \n   )\n\n  :objects\n  ((wall :type 'gdl-user::wall\n\t :brick-height (the brick-height-fc value)\n\t :brick-length (the brick-length-fc value)\n\t :brick-width (the brick-width-fc value)\n\t :mortar-joint-width (the mortar-width-fc value)\n\t :wall-length (the wall-length value)\n\t :wall-height  (the wall-height value))\n\n   (form-controls-section :type 'base-html-div\n\t\t\t  :inner-html (with-lhtml-string ()\n\t\t\t\t\t(:table\n\t\t\t\t\t    (dolist (obj (the form-controls))\n\t\t\t\t\t      (htm (:tr (:td (str (theo obj prompt)))\n\t\t\t\t\t\t\t(:td (str (theo obj form-control)))))))))\n   (report-section :type 'base-html-div\n\t\t   :inner-html (with-lhtml-string ()\n\t\t\t\t (:table\n\t\t\t\t     (:tr (:td \"Actual Wall Length\")\n\t\t\t\t      (:td (str (the wall actual-wall-length))))\n\t\t\t\t   (:tr (:td \"Actual Wall Height\")\n\t\t\t\t\t(:td (str (the wall actual-wall-height))))\n\t\t\t\t   (:tr (:td \"Number of Full Bricks\")\n\t\t\t\t\t(:td (str (the wall full-bricks))))\n\t\t\t\t   (:tr (:td \"Number of Half Bricks\")\n\t\t\t\t\t(:td (str (the wall half-bricks))))\n\t\t\t\t   (:tr (:td \"Mortar Mass\")\n\t\t\t\t\t(:td (fmt \"~,1f\" (the wall mortar-mass)))))))\n\n\t\t\t  \n   (brick-height-fc :type 'number-form-control\n\t\t    :prompt \"Brick Height (mm)\"\n\t\t    :default 45\n\t\t    :ajax-submit-on-change? t)\n   (brick-length-fc :type 'number-form-control\n\t\t    :default 180\n\t\t    :prompt \"Brick Length (mm)\"\n\t\t    :ajax-submit-on-change? t)\n   (brick-width-fc :type 'number-form-control\n\t\t   :default 90\n\t\t   :prompt \"Brick Width (mm)\"\n\t\t   :ajax-submit-on-change? t)\n   (mortar-width-fc :type 'number-form-control\n\t\t    :default 10\n\t\t    :prompt \"Mortar Joint Width (mm)\"\n\t\t    :ajax-submit-on-change? t)\n   (wall-length :type 'number-form-control\n\t\t:default 3700\n\t\t:prompt \"Nominal Wall Length (mm)\"\n\t\t:ajax-submit-on-change? t)\n   \n   (wall-height :type 'number-form-control\n\t\t:default 3700\n\t\t:prompt \"Nominal Wall Height (mm)\"\n\t\t:ajax-submit-on-change? t)))\n\t\t\n(publish-gwl-app \"/wall-example\" \"gwl-user::wall-example-form\")\n",
    "metadata": {
      "source": "gornschool-training/t6/resources/source/wall-example-form.lisp",
      "file_name": "wall-example-form.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_6_object_definition",
      "chunk_id": 0,
      "section": "wall-example-form"
    },
    "id": "4c7d2a2f446903b8eebbe561febb0e19"
  },
  {
    "text": "(in-package :cl-user)\n\n(load (compile-file (merge-pathnames \"gwl-patches.lisp\" (glisp:source-pathname))))\n\n(in-package :gwl-user)\n\n\n(setq *developing?* t)\n\n\n\n",
    "metadata": {
      "source": "gornschool-training/t6/resources/source/basic-define-and-publish.lisp",
      "file_name": "basic-define-and-publish.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_6_object_definition",
      "chunk_id": 0,
      "section": "header"
    },
    "id": "74cdd09d22bcef8846917e73108c54de"
  },
  {
    "text": "(define-object sample-page (base-html-page)\n  :computed-slots\n  ((title \"sample page\")\n   (body \"My sample page\")))\n\n(publish-gwl-app \"/sample-page\" 'sample-page)\n\n\n",
    "metadata": {
      "source": "gornschool-training/t6/resources/source/basic-define-and-publish.lisp",
      "file_name": "basic-define-and-publish.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_6_object_definition",
      "chunk_id": 0,
      "section": "sample-page"
    },
    "id": "74cdd09d22bcef8846917e73108c54de"
  },
  {
    "text": "(define-object sample-html-page (base-html-page)\n  :computed-slots\n  ((title \"sample html page\")\n   (body (with-lhtml-string ()\n           \"My sample html page\"\n           (:table\n               (:tr (:th \"Day\") (:th \"Number\"))\n             (:tr (:td \"Sunday\") (:td \"1\"))\n             (:tr (:td \"Monday\") (:td \"2\"))\n             (:tr (:td \"Tuesday\") (:td \"3\"))\n             (:tr (:td \"Wednesday\") (:td \"4\"))\n             (:tr (:td \"Thursday\") (:td \"5\"))\n             (:tr (:td \"Friday\") (:td \"6\"))\n             (:tr (:td \"Saturday\") (:td \"7\")))))))\n\n(publish-gwl-app \"/sample-html-page\" 'sample-html-page)\n\n",
    "metadata": {
      "source": "gornschool-training/t6/resources/source/basic-define-and-publish.lisp",
      "file_name": "basic-define-and-publish.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_6_object_definition",
      "chunk_id": 1,
      "section": "sample-html-page"
    },
    "id": "d3562b9e3401e57a1f5f0c13a4b122ee"
  },
  {
    "text": "(define-object sample-inline-styled-html-page (base-html-page)\n  :computed-slots\n  ((title \"sample inline styled html page\")\n   (body (with-lhtml-string ()\n           \"My sample inline styled html page\"\n           (:table :style \"border-style: solid;\"\n               (:tr (:th \"Day\") (:th \"Number\"))\n             (:tr (:td \"Sunday\") (:td \"1\"))\n             (:tr (:td \"Monday\") (:td \"2\"))\n             (:tr (:td \"Tuesday\") (:td \"3\"))\n             (:tr (:td \"Wednesday\") (:td \"4\"))\n             (:tr (:td \"Thursday\") (:td \"5\"))\n             (:tr (:td \"Friday\") (:td \"6\"))\n             (:tr (:td \"Saturday\") (:td \"7\")))))))\n\n(publish-gwl-app \"/sample-inline-styled-html-page\" 'sample-inline-styled-html-page)\n\n;; for the css and image files we assume a directory structure as follows\n;; <home>/source - location of this file\n;; <home>/css - location of css example files\n;; <home>/images - location of image files\n\n(defparameter *home*(merge-pathnames \"../\" (make-pathname :name nil :type nil :defaults (glisp:source-pathname))))\n\n(gwl::publish-file :path \"/my-style.css\" :file (namestring (merge-pathnames \"css/my-style.css\" *home*)))\n\n",
    "metadata": {
      "source": "gornschool-training/t6/resources/source/basic-define-and-publish.lisp",
      "file_name": "basic-define-and-publish.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_6_object_definition",
      "chunk_id": 2,
      "section": "sample-inline-styled-html-page"
    },
    "id": "4c0fa9cf9287f3151e1ca575e628675a"
  },
  {
    "text": "(define-object sample-external-styled-html-page (base-html-page)\n  :computed-slots\n  ((additional-header-content (with-lhtml-string ()\n                                ((:link :rel \"stylesheet\" :href \"/my-style.css\"))))\n   (title \"sample external styled html page\")\n   (body (with-lhtml-string ()\n           \"My sample external styled html page\"\n           (:table \n               (:tr (:th \"Day\") (:th \"Number\"))\n             (:tr (:td \"Sunday\") (:td \"1\"))\n             (:tr (:td \"Monday\") (:td \"2\"))\n             (:tr (:td \"Tuesday\") (:td \"3\"))\n             (:tr (:td \"Wednesday\") (:td \"4\"))\n             (:tr (:td \"Thursday\") (:td \"5\"))\n             (:tr (:td \"Friday\") (:td \"6\"))\n             (:tr (:td \"Saturday\") (:td \"7\")))))))\n\n(publish-gwl-app \"/sample-external-styled-html-page\" 'sample-external-styled-html-page)\n\n(gwl::publish-directory :prefix \"/images\" :destination (namestring (merge-pathnames \"images/\" *home*)))\n\n",
    "metadata": {
      "source": "gornschool-training/t6/resources/source/basic-define-and-publish.lisp",
      "file_name": "basic-define-and-publish.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_6_object_definition",
      "chunk_id": 3,
      "section": "sample-external-styled-html-page"
    },
    "id": "815d9aee4f3a1a67d9ce8035a0745269"
  },
  {
    "text": "(define-object sample-image-html-page (base-html-page)\n  :computed-slots\n  ((css-published-path *css-published-path*)\n   (images-published-prefix *images-published-prefix*)\n   (additional-header-content (with-lhtml-string ()\n                                (:link :rel \"stylesheet\" :href \"/my-style.css\")))\n   (body (with-lhtml-string ()\n           (:p \"Gorn Struggle\")\n           (:img :src (string-append (the images-published-prefix) \"/star-trek-gorn.webp\"))))))\n\n(publish-gwl-app \"/sample-image-html-page\" 'sample-image-html-page)\n\n\n",
    "metadata": {
      "source": "gornschool-training/t6/resources/source/basic-define-and-publish.lisp",
      "file_name": "basic-define-and-publish.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_6_object_definition",
      "chunk_id": 4,
      "section": "sample-image-html-page"
    },
    "id": "f6c163755213aa957a31a044d730c0d5"
  },
  {
    "text": "(define-object sample-image-development-links (base-html-page)\n\n  :computed-slots\n  ((css-published-path *css-published-path*)\n   (images-published-prefix *images-published-prefix*)\n   (additional-header-content (with-lhtml-string ()\n                                (:link :rel \"stylesheet\" :href (the css-published-path))))\n   (body (with-lhtml-string ()\n           (when *developing?* (str (the development-links)))\n           (:p \"Gorn Struggle\")\n           (:img :src (string-append (the images-published-prefix) \"/star-trek-gorn.webp\"))))))\n(publish-gwl-app \"/sample-image-development-links\" 'sample-image-development-links)\n\n",
    "metadata": {
      "source": "gornschool-training/t6/resources/source/basic-define-and-publish.lisp",
      "file_name": "basic-define-and-publish.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_6_object_definition",
      "chunk_id": 5,
      "section": "sample-image-development-links"
    },
    "id": "ff71ae13d9b236eb2f34ef162393959d"
  },
  {
    "text": "(in-package :gwl-user)\n\n",
    "metadata": {
      "source": "gornschool-training/t6/resources/source/simple-file-output.lisp",
      "file_name": "simple-file-output.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_6_object_definition",
      "chunk_id": 0,
      "section": "header"
    },
    "id": "14ee9b62898c32c0fd88c1b286c9b57e"
  },
  {
    "text": "(define-object simple-file-output (base-html-page)\n  :computed-slots\n  ((body (with-lhtml-string ()\n           (str (the development-links))\n\t   (str (the export-section div))))\n\n   (file-contents  (let ((line (list 1 2 3 4 5 6 7)))\n\t\t     (format nil \"~{Line ~a of my file~^~%~}\" line)))\n\n   (text-physical-file-url (let ((url (format nil \"/file-output-~a.txt\" (get-current-date-time)))\n                                 (file-path (make-pathname :defaults (glisp:temporary-file)\n                                                                    :type \"txt\")))\n                             (with-open-file (f file-path :direction :output :if-exists :supersede)\n                               (write-string (the file-contents) f))\n                             (publish-file :path url\n                                           :content-type \"text/plain\"\n                                           :file file-path)\n                             url))\n\n   (text-file-url (let ((url (format nil \"/stream-output-~a.txt\" (get-current-date-time))))\n                    (publish :path url\n                             :content-type \"text/plain\"\n                             :function #'(lambda(req ent)\n                                           (with-http-response (req ent)\n                                             (with-http-body (req ent)\n                                               (write-string (the file-contents) *html-stream*)))))\n                    url)))\n  :objects\n  ((export-section\n    :type 'page-section\n    :inner-html (with-lhtml-string ()\n                  (:p \"Click \"\n                      (:a :href (the text-file-url) :download \"virtual-text-file.txt\" \"Here\")\n                      \" to download a virtual text file.\")\n                  (:p \"Click \"\n                      (:a :href (the text-physical-file-url) :download \"physical-text-file.txt\" \"Here\")\n                      \" to download a physical text file.\")))))\n\n",
    "metadata": {
      "source": "gornschool-training/t6/resources/source/simple-file-output.lisp",
      "file_name": "simple-file-output.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_6_object_definition",
      "chunk_id": 0,
      "section": "simple-file-output"
    },
    "id": "14ee9b62898c32c0fd88c1b286c9b57e"
  },
  {
    "text": "(defun get-current-date-time ()\n  (let* ((d (multiple-value-bind (s m h d mo y da)\n\t\t(get-decoded-time)\n\t      (declare (ignore da))\n\t      (list d mo y h m s)))\n\t (day (first d))\n\t (month (second d))\n\t (year (third d))\n\t (hour (fourth d))\n\t (mins (fifth d))\n\t (sec (lastcar d)))\n    (format nil \"~2,,,'0@a-~2,,,'0@a-~a-~2,,,'0@a-~2,,,'0@a-~2,,,'0@a\" day month year hour mins sec)))\n\n(publish-gwl-app \"/simple-file-output\" \"gwl-user::simple-file-output\")\n",
    "metadata": {
      "source": "gornschool-training/t6/resources/source/simple-file-output.lisp",
      "file_name": "simple-file-output.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_6_object_definition",
      "chunk_id": 1,
      "section": "get-current-date-time"
    },
    "id": "9dd31f1386be45eb96f4e9c41d1657b3"
  },
  {
    "text": "(in-package :gwl-user)\n\n",
    "metadata": {
      "source": "gornschool-training/t6/resources/source/using-page-sections.lisp",
      "file_name": "using-page-sections.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_6_object_definition",
      "chunk_id": 0,
      "section": "header"
    },
    "id": "7a5ddbb5708a7da4cc6d6e1a05fe455f"
  },
  {
    "text": "(define-object simple-page-with-section (base-html-page)\n  :computed-slots\n  ((body\n    (with-lhtml-string ()\n      (when gwl:*developing?* (str (the development-links)))\n      (:h2 \"Basic Page Sections\")\n      (str (the section-1 div)))))\n  :objects\n  ((section-1 :type 'base-html-div\n              :inner-html (with-lhtml-string ()\n                            (:p \"Using page sections to provide content\")))))\n\n(publish-gwl-app \"/simple-page-with-section\" 'simple-page-with-section)\n\n",
    "metadata": {
      "source": "gornschool-training/t6/resources/source/using-page-sections.lisp",
      "file_name": "using-page-sections.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_6_object_definition",
      "chunk_id": 0,
      "section": "simple-page-with-section"
    },
    "id": "7a5ddbb5708a7da4cc6d6e1a05fe455f"
  },
  {
    "text": "(define-object simple-page-with-custom-section (base-html-page)\n  :computed-slots\n  ((input-list (list 1 2 3))\n   (body (with-lhtml-string ()\n           (when gwl:*developing?* (str (the development-links)))\n           (:h2 \"Basic Page Sections\")\n           (str (the section-1 div)))))\n  :objects\n  ((section-1 :type 'base-html-div-1\n              :input-list (the input-list))))\n\n\n",
    "metadata": {
      "source": "gornschool-training/t6/resources/source/using-page-sections.lisp",
      "file_name": "using-page-sections.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_6_object_definition",
      "chunk_id": 1,
      "section": "simple-page-with-custom-section"
    },
    "id": "814fd39febda6ab23d1334e048aa44e1"
  },
  {
    "text": "(define-object base-html-div-1 (base-html-div)\n  :input-slots\n  (input-list)\n  :computed-slots\n  ((inner-html (with-cl-who-string ()\n                 (:table :border 1\n                   (:tr (:th \"Content\"))\n                   (dolist (c (the input-list))\n                     (htm (:tr (:td (fmt \"Cell ~a content\" c))))))))))\n\n(publish-gwl-app \"/simple-page-with-custom-section\" 'simple-page-with-custom-section)\n",
    "metadata": {
      "source": "gornschool-training/t6/resources/source/using-page-sections.lisp",
      "file_name": "using-page-sections.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_6_object_definition",
      "chunk_id": 2,
      "section": "base-html-div-1"
    },
    "id": "973d25eacafe275553564c01afef85c8"
  },
  {
    "text": "(in-package :gwl-user)\n\n",
    "metadata": {
      "source": "gornschool-training/t6/resources/source/basic-form-controls.lisp",
      "file_name": "basic-form-controls.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_6_object_definition",
      "chunk_id": 0,
      "section": "header"
    },
    "id": "e1f2a71379a43baf5b58c754be22a8b4"
  },
  {
    "text": "(define-object basic-form-controls (base-html-page)\n\n  :computed-slots\n  ((body (with-lhtml-string ()\n\t\t      (when gwl:*developing?* (str (the development-links)))\n\t\t      (:p (str (the text-fc html-string)))\n\t\t      (:table\n\t\t\t  (:tr\n\t\t\t   (:td (str (the text-fc prompt)))\n\t\t\t   (:td (str (the text-fc form-control))))\n\t\t\t(:tr\n\t\t\t   (:td (str (the number-fc prompt)))\n\t\t\t   (:td (str (the number-fc form-control))))\n\t\t\t(:tr\n\t\t\t   (:td (str (the password-fc prompt)))\n\t\t\t   (:td (str (the password-fc form-control))))\n\t\t\t(:tr\n\t\t\t   (:td (str (the dropdown-fc prompt)))\n\t\t\t   (:td (str (the dropdown-fc form-control))))\n\t\t\t(:tr\n\t\t\t   (:td (str (the radio-fc prompt)))\n\t\t\t   (:td (str (the radio-fc form-control))))\n\t\t\t(:tr\n\t\t\t   (:td (str (the checkbox-fc prompt)))\n\t\t\t   (:td (str (the checkbox-fc form-control))))\n\t\t\t   )))\n\n\t\t      \n\t\t    )\n   \n  :objects\n  ((text-fc :type 'text-form-control\n\t    :size 12\n\t    :default nil\n\t    :prompt \"Text Form Control\")\n   (number-fc :type 'number-form-control\n\t      :size 12\n\t      :default nil\n\t      :prompt \"Number Form Control\")\n   (password-fc :type 'password-form-control\n\t\t:size 12\n\t\t:default nil\n\t\t:prompt \"Password Form Control\")\n   (dropdown-fc :type 'menu-form-control\n\t\t:prompt \"Select Form Control\"\n\t\t:choice-list (list \"Select\" \"Paul\" \"John\" \"Peter\" )\n\t\t:default (first (the-child choice-list))\n\t\t:size 1)\n   (checkbox-fc :type 'checkbox-form-control\n\t\t:prompt \"Checkbox Form Control\"\n\t\t:default T)\n   (radio-fc :type 'radio-form-control\n\t     :prompt \"Radio Form Control\"\n\t     :choice-list (list \"Paul\" \"John\" \"Peter\")\n\t     :default (first (the-child choice-list)))\n\t\t\n   )\n  )\n\n(publish-gwl-app \"/fc1\" \"gwl-user::basic-form-controls\")\n",
    "metadata": {
      "source": "gornschool-training/t6/resources/source/basic-form-controls.lisp",
      "file_name": "basic-form-controls.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_6_object_definition",
      "chunk_id": 0,
      "section": "basic-form-controls"
    },
    "id": "e1f2a71379a43baf5b58c754be22a8b4"
  },
  {
    "text": "(in-package :gwl-user)\n\n",
    "metadata": {
      "source": "gornschool-training/t6/resources/source/building-application-file.lisp",
      "file_name": "building-application-file.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_6_object_definition",
      "chunk_id": 0,
      "section": "header"
    },
    "id": "980059e06831afd423848a8542f0191a"
  },
  {
    "text": "(define-object building-application-file (base-html-page)\n\n  :computed-slots\n  ((uploaded-path \"\" :settable)\n   \n   (body (with-lhtml-string ()\n\t   (str (the development-links))\n\t   (when (= (length (the uploaded-path)) 0)\n\t     (str\n\t      (with-form-string (:enctype \"multipart/form-data\")\n\t\t(:table (:tr (:td (:input :type \"file\" :name :uploaded-path :value (the uploaded-path))))\n\t\t  (:tr (:td (:input :type \"submit\" :name \"upload\" :value \"Upload\")))))))\n\t   (when (> (length (the uploaded-path)) 0)\n\t\t    (htm (:p \"Click \" (:a :href (the output-url) :download \"bom.txt\" \"Here\") \" to download the BoM\")\n\t\t    (str (with-form-string (:enctype \"multipart/form-data\")\n\t\t\t   (:input :type \"submit\" :name \"reset\" :value \"Reset Form\")))))))\n\t   \n\n   (output-path (merge-pathnames \"building-output.txt\" (the uploaded-path)))\n\n   (output-url (let ((url \"/output.txt\"))\n\t\t (the building write-bom-file!)\n\t\t (gwl::unpublish url)\n\t\t (gwl::publish-file :path url\n\t\t\t\t    :file (the output-path))\n\t\t url)))\n\n  :functions\n  ((after-set! ()\n\t       (cond ((member \"Reset Form\" (the query-plist) :test 'equalp)\n\t\t      (when (probe-file (the uploaded-path)) (delete-file (the uploaded-path)))\n\t\t      (the (restore-slot-default! :uploaded-path ))))))\n\t\t      \n\n  :objects\n  ((building :type 'building\n\t     :input-filename (when (> (length (the uploaded-path)) 1) (the uploaded-path))\n\t     :output-filename (when (> (length (the uploaded-path)) 1) (the output-path)) )))\n\n(publish-gwl-app \"/building-example\" \"gwl-user::building-application-file\")\n",
    "metadata": {
      "source": "gornschool-training/t6/resources/source/building-application-file.lisp",
      "file_name": "building-application-file.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_6_object_definition",
      "chunk_id": 0,
      "section": "building-application-file"
    },
    "id": "980059e06831afd423848a8542f0191a"
  },
  {
    "text": "(in-package :gwl-user)\n\n",
    "metadata": {
      "source": "gornschool-training/t6/resources/source/file-upload-2.lisp",
      "file_name": "file-upload-2.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_6_object_definition",
      "chunk_id": 0,
      "section": "header"
    },
    "id": "543038463413057e965b2fc0109cd8b0"
  },
  {
    "text": "(define-object file-upload-2 (base-html-page)\n  :computed-slots\n  ((uploaded-path \"\" :settable)\n   (body\n    (with-lhtml-string ()\n       (str (the development-links))\n       (when (= (length (the uploaded-path)) 0)\n\t (htm (str (with-form-string (:enctype \"multipart/form-data\")\n\t\t(:table\n\t\t    (:tr (:td (:input :type \"file\" :name :uploaded-path :value (the uploaded-path))))\n\t\t  (:tr (:td (:input :type \"submit\" :name \"upload\" :value \"Upload\"))))))))\n\n      (when (> (length (the uploaded-path)) 0)\n\t(htm (str (format nil \"The file has been uploaded to ~a\" (the uploaded-path))))\n\t(str (with-form-string (:enctype \"multipart/form-data\")\n\t       (:input :type \"submit\" :name \"reset\" :value \"Reset Form\"))))))\n\n\t )\n\n  :functions\n  ((after-set! ()\n\t       (when (member \"Reset Form\" (the query-plist) :test 'equalp)\n\t\t \n\t\t (when (probe-file (the uploaded-path)) (delete-file (the uploaded-path)))\n\t\t(the (restore-slot-default! :uploaded-path ))))))\n\n(publish-gwl-app \"/file-upload-2\" \"gwl-user::file-upload-2\")\n",
    "metadata": {
      "source": "gornschool-training/t6/resources/source/file-upload-2.lisp",
      "file_name": "file-upload-2.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_6_object_definition",
      "chunk_id": 0,
      "section": "file-upload-2"
    },
    "id": "543038463413057e965b2fc0109cd8b0"
  },
  {
    "text": "\n(in-package :gwl-user)\n\n",
    "metadata": {
      "source": "gornschool-training/t6/resources/source/gendl-graphics.lisp",
      "file_name": "gendl-graphics.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_6_object_definition",
      "chunk_id": 0,
      "section": "header"
    },
    "id": "52b0d0fb4c7a7d676c978079f3529ce7"
  },
  {
    "text": "(define-object single-viewport-sheet (geysr:assembly)\n\n  :input-slots\n  ((background-color :cyan))\n  \n  :computed-slots\n  ((body-onpageshow nil )\n   (body-onresize nil)\n   (body-onpageload nil)\n\n\n\n   (x3dom? (eql (the viewport image-format-selector value) :x3dom))\n   (viewport-dimensions (list :length 500 :width 500) :settable)\n\n   (main-sheet-body\n    (with-cl-who-string ()\n      (when gwl:*developing?* (str (the development-links)))\n      (:p \"Sample Graphics Viewport\")\n      (:p\n       (str (the menu main-div))\n       (str (the menu-script main-div))\n       (str (the viewport main-div))\n       ;;(str (the viewport viewport-script))\n       ))))\n\n  \n  :objects\n  ((wall :type 'gdl-user::wall)\n\n   (viewport :type 'geysr:viewport\n             :view-direction-default :trimetric\n\t     :image-format-default :svg\n\t     :image-format-plist (list :x3dom \"Shaded\"\n\t\t\t\t       :svg \"Wireframe\"\n                                       ;;:a-frame \"VR\"\n                                       )\n\t     :empty-display-list-message (with-cl-who-string ()\n\t\t\t\t\t   (:p (:h2 (fmt \"Viewport Display-List is currently empty.\"))))\n\t     :div-style \"background: green; height: 100%; width: 100%\"\t     \n\t     :geysr self\n\t     :div-class \"viewport-wrapper\"\n\t     :root-object self\n\t     :length (if (the x3dom?) \"100%\" (getf (the viewport-dimensions) :length))\n\t     :width (if (the x3dom?) \"100%\" (getf (the viewport-dimensions) :width))\n\t     :onclick-function nil\n             :display-list-object-roots (list (the wall))\n\t     :background-color (the background-color)  ;;was  \"#d3d3d3\"\n             )))\n\n\n(publish-gwl-app \"/wall\" 'single-viewport-sheet)\n\n\n(in-package :gdl-user)\n\n",
    "metadata": {
      "source": "gornschool-training/t6/resources/source/gendl-graphics.lisp",
      "file_name": "gendl-graphics.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_6_object_definition",
      "chunk_id": 0,
      "section": "single-viewport-sheet"
    },
    "id": "52b0d0fb4c7a7d676c978079f3529ce7"
  },
  {
    "text": "(define-object wall (box)\n  :input-slots\n  ((brick-height 45)\n   (brick-length 180)\n   (brick-width 90)\n   (mortar-joint-width 10)\n   (wall-length 3700)\n   (wall-height 900))\n\n  :computed-slots\n  ((row-height (+ (the brick-height) (the mortar-joint-width)))\n   (number-of-rows (round-to-nearest (div (the wall-height) (the row-height)) 1))\n   (actual-wall-height (* (the row-height) (the number-of-rows)))\n   \n   ;; for the wall-length we need the number of full bricks\n   ;; if there are n full bricks then there will be (n-1) mortar joints\n   ;; so n*brick-length + n-1*mortar-joint-width = overall-length\n   ;; or n(brick-length + mortar-join-width) - mortar-joint-width = overall-length\n   ;; or n = (overall-length - mortar-joint-width)/(brick-length + mortar-joint-width)\n   (number-of-bricks (round-to-nearest (div (- (the wall-length) (the mortar-joint-width))\n\t\t\t\t\t    (+ (the brick-length) (the mortar-joint-width)))\n\t\t\t\t       1))\n   (actual-wall-length (+ (* (the number-of-bricks) (the brick-length))\n\t\t\t  (* (- (the number-of-bricks) 1) (the mortar-joint-width))))\n\n   ;; box inputs - gives the wall bounding box\n   (height (the actual-wall-height))\n   (width (the brick-width))\n   (length (the actual-wall-length))\n\n   (full-bricks (apply '+ (list-elements (the row) (the-element full-bricks))))\n   (half-bricks (apply '+ (list-elements (the row) (the-element half-bricks))))\n   (mortar-volume (apply '+ (list-elements (the row) (the-element mortar-volume))))\n   (mortar-density 2162)\n   (mortar-mass (* (the mortar-density) (div (the mortar-volume) 1000000000)))\n   )\n   \n     \n  :objects\n  ((row :type 'row\n     :sequence (:size (the number-of-rows))\n     :center (translate-along-vector (the (face-center :bottom))\n\t\t\t\t     (the (face-normal-vector :top))\n\t\t\t\t     (+ (half (the-child height))\n\t\t\t\t\t(* (the-child index) (the-child height))))\n     :height (+ (the brick-height) (the mortar-joint-width))\n     :full-bricks-per-row (the number-of-bricks)\n     :pass-down (brick-height\n\t\t brick-length\n\t\t brick-width\n\t\t mortar-joint-width\n\t\t length\n\t\t width))))\n\n",
    "metadata": {
      "source": "gornschool-training/t6/resources/source/gendl-graphics.lisp",
      "file_name": "gendl-graphics.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_6_object_definition",
      "chunk_id": 1,
      "section": "wall"
    },
    "id": "6550ca2d9484aa5c890809b091e04b17"
  },
  {
    "text": "(define-object row (box)\n  :input-slots\n  (full-bricks-per-row\n   brick-height\n   brick-length\n   brick-width\n   mortar-joint-width)\n\n  :computed-slots\n  ((full-brick-row? (or (zerop (the index)) (evenp (the index))))\n   (full-bricks (the bricks-and-mortar full-bricks))\n   (half-bricks (the bricks-and-mortar half-bricks))\n   (mortar-volume (+ (the bricks-and-mortar mortar-joint-volume)\n\t\t     (the mortar-bed volume))))\n\n  :objects\n  ((bricks-and-mortar :type 'bricks-and-mortar\n\t\t      :height (the brick-height)\n\t\t      :center (translate-along-vector (the mortar-bed (face-center :top))\n\t\t\t\t\t\t      (the mortar-bed (face-normal-vector :top))\n\t\t\t\t\t\t      (half (the-child height)))\n\t\t      :pass-down (width\n\t\t\t\t  length\n\t\t\t\t  full-brick-row?\n\t\t\t\t  brick-height\n\t\t\t\t  brick-length\n\t\t\t\t  brick-width\n\t\t\t\t  mortar-joint-width\n\t\t\t\t  full-bricks-per-row))\n   (mortar-bed :type 'box\n\t       :height (the mortar-joint-width)\n\t       :center (translate-along-vector (the (face-center :bottom))\n\t\t\t\t\t       (the (face-normal-vector :top))\n\t\t\t\t\t       (half (the-child height)))\n\t       :pass-down (width\n\t\t\t   length))))\n\n",
    "metadata": {
      "source": "gornschool-training/t6/resources/source/gendl-graphics.lisp",
      "file_name": "gendl-graphics.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_6_object_definition",
      "chunk_id": 2,
      "section": "row"
    },
    "id": "6f5fe1ce617ad45ac34bb9d4e373e586"
  },
  {
    "text": "(define-object bricks-and-mortar (box)\n  :input-slots\n  (full-brick-row?\n   full-bricks-per-row\n   brick-height\n   brick-length\n   brick-width\n   mortar-joint-width)\n\n  :computed-slots\n  ((first-full-brick-start-point (if (the full-brick-row?)\n\t\t\t\t     (the (face-center :front))\n\t\t\t\t     (the (mortar-joint 0) (face-center :rear))))\n   \n   (first-mortar-joint-start-point (if (the full-brick-row?)\n\t\t\t\t       (the (full-brick 0) (face-center :rear))\n\t\t\t\t       (the (half-brick 0) (face-center :rear))))\n\n   (number-of-full-bricks (if (the full-brick-row?)\n\t\t\t      (the full-bricks-per-row)\n\t\t\t      (- (the full-bricks-per-row) 1)))\n\n   (number-of-mortar-joints (if (the full-brick-row?)\n\t\t\t\t(- (the number-of-full-bricks) 1)\n\t\t\t\t(+ (the number-of-full-bricks) 1)))\n\n   ;; if it isn't a full brick row then there will be an extra joint because one\n   ;; full brick is replaced with 2 half bricks so without correcting the\n   ;; mortar-joint-width the ends of a full brick row and one starting and\n   ;; finishing with half bricks won't align. So we need to correct\n   ;; the mortar-joint-width\n   (corrected-joint-width (if (the full-brick-row?)\n\t\t\t\t     (the mortar-joint-width)\n\t\t\t\t     (let ((total-gap (* (- (the number-of-mortar-joints) 1)\n\t\t\t\t\t\t\t\t\t(the mortar-joint-width))))\n\t\t\t\t       (div total-gap (the number-of-mortar-joints)))))\n   ;; collating the output. We could do this analytically, but for this example we'll use the geometry\n   (full-bricks (length (list-elements (the full-brick))))\n   (half-bricks (length (list-elements (the half-brick))))\n   (mortar-joint-volume (apply '+ (list-elements (the mortar-joint)\n\t\t\t\t\t\t (the-element volume))))\n   )\n  \n  :functions\n  ((first-full-brick-center!\n    ()\n    (translate-along-vector (the first-full-brick-start-point)\n\t\t\t    (the (face-normal-vector :rear))\n\t\t\t    (half (the brick-length))))\n   \n   (other-full-brick-center!\n    (index)\n    ;; if its a full brick row, (full-brick 1) is positioned relative to (joint 0)\n    ;; if its a half brick row, (full-brick 1) is positioned relative to (joint 1)\n    (let ((ind (if (the full-brick-row?) (- index 1) index)))\n\t  (translate-along-vector (the (mortar-joint ind) (face-center :rear))\n\t\t\t\t  (the (face-normal-vector :rear))\n\t\t\t\t  (half (the brick-length)))))\n   \n    (first-joint-center!\n     ()\n     (translate-along-vector (the first-mortar-joint-start-point)\n\t\t\t     (the (face-normal-vector :rear))\n\t\t\t     (half (the corrected-joint-width))))\n   (other-joint-center!\n    (index)\n    ;; if its a full brick row, (joint 1) is positioned relative to (full-brick 1)\n    ;; if its a half brick row, (joint 1) is positioned relative to (full-brick 0)\n    (let ((ind (if (the full-brick-row?) index (- index 1))))\n      (translate-along-vector (the (full-brick ind) (face-center :rear))\n\t\t\t      (the (face-normal-vector :rear))\n\t\t\t      (half (the corrected-joint-width)))))\n\n    (first-half-brick-center!\n     ()\n     (translate-along-vector (the (face-center :front))\n\t\t\t     (the (face-normal-vector :rear))\n\t\t\t     (half (half (the brick-length)))))\n   \n   (last-half-brick-center!\n     ()\n     (translate-along-vector (theo (the mortar-joint last) (face-center :rear))\n\t\t\t     (the (face-normal-vector :rear))\n\t\t\t     (half (half (the brick-length))))))\n \t\t\t     \n  \n  :objects\n  ((full-brick :type 'box\n\t       :sequence (:size (the number-of-full-bricks))\n\t       :center (if (= (the-child index) 0)\n\t\t\t   (the first-full-brick-center!)\n\t\t\t   (the (other-full-brick-center! (the-child index))))\n\t       :length (the brick-length)\n\t       :height (the brick-height)\n\t       :width (the brick-width))\n\n   (half-brick :type 'box\n\t       :sequence (:size (if (the full-brick-row?) 0 2))\n\t       :center (if (= (the-child index) 0)\n\t\t\t   (the first-half-brick-center!)\n\t\t\t   (the last-half-brick-center!))\n\t       :length (half (the brick-length))\n\t       :height (the brick-height)\n\t       :width (the brick-width))\n\n   (mortar-joint :type 'box\n\t\t :sequence (:size (the number-of-mortar-joints))\n\t\t :center (if (= (the-child index) 0)\n\t\t\t     (the first-joint-center!)\n\t\t\t  (the (other-joint-center! (the-child index))))   \n\t\t :height (the brick-height)\n\t\t :width (the brick-width)\n\t\t :length (the corrected-joint-width))))\n\n\n\n\n\n\n",
    "metadata": {
      "source": "gornschool-training/t6/resources/source/gendl-graphics.lisp",
      "file_name": "gendl-graphics.lisp",
      "file_type": "lisp",
      "content_type": "tutorial",
      "topic": "tutorial_6_object_definition",
      "chunk_id": 3,
      "section": "bricks-and-mortar"
    },
    "id": "629d467bcbba7a278b8f553be97d62ce"
  },
  {
    "text": ";;\n;; Copyright 2002, 2009 Genworks International\n;;\n;; This source file is part of the General-purpose Declarative\n;; Language project (GDL).\n;;\n;; This source file contains free software: you can redistribute it\n;; and/or modify it under the terms of the GNU Affero General Public\n;; License as published by the Free Software Foundation, either\n;; version 3 of the License, or (at your option) any later version.\n;; \n;; This source file is distributed in the hope that it will be useful,\n;; but WITHOUT ANY WARRANTY; without even the implied warranty of\n;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n;; Affero General Public License for more details.\n;; \n;; You should have received a copy of the GNU Affero General Public\n;; License along with this source file.  If not, see\n;; <http://www.gnu.org/licenses/>.\n;; \n\n\n         Basic GDL Overview and Syntax\n         =============================\n\nThis file contains basic information and usage instructions for the",
    "metadata": {
      "source": "usage.txt",
      "file_name": "usage.txt",
      "file_type": "txt",
      "content_type": "usage_guide",
      "topic": "general",
      "chunk_id": 0,
      "chunk_count": 34
    },
    "id": "da21bda891a5fdeb071958ff0c950555"
  },
  {
    "text": ";; <http://www.gnu.org/licenses/>.\n;; \n\n\n         Basic GDL Overview and Syntax\n         =============================\n\nThis file contains basic information and usage instructions for the\nbase General-purpose Declarative Language System.\n\nFor further documentation and updates, please visit\nhttp://www.genworks.com or contact us at info@genworks.com\nor 248-910-0912.\n\nThe GDL product is a commercially available KBE system, and the core\nGDL language is a proposed standard for a vendor-neutral KBE\nlanguage. \n\n\nCore GDL Syntax\n==================\n\nGDL is based on and is a superset of ANSI Common Lisp.\n\n1 define-package\n================\n\nThe macro gdl:define-package is used to set up a new working package\nin GDL.\n\nExample:\n\n   (gdl:define-package :gdl-user)\n\nThe :gdl-user package is an empty, pre-defined package for your use if\nyou do not wish to make a new package just for scratch work.\n\nFor real projects it is recommended that you make and work in your own\nGDL package.",
    "metadata": {
      "source": "usage.txt",
      "file_name": "usage.txt",
      "file_type": "txt",
      "content_type": "usage_guide",
      "topic": "general",
      "chunk_id": 1,
      "chunk_count": 34
    },
    "id": "f3157b350302755645934a45657928ad"
  },
  {
    "text": "-defined package for your use if\nyou do not wish to make a new package just for scratch work.\n\nFor real projects it is recommended that you make and work in your own\nGDL package.\n\n\nNotes for advanced users:\n\n  Packages defined with gdl:define-package will implicitly :use the\n  GDL package and the Common-Lisp package, so you will have access to\n  all exported symbols in these packages without prefixing them with\n  their package name.\n\n  You may extend this behavior, by calling gdl:define-package and\n  adding additional packages to use with (:use ...).  For example, if\n  you want to work in a package with access to GDL exported symbols,\n  Common Lisp exported symbols, and symbols from the Surf (NURBS\n  surfaces and brep solids) package, you could set it up as follows:\n\n    (gdl:define-package :my-gdl-user (:use :gdl :surf))\n\n\n2 define-object\n===============\n\ndefine-object is the basic macro for defining objects (i.e. creating\nclasses) in GDL.",
    "metadata": {
      "source": "usage.txt",
      "file_name": "usage.txt",
      "file_type": "txt",
      "content_type": "usage_guide",
      "topic": "general",
      "chunk_id": 2,
      "chunk_count": 34
    },
    "id": "bdeedb7e7640b025c1fed94e393e5a74"
  },
  {
    "text": "e :my-gdl-user (:use :gdl :surf))\n\n\n2 define-object\n===============\n\ndefine-object is the basic macro for defining objects (i.e. creating\nclasses) in GDL. A GDL object definition is a superset of a CLOS\nStandard Class.\n\nBasic syntax of Define-Object is \n\n (define-object <class-name> <mixin-list> <specification-plist>)\n\n<class-name> is any non-keyword symbol. A CLOS Standard Class will be\ngenerated for this symbol, so any name you use will override a\ndefclass if one is already defined with the same name.\n\n<mixin-list> is a list of other class-names from which this object\nwill inherit. It maps directly into the CLOS mixin list.\n\nNote that the standard mixin GDL:Vanilla-Mixin gets mixed in\nautomatically with any GDL object and carries some of the basic GDL\nfunctionality (messages).\n\n<spec-plist> is a plist made up of pairs made from special keywords\nand expression lists. The special keywords currently supported are the\nfollowing, and each is documented in the respective section of this",
    "metadata": {
      "source": "usage.txt",
      "file_name": "usage.txt",
      "file_type": "txt",
      "content_type": "usage_guide",
      "topic": "general",
      "chunk_id": 3,
      "chunk_count": 34
    },
    "id": "f9c07e7ca4984ef247de1cd25948f92b"
  },
  {
    "text": "st> is a plist made up of pairs made from special keywords\nand expression lists. The special keywords currently supported are the\nfollowing, and each is documented in the respective section of this\nfile: :input-slots, :computed-slots, :trickle-down-slots, :objects,\n:hidden-objects, :functions, and :methods.\n\n\n2.1 :input-slots\n================\n\n:input-slots are made up of a list, each of whose elements is either a\nsymbol or a list expression whose first element is a symbol. In either\ncase, the symbol represents a value which can be supplied either\n\n (a) into the toplevel object of an object hierarchy, at object instantiation\n     (see (1.5), make-object, below)\n\n (b) into a child object, using a :objects specification (see (1.6), :objects,\n     below)\n\nInputs are specified either as a simple symbol (which may, but need\nnot be, a keyword symbol), or as an expression whose first is a symbol\nand whose second is an expression returning a value which will be the",
    "metadata": {
      "source": "usage.txt",
      "file_name": "usage.txt",
      "file_type": "txt",
      "content_type": "usage_guide",
      "topic": "general",
      "chunk_id": 4,
      "chunk_count": 34
    },
    "id": "f6ee154091eab520ee687fe15611095c"
  },
  {
    "text": "e symbol (which may, but need\nnot be, a keyword symbol), or as an expression whose first is a symbol\nand whose second is an expression returning a value which will be the\ndefault value for the input slot.\n\nOptionally, a third item can be supplied, the keyword :defaulting,\nwhich indicates that if a slot by this name is contained in any\nancestor object's list of :trickle-down-slots, the value from the\nancestor will take precedence over the local default expression.\n\nExample 1:\n\n (define-object person (base-object)\n\n   :input-slots\n   (first-name last-name age image-url))\n\nIn this example, the slots first-name, last-name, age, and image-url\nare all defined, with no default expressions. This means that for the\nobject to answer these messages, these slots must be specified at the\ntime of object instantiation.\n\nExample 2:\n\n (define-object person (base-object)\n\n   :input-slots\n   (first-name last-name age \n    (image-url \"http://localhost:9000/images/\")))",
    "metadata": {
      "source": "usage.txt",
      "file_name": "usage.txt",
      "file_type": "txt",
      "content_type": "usage_guide",
      "topic": "general",
      "chunk_id": 5,
      "chunk_count": 34
    },
    "id": "91f1351a4f83a4a84220ae656acec2c0"
  },
  {
    "text": "instantiation.\n\nExample 2:\n\n (define-object person (base-object)\n\n   :input-slots\n   (first-name last-name age \n    (image-url \"http://localhost:9000/images/\")))\n\nIn this example, first-name, last-name, and age are all defined with\nno default expressions, but image-url has the default expression\n\"http://localhost:9000/images/.\" This means that if nothing is\nspecified for image-url at object instantiation time, the image-url\nmessage will return \"http://localhost:9000/images/.\"\n\n\nExample 3:\n\n (define-object person (base-object)\n\n   :input-slots\n   (first-name last-name age \n    (image-url \"http://localhost:9000/images/\" :defaulting)))\n\n\nThis example is the same as Example 2, with the exception that if\nimage-url is included in an ancestor object (see below for discussion\nof object hierarchies) as a :trickle-down-slot, the slot's value from\nthat ancestor will take precedence over the local default expression\nof \"http://localhost:9000/images/.\"\n\n\n\n2.2 computed-slots\n==================",
    "metadata": {
      "source": "usage.txt",
      "file_name": "usage.txt",
      "file_type": "txt",
      "content_type": "usage_guide",
      "topic": "general",
      "chunk_id": 6,
      "chunk_count": 34
    },
    "id": "89e62540bd6eaf6662ff24d38574473d"
  },
  {
    "text": "s) as a :trickle-down-slot, the slot's value from\nthat ancestor will take precedence over the local default expression\nof \"http://localhost:9000/images/.\"\n\n\n\n2.2 computed-slots\n==================\n\ncomputed-slots are messages which are generally computed based on\ntheir default expression.\n\ncomputed-slots will only be computed when called (\"demanded\"), then\ntheir values will be cached in memory. Only if another slot on which\nthey depend becomes modified will they become unbound, then their\nvalues will be recomputed from their expressions when demanded.\n\nThe referencing macro ``the'' is used to refer to the values of\nmessages within the current object (named implicitly with the variable\n\"self\"), or, through reference-chaining (see (1.6), :objects, below),\nthe values of messages in other object instances.\n\nNotes for Advanced users: \n\n  In packages created with gdl:define-package, the Common Lisp symbol\n  ``the'' is shadowed by gdl:the. If you wish to access",
    "metadata": {
      "source": "usage.txt",
      "file_name": "usage.txt",
      "file_type": "txt",
      "content_type": "usage_guide",
      "topic": "general",
      "chunk_id": 7,
      "chunk_count": 34
    },
    "id": "86b9437e52743ad2b1c0fa7ef4e447bc"
  },
  {
    "text": "t instances.\n\nNotes for Advanced users: \n\n  In packages created with gdl:define-package, the Common Lisp symbol\n  ``the'' is shadowed by gdl:the. If you wish to access\n  common-lisp:the, use the explicit package prefix, e.g. ``cl:the.''\n\nExample 1:\n\n  (define-object person (base-object)\n\n   :input-slots\n   (first-name\n    last-name \n    age\n    image-url)\n\n   :computed-slots\n   ((full-name (concatenate 'string (the first-name) \" \" (the  last-name)))))\n\nIn this example, the message full-name is always computed strictly\nbased on its default expression, which concatenates (the first-name)\nand (the last-name).\n\n\nExample 2:\n\n  (define-object person (base-object)\n\n   :input-slots\n   (first-name\n    last-name \n    age\n    image-url)\n\n   :computed-slots\n   ((full-name (concatenate 'string (the first-name) \" \" (the  last-name)) :settable)))\n\nIn this example, the message full-name is by default computed based on\nits default expression, which concatenates (the first-name) and (the\nlast-name).",
    "metadata": {
      "source": "usage.txt",
      "file_name": "usage.txt",
      "file_type": "txt",
      "content_type": "usage_guide",
      "topic": "general",
      "chunk_id": 8,
      "chunk_count": 34
    },
    "id": "e9cab3b0e1ee6ff40222328d1e3b293a"
  },
  {
    "text": "st-name) \" \" (the  last-name)) :settable)))\n\nIn this example, the message full-name is by default computed based on\nits default expression, which concatenates (the first-name) and (the\nlast-name). However, because it is :settable, its value may be altered\nprocedurally at runtime (see \"setting slot values\" below)\n\n \n\n2.3 :objects and :hidden-objects\n================================\n\n:objects is used to specify a list of Instance specifications, where\neach instance is considered to be a ``child'' object of the current\nobject :hidden-objects serves the same purpose and has the same syntax,\nbut hidden objects are considered ``hidden-children'' rather than\n``children'' (so they are not returned by a call to (the children),\nfor example).\n\nInputs to each object are specified as a plist of inputs and\nvalue expressions, spliced in after the objects's name and type\nspecification:\n\n Examples\n ========\n> (define-object city (base-object)\n   \n   :computed-slots",
    "metadata": {
      "source": "usage.txt",
      "file_name": "usage.txt",
      "file_type": "txt",
      "content_type": "usage_guide",
      "topic": "general",
      "chunk_id": 9,
      "chunk_count": 34
    },
    "id": "af9ece6688a0174ef7065d1b2dadf2a8"
  },
  {
    "text": "and\nvalue expressions, spliced in after the objects's name and type\nspecification:\n\n Examples\n ========\n> (define-object city (base-object)\n   \n   :computed-slots\n   ((total-water-usage (+ (the hotel water-usage)\n                          (the bank water-usage))))\n   :objects\n   ((hotel :type 'hotel\n           :size :large)\n    (bank  :type 'bank\n           :size :medium)))\n\n--> CITY\n     \n\n>  (define-object hotel (base-object)\n     :input-slots\n     (size)\n\n     :computed-slots\n     ((water-usage (ecase (the size)\n                     (:small 10)\n                     (:medium 20)\n                     (:large 30)))))\n--> HOTEL\n\n\n>  (define-object bank (base-object)\n     :input-slots\n     (size)\n  \n     :computed-slots\n     ((water-usage (ecase (the size)\n                     (:small 2)\n                     (:medium 3)\n                     (:large 4)))))\n\n--> BANK\n\n  > (setq self (make-object 'city))\n--> #<CITY @ #x20933922>\n\n  > (the total-water-usage)\n--> 33",
    "metadata": {
      "source": "usage.txt",
      "file_name": "usage.txt",
      "file_type": "txt",
      "content_type": "usage_guide",
      "topic": "general",
      "chunk_id": 10,
      "chunk_count": 34
    },
    "id": "7d1cb1f93ea31b8daf916d21f2fccf73"
  },
  {
    "text": "(:medium 3)\n                     (:large 4)))))\n\n--> BANK\n\n  > (setq self (make-object 'city))\n--> #<CITY @ #x20933922>\n\n  > (the total-water-usage)\n--> 33\n\nThe special message children will return a list of all the child\ninstances in a object:\n\n  > (the children)\n--> (#<HOTEL @ #x209350ca> #<BANK @ #x2093b62a>)\n\n\n\n2.4 Sequences of Objects\n========================\n\n2.4.1 Fixed-size Sequences\n==========================\n\nObjects may be specified as a fixed-length sequence, analogous to a\nsingle-dimensional array. Although we call this a fixed-length\nsequence, the length can change if something it depends on becomes\nmodified. But if this happens, the entire sequence will have to be\nrecomputed.\n\nEach member of the sequence will automatically answer an :index\nmessage, which starts at 0 goes up to one less than the total number\nof elements in the sequence.\n\nNote that the referencing macro ``the-child'' may be used to reference",
    "metadata": {
      "source": "usage.txt",
      "file_name": "usage.txt",
      "file_type": "txt",
      "content_type": "usage_guide",
      "topic": "general",
      "chunk_id": 11,
      "chunk_count": 34
    },
    "id": "257beb66c8d50ed31d6b7950fbb83b97"
  },
  {
    "text": "arts at 0 goes up to one less than the total number\nof elements in the sequence.\n\nNote that the referencing macro ``the-child'' may be used to reference\ninto the current child objects (in sequenced objects as well as in\nnormal non-sequenced objects). This can be useful for sequenced\nobjects, in order to access the :index of the current member.\n\nExample\n\n(defparameter *presidents-data*\n    '((:name \n       \"Carter\"\n       :term 1976)\n      (:name \"Reagan\"\n       :term 1980)\n      (:name \"Clinton\"\n       :term 1990)))\n       \n(define-object presidents-container (base-object)\n  :input-slots \n  ((data *presidents-data*))\n  \n  :objects\n  ((presidents :type 'president\n\t       :sequence (:size (length (the data)))\n\t       :name (getf (nth (the-child index)\n\t\t\t\t(the data)) \n\t\t\t   :name)\n\t       :term (getf (nth (the-child index)\n\t\t\t\t(the data)) \n\t\t\t   :term))))\n\n\n(define-object president (base-object)\n :input-slots\n (name term))",
    "metadata": {
      "source": "usage.txt",
      "file_name": "usage.txt",
      "file_type": "txt",
      "content_type": "usage_guide",
      "topic": "general",
      "chunk_id": 12,
      "chunk_count": 34
    },
    "id": "0d1db4d6585a6bb3d9c5c98c97accca4"
  },
  {
    "text": "erm (getf (nth (the-child index)\n\t\t\t\t(the data)) \n\t\t\t   :term))))\n\n\n(define-object president (base-object)\n :input-slots\n (name term))\n\n\nFor convenience, the special objects keyword :Parameters may be used to\npass an actual plist into a child instance instead of having to refer\nto the individual parameters.\n\nExample:\n\n(define-object presidents-container (base-object)\n  :input-slots\n  ((data *presidents-data*))\n  \n  :objects\n  ((presidents :type 'president\n\t       :sequence (:size (length (the data)))\n    \t       :parameters (nth (the-child index)\n\t\t  \t\t(the data)))))\n\n\nThe members of quantified set are accessed like functions, by wrapping\nextra parentheses and including the index number as the argument.\n\nExample:\n\n>   (setq self (make-object 'presidents-container))\n--> #<PRESIDENTS-CONTAINER @ #x207441e2>\n\n>   (the (presidents 0) name)\n--> \"Carter\"\n\n\nThe quantified set can handle certain pre-defined messages,\nincluding  last and first.\n\nExample:\n\n>   (the (presidents last))",
    "metadata": {
      "source": "usage.txt",
      "file_name": "usage.txt",
      "file_type": "txt",
      "content_type": "usage_guide",
      "topic": "general",
      "chunk_id": 13,
      "chunk_count": 34
    },
    "id": "6b2911159edd3002e606f0ce2a9a960e"
  },
  {
    "text": "ER @ #x207441e2>\n\n>   (the (presidents 0) name)\n--> \"Carter\"\n\n\nThe quantified set can handle certain pre-defined messages,\nincluding  last and first.\n\nExample:\n\n>   (the (presidents last))\n--> #<PRESIDENT @ #x2075061a>\n\n\nMembers of a quantified set can also handle the messages\n previous,  next, first?, and last?.\n\n\nThe types of a quantified set can also be quantified, by\nsupplying them as a list and using the keyword :sequence\nin the :type specification, e.g.\n\n(define-object stuff (base-object)\n  :computed-slots\n  ((child-types (list 'boy 'girl 'man 'woman)))\n\n  :objects\n  ((people :type (:sequence (the child-types))\n           :sequence (:size (length (the child-types))))))\n\n\nIf the expression returning the :sequence of types, or of the :size,\nof a fixed-size sequence becomes modified, or anything they depend on\nbecomes modified, then the entire sequence will become unbound and\nwill have to be recomputed the next time it is demanded.\n\n2.4.2 Variable-size Sequences",
    "metadata": {
      "source": "usage.txt",
      "file_name": "usage.txt",
      "file_type": "txt",
      "content_type": "usage_guide",
      "topic": "general",
      "chunk_id": 14,
      "chunk_count": 34
    },
    "id": "65b94f442ec7862e6535bd50853493f2"
  },
  {
    "text": "anything they depend on\nbecomes modified, then the entire sequence will become unbound and\nwill have to be recomputed the next time it is demanded.\n\n2.4.2 Variable-size Sequences\n=============================\n\nObjects may be specified as a variable-length sequence, analogous to a\nlist. These are similar to fixed-length sequences, but the syntax is:\n\n  :sequence (:indices <list-of-indices>)\n\nwhere the <list-of-indices> is an initial list of indices. The indices\nare usually integers, but can be any object which matches with eql\n(e.g. keyword symbols).\n\nFor inserting and deleting members of a variable-length sequence,\nplease see the reference documentation on variable-sequence.\n\n\n2.5 :functions\n==============\n\nFunctions are uncached methods on the object, which discriminate only\non the type of the object. They are defined with a normal\n(non-specialized) lambda list, so they do not discriminate on the\ntypes of their arguments other than the implicit ``self'' argument.",
    "metadata": {
      "source": "usage.txt",
      "file_name": "usage.txt",
      "file_type": "txt",
      "content_type": "usage_guide",
      "topic": "general",
      "chunk_id": 15,
      "chunk_count": 34
    },
    "id": "d246fb270d8bf1bee3431be7670707ba"
  },
  {
    "text": "of the object. They are defined with a normal\n(non-specialized) lambda list, so they do not discriminate on the\ntypes of their arguments other than the implicit ``self'' argument.\n\nFunctions are called in a normal reference chain but their name is\nwrapped in parentheses and the lambda-list is spliced on after the\nname, within the parentheses.\n\nExample:\n=======\n\n(define-object hotel (base-object)\n  :input-slots\n  (room-rate)\n  \n  :functions\n  ((total-cost\n    (number-of-nights)\n    (* (the room-rate) number-of-nights))))\n\n\n>   (setq self (make-object 'hotel :room-rate 100))\n--> #<HOTEL @ #x2094f502> \n\n>   (the (total-cost 7))\n--> 700\n\n>   (the (total-cost 10))\n--> 1000\n\n\n2.5 :methods\n==============\n\nMethods are identical to GDL Functions, with the additional capability\nof specializing on their argument signature (i.e. the combination of\ntypes of the arguments) in addition to the implicit ``self'' argument\n(as with standard CLOS methods).\n\n\n2.6 :trickle-down-slots",
    "metadata": {
      "source": "usage.txt",
      "file_name": "usage.txt",
      "file_type": "txt",
      "content_type": "usage_guide",
      "topic": "general",
      "chunk_id": 16,
      "chunk_count": 34
    },
    "id": "387985c267e2ff9565074767ba27dae5"
  },
  {
    "text": "eir argument signature (i.e. the combination of\ntypes of the arguments) in addition to the implicit ``self'' argument\n(as with standard CLOS methods).\n\n\n2.6 :trickle-down-slots\n=======================\n\n:trickle-down-slots are a list of symbols naming other messages\n(:input-slots, :computed-slots, etc.) in the object which will\nautomatically be available in any descendant (e.g. child, grandchild,\netc.) instances, unless overridden in the descendant instance (e.g. by\nbeing defined as an :input-slot, :computed-slot, etc, in the\ndescendant instance).\n\nExample:\n\n(define-object person (base-object)\n  :input-slots\n  (social-security-number)\n  \n  :trickle-down-slots\n  (social-security-number)\n  \n  :objects\n  ((irs-records       :type 'irs-records)\n   (state-tax-returns :type 'state-tax-returns)\n   (fbi-file          :type 'fbi-file)\n   (interpol-file     :type 'interpol-file)))\n\nIn the above object definition, the message social-security-number",
    "metadata": {
      "source": "usage.txt",
      "file_name": "usage.txt",
      "file_type": "txt",
      "content_type": "usage_guide",
      "topic": "general",
      "chunk_id": 17,
      "chunk_count": 34
    },
    "id": "fd0b9557159b82b4b16d3ce2aa72df75"
  },
  {
    "text": "(fbi-file          :type 'fbi-file)\n   (interpol-file     :type 'interpol-file)))\n\nIn the above object definition, the message social-security-number\nwill be automatically available in the instances irs-records,\nstate-tax-returns, fbi-file, and interpol-file, unless otherwise\ndefined in those respective objects.\n\nNOTE: :objects and :hidden-objects are automatically trickle-down.\n\n\n2.7 Settable Slots\n==================\n\nSettable slots are just like normal slots, but their values can be\nprogrammatically modified using the special object function :set-slot!.\n\nAny other slots depending on them (directly or indirectly) will then\nbecome unbound and be recomputed the next time they are demanded.\n\nExample:\n\n> (define-object container (base-object)\n    :computed-slots\n    ((name \"Pristine\" :settable)\n     (full-name (string-append (the :name) \" Container\") :settable)))\n\n>   (setq self (make-object 'container))\n--> #<CONTAINER @ #x209495c2>\n\n>   (the full-name)\n--> \"Pristine Container\"",
    "metadata": {
      "source": "usage.txt",
      "file_name": "usage.txt",
      "file_type": "txt",
      "content_type": "usage_guide",
      "topic": "general",
      "chunk_id": 18,
      "chunk_count": 34
    },
    "id": "c6b4377210cd39bfa76e2f3769153a08"
  },
  {
    "text": "le)\n     (full-name (string-append (the :name) \" Container\") :settable)))\n\n>   (setq self (make-object 'container))\n--> #<CONTAINER @ #x209495c2>\n\n>   (the full-name)\n--> \"Pristine Container\"\n\n>   (the (set-slot! name \"Tainted\"))\n--> \"Tainted\"\n\n>   (the full-name)\n--> \"Tainted Container\"\n\nBoth :computed-slots and :input-slots may be specified as :settable\n(this includes :input-slots which are also specified as :defaulting).\n\n\n\n3 Make-Object\n=============\n\nThe basic constructor for GDL objects is ``make-object.''\n\nThis maps into a call to the Common Lisp function ``make-instance,''\nwith some extra operations to support the GDL machinery.\n\nKeyword symbols are used to tag input values when passed into an\nobject in a call to make-object:\n\n  Example 1:\n   \n   > (setq myobject (make-object 'person :first-name \"Albert\" :last-name \"Einstein\"))\n\n --> #<PERSON @ #x209274ee>\n\nToplevel inputs can also be specified by applying #'make-object to a\nplist containing the inputs:\n\n  Example 2:",
    "metadata": {
      "source": "usage.txt",
      "file_name": "usage.txt",
      "file_type": "txt",
      "content_type": "usage_guide",
      "topic": "general",
      "chunk_id": 19,
      "chunk_count": 34
    },
    "id": "cee36c8fff776c8e02d0031ecef0356e"
  },
  {
    "text": "on :first-name \"Albert\" :last-name \"Einstein\"))\n\n --> #<PERSON @ #x209274ee>\n\nToplevel inputs can also be specified by applying #'make-object to a\nplist containing the inputs:\n\n  Example 2:\n\n   > (setq myobject (apply #'make-object 'person \n                           (list :first-name \"Albert\" \n                                 :last-name \"Einstein\")))\n --> #<PERSON @ #x209274fa>\n\n\n4 the-object\n============\n\nYou can send messages to individual object instances using the macro\n``the-object:''\n\nExample:\n\n   > (the-object myobject full-name)\n --> \"Albert Einstein\"\n\nThe-object takes as its first argument an expression which returns an\nobject (i.e. instance), followed by a symbol naming a message returned\nby that object. The symbol is immune to Lisp package, so a keyword\nsymbol may be used, but this is not a requirement. As we will see\nlater, the-object actually can take any number of symbols,\nrepresenting a reference chain down through an object hierarcy (see\n\"object hierarchies\" below).",
    "metadata": {
      "source": "usage.txt",
      "file_name": "usage.txt",
      "file_type": "txt",
      "content_type": "usage_guide",
      "topic": "general",
      "chunk_id": 20,
      "chunk_count": 34
    },
    "id": "63049738c1cf5eaabbb8f61ffc08a8a9"
  },
  {
    "text": "this is not a requirement. As we will see\nlater, the-object actually can take any number of symbols,\nrepresenting a reference chain down through an object hierarcy (see\n\"object hierarchies\" below).\n\n(The <instance>) expands to (the-object self <instance>), so you can\nconveniently bind a variable named ``self'' to the result of a\nmake-object, then use a simple ``the'' to do referencing:\n\nExample:\n\n   > (setq self (apply #'make-object 'person \n                        (list :first-name \"Albert\" \n                              :last-name \"Einstein\")))\n--> #<PERSON @ #x2092cc8a>\n\n\n   > (the full-name)\n --> \"Albert Einstein\"\n\n\n\n5 Evaluating Slot Names at Runtime\n==================================\n\nThe ``evaluate'' macro can be used in cases where the message name is\nnot known until runtime -- it is wrapped around an expression which\nreturns a symbol naming a message. The symbol is immune to package, so\nit may be a keyword or non-keyword symbol.\n\nExample:\n========",
    "metadata": {
      "source": "usage.txt",
      "file_name": "usage.txt",
      "file_type": "txt",
      "content_type": "usage_guide",
      "topic": "general",
      "chunk_id": 21,
      "chunk_count": 34
    },
    "id": "47ae55a5d315778e870479c1d4f63536"
  },
  {
    "text": "is wrapped around an expression which\nreturns a symbol naming a message. The symbol is immune to package, so\nit may be a keyword or non-keyword symbol.\n\nExample:\n========\n\n>   (setq my-key :full-name)\n--> :FULL-NAME\n\n>   (setq self (make-object 'container))\n--> #<CONTAINER @ #x209495c2>\n\n>   (the (evaluate my-key))\n--> \"Pristine Container\"\n\n\n6 Formats and Views\n===================\n\n6.1 Overview\n============\n\nThe basic idea behind Formats and Views is that of providing different\nperspectives on an object for the purposes of output. This concept is\nsomething more than ``presentation methods'' as defined by CLIM. It is\nmore like ``presentation objects'' which contain ``presentation\nmethods.''\n\nCore GDL follows the message-passing paradigm of object\norientation. You have objects which have slots, sub-objects,\nfunctions, etc. These are all actually methods, or messages, ``on''\nthe object, i.e. the message passing paradigm.\n\nAnother way to look at message passing is to think that any given",
    "metadata": {
      "source": "usage.txt",
      "file_name": "usage.txt",
      "file_type": "txt",
      "content_type": "usage_guide",
      "topic": "general",
      "chunk_id": 22,
      "chunk_count": 34
    },
    "id": "5768b41d91f271ecfbd79613e4555a8b"
  },
  {
    "text": "ts, sub-objects,\nfunctions, etc. These are all actually methods, or messages, ``on''\nthe object, i.e. the message passing paradigm.\n\nAnother way to look at message passing is to think that any given\nmethod dispatches, or is specialized, only on a single argument, which\nis the object to which it ``belongs.'' Formats and Views extend upon\nthis notion by allowing methods to dispatch on two arguments. The\nfirst argument is a ``Format'' object, and the second argument is the\nnormal object just as with straight GDL.\n\nFormat objects are defined with ``define-format'' and instantiated\nonly when needed, inside the body of a ``with-format'' macro.\n\nMethods which apply to a particular object and from the perspective of\na particular format are defined as :output-methods with\n``define-lens''\n\n6.2 define-format\n=================\n\nAs its name implies, Define-Format is used to define new\nformats. GDL/GWL comes with several pre-defined formats, so it is",
    "metadata": {
      "source": "usage.txt",
      "file_name": "usage.txt",
      "file_type": "txt",
      "content_type": "usage_guide",
      "topic": "general",
      "chunk_id": 23,
      "chunk_count": 34
    },
    "id": "db13792ce7297411c7c230c22cf927c0"
  },
  {
    "text": "e-format\n=================\n\nAs its name implies, Define-Format is used to define new\nformats. GDL/GWL comes with several pre-defined formats, so it is\nlikely that you will not need to define your own formats initially.\n\nThe syntax is\n\n (Define-Format <format-name> <mixin-list> <spec-plist>)\n\n<Format-name> is any non-keyword symbol. A defclass will be generated\nfor this symbol, so any name you use will override a defclass if one\nis already defined with the same name.\n\n<Mixin-list> is a list of other format-names from which this format\nwill inherit. It maps directly into a CLOS mixin list.\n\n<spec-plist> is a plist made up of pairs made from special keywords\nand expression lists. Define-format in GDL currently only supports the\n``:Functions'' section keyword.\n\n6.2.1 functions\n===============\n\nFunctions of a format are actual uncached methods on the format\nobject. They are defined with a normal (non-specialized) lambda\nlist. There is a variable ``stream'' dynamically bound within the body",
    "metadata": {
      "source": "usage.txt",
      "file_name": "usage.txt",
      "file_type": "txt",
      "content_type": "usage_guide",
      "topic": "general",
      "chunk_id": 24,
      "chunk_count": 34
    },
    "id": "4c4096b034bed675c719b54338069a6d"
  },
  {
    "text": "Functions of a format are actual uncached methods on the format\nobject. They are defined with a normal (non-specialized) lambda\nlist. There is a variable ``stream'' dynamically bound within the body\nof these functions, to which output is expected to be written.\n\nExample:\n========\n\n(define-format base-format ()\n  :functions\n  ((a \n    (expression)\n    (format stream \"~a\" expression))\n   \n   (newline-out\n    ()\n    (format stream \"~%\"))))\n\n\n6.3 define-lens\n===============\n\nAs its name implies, the define-lens macro is used to define a\n``lens'' to a object, from the perspective of a given format. A lens\nis a way of defining methods which apply to a object when ``viewed''\nthrough the ``lens'' of a particular format. Therefore, views are\ndefined (and named) according to a particular object type, and a\nparticular format.\n\nThe Syntax is:\n\n (define-lens (<format-name> <object-type>) (<mixin-lists>) <spec-plist>)\n\n<format-name> is the name of a format which must already be defined",
    "metadata": {
      "source": "usage.txt",
      "file_name": "usage.txt",
      "file_type": "txt",
      "content_type": "usage_guide",
      "topic": "general",
      "chunk_id": 25,
      "chunk_count": 34
    },
    "id": "ba245cc7b5515ee09fd6e3692bd7c61b"
  },
  {
    "text": "e, and a\nparticular format.\n\nThe Syntax is:\n\n (define-lens (<format-name> <object-type>) (<mixin-lists>) <spec-plist>)\n\n<format-name> is the name of a format which must already be defined\nwith define-format. <object-type> is the name of an object type which\nmust already be defined with define-object.\n\n<mixin-lists> is currently unused. Inheritance for define-lens in GDL\ncurrently simply follows the inheritance of the particular format and\nobject named in the define-lens. At some point more explicit inheritance\ncontrol might be added using these <mixin-lists>.\n\n<spec-plist> is a plist made up of pairs made from special keywords\nand expression lists define-lens in GDL currently only supports the\n``:output-functions'' section keyword.\n\nOutput-functions are defined like normal :functions on an object,\nhowever, in addition to sending messages to the object with normal\n``the'' referencing macro, the ``write-env'' macro may also be used to",
    "metadata": {
      "source": "usage.txt",
      "file_name": "usage.txt",
      "file_type": "txt",
      "content_type": "usage_guide",
      "topic": "general",
      "chunk_id": 26,
      "chunk_count": 34
    },
    "id": "8730d6f13e155050f66469e56c384690"
  },
  {
    "text": "object,\nhowever, in addition to sending messages to the object with normal\n``the'' referencing macro, the ``write-env'' macro may also be used to\ncall :functions which are known to be defined for the associated\nformat.\n\nExample:\n========\n\n(define-lens (base-format try)()\n  :output-functions\n  ((:summary\n    ()\n    (write-env (a \"The value is: \") (a (the value))\n\t       (newline-out)\n\t       (a \"The color of ``this'' is: \") (a (the this color))\n\t       (newline-out)\n\t       (a \"The color of ``that'' is: \") (a (the (these 0) color))\n\t       (newline-out)))))\n\n6.4 with-format\n===============\n\nThe with-format macro sets up an environment for calling :functions of\nformats (using ``write-env'' -- see below) and :output-functions of\nviews (using ``write-the'' and ``write-the-object'').\n\nThe syntax is:\n\n (With-format (<format-name> <stream-or-pathname>) \n    <body>)\n\n\n<format-name> is the name of a format which has been defined with\n``define-format''",
    "metadata": {
      "source": "usage.txt",
      "file_name": "usage.txt",
      "file_type": "txt",
      "content_type": "usage_guide",
      "topic": "general",
      "chunk_id": 27,
      "chunk_count": 34
    },
    "id": "4e51fd68db9c0a7d33dbf6de4d524898"
  },
  {
    "text": "ax is:\n\n (With-format (<format-name> <stream-or-pathname>) \n    <body>)\n\n\n<format-name> is the name of a format which has been defined with\n``define-format''\n\n<stream-or-pathname> is a variable or expression which evaluates to a\nstream which can accept output or to a string or pathname which can be\nopened to accept output.\n\n<body> can contain any normal Lisp expressions as well as the format\nand view reference macros ``write-env,'' ``write-the-object,'' and\n``write-the'' (see below).\n\nWithin <body>, the parameter ``stream'' will be dynamically bound to\nthe stream specified by <stream-or-pathname>, or to a file stream\nopened to stream-or-pathname, if it is a string or pathname. Because\nit is dynamically bound, this means any other functions or methods\ncalled within <body> will also see the correct value of ``stream.''\n\n6.4.1 Write-Env\n===============\n\nWrite-env must be called either within the (dynamic) body of a\n``with-format'' or within an :output-function of a view, and is used",
    "metadata": {
      "source": "usage.txt",
      "file_name": "usage.txt",
      "file_type": "txt",
      "content_type": "usage_guide",
      "topic": "general",
      "chunk_id": 28,
      "chunk_count": 34
    },
    "id": "a86224b3be6a17e37115c769a0f33d5a"
  },
  {
    "text": "correct value of ``stream.''\n\n6.4.1 Write-Env\n===============\n\nWrite-env must be called either within the (dynamic) body of a\n``with-format'' or within an :output-function of a view, and is used\nto invoke :functions defined on the specified format\n\nExamples:\n\n(define-lens (base-format try)()\n  :output-functions\n  ((summary\n    ()\n    (write-env (a \"The value is: \") (a (the value))\n\t       (newline-out)\n\t       (a \"The color of ``this'' is: \") (a (the this color))\n\t       (newline-out)\n\t       (a \"The color of ``that'' is: \") (a (the (these 0) color))\n\t       (newline-out)))))\n\n(with-format (base-writer \"/tmp/try.txt\")\n  (write-env (a \"This is a test\")))\n\n\n6.4.2 Write-The-Object\n======================\n\nSyntax:\n\n(write-the-object <object> <reference-chain>)\n\n``write-the-object'' works in similar fashion to ``the-object'' in the\nsense that it handles reference chains, but the last element in the\nreference chain must name a :output-function defined in a relevant\nview.",
    "metadata": {
      "source": "usage.txt",
      "file_name": "usage.txt",
      "file_type": "txt",
      "content_type": "usage_guide",
      "topic": "general",
      "chunk_id": 29,
      "chunk_count": 34
    },
    "id": "1f4cea53082fe6edac6c19e3c645a367"
  },
  {
    "text": "ilar fashion to ``the-object'' in the\nsense that it handles reference chains, but the last element in the\nreference chain must name a :output-function defined in a relevant\nview. ``Write-the-object'' must be called inside the (dynamic) body of\na ``with-format'' so that the effective format and stream will be\nknown. The :output-function indicated by the last element of the\nreference chain will be invoked, which presumably will write some\noutput to the specified stream.\n\nCurrently the ``evaluate'' macro is not implemented in GDL to resolve\nthe :write-method name at runtime, so this name must be given as a\nliteral symbol in the compiled source.\n\n\nExample:\n========\n\n(with-writer (base-format *standard-output*)\n  (write-the-object (make-object 'try) (summary)))\n\n2.4.3 Write-The\n===============\n\nSyntax:\n\n(write-the <reference-chain>)\n\n``Write-the'' is similar to ``Write-the-object,'' but it assumes\n``self'' as the object, so it is not necessary to pass the object",
    "metadata": {
      "source": "usage.txt",
      "file_name": "usage.txt",
      "file_type": "txt",
      "content_type": "usage_guide",
      "topic": "general",
      "chunk_id": 30,
      "chunk_count": 34
    },
    "id": "0f8a9ae74384e7f4336e88acd6986a76"
  },
  {
    "text": "Syntax:\n\n(write-the <reference-chain>)\n\n``Write-the'' is similar to ``Write-the-object,'' but it assumes\n``self'' as the object, so it is not necessary to pass the object\nexplicitly to ``write-the'' as is necessary with ``write-the-object.''\n\nExample:\n========\n\n(with-writer (base-format *standard-output*)\n  (let ((self (make-object 'try)))\n    (write-the (summary))))\n\n\nFor further examples and a listing of built-in formats currently\nshipping with GDL/GWL, please see output-formats.txt.\n\n\n\n7 Object Amendments\n===================\n\nThe macro define-object-amendment can be used to extend and/or\nredefine both user-defined objects and built-in GDL objects. The\nsyntax for define-object-amendment is identical to that for\ndefine-object. Any additional elements will be added to the\ndefinition, and any elements with the same names as existing elements\nwill overwrite the existing elements currently loaded into the system.\n\n\n\n8 Extensions and Implementations\n================================",
    "metadata": {
      "source": "usage.txt",
      "file_name": "usage.txt",
      "file_type": "txt",
      "content_type": "usage_guide",
      "topic": "general",
      "chunk_id": 31,
      "chunk_count": 34
    },
    "id": "4f37a6361019f4781bf335b3525b10b0"
  },
  {
    "text": "any elements with the same names as existing elements\nwill overwrite the existing elements currently loaded into the system.\n\n\n\n8 Extensions and Implementations\n================================\n\nGenworks also provides a large set of built-in primitives and\ninterfaces for our GDL product, written in the GDL language. \n\nAlthough Genworks currently produces the only available full-featured\nimplementation of the GDL language specification, this core language\nspecification also represents something of a de-facto standard for KBE\nlanguages based in ANSI Common Lisp. If new implementations emerge, we\nencourage them to adopt this standard as well, and communicate with\nGenworks regarding refinements and further extensions, so that the\nIndustry can move toward a true vendor-neutral Standard KBE language\nspecification.",
    "metadata": {
      "source": "usage.txt",
      "file_name": "usage.txt",
      "file_type": "txt",
      "content_type": "usage_guide",
      "topic": "general",
      "chunk_id": 32,
      "chunk_count": 34
    },
    "id": "ca30464eab584e1bddc69b366c3cd5e6"
  },
  {
    "text": "uage\nspecification.",
    "metadata": {
      "source": "usage.txt",
      "file_name": "usage.txt",
      "file_type": "txt",
      "content_type": "usage_guide",
      "topic": "general",
      "chunk_id": 33,
      "chunk_count": 34
    },
    "id": "51fedb871cd11f7a5d511c47dce7ad20"
  },
  {
    "text": "training.asd\n",
    "metadata": {
      "source": "gornschool-training/system-index.txt",
      "file_name": "system-index.txt",
      "file_type": "txt",
      "content_type": "tutorial",
      "topic": "general",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "4f85f3cef586fada593e01858c74b8c4"
  },
  {
    "text": "Development setup:\n\n1. Make sure the \"nodejs\" package is installed on your system such\n  that `node --version` in your command-line will return a version\n  (OS-specific)\n\n2. Change directories into this directory in your command-line and\n   issue the command:\n\n  `npm install`\n\n3. Confirm the correct command-line for builds in `package.json`.\n\n4. Start the running (& watching) build process with\n\n   `npm run build`\n\n5. Now your deployable css will be updated every time you trouch a\n   file in your project. Keep an eye on the terminal where the build\n   is running for any syntax errors (probably coming from your base\n   css file in this directory, named with `-i` in the `package.json`\n   but probably, <your-app>-base.css.\n\n\n\n\n",
    "metadata": {
      "source": "gornschool-training/tailwind/README.txt",
      "file_name": "README.txt",
      "file_type": "txt",
      "content_type": "tutorial",
      "topic": "general",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "5c638efbee2daa50f3f73929174ae753"
  },
  {
    "text": "Box Width 3\nBox Length 6\nBox Height 4\nBox Center 0.0,0.0,0.0\nBox Volume 72\n",
    "metadata": {
      "source": "gornschool-training/t4/resources/source/report.txt",
      "file_name": "report.txt",
      "file_type": "txt",
      "content_type": "tutorial",
      "topic": "tutorial_4",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "c94098cb27de4294fea329248a7812e0"
  },
  {
    "text": "Birthdays\nIan,13/7/1975\nPaul,2/6/2004\nPhilip, 12/12/1989\n",
    "metadata": {
      "source": "gornschool-training/t6/resources/source/birthdays.txt",
      "file_name": "birthdays.txt",
      "file_type": "txt",
      "content_type": "tutorial",
      "topic": "tutorial_6",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "410b21ce750c0f12649dd1da7c185e31"
  },
  {
    "text": "nominal-width 5000\ntruss-angle 40\nwall-thickness 4\n",
    "metadata": {
      "source": "gornschool-training/t6/resources/source/building-input.txt",
      "file_name": "building-input.txt",
      "file_type": "txt",
      "content_type": "tutorial",
      "topic": "tutorial_6",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "ff1d4805f62eb79b6978edd65fa650c5"
  },
  {
    "text": "GDL Reference Documentation Reference Documentation for Genworks \u00ae General-purpose Declarative Language, Related Packages, and User packages Documented Packages: CL-LITE (Compile-and-Load Lite Utility) GENDL (Base Core Kernel Engine) Nicknames: Gdl, Genworks, Base GENDL-MCP GEOM-BASE (Wireframe Geometry) GEYSR (Web-based Development Environment (geysr)) GWL (Generative Web Language (GWL)) YADD (Yet Another Definition Documenter (yadd)) Master Index Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/yadd.html",
      "file_name": "yadd.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "87cc34d06e36c1b26343e1bf6722a6de"
  },
  {
    "text": "The CL-LITE (Compile-and-Load Lite Utility) Package Documentation Home The CL-LITE (Compile-and-Load Lite Utility) Package Object Definitions codebase-directory-node Function and Macro Definitions cl-patch Documentation Home Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/0/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_0",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "8797e4a118943b17e8393d1d36f23f84"
  },
  {
    "text": "GendL Application - CODEBASE-DIRECTORY-NODE Package Documentation Object: CODEBASE-DIRECTORY-NODE (The :CL-LITE Package) Mixins: DIRECTORY-NODE Description Models a filesystem directory for use by the cl-lite program. Input Slots (optional) BIN-SUBDIR-NAMES list of strings Identifies the names of directories considered to hold binaries. Default is (list \"bin\" \"patch\") CREATE-FASL? boolean Determines whether to write a concatenated fasl for the build. Defaults to nil. NOTE: this is not currently supported in cl-lite. FASL-OUTPUT-NAME string Names the built concatenated fasl when (the create-fasl?) is non-nil. Defaults to (the local-name) FASL-OUTPUT-PATH string or pathname object Designates the pathname for the filesystem directory in which the built concatenated fasls are written. Defaults to (glisp:temporary-folder) FASL-OUTPUT-TYPE string Names the fasl extension used by the compiler. Defaults to the local fasl output type.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/0/object-docs/dokumentation/0/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_0_objects",
      "chunk_id": 0,
      "chunk_count": 4
    },
    "id": "ca44595f0a1f7cc0ea231e805055186b"
  },
  {
    "text": "to (glisp:temporary-folder) FASL-OUTPUT-TYPE string Names the fasl extension used by the compiler. Defaults to the local fasl output type. HIDDEN? [ from VANILLA-MIXIN* ] boolean Indicates whether the object should effectively be a hidden-object even if specified in :objects. Default is nil. LOAD-ALWAYS? boolean Determines whether to load the individual compiled fasls even if the source has not changed. Defaults to nil (i.e. we assume we are loading into a clean system and need all the initial definitions.). ROOT [ from VANILLA-MIXIN* ] gdl instance The root-level node in this object's ``tree'' (instance hierarchy). SAFE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances All objects from the :objects specification, including elements of sequences as flat lists. Any children which throw errors come back as a plist with error information SOURCE-FILES-TO-IGNORE list of strings Lists directory names which should be ignored as having compilable source code for the build.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/0/object-docs/dokumentation/0/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_0_objects",
      "chunk_id": 1,
      "chunk_count": 4
    },
    "id": "70f78236974cbfeca70faaa8bd06ca7d"
  },
  {
    "text": "w errors come back as a plist with error information SOURCE-FILES-TO-IGNORE list of strings Lists directory names which should be ignored as having compilable source code for the build. SPECIAL-SUBDIR-NAMES list of strings Identifies the names of directories which are part of a vc-system control files and therefore should be treated as special subdirectories. Default is (list \"CVS\") TYPE-MAPPING plist of keywords and lists of strings Maps directory names to their default type classifications. VISIBLE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances Additional objects to display in Tatu tree. Typically this would be a subset of hidden-children. Defaults to NIL. Computed Slots STRINGS-FOR-DISPLAY [ from VANILLA-MIXIN* ] string or list of strings Determines how the name of objects of this type will be printed in most places.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/0/object-docs/dokumentation/0/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_0_objects",
      "chunk_id": 2,
      "chunk_count": 4
    },
    "id": "337cdc88ba17e21012561746ca498968"
  },
  {
    "text": "is type will be printed in most places. This defaults to the name-for-display (generally the part's name as specified in its parent), followed by an index number if the part is an element of a sequence. Package Documentation Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/0/object-docs/dokumentation/0/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_0_objects",
      "chunk_id": 3,
      "chunk_count": 4
    },
    "id": "c17c0b3023bdbfdf1158120452f3e2c5"
  },
  {
    "text": "Function: CL-LITE::CL-PATCH <-Back Function: Cl-Lite::Cl-Patch CL-PATCH Traverses pathname in a manner identical to cl-lite, but only those files for which the source is newer than the corresponding fasl binary file (or for which the corresponding fasl binary file does not exist) will be loaded. Use this for incremental updates where the unmodified source files do not depend on the modified source files. <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/0/function-docs/dokumentation/0/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_0_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "af73a3e436b0f12a900188b820cf2b46"
  },
  {
    "text": "The GENDL (Base Core Kernel Engine) Nicknames: Gdl, Genworks, Base Package Documentation Home The GENDL (Base Core Kernel Engine) Nicknames: Gdl, Genworks, Base Package a.k.a. Gdl, Genworks, Base Object Definitions base-rule-object gdl-app matrix-sequence null-object quantification radial-sequence standard-sequence vanilla-mixin* variable-sequence Function and Macro Definitions alist2plist always append-elements [Macro] check-computed-slots check-documentation check-floating-string check-form check-functions check-input-slots check-objects check-query-slots check-trickle-down-slots cl-lite cyclic-nth defaulting [Macro] define-format [Macro] define-lens [Macro] define-object [Macro] define-object-amendment [Macro] div ensure-list find-dependants find-dependencies find-messages-used-by find-messages-which-use flatten format-slot [Macro] fround-to-nearest half ignore-errors-with-backtrace [Macro] index-filter iso-8601-date lastcar least list-elements [Macro] list-of-n-numbers",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/2/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_2",
      "chunk_id": 0,
      "chunk_count": 4
    },
    "id": "ba850ed77f8a019c2a6d3088157bcbec"
  },
  {
    "text": "messages-which-use flatten format-slot [Macro] fround-to-nearest half ignore-errors-with-backtrace [Macro] index-filter iso-8601-date lastcar least list-elements [Macro] list-of-n-numbers list-of-numbers load-glime load-quicklisp make-gdl-app make-keyword make-object mapsend maptree max-of-elements [Macro] min-of-elements [Macro] most near-to? near-zero? never number-format number-round plist-keys plist-values print-messages [Macro] print-variables [Macro] read-safe-string read-snapshot remove-plist-entry replace-substring round-to-nearest safe-float safe-sort set-format-slot [Macro] split status-message string-append sum-elements [Macro] the [Macro] the-child [Macro] the-element [Macro] the-object [Macro] twice undefine-object universal-time-from-iso-8601 with-error-handling [Macro] with-format [Macro] with-format-slots [Macro] write-env [Macro] write-plist write-the [Macro] write-the-object [Macro] ^2 Variables and Constants *allow-nil-list-of-numbers?* *bias-to-double-float?*",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/2/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_2",
      "chunk_id": 1,
      "chunk_count": 4
    },
    "id": "4d138509bba463b3c0f5c9d624ddacfc"
  },
  {
    "text": "format [Macro] with-format-slots [Macro] write-env [Macro] write-plist write-the [Macro] write-the-object [Macro] ^2 Variables and Constants *allow-nil-list-of-numbers?* *bias-to-double-float?* *color-table* *color-table-decimal* *colors-default* *compile-circular-reference-detection?* *compile-dependency-tracking?* *compile-documentation-database?* *compile-for-dgdl?* *compile-source-code-database?* *curve-chords* *ensure-lists-when-bashing?* *load-documentation-database?* *load-source-code-database?* *on-syntax-error* *out-of-bounds-sequence-reference-action* *remember-previous-slot-values?* *root-checking-enabled?* *run-with-circular-reference-detection?* *run-with-dependency-tracking?* *sort-children?* *undeclared-parameters-enabled?* *with-format-direction *with-format-external-format* *with-format-if-does-not-exist* *with-format-if-exists* *zero-epsilon* +phi+ 2pi pi/2 Documentation Home Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/2/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_2",
      "chunk_id": 2,
      "chunk_count": 4
    },
    "id": "72e2126e989a807c7833f0d52bd7c4c8"
  },
  {
    "text": "* *with-format-if-does-not-exist* *with-format-if-exists* *zero-epsilon* +phi+ 2pi pi/2 Documentation Home Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/2/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_2",
      "chunk_id": 3,
      "chunk_count": 4
    },
    "id": "a60593ce7c31238160fbd17e2782fb99"
  },
  {
    "text": "Documentation for +PHI+ <-Back Constant: +Phi+ +PHI+ number (constant) The Golden Ratio. <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/2/variable-docs/dokumentation/27/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_2_variables",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "67120e0be20317cb2e05d3d3e2742ee1"
  },
  {
    "text": "Documentation for GENDL::*WITH-FORMAT-IF-DOES-NOT-EXIST* <-Back Parameter: Gendl::*With-Format-If-Does-Not-Exist* *WITH-FORMAT-IF-DOES-NOT-EXIST* keyword symbol Establishes the default for the :if-does-not-exist format-slot of the base-format. If you want to change this default behavior, you can override this parameter globally or bind it dynamically. Alternatively you can specify a different value for :if-does-not-exist in the call to with-format. Valid keywords are the same as for Common Lisp open or with-open-file. Default is :create. Example: (let ((*with-format-if-does-not-exist* :error)) (with-format (x3d \"/tmp/box.x3d\") (write-the-object (make-instance 'box :length 100 :width 100 :height 100) cad-output))) (with-format (x3d \"/tmp/box.x3d\" :if-does-not-exist :error) (write-the-object (make-instance 'box :length 100 :width 100 :height 100) cad-output) <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/2/variable-docs/dokumentation/24/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_2_variables",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "ffa38100e967e994a5ae6477c9b0693d"
  },
  {
    "text": "Documentation for *BIAS-TO-DOUBLE-FLOAT?* <-Back Parameter: *Bias-To-Double-Float?* *BIAS-TO-DOUBLE-FLOAT?* boolean Indicates whether the following functions should always return double-floats: half twice . Defaults to nil. <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/2/variable-docs/dokumentation/1/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_2_variables",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "989bea3c741ab9c46b23db7ac13eadb5"
  },
  {
    "text": "Documentation for *ALLOW-NIL-LIST-OF-NUMBERS?* <-Back Parameter: *Allow-Nil-List-Of-Numbers?* *ALLOW-NIL-LIST-OF-NUMBERS?* boolean If set to t, allows list-of-numbers function to return nil instead of error when num1 is greater than num2 with positive increment or vice-versa. Default is nil. <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/2/variable-docs/dokumentation/0/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_2_variables",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "ca22cc7fdf9add553ec5ddae54b36330"
  },
  {
    "text": "Documentation for *COLOR-TABLE-DECIMAL* <-Back Parameter: *Color-Table-Decimal* *COLOR-TABLE-DECIMAL* hash table Same as *color-table* except the results are returned as a list of three decimal integers (for Red, Green, Blue) in the range of 0-254. <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/2/variable-docs/dokumentation/3/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_2_variables",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "a14f7b76de1e7b5baf60a40965bac4bb"
  },
  {
    "text": "Documentation for *SORT-CHILDREN?* <-Back Parameter: *Sort-Children?* *SORT-CHILDREN?* boolean Determine whether to sort child objects in lexigraphical order. Defaults to nil, which is the behavior previous to gdl1585. <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/2/variable-docs/dokumentation/20/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_2_variables",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "920984b16df503d562ae79e975f29a2c"
  },
  {
    "text": "Documentation for 2PI <-Back Constant: 2pi 2PI number (constant) Twice the internal Lisp value for pi. <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/2/variable-docs/dokumentation/28/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_2_variables",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "e6c16f2bbd8390ff96e89e16435f1a8c"
  },
  {
    "text": "Documentation for *COMPILE-DOCUMENTATION-DATABASE?* <-Back Parameter: *Compile-Documentation-Database?* *COMPILE-DOCUMENTATION-DATABASE?* boolean Determines whether documentation strings information will be compiled into compiled files. Defaults to T. <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/2/variable-docs/dokumentation/7/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_2_variables",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "4b95f408bbcaef99330da41a6cee2eb7"
  },
  {
    "text": "Documentation for *COLOR-TABLE* <-Back Parameter: *Color-Table* *COLOR-TABLE* hash table Built from the *color-plist* , this hash table is keyed on the same keys. <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/2/variable-docs/dokumentation/2/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_2_variables",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "1ace53b4953ae5466f4599c41af18a95"
  },
  {
    "text": "Documentation for GENDL::*WITH-FORMAT-DIRECTION <-Back Parameter: Gendl::*With-Format-Direction *WITH-FORMAT-DIRECTION keyword symbol Establishes the default for the :direction format-slot of the base-format. If you want to change this default behavior, you can override this parameter globally or bind it dynamically. Alternatively you can specify a different value for :direction in the call to with-format. Valid keywords are the same as for Common Lisp open or with-open-file. Default is :output. Normally this should not be changed in user code. <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/2/variable-docs/dokumentation/22/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_2_variables",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "b8749b652e65791c505aa66a808678c5"
  },
  {
    "text": "Documentation for *UNDECLARED-PARAMETERS-ENABLED?* <-Back Parameter: *Undeclared-Parameters-Enabled?* *UNDECLARED-PARAMETERS-ENABLED?* boolean This is a compile-time switch. Determines whether the system will handle inputs passed to child parts through :parameters plists, where the input is not declared in any other part as either an input-slot or computed-slot. If you leave this as NIL when compiling your application you may see an improvement in runtime performance of up to 10% as compared to applications compiled with it set to T. Defaults to NIL. <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/2/variable-docs/dokumentation/21/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_2_variables",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "ad50acc521a6d00fb371fac98adc786d"
  },
  {
    "text": "Documentation for GENDL::*ROOT-CHECKING-ENABLED?* <-Back Parameter: Gendl::*Root-Checking-Enabled?* *ROOT-CHECKING-ENABLED?* boolean Determines whether dependency-tracking carries over between objects which do not share a common root. Default is T which means dependency-tracking does not carry over (the checking prevents it). <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/2/variable-docs/dokumentation/17/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_2_variables",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "5a5ec5938f323dc1f5f119f66a8a5b4f"
  },
  {
    "text": "Documentation for PI/2 <-Back Constant: Pi/2 PI/2 number (constant) Half the internal Lisp value for pi. <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/2/variable-docs/dokumentation/29/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_2_variables",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "e6e060edd270ef1c72f2915c0cba4659"
  },
  {
    "text": "Documentation for *COMPILE-CIRCULAR-REFERENCE-DETECTION?* <-Back Parameter: *Compile-Circular-Reference-Detection?* *COMPILE-CIRCULAR-REFERENCE-DETECTION?* boolean This is a compile-time switch. Determines whether the system detects circular references in messages. Defaults to NIL. <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/2/variable-docs/dokumentation/5/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_2_variables",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "26cd300f2c9d63e3327fc53f54b14f3e"
  },
  {
    "text": "Documentation for *RUN-WITH-CIRCULAR-REFERENCE-DETECTION?* <-Back Parameter: *Run-With-Circular-Reference-Detection?* *RUN-WITH-CIRCULAR-REFERENCE-DETECTION?* boolean This is a runtime switch. Determines whether the system detects circular references in messages. Defaults to NIL. <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/2/variable-docs/dokumentation/18/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_2_variables",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "f1fc9405275546f7208a998d73f51a98"
  },
  {
    "text": "Documentation for *LOAD-DOCUMENTATION-DATABASE?* <-Back Parameter: *Load-Documentation-Database?* *LOAD-DOCUMENTATION-DATABASE?* boolean Determines whether pre-compiled documentation strings information will be loaded from compiled files. Defaults to T. <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/2/variable-docs/dokumentation/12/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_2_variables",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "d370f2f82c9d3b3657fab4b3f45d42ba"
  },
  {
    "text": "Documentation for GENDL::*ON-SYNTAX-ERROR* <-Back Parameter: Gendl::*On-Syntax-Error* *ON-SYNTAX-ERROR* keyword symbol Can be either :warn or :error. <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/2/variable-docs/dokumentation/14/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_2_variables",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "7f32a26286e286644bae01ee740ee98e"
  },
  {
    "text": "Documentation for *ENSURE-LISTS-WHEN-BASHING?* <-Back Parameter: *Ensure-Lists-When-Bashing?* *ENSURE-LISTS-WHEN-BASHING?* boolean Determines whether lists are enforced to stay as lists with set-slot-if-needed method of vanilla-mixin. Default is nil. <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/2/variable-docs/dokumentation/11/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_2_variables",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "d7f6a524f703d4c919b1b010b2b7432e"
  },
  {
    "text": "Documentation for *RUN-WITH-DEPENDENCY-TRACKING?* <-Back Parameter: *Run-With-Dependency-Tracking?* *RUN-WITH-DEPENDENCY-TRACKING?* boolean This is a runtime switch. Determines whether the system keeps track of object and message dependencies at runtime, thereby enabling the modification of messages and subsequent proper demand-driven recomputation of other messages in the object hierarchy. This switch must be set at the beginning of a session; switching it in the middle of a session (especially from NIL to T) will have unpredictable effects and very likely will result in incorrect operation. Defaults to T. <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/2/variable-docs/dokumentation/19/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_2_variables",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "28dcedaccbcb59ac5492c766f0163c3a"
  },
  {
    "text": "Documentation for *COMPILE-FOR-DGDL?* <-Back Parameter: *Compile-For-Dgdl?* *COMPILE-FOR-DGDL?* boolean Determines whether global methods are defined during compilation to allow calling any message on a gdl remote-object. This functionality is not available in the base by itself, it requires the :gwl system as well. Defaults to nil. <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/2/variable-docs/dokumentation/8/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_2_variables",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "2aca2e26ab4c208f706e7e9782ff82dd"
  },
  {
    "text": "Documentation for *WITH-FORMAT-EXTERNAL-FORMAT* <-Back Parameter: *With-Format-External-Format* *WITH-FORMAT-EXTERNAL-FORMAT* external-format The default for the :external-format format-slot for the base format. Defaults to gdl::*external-text-format*. <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/2/variable-docs/dokumentation/23/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_2_variables",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "c1cd6f62854970be5f5b6155dbac2ee1"
  },
  {
    "text": "Documentation for *COMPILE-DEPENDENCY-TRACKING?* <-Back Parameter: *Compile-Dependency-Tracking?* *COMPILE-DEPENDENCY-TRACKING?* boolean This is a compile-time switch. Determines whether the system keeps track of object and message dependencies at runtime, thereby enabling the modification of messages and subsequent proper demand-driven recomputation of other messages in the object hierarchy. This switch must be set at the beginning of a session before comiling all code; switching it in the middle of a session (especially from NIL to T) will have unpredictable effects and very likely will result in incorrect operation. Defaults to T. <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/2/variable-docs/dokumentation/6/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_2_variables",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "6005b9fa7a55bd497d3683dd8c56bae7"
  },
  {
    "text": "Documentation for *COLORS-DEFAULT* <-Back Parameter: *Colors-Default* *COLORS-DEFAULT* plist Should contain keys of at least :foreground and :background , whose values are a color indicator for the default foreground and background of graphics viewports. The default is :black for foreground, and :white for background. <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/2/variable-docs/dokumentation/4/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_2_variables",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "148e510b8e2459383057b5d3938688c1"
  },
  {
    "text": "Documentation for *LOAD-SOURCE-CODE-DATABASE?* <-Back Parameter: *Load-Source-Code-Database?* *LOAD-SOURCE-CODE-DATABASE?* boolean Determines whether pre-compiled source code information will be loaded from compiled files. Defaults to T. <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/2/variable-docs/dokumentation/13/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_2_variables",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "18762924444c639cab63e78bef0a6e5a"
  },
  {
    "text": "Documentation for *COMPILE-SOURCE-CODE-DATABASE?* <-Back Parameter: *Compile-Source-Code-Database?* *COMPILE-SOURCE-CODE-DATABASE?* boolean Determines whether source code information information will be compiled into compiled files. Defaults to T. <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/2/variable-docs/dokumentation/9/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_2_variables",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "fdb0594c8fa39623d733df2e2cb808fb"
  },
  {
    "text": "Documentation for *REMEMBER-PREVIOUS-SLOT-VALUES?* <-Back Parameter: *Remember-Previous-Slot-Values?* *REMEMBER-PREVIOUS-SLOT-VALUES?* boolean Determines whether the system keeps track of previous slot values (accessible with previous-value function) after bashings are done. Leave this set to nil to improve memory performance. <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/2/variable-docs/dokumentation/16/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_2_variables",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "efaa95c88be7fe2655322327cb137d8b"
  },
  {
    "text": "Documentation for *OUT-OF-BOUNDS-SEQUENCE-REFERENCE-ACTION* <-Back Parameter: *Out-Of-Bounds-Sequence-Reference-Action* *OUT-OF-BOUNDS-SEQUENCE-REFERENCE-ACTION* keyword symbol :warn, :error, or :silent Determines what happens when you try to access a member of a GDL sequence which is out of bounds. If :warn or :silent, an out-of-bounds reference will simply return nil. If :error, it will throw an error as was the old behavior. Defaults to :error. <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/2/variable-docs/dokumentation/15/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_2_variables",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "96a51468ca7a7b2b7cd6b0568282c81a"
  },
  {
    "text": "Documentation for GENDL::*WITH-FORMAT-IF-EXISTS* <-Back Parameter: Gendl::*With-Format-If-Exists* *WITH-FORMAT-IF-EXISTS* keyword symbol Establishes the default for the :if-exists format-slot of the base-format. If you want to change this default behavior, you can override this parameter globally or bind it dynamically. Alternatively you can specify a different value for :if-exists in the call to with-format. Valid keywords are the same as for Common Lisp open or with-open-file. Default is :supersede. Example: (let ((*with-format-if-exists* :error)) (with-format (x3d \"/tmp/box.x3d\") (write-the-object (make-instance 'box :length 100 :width 100 :height 100) cad-output))) (with-format (x3d \"/tmp/box.x3d\" :if-exists :error) (write-the-object (make-instance 'box :length 100 :width 100 :height 100) cad-output) <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/2/variable-docs/dokumentation/25/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_2_variables",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "24cbad144c377f89c974a09624c40ddc"
  },
  {
    "text": "Documentation for *ZERO-EPSILON* <-Back Parameter: *Zero-Epsilon* *ZERO-EPSILON* number The value used to test for closeness to zero in some functions. Defaults to 0.001 <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/2/variable-docs/dokumentation/26/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_2_variables",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "f5f6415304d78385fb8b2b6bf1936f24"
  },
  {
    "text": "Documentation for *CURVE-CHORDS* <-Back Parameter: *Curve-Chords* *CURVE-CHORDS* integer The number of chords to use per Bezier curve when rendering curves as a sequence of straight chords (e.g. in VRML). <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/2/variable-docs/dokumentation/10/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_2_variables",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "9af0a0aae4cc855efa7109da665ea440"
  },
  {
    "text": "GendL Application - GDL-APP Package Documentation Object: GDL-APP (The :GENDL Package) Mixins: GDL-APP-SCRIPTS-MIXIN, VANILLA-MIXIN Author Dave Cooper, Genworks International Description This object serves as the driver for the build process for GDL runtime applications. There is also an undocumented function called make-gdl-app ; in order to perform a runtime build process, simply make an instance of this object with the appropriate input values, and invoke (the make!) on it, or call make-gdl-app with the same arguments as the input-slot you give to this object. Input Slots (optional) APPLICATION-FASLS list of pathnames This list should contain the pre-compiled fasls for your GDL application, in correct load order. These can be produced, for example, by calling genworks:cl-lite with the :create-fasl? keyword argument set to t .",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/2/object-docs/dokumentation/1/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_2_objects",
      "chunk_id": 0,
      "chunk_count": 7
    },
    "id": "fb2d73dc87a72160ad958b553f87c2d6"
  },
  {
    "text": "create-fasl? keyword argument set to t . If you are using the ASDF build management system, note that ASDF3 is now capable of producing a single fasl file for your application including its ASDF/Quicklisp dependencies, using (asdf:operate 'asdf:monolithic-compile-bundle-op :your-application-system-name) (asdf:output-file 'asdf:monolithic-compile-bundle-op :your-application-system-name) See the ASDF documentation for details. APPLICATION-NAME string The name which will be used for your application's executable and possibly image file. Defaults to \"gdl-test-runtime\". DESTINATION-DIRECTORY pathname Indicates the directory to be created or overwritten for producing the runtime distribution. Defaults to a directory called (the application-name) in the system temporary directory, returned by (glisp:temporary-folder) . GDLINIT-CONTENT string The contents of this string will be copied to a file gdlinit.cl and placed in the destination-directory. Default is empty string.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/2/object-docs/dokumentation/1/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_2_objects",
      "chunk_id": 1,
      "chunk_count": 7
    },
    "id": "0a00d812a03a55cbf39dd52cd6277fb7"
  },
  {
    "text": "isp:temporary-folder) . GDLINIT-CONTENT string The contents of this string will be copied to a file gdlinit.cl and placed in the destination-directory. Default is empty string. HIDDEN? [ from VANILLA-MIXIN* ] boolean Indicates whether the object should effectively be a hidden-object even if specified in :objects. Default is nil. LISP-HEAP-SIZE number The size of the reserved space which will be requested from the OS when the produced application starts up. Defaults to 800000000 (eight hundred million) bytes. OVERWRITE-VALIDATION-FUNCTION function, t, or nil Validates the target of overwrite? before deleting. T is unconditional \"yes\" - use at your own risk. OVERWRITE? boolean Indicates whether a build will overwrite a previously existing destination directory. Defaults to nil. POST-LOAD-FORM lisp expression This form will be evaluated in the image being built, after the loading of application-fasls is complete. Defaults to nil. POST-MAKE-FUNCTION lisp function of zero arguments .",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/2/object-docs/dokumentation/1/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_2_objects",
      "chunk_id": 2,
      "chunk_count": 7
    },
    "id": "6264eff0f3a7d1a97716833dd9d1b5b6"
  },
  {
    "text": "M lisp expression This form will be evaluated in the image being built, after the loading of application-fasls is complete. Defaults to nil. POST-MAKE-FUNCTION lisp function of zero arguments . This function will be run in the initiating image after the build is complete. PRE-LOAD-FORM lisp expression This form will be evaluated in the image being built, before the loading of application-fasls begins, but after the GDL runtime modules are loaded. Defaults to nil. PRE-MAKE-FUNCTION lisp function of zero arguments . This function will be run in the initiating image before the build is begun. RESTART-APP-FUNCTION Lambda expression with empty argument list or symbol naming a function with no arguments. This will be run when the runtime application starts up. The alternative to using this to achieve initializations is to put expressions in a gdlinit.cl or .gdlinit.cl in the application directory or user home directory. Defaults to nil.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/2/object-docs/dokumentation/1/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_2_objects",
      "chunk_id": 3,
      "chunk_count": 7
    },
    "id": "2430fd31694ec7d075f9459103d20137"
  },
  {
    "text": "hieve initializations is to put expressions in a gdlinit.cl or .gdlinit.cl in the application directory or user home directory. Defaults to nil. RESTART-INIT-FUNCTION Lambda expression with empty argument list or symbol naming a function with no arguments. This will be run when the runtime application starts up. The alternative to using this to achieve initializations is to put expressions in a gdlinit.cl or .gdlinit.cl in the application directory or user home directory. Defaults to nil. ROOT [ from VANILLA-MIXIN* ] gdl instance The root-level node in this object's ``tree'' (instance hierarchy). SAFE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances All objects from the :objects specification, including elements of sequences as flat lists. Any children which throw errors come back as a plist with error information STRINGS-FOR-DISPLAY [ from VANILLA-MIXIN* ] string or list of strings Determines how the name of objects of this type will be printed in most places.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/2/object-docs/dokumentation/1/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_2_objects",
      "chunk_id": 4,
      "chunk_count": 7
    },
    "id": "0280fd7ea71e2ac489a457618480dfd7"
  },
  {
    "text": "a plist with error information STRINGS-FOR-DISPLAY [ from VANILLA-MIXIN* ] string or list of strings Determines how the name of objects of this type will be printed in most places. This defaults to the name-for-display (generally the part's name as specified in its parent), followed by an index number if the part is an element of a sequence. VISIBLE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances Additional objects to display in Tatu tree. Typically this would be a subset of hidden-children. Defaults to NIL. GDL Functions MAKE! void Does the application build and creates or replaces (the destination-directory) . Examples (in-package :gdl-user) (make-gdl-app :application-name \"moon-shot\" :destination-directory \"/tmp/moon-shot/\" :overwrite? t :application-fasls (list \"/fasl-home/booster-rocket.fasl\" \"/fasl-home/lunar-module.fasl\")) Package Documentation Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/2/object-docs/dokumentation/1/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_2_objects",
      "chunk_id": 5,
      "chunk_count": 7
    },
    "id": "020feb851667548c46d93dc5fa0aad90"
  },
  {
    "text": "ter-rocket.fasl\" \"/fasl-home/lunar-module.fasl\")) Package Documentation Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/2/object-docs/dokumentation/1/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_2_objects",
      "chunk_id": 6,
      "chunk_count": 7
    },
    "id": "10c931b8e603dfd556c6e609e2ca053a"
  },
  {
    "text": "GendL Application - BASE-RULE-OBJECT Package Documentation Object: BASE-RULE-OBJECT (The :GENDL Package) Mixins: VANILLA-MIXIN Description Encapsulates a basic computation, usually to be displayed to the user. Typically this would be used as a mixin into a more sophisticated rule-object, but the type can be used to detect objects which should be processed as \"rules.\" Input Slots (optional) HIDDEN? [ from VANILLA-MIXIN* ] boolean Indicates whether the object should effectively be a hidden-object even if specified in :objects. Default is nil. ROOT [ from VANILLA-MIXIN* ] gdl instance The root-level node in this object's ``tree'' (instance hierarchy). RULE-DESCRIPTION string Short description of the rule (generally one line). Defaults to NIL. RULE-DESCRIPTION-HELP string Verbose description of the purpose of the rule. RULE-RESULT string The basic return-value, or result, of evaluating the rule. RULE-RESULT-HELP string Verbose description of how the rule result is computed.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/2/object-docs/dokumentation/0/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_2_objects",
      "chunk_id": 0,
      "chunk_count": 3
    },
    "id": "fcee8c2d4ec1fe322496b66bcc1920a1"
  },
  {
    "text": "f the purpose of the rule. RULE-RESULT string The basic return-value, or result, of evaluating the rule. RULE-RESULT-HELP string Verbose description of how the rule result is computed. RULE-TITLE string Title to be used with the rule object. Defaults to NIL. SAFE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances All objects from the :objects specification, including elements of sequences as flat lists. Any children which throw errors come back as a plist with error information STRINGS-FOR-DISPLAY string Determines the rule's default name in various internal GDL contexts. Defaults to the rule-title , or \"Unnamed Rule\" if rule-title is NIL. SUPPRESS-DISPLAY? boolean Determines whether the rule is displayed by default in reports etc. VIOLATED? boolean Indicates whether this rule violates a standard condition. VISIBLE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances Additional objects to display in Tatu tree. Typically this would be a subset of hidden-children. Defaults to NIL.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/2/object-docs/dokumentation/0/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_2_objects",
      "chunk_id": 1,
      "chunk_count": 3
    },
    "id": "89892100f31e57421f04d8dd6a2adb33"
  },
  {
    "text": "a standard condition. VISIBLE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances Additional objects to display in Tatu tree. Typically this would be a subset of hidden-children. Defaults to NIL. Package Documentation Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/2/object-docs/dokumentation/0/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_2_objects",
      "chunk_id": 2,
      "chunk_count": 3
    },
    "id": "14efd994acc22edd336d0d75ea48e7af"
  },
  {
    "text": "GendL Application - NULL-OBJECT Package Documentation Object: NULL-OBJECT (The :GENDL Package) Mixins: VANILLA-MIXIN Description A part with no geometric representation and no children. Use this in a conditional :type expression if you want to turn off a branch of the tree conditionally. Input Slots (optional) HIDDEN? [ from VANILLA-MIXIN* ] boolean Indicates whether the object should effectively be a hidden-object even if specified in :objects. Default is nil. ROOT [ from VANILLA-MIXIN* ] gdl instance The root-level node in this object's ``tree'' (instance hierarchy). SAFE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances All objects from the :objects specification, including elements of sequences as flat lists. Any children which throw errors come back as a plist with error information STRINGS-FOR-DISPLAY [ from VANILLA-MIXIN* ] string or list of strings Determines how the name of objects of this type will be printed in most places.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/2/object-docs/dokumentation/3/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_2_objects",
      "chunk_id": 0,
      "chunk_count": 2
    },
    "id": "87b69c36989e8e7617fa7baa5867074e"
  },
  {
    "text": "ion STRINGS-FOR-DISPLAY [ from VANILLA-MIXIN* ] string or list of strings Determines how the name of objects of this type will be printed in most places. This defaults to the name-for-display (generally the part's name as specified in its parent), followed by an index number if the part is an element of a sequence. VISIBLE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances Additional objects to display in Tatu tree. Typically this would be a subset of hidden-children. Defaults to NIL. Package Documentation Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/2/object-docs/dokumentation/3/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_2_objects",
      "chunk_id": 1,
      "chunk_count": 2
    },
    "id": "47e6fffda2c8c09d0d3f3fef0f262763"
  },
  {
    "text": "GendL Application - VANILLA-MIXIN* Package Documentation Object: VANILLA-MIXIN* (The :GENDL Package) Mixins: STANDARD-OBJECT Description Vanilla-Mixin is automatically inherited by every object created in GDL. It provides basic messages which are common to all GDL objects defined with the define-object macro, unless :no-vanilla-mixin t is specified at the toplevel of the define-object form. Input Slots (optional) HIDDEN? boolean Indicates whether the object should effectively be a hidden-object even if specified in :objects. Default is nil. ROOT gdl instance The root-level node in this object's ``tree'' (instance hierarchy). SAFE-CHILDREN list of gdl instances All objects from the :objects specification, including elements of sequences as flat lists. Any children which throw errors come back as a plist with error information STRINGS-FOR-DISPLAY string or list of strings Determines how the name of objects of this type will be printed in most places.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/2/object-docs/dokumentation/7/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_2_objects",
      "chunk_id": 0,
      "chunk_count": 15
    },
    "id": "098e1940420f8fd9ef6797859ec8308e"
  },
  {
    "text": "ck as a plist with error information STRINGS-FOR-DISPLAY string or list of strings Determines how the name of objects of this type will be printed in most places. This defaults to the name-for-display (generally the part's name as specified in its parent), followed by an index number if the part is an element of a sequence. VISIBLE-CHILDREN list of gdl instances Additional objects to display in Tatu tree. Typically this would be a subset of hidden-children. Defaults to NIL. Computed Slots AGGREGATE gdl instance In an element of a sequence, this is the container object which holds all elements. ALL-MIXINS list of symbols Lists all the superclasses of the type of this object. CHILDREN list of gdl instances All objects from the :objects specification, including elements of sequences as flat lists. DIRECT-MIXINS list of symbols Lists the direct superclasses of the type of this object. FIRST? boolean For elements of sequences, T iff there is no previous element.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/2/object-docs/dokumentation/7/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_2_objects",
      "chunk_id": 1,
      "chunk_count": 15
    },
    "id": "adb2008cb39c059777d7ffc3c51dce10"
  },
  {
    "text": "ists. DIRECT-MIXINS list of symbols Lists the direct superclasses of the type of this object. FIRST? boolean For elements of sequences, T iff there is no previous element. HIDDEN-CHILDREN list of gdl instances All objects from the :hidden-objects specification, including elements of sequences as flat lists. INDEX integer Sequential index number for elements of a sequence, NIL for singular objects. LAST? boolean For elements of sequences, T iff there is no next element. LEAF? boolean T if this object has no children, NIL otherwise. LEAVES list of gdl objects A Collection of the leaf nodes of the given object. NAME-FOR-DISPLAY keyword symbol The part's simple name, derived from its object specification in the parent or from the type name if this is the root instance. NEXT gdl instance For elements of sequences, returns the next part in the sequence. PARENT gdl instance The parent of this object, or NIL if this is the root object.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/2/object-docs/dokumentation/7/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_2_objects",
      "chunk_id": 2,
      "chunk_count": 15
    },
    "id": "5776bc8d01a559272bacee1aaf090d8d"
  },
  {
    "text": "ements of sequences, returns the next part in the sequence. PARENT gdl instance The parent of this object, or NIL if this is the root object. PREVIOUS gdl instance For elements of sequences, returns the previous part in the sequence. ROOT-PATH list of symbols or of pairs of symbol and integer Indicates the path through the instance hierarchy from the root to this object. Can be used in conjunction with the follow-root-path GDL function to return the actual instance. ROOT-PATH-LOCAL list of symbols or of pairs of symbol and integer Indicates the path through the instance hierarchy from the local root to this object. Can be used in conjunction with the follow-root-path GDL function to return the actual instance. ROOT? boolean T iff this part has NIL as its parent and therefore is the root node. SAFE-HIDDEN-CHILDREN list of gdl instances All objects from the :hidden-objects specification, including elements of sequences as flat lists.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/2/object-docs/dokumentation/7/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_2_objects",
      "chunk_id": 3,
      "chunk_count": 15
    },
    "id": "b8e8efd838b3817420e469523f0393ce"
  },
  {
    "text": "de. SAFE-HIDDEN-CHILDREN list of gdl instances All objects from the :hidden-objects specification, including elements of sequences as flat lists. Any children which throw errors come back as a plist with error information TYPE symbol The GDL Type of this object. GDL Functions DOCUMENTATION plist Returns the :documentation plist which has been specified the specific part type of this instance. FOLLOW-ROOT-PATH gdl instance Using this instance as the root, follow the reference chain represented by the given path. arguments: path List of Symbols or Pairs of Symbol and Integer MESSAGE-DOCUMENTATION string This is synonymous with slot-documentation MESSAGE-LIST list of keyword symbols Returns the messages (slots, objects, and functions) of this object, according to the filtering criteria as specified by the arguments. keyword arguments: category Keyword , Default Value: :ALL Either :all or the individual category of messages to be returned.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/2/object-docs/dokumentation/7/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_2_objects",
      "chunk_id": 4,
      "chunk_count": 15
    },
    "id": "47429c8cf2ace3173c932edadd7068ce"
  },
  {
    "text": "cified by the arguments. keyword arguments: category Keyword , Default Value: :ALL Either :all or the individual category of messages to be returned. This can be one of: :computed-slots :settable-computed-slots :required-input-slots :optional-input-slots :defaulted-input-slots :query-slots :functions :objects :quantified-objects :hidden-objects :quantified-hidden-objects message-type Keyword Symbol, :local or :global , Default Value: :GLOBAL Indicates whether to return messages only from the local specific part type, or from all superclasses (mixins) as well return-category? Boolean , Default Value: NIL Indicates whether or not the category of each message should be returned before each message in the returned list base-part-type Symbol naming a GDL Part Type , Default Value: NIL Indicates a ``base'' part from which no messages should be returned, nor should messages be returned from superclasses (mixins) of this base part.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/2/object-docs/dokumentation/7/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_2_objects",
      "chunk_id": 5,
      "chunk_count": 15
    },
    "id": "ae99f402b41e5f1f23bcb1cccad5ce05"
  },
  {
    "text": "a ``base'' part from which no messages should be returned, nor should messages be returned from superclasses (mixins) of this base part. If NIL (the default), messages are considered from all superclasses sort-order Keyword Symbol , Default Value: :UNSORTED One of: :unsorted , :by-category , or :by-name filter Function Object of two arguments or :normal , Default Value: :NORMAL If a function object, applies this function to each returned category and message keyword, and filters out all pairs for which the function returns NIL. If :normal (the default), then no filtering is done MIXINS list of symbols Returns the names of the immediate superclasses of this object. keyword arguments: local? Boolean , Default Value: T Indicates whether to give only direct mixins or all mixins from the entire inheritance hierarchy RESTORE-ALL-DEFAULTS! void Restores all settable-slots in this instance to their default values.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/2/object-docs/dokumentation/7/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_2_objects",
      "chunk_id": 6,
      "chunk_count": 15
    },
    "id": "f9998b1bb6f011e3380e4070f1faec80"
  },
  {
    "text": "e inheritance hierarchy RESTORE-ALL-DEFAULTS! void Restores all settable-slots in this instance to their default values. RESTORE-ROOT! Multiple Values: Total root-paths affected and total slots affected. Reverts any \"remembered\" bashed slots, starting from the root, to their default values. Note that any call to `set-slot!` or `set-slots!` or any use of web form-controls will result in \"remembered values\". Note that there is a `:remember?` keyword argument to `set-slot!` which defaults to `t` but if you specify it as `nil`, you can bash values without having them \"remembered\" and such slots would not be affected by this function. RESTORE-SLOT-DEFAULT! nil Restores the value of the given slot to its default, thus ``undoing'' any forcibly set value in the slot. Any dependent slots in the tree will respond accordingly when they are next demanded. Note that the slot must be specified as a keyword symbol (i.e.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/2/object-docs/dokumentation/7/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_2_objects",
      "chunk_id": 7,
      "chunk_count": 15
    },
    "id": "969df119d97cbddd273b36d1d7e6d808"
  },
  {
    "text": "e will respond accordingly when they are next demanded. Note that the slot must be specified as a keyword symbol (i.e. prepended with a colon (``:'')), otherwise it will be evaluated as a variable according to normal Lisp functional evaluation rules. arguments: slot Keyword Symbol key: (force? \"Boolean. Specify as t if you want to force non-settable slots to recompute (e.g. reading from databases or external files). Defaults to nil.\") RESTORE-SLOT-DEFAULTS! nil Restores the value of the given slots to their defaults, thus ``undoing'' any forcibly set values in the slots. Any dependent slots in the tree will respond accordingly when they are next demanded. Note that the slots must be specified as keyword symbols (i.e. prepended with colons (``:'')), otherwise they will be evaluated as variables according to normal Lisp functional evaluation rules.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/2/object-docs/dokumentation/7/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_2_objects",
      "chunk_id": 8,
      "chunk_count": 15
    },
    "id": "fd32179b98399a7f901d69dc02fe9b6a"
  },
  {
    "text": "bles according to normal Lisp functional evaluation rules. arguments: slots List of Keyword Symbols keyword arguments: force? Boolean , Default Value: *FORCE-RESTORE-SLOT-DEFAULT?* Indicates whether the slot values should be unbound, regardless of whether it had actually been bashed previously RESTORE-TREE! void Restores all settable-slots in this instance, and recursively in all descendant instances, to their default values. SET-SLOT! nil Forcibly sets the value of the given slot to the given value. The slot must be defined as :settable for this to work properly. Any dependent slots in the tree will respond accordingly when they are next demanded. Note that the slot must be specified as a keyword symbol (i.e. prepended with a colon (``:'')), otherwise it will be evaluated as a variable according to normal Lisp functional evaluation rules. Note also that this must not be called (either directly or indirectly) from within the body of a Gendl computed-slot.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/2/object-docs/dokumentation/7/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_2_objects",
      "chunk_id": 9,
      "chunk_count": 15
    },
    "id": "d885abd8a0ec6156f21ef263c907d925"
  },
  {
    "text": "cording to normal Lisp functional evaluation rules. Note also that this must not be called (either directly or indirectly) from within the body of a Gendl computed-slot. The caching and dependency tracking mechanism in Gendl will not work properly if this is called from the body of a computed-slot, and furthermore a runtime error will be generated. arguments: slot Keyword Symbol value Lisp Object (e.g. Number, String, List, etc.) keyword arguments: remember? Boolean , Default Value: T Determines whether to save in current version-tree warn-on-non-toplevel? Boolean , Default Value: T Determines whether to warn if this is called from the body of a cached slot SET-SLOTS! nil Forcibly sets the value of the given slots to the given values. The slots must be defined as :settable for this to work properly. Any dependent slots in the tree will respond accordingly when they are next demanded. Note that the slots must be specified as a keyword symbols (i.e.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/2/object-docs/dokumentation/7/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_2_objects",
      "chunk_id": 10,
      "chunk_count": 15
    },
    "id": "9f6363f29cca08d8e77f9e95e8de8591"
  },
  {
    "text": "properly. Any dependent slots in the tree will respond accordingly when they are next demanded. Note that the slots must be specified as a keyword symbols (i.e. prepended with a colon (``:'')), otherwise they will be evaluated as variables according to normal Lisp functional evaluation rules. arguments: slots-and-values Plist Contains alternating slots and values to which they are to be set warn-on-non-toplevel? Boolean Indicates whether a warning should be issued for calling from inside the body of a cached slot. Default is t SLOT-DOCUMENTATION plist of symbols and strings Returns the part types and slot documentation which has been specified for the given slot, from most specific to least specific in the CLOS inheritance order. Note that the slot must be specified as a keyword symbol (i.e. prepended with a colon (``:'')), otherwise it will be evaluated as a variable according to normal Lisp functional evaluation rules.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/2/object-docs/dokumentation/7/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_2_objects",
      "chunk_id": 11,
      "chunk_count": 15
    },
    "id": "72420cb2730cddc004d9395b7d1772ee"
  },
  {
    "text": ".e. prepended with a colon (``:'')), otherwise it will be evaluated as a variable according to normal Lisp functional evaluation rules. arguments: slot Keyword Symbol Names the slot for which documentation is being requested SLOT-SOURCE body of gdl code, in list form . arguments: slot Keyword Symbol Names the slot for which documentation is being requested SLOT-STATUS keyword symbol Describes the current status of the requested slot: :unbound : it has not yet been demanded (this could mean either it has never been demanded, or something it depends on has been modified since the last time it was demanded and eager setting is not enabled). :evaluated : it has been demanded and it is currently bound to the default value based on the code. :set : (for :settable slots only, which includes all required :input-slots) it has been modified and is currently bound to the value to which it was explicitly set.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/2/object-docs/dokumentation/7/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_2_objects",
      "chunk_id": 12,
      "chunk_count": 15
    },
    "id": "88ffc1607cf5f4b8771f5ceea16eebf1"
  },
  {
    "text": "equired :input-slots) it has been modified and is currently bound to the value to which it was explicitly set. :toplevel : (for root-level object only) its value was passed into the root-level object as a toplevel input at the time of object instantiation. TOGGLE-SLOT! void Sets giving slot to its boolean opposite. &args (slot \"Keyword symbol. Name of the slot as a keyword symbol.\") UPDATE! void Uncaches all cached data in slots and objects throughout the instance tree from this node, forcing all code to run again the next time values are demanded. This is useful for updating an existing model or part of an existing model after making changes and recompiling/reloading the code of the underlying definitions. Any set (modified) slot values will, however, be preserved by the update. WRITE-SNAPSHOT void Writes a file containing the toplevel inputs and modified settable-slots starting from the root of the current instance.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/2/object-docs/dokumentation/7/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_2_objects",
      "chunk_id": 13,
      "chunk_count": 15
    },
    "id": "74992112aa4f1eaa7d1e1d7331d2d799"
  },
  {
    "text": "PSHOT void Writes a file containing the toplevel inputs and modified settable-slots starting from the root of the current instance. Typically this file can be read back into the system using the read-snapshot function. keyword arguments: filename String or pathname , Default Value: \"/tmp/snap.gdl\" The target file to be written root-paths-to-ignore List of root-paths or nil , Default Value: NIL Any objects with matching root-path will be ignored for the snapshot write Package Documentation Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/2/object-docs/dokumentation/7/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_2_objects",
      "chunk_id": 14,
      "chunk_count": 15
    },
    "id": "f10493922160a3f4a12d415e94f1310f"
  },
  {
    "text": "GendL Application - MATRIX-SEQUENCE Package Documentation Object: MATRIX-SEQUENCE (The :GENDL Package) Mixins: STANDARD-SEQUENCE , VANILLA-MIXIN Description A matrix sequence quantification is generated as a result of specifying :sequence (:matrix direction-keyword number direction-keyword number)) in an :objects specification. The direction-keywords can be one of :lateral , :longitudinal , and :vertical . The items will be arranged spread out evenly in the directions specified. Centers can also be provided explicitly based on the indices. The indices to a matrix sequence consist of a list of numbers rather than a single number as with a normal sequence. Input Slots (optional) HIDDEN? [ from VANILLA-MIXIN* ] boolean Indicates whether the object should effectively be a hidden-object even if specified in :objects. Default is nil. ROOT [ from VANILLA-MIXIN* ] gdl instance The root-level node in this object's ``tree'' (instance hierarchy).",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/2/object-docs/dokumentation/2/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_2_objects",
      "chunk_id": 0,
      "chunk_count": 3
    },
    "id": "a7e8199888f89bf618ee40c85e872a35"
  },
  {
    "text": "specified in :objects. Default is nil. ROOT [ from VANILLA-MIXIN* ] gdl instance The root-level node in this object's ``tree'' (instance hierarchy). SAFE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances All objects from the :objects specification, including elements of sequences as flat lists. Any children which throw errors come back as a plist with error information STRINGS-FOR-DISPLAY [ from VANILLA-MIXIN* ] string or list of strings Determines how the name of objects of this type will be printed in most places. This defaults to the name-for-display (generally the part's name as specified in its parent), followed by an index number if the part is an element of a sequence. VISIBLE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances Additional objects to display in Tatu tree. Typically this would be a subset of hidden-children. Defaults to NIL. Computed Slots FIRST [ from QUANTIFICATION ] gdl object Returns the first element of the aggregate.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/2/object-docs/dokumentation/2/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_2_objects",
      "chunk_id": 1,
      "chunk_count": 3
    },
    "id": "0d0ead4afee2868d634abb49b0062068"
  },
  {
    "text": "pically this would be a subset of hidden-children. Defaults to NIL. Computed Slots FIRST [ from QUANTIFICATION ] gdl object Returns the first element of the aggregate. LAST [ from QUANTIFICATION ] gdl object Returns the last element of the aggregate. Package Documentation Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/2/object-docs/dokumentation/2/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_2_objects",
      "chunk_id": 2,
      "chunk_count": 3
    },
    "id": "d91cb9ff9799c32177a797772cdff313"
  },
  {
    "text": "GendL Application - RADIAL-SEQUENCE Package Documentation Object: RADIAL-SEQUENCE (The :GENDL Package) Mixins: STANDARD-SEQUENCE , VANILLA-MIXIN Description A radial sequence quantification is generated as a result of specifying :sequence (:radial [number-expression])) in an :objects specification. Input Slots (optional) HIDDEN? [ from VANILLA-MIXIN* ] boolean Indicates whether the object should effectively be a hidden-object even if specified in :objects. Default is nil. ROOT [ from VANILLA-MIXIN* ] gdl instance The root-level node in this object's ``tree'' (instance hierarchy). SAFE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances All objects from the :objects specification, including elements of sequences as flat lists. Any children which throw errors come back as a plist with error information STRINGS-FOR-DISPLAY [ from VANILLA-MIXIN* ] string or list of strings Determines how the name of objects of this type will be printed in most places.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/2/object-docs/dokumentation/5/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_2_objects",
      "chunk_id": 0,
      "chunk_count": 2
    },
    "id": "802fcc57212d1a4a2a027790c4b90c97"
  },
  {
    "text": "or information STRINGS-FOR-DISPLAY [ from VANILLA-MIXIN* ] string or list of strings Determines how the name of objects of this type will be printed in most places. This defaults to the name-for-display (generally the part's name as specified in its parent), followed by an index number if the part is an element of a sequence. VISIBLE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances Additional objects to display in Tatu tree. Typically this would be a subset of hidden-children. Defaults to NIL. Package Documentation Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/2/object-docs/dokumentation/5/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_2_objects",
      "chunk_id": 1,
      "chunk_count": 2
    },
    "id": "12e87323cab07048d2f004daa9abd865"
  },
  {
    "text": "GendL Application - VARIABLE-SEQUENCE Package Documentation Object: VARIABLE-SEQUENCE (The :GENDL Package) Mixins: QUANTIFICATION Description A variable-sequence quantification is generated as a result of specifying :sequence (:indices ...)) in an :objects specification. Unlike a normal sequence quantification (specified with :sequence (:size ...)) ), elements can be surgically inserted and deleted from a variable-sequence. Input Slots (optional) HIDDEN? [ from VANILLA-MIXIN* ] boolean Indicates whether the object should effectively be a hidden-object even if specified in :objects. Default is nil. ROOT [ from VANILLA-MIXIN* ] gdl instance The root-level node in this object's ``tree'' (instance hierarchy). SAFE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances All objects from the :objects specification, including elements of sequences as flat lists.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/2/object-docs/dokumentation/8/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_2_objects",
      "chunk_id": 0,
      "chunk_count": 3
    },
    "id": "1a4603e60498da7fa037ec14909a26be"
  },
  {
    "text": "ects specification, including elements of sequences as flat lists. Any children which throw errors come back as a plist with error information STRINGS-FOR-DISPLAY [ from VANILLA-MIXIN* ] string or list of strings Determines how the name of objects of this type will be printed in most places. This defaults to the name-for-display (generally the part's name as specified in its parent), followed by an index number if the part is an element of a sequence. VISIBLE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances Additional objects to display in Tatu tree. Typically this would be a subset of hidden-children. Defaults to NIL. Computed Slots FIRST [ from QUANTIFICATION ] gdl object Returns the first element of the aggregate. LAST [ from QUANTIFICATION ] gdl object Returns the last element of the aggregate. GDL Functions DELETE! void Deletes the element identified with the given index.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/2/object-docs/dokumentation/8/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_2_objects",
      "chunk_id": 1,
      "chunk_count": 3
    },
    "id": "a77b5042152741e7568cbfee6d94ae94"
  },
  {
    "text": "the aggregate. GDL Functions DELETE! void Deletes the element identified with the given index. arguments: index Integer, Symbol, or other object matching with eql The identifier used when the element was initialized or inserted INSERT! void Inserts a new element identified with the given index. arguments: index Integer, Symbol, or other object matching with eql The identifier to be used to access this element RESET! void Resets the variable sequence to its default list of indices (i.e. clears out any inserted or deleted elements and re-evaluates the expression to compute the original list of indices) Package Documentation Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/2/object-docs/dokumentation/8/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_2_objects",
      "chunk_id": 2,
      "chunk_count": 3
    },
    "id": "e3f4be0d6abffbbb9054fa8d6788229b"
  },
  {
    "text": "GendL Application - STANDARD-SEQUENCE Package Documentation Object: STANDARD-SEQUENCE (The :GENDL Package) Mixins: QUANTIFICATION Description A standard sequence quantification is generated as a result of specifying :sequence (:size [number-expression])) in an :objects specification. Unlike a variable-sequence quantification (specified with :sequence (:indices ...)) ), elements cannot be surgically inserted or deleted from a standard sequence. If a value upon which the [number-expression] depends becomes modified, each member of the sequence will be reinstantiated as it is demanded. Input Slots (optional) HIDDEN? [ from VANILLA-MIXIN* ] boolean Indicates whether the object should effectively be a hidden-object even if specified in :objects. Default is nil. ROOT [ from VANILLA-MIXIN* ] gdl instance The root-level node in this object's ``tree'' (instance hierarchy).",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/2/object-docs/dokumentation/6/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_2_objects",
      "chunk_id": 0,
      "chunk_count": 3
    },
    "id": "67dda1a442479d0aeeff0163786e4162"
  },
  {
    "text": "instance The root-level node in this object's ``tree'' (instance hierarchy). SAFE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances All objects from the :objects specification, including elements of sequences as flat lists. Any children which throw errors come back as a plist with error information STRINGS-FOR-DISPLAY [ from VANILLA-MIXIN* ] string or list of strings Determines how the name of objects of this type will be printed in most places. This defaults to the name-for-display (generally the part's name as specified in its parent), followed by an index number if the part is an element of a sequence. VISIBLE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances Additional objects to display in Tatu tree. Typically this would be a subset of hidden-children. Defaults to NIL. Computed Slots FIRST [ from QUANTIFICATION ] gdl object Returns the first element of the aggregate. LAST [ from QUANTIFICATION ] gdl object Returns the last element of the aggregate.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/2/object-docs/dokumentation/6/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_2_objects",
      "chunk_id": 1,
      "chunk_count": 3
    },
    "id": "6751cb0152f5f68007cc825df0110cfb"
  },
  {
    "text": "ted Slots FIRST [ from QUANTIFICATION ] gdl object Returns the first element of the aggregate. LAST [ from QUANTIFICATION ] gdl object Returns the last element of the aggregate. Package Documentation Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/2/object-docs/dokumentation/6/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_2_objects",
      "chunk_id": 2,
      "chunk_count": 3
    },
    "id": "b5b560121bf50276f0c3185fad22f74e"
  },
  {
    "text": "GendL Application - QUANTIFICATION Package Documentation Object: QUANTIFICATION (The :GENDL Package) Mixins: VANILLA-MIXIN Description A quantification is an aggregate created as a result of specifying :sequence (:size ...)) or :sequence (:indices ...)) in an :objects specification. Usually, the elements of a quantified set are referenced by using extra parentheses around the message in the reference chain and using the index number. But the aggregate itself also supports certain messages, documented here. One message, number-of-elements , is not listed in the normal messages section because it is internal. It can be used, and returns an integer representing the cardinality of the aggregate. Input Slots (optional) HIDDEN? [ from VANILLA-MIXIN* ] boolean Indicates whether the object should effectively be a hidden-object even if specified in :objects. Default is nil. ROOT [ from VANILLA-MIXIN* ] gdl instance The root-level node in this object's ``tree'' (instance hierarchy).",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/2/object-docs/dokumentation/4/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_2_objects",
      "chunk_id": 0,
      "chunk_count": 3
    },
    "id": "308be5278dfc5f03c08dccaa0330e526"
  },
  {
    "text": "effectively be a hidden-object even if specified in :objects. Default is nil. ROOT [ from VANILLA-MIXIN* ] gdl instance The root-level node in this object's ``tree'' (instance hierarchy). SAFE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances All objects from the :objects specification, including elements of sequences as flat lists. Any children which throw errors come back as a plist with error information STRINGS-FOR-DISPLAY [ from VANILLA-MIXIN* ] string or list of strings Determines how the name of objects of this type will be printed in most places. This defaults to the name-for-display (generally the part's name as specified in its parent), followed by an index number if the part is an element of a sequence. VISIBLE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances Additional objects to display in Tatu tree. Typically this would be a subset of hidden-children. Defaults to NIL. Computed Slots FIRST gdl object Returns the first element of the aggregate.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/2/object-docs/dokumentation/4/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_2_objects",
      "chunk_id": 1,
      "chunk_count": 3
    },
    "id": "b7dcfaa301be77996e829e6393ee5d9c"
  },
  {
    "text": "al objects to display in Tatu tree. Typically this would be a subset of hidden-children. Defaults to NIL. Computed Slots FIRST gdl object Returns the first element of the aggregate. INDEX [ from VANILLA-MIXIN* ] integer Sequential index number for elements of a sequence, NIL for singular objects. LAST gdl object Returns the last element of the aggregate. Package Documentation Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/2/object-docs/dokumentation/4/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_2_objects",
      "chunk_id": 2,
      "chunk_count": 3
    },
    "id": "a5e239807ddfeddc7c8f83a5e1b738eb"
  },
  {
    "text": "Macro: THE-ELEMENT <-Back Macro: The-Element THE-ELEMENT lisp object [macro] Acts similarly to the-object for each element of an aggregate, within the context of a list-elements , append-elements , max-of-elements , min-of-elements , sum-elements , or a query operator (query operators are not yet documented). arguments: args (&rest) Standard reference chain applicable to the element <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/2/function-docs/dokumentation/70/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_2_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "363dfef62bfb6e91e01916ee2be0d151"
  },
  {
    "text": "Function: FROUND-TO-NEAREST <-Back Function: Fround-To-Nearest FROUND-TO-NEAREST number Rounds number to the nearest interval , using type contagion rules for floating-point similar to the CL \"fround\" function. arguments: number Number interval Number <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/2/function-docs/dokumentation/27/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_2_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "358a7304d65e87076c2b1fd0c97e5cc4"
  },
  {
    "text": "Function: FIND-MESSAGES-WHICH-USE <-Back Function: Find-Messages-Which-Use FIND-MESSAGES-WHICH-USE list of pairs of instance/keyword This returns the list of direct dependencies of a given message in a given instance. Note that this is not recursive; if you want to generate a tree, then you have to call this recursively yourself. If you want an easy way to remember the meaning of dependant and dependency: You have a dependency on caffeine. Your children are your dependants. <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/2/function-docs/dokumentation/24/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_2_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "d23d29cfd490d25cf476d52040ac0888"
  },
  {
    "text": "Function: TWICE <-Back Function: Twice TWICE number Returns the result of multiplying num by the integer 2 . The type of the returned number will depend on the type of num . arguments: num Number <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/2/function-docs/dokumentation/72/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_2_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "5a32e82da6cc4716df0e633563bbe510"
  },
  {
    "text": "Function: UNDEFINE-OBJECT <-Back Function: Undefine-Object UNDEFINE-OBJECT nil Clears all definitions associated with object-name from the currently running GDL session. arguments: object-name Non-keyword Symbol naming a GDL object type <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/2/function-docs/dokumentation/73/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_2_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "a32b3fc272680d2ac0b7b9745163ad48"
  },
  {
    "text": "Function: ALWAYS <-Back Function: Always ALWAYS t Always returns the value T regardless of arg . arguments: arg Lisp object Ignored <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/2/function-docs/dokumentation/1/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_2_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "bad4e61d29c68661470e04768ba577c5"
  },
  {
    "text": "Function: UNIVERSAL-TIME-FROM-ISO-8601 <-Back Function: Universal-Time-From-Iso-8601 UNIVERSAL-TIME-FROM-ISO-8601 integer representing common lisp universal time Returns the universal time from a date formatted as an iso-8601 date, optionally with time, e.g. 2012-07-08 or 2012-07-08T13:33 or 2012-07-08T13:33:00 <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/2/function-docs/dokumentation/74/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_2_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "28b0f6f5801f296041b72671927d37bb"
  },
  {
    "text": "Function: ALIST2PLIST <-Back Function: Alist2plist ALIST2PLIST plist Converts an assoc-list to a plist. arguments: alist Assoc-List <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/2/function-docs/dokumentation/0/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_2_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "3dd598cb1330a7372198c2af0605c2d6"
  },
  {
    "text": "Function: GENDL::CHECK-COMPUTED-SLOTS <-Back Function: Gendl::Check-Computed-Slots CHECK-COMPUTED-SLOTS void computed-slots: grammar: = :computed-slots ( *) = | ( * + +) = :settable | :uncached Also check for special case in which only strings without a symbol following. <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/2/function-docs/dokumentation/3/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_2_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "7f2d32868840702f2958ecf1f08c5645"
  },
  {
    "text": "Function: ENSURE-LIST <-Back Function: Ensure-List ENSURE-LIST list If argument is not list, returns it in a list. If argument is a list, returns it unchanged. arguments: possible-list Lisp object <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/2/function-docs/dokumentation/20/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_2_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "a1b408cf311842a2061cea1652500062"
  },
  {
    "text": "Function: LEAST <-Back Function: Least LEAST list Returns the member of list which returns the minimum numerical value when function is applied to it. As second value is returned which is the actual minimum value (the return-value of function as applied). This function comes from the Paul Graham book ANSI Common Lisp . arguments: function Function list List <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/2/function-docs/dokumentation/33/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_2_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "54cb512af4786a5c7b733a004202a7fc"
  },
  {
    "text": "Function: HALF <-Back Function: Half HALF number Returns the result of dividing num by the integer 2 . The type of the returned number will depend on the type of num . arguments: num Number <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/2/function-docs/dokumentation/28/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_2_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "8f3dd783374641ecf072287d7a7c5fe1"
  },
  {
    "text": "Function: GENDL::CHECK-FUNCTIONS <-Back Function: Gendl::Check-Functions CHECK-FUNCTIONS void Checks :functions or :methods grammar according to following BNF: = :functions | :methods ( *) = ( * + ) = :cached | :cached-eql | :cached-= | :cached-eq | :cached-equal | :cached-equalp <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/2/function-docs/dokumentation/7/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_2_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "ef4cd443a2f8492428e6656b33b129c6"
  },
  {
    "text": "Function: ROUND-TO-NEAREST <-Back Function: Round-To-Nearest ROUND-TO-NEAREST number Rounds number to the nearest interval . arguments: number Number interval Number <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/2/function-docs/dokumentation/60/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_2_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "d25df7bb2ac46b50beb9f485c0d592d3"
  },
  {
    "text": "Macro: APPEND-ELEMENTS <-Back Macro: Append-Elements APPEND-ELEMENTS list of objects [macro] Returns an appended list of expression from each element of an aggregate, with an optional filter. arguments: aggregate GDL aggregate object (e.g. from a :sequence (:size .) :object specification) optional arguments: expression Expression using the-element , Default Value: NIL Similar to a the-object reference, which should return a list <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/2/function-docs/dokumentation/2/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_2_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "a720b9f3d17bece0b3ed835dce29b114"
  },
  {
    "text": "Macro: THE-CHILD <-Back Macro: The-Child THE-CHILD similar to ``the,'' but used to refer to the child part from within an :objects or :hidden-objects specification . This is often used for sending the index message to an element of a quantified set. arguments: reference-chain (&rest) A spliced-in list of symbols naming messages relative to the child object <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/2/function-docs/dokumentation/69/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_2_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "ab4a5cc9b90ba408d2c7d301cdb202c1"
  },
  {
    "text": "Function: ^2 <-Back Function: ^2 ^2 number Return number raised to the power two (2). arguments: number Number <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/2/function-docs/dokumentation/82/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_2_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "f17e309de8cc7184cee09646a36924cb"
  },
  {
    "text": "Function: NUMBER-ROUND <-Back Function: Number-Round NUMBER-ROUND number Returns number rounded to decimal-places decimal places. arguments: number Number decimal-places Integer <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/2/function-docs/dokumentation/51/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_2_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "22362575ef6378b3b8d4d374273126a0"
  },
  {
    "text": "Function: LOAD-QUICKLISP <-Back Function: Load-Quicklisp LOAD-QUICKLISP void This is intended for pre-built Gendl or GDL images. If the preconfigured quicklisp load file exists, load it. You can customize quicklisp location by setting global *quicklisp-home* or passing :path keyword argument to this function. keyword arguments: path Pathname or string , Default Value: *QUICKLISP-HOME* Quicklisp location <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/2/function-docs/dokumentation/38/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_2_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "b859b0a4e6e87185139fc2b617dd2feb"
  },
  {
    "text": "Macro: SUM-ELEMENTS <-Back Macro: Sum-Elements SUM-ELEMENTS number [macro] Returns the sum of expression from each element of an aggregate, with an optional filter. arguments: aggregate GDL aggregate object (e.g. from a :sequence (:size .) :object specification) optional arguments: expression Expression using the-element , Default Value: NIL Similar to a the-object reference, which should return a number <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/2/function-docs/dokumentation/67/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_2_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "2c4c78b727d41bd06b787b23df8615d6"
  },
  {
    "text": "Function: LASTCAR <-Back Function: Lastcar LASTCAR lisp object Returns the last element of list . arguments: list List <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/2/function-docs/dokumentation/32/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_2_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "74649b9984cec7902bb321286b9c6a34"
  },
  {
    "text": "Function: GENDL::FIND-DEPENDENCIES <-Back Function: Gendl::Find-Dependencies FIND-DEPENDENCIES list of pairs of instance/keyword Synonymous with find-messages-which-use. <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/2/function-docs/dokumentation/22/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_2_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "4f533c241be76f836224b8f6cd7e39c8"
  },
  {
    "text": "Function: LIST-OF-N-NUMBERS <-Back Function: List-Of-N-Numbers LIST-OF-N-NUMBERS returns a list of n numbers equally spaced between bounds num1 and num2, inclusive . <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/2/function-docs/dokumentation/35/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_2_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "75c95e56813e8c7f621ebd1df7c4246c"
  },
  {
    "text": "Function: GENDL::FIND-DEPENDANTS <-Back Function: Gendl::Find-Dependants FIND-DEPENDANTS list of pairs of instance/keyword Synonymous with find-messages-used-by. <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/2/function-docs/dokumentation/21/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_2_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "eff038426d4e2ea662df6402dbd8cd67"
  },
  {
    "text": "Function: WRITE-PLIST <-Back Function: Write-Plist WRITE-PLIST pretty-prints a plist to a file with standard i/o syntax . keyword arguments: plist List , Default Value: NIL The list to be printed to the file output-path Pathname of a file , Default Value: NIL The file to be created or superseded <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/2/function-docs/dokumentation/79/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_2_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "9421b343a7c23790c3bd5e0cc364df2d"
  },
  {
    "text": "Macro: DEFINE-OBJECT <-Back Macro: Define-Object DEFINE-OBJECT defines a standard gdl object Please see the document USAGE.TXT for an overview of define-object syntax. <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/2/function-docs/dokumentation/17/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_2_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "d6d2eb39275460363ef7af6638280c78"
  },
  {
    "text": "Macro: IGNORE-ERRORS-WITH-BACKTRACE <-Back Macro: Ignore-Errors-With-Backtrace IGNORE-ERRORS-WITH-BACKTRACE like ignore-errors, but in case of failure, return backtrace string as third value . <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/2/function-docs/dokumentation/29/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_2_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "48e0bc2cddbdfea2d291c9d713936b0b"
  },
  {
    "text": "Function: MAPTREE <-Back Function: Maptree MAPTREE list Returns the results of applying fn to each GDL object in the object tree rooted at node in a ``depth-first'' tree traversal. arguments: node GDL object fn Function Operates on a single argument which is a GDL object optional arguments: accept? Function , Default Value: #'ALWAYS Determines which nodes to accept in the final result prune? Function , Default Value: #'NEVER Determines which nodes to prune from the tree traversal get-children Keyword symbol :children or Function , Default Value: :CHILDREN Function applied to a given node to get its children. The default, keyword symbol :children, uses the node's normal children as returned by (the-object node children) <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/2/function-docs/dokumentation/43/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_2_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "757dccf6580ea2975994c81fd6f54088"
  },
  {
    "text": "Function: GENDL::CHECK-FLOATING-STRING <-Back Function: Gendl::Check-Floating-String CHECK-FLOATING-STRING check for special case in which documentation isn't followed by symbol spec <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/2/function-docs/dokumentation/5/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_2_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "12cab7b9c485fcdb5e4a683a45f426a5"
  },
  {
    "text": "Function: STRING-APPEND <-Back Function: String-Append STRING-APPEND string Returns a new string made up of concatenating the arguments. arguments: &rest (ARGS strings) <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/2/function-docs/dokumentation/66/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_2_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "ce01563a1d5dc06e0f2625d45033e459"
  },
  {
    "text": "Macro: DEFINE-OBJECT-AMENDMENT <-Back Macro: Define-Object-Amendment DEFINE-OBJECT-AMENDMENT supplements or alters an existing gdl object definition Syntax is similar to that for define-object . Note that there is currently no way to undefine messages defined with this macro, other than redefining the original object or restarting the GDL session. Support for surgically removing messages will be added in a future GenDL release. <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/2/function-docs/dokumentation/18/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_2_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "a230c82252559415434b29df95dc673a"
  },
  {
    "text": "Function: CL-LITE <-Back Function: Cl-Lite CL-LITE Traverses pathname in an alphabetical depth-first order, compiling and loading any lisp files found in source/ subdirectories. A lisp source file will only be compiled if it is newer than the corresponding compiled fasl binary file, or if the corresponding compiled fasl binary file does not exist. A bin/source/ will be created, as a sibling to each source/ subdirectory, to contain the compiled fasl files. If the :create-fasl? keyword argument is specified as non-nil, a concatenated fasl file, named after the last directory component of pathname, will be created in the (glisp:temporary-directory). [Note: this new documentation still needs proper formatting] If the :create-asd-file? keyword argument is specified as non-nil, a .asd file suitable for use with ASDF will be emitted into the directory indicated by the pathname argument.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/2/function-docs/dokumentation/12/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_2_functions",
      "chunk_id": 0,
      "chunk_count": 3
    },
    "id": "e7cfa19ed4e6e2fa786dfa95ebcce050"
  },
  {
    "text": "ble for use with ASDF will be emitted into the directory indicated by the pathname argument. Note that asdf: (Another System Definition Utility), possibly with help of Quicklisp, is (as of 2013-03-12) the recommended way for handling Common Lisp system modules. As of version 2.31.9, ASDF is also capable of generating fasl \"bundle\" files as with the :create-fasl? argument to cl-lite. For the :author, :version, and :license arguments in the generated .asd file, the files author.isc, version.isc, and license.isc, respectively, are consulted, if they exist. They are searched for first in the codebase toplevel directory (the pathname argument to this function), then in the (user-homedir-pathname). The version defaults to the current ISO-8601 date without dashes, e.g. \"20130312\". Please see the Genworks Documentation for an overview of Quicklisp and ASDF, and see the Quicklisp and ASDF project documentation for detailed information.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/2/function-docs/dokumentation/12/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_2_functions",
      "chunk_id": 1,
      "chunk_count": 3
    },
    "id": "01d4aa8cd0c5f8b3662ecc4da623fdb8"
  },
  {
    "text": "Genworks Documentation for an overview of Quicklisp and ASDF, and see the Quicklisp and ASDF project documentation for detailed information. The source code for Quicklisp and ASDF should also be included with your Gendl distribution, and these are typically loaded by default into the development environment. For additional inputs to the cl-lite function, please see codebase-directory-node object for additional inputs (which can be given as keyword args to this function). <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/2/function-docs/dokumentation/12/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_2_functions",
      "chunk_id": 2,
      "chunk_count": 3
    },
    "id": "073fc320165520d5a2c3740bef2b6322"
  },
  {
    "text": "Function: NUMBER-FORMAT <-Back Function: Number-Format NUMBER-FORMAT string Returns a string displaying number rounded to decimal-places decimal places. arguments: number Number decimal-places Integer <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/2/function-docs/dokumentation/50/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_2_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "13d74eab47bd27033d188f1dffd2a17c"
  },
  {
    "text": "Function: REMOVE-PLIST-ENTRY <-Back Function: Remove-Plist-Entry REMOVE-PLIST-ENTRY plist Returns a new plist sans any key/value pairs where the plist key is eql to the given key. Optionally a different test than #'eql can be specified with the :test keyword argument. arguments: plist Plist The source plist key matching key, typically a keyword symbol The key to target for removal keyword arguments: test predicate equality function taking two arguments , Default Value: #'EQL The function to use for matching examples: (remove-plist-entry (list :a \"a\" :b :a) :a) <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/2/function-docs/dokumentation/58/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_2_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "7dfea5b3c4ba57f1e7a724455b5eb12a"
  },
  {
    "text": "Macro: DEFAULTING <-Back Macro: Defaulting DEFAULTING lisp object Returns a default value if the reference-chain is not handled. arguments: form Reference-chain with the or the-object default Lisp expression Default value to return if reference-chain cannot be handled <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/2/function-docs/dokumentation/14/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_2_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "14caccc9f3a5442f1af1c7592222c1fa"
  },
  {
    "text": "Function: SPLIT <-Back Function: Split SPLIT list of strings Returns a list containing the elements of string after having been split according to split-chars as delimiting characters. arguments: string String optional arguments: split-chars List of characters , Default Value: (LIST #\\ #\\Newline #\\Return #\\Tab) see-also: glisp:split-regexp <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/2/function-docs/dokumentation/64/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_2_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "9eee5ab045badc545cbef5df522843ad"
  },
  {
    "text": "Function: MAPSEND <-Back Function: Mapsend MAPSEND list Returns a new list which is the result of sending message to each GDL object in object-list . arguments: object-list List of GDL objects message Keyword symbol <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/2/function-docs/dokumentation/42/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_2_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "5e2b85ff97b0e85a985f9f9b5504fc83"
  },
  {
    "text": "Function: NEAR-ZERO? <-Back Function: Near-Zero? NEAR-ZERO? boolean Returns non-NIL iff number is greater than tolerance different from zero. arguments: number Number optional arguments: tolerance Number , Default Value: *ZERO-EPSILON* see-also: zerop (Common Lisp function) <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/2/function-docs/dokumentation/48/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_2_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "b2ce0571b74b2082b9466a30d59c5f1f"
  },
  {
    "text": "Function: READ-SAFE-STRING <-Back Function: Read-Safe-String READ-SAFE-STRING lisp object Reads an item from string, protecting against lisp evaluation with the `#.' reader macro. Throws an error if evaluation would have occured. arguments: string string <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/2/function-docs/dokumentation/56/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_2_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "f14551d2a46eedefbd5da8dc71a994d3"
  },
  {
    "text": "Macro: MAX-OF-ELEMENTS <-Back Macro: Max-Of-Elements MAX-OF-ELEMENTS number [macro] Returns the maximum of expression from each element of an aggregate, with an optional filter. arguments: aggregate GDL aggregate object (e.g. from a :sequence (:size .) :object specification) optional arguments: expression Expression using the-element , Default Value: NIL Similar to a the-object reference, which should return a number <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/2/function-docs/dokumentation/44/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_2_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "050ab5a5d97bbd637213b4f0b3d87ac5"
  },
  {
    "text": "Macro: WRITE-THE-OBJECT <-Back Macro: Write-The-Object WRITE-THE-OBJECT lisp object [macro] Typcially used only to send output, not for the return value. This macro is used within the body of a with-format . It sends the reference-chain to object , which must be specified as a Lisp expression (e.g. a variable) which evaluates to a GDL object. The reference-chain must terminate with an output-function defined for the combination of the output-format specified in the enclosing with-format , and the object identified by object . arguments: reference-chain (&rest) A spliced-in list of symbols naming messages, which can be slots or objects starting from object , terminating with the name of an output-function.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/2/function-docs/dokumentation/81/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_2_functions",
      "chunk_id": 0,
      "chunk_count": 2
    },
    "id": "b6651ed8651b6adede4aa83b3655b7c1"
  },
  {
    "text": "For referring to elements of a quantified set, or for passing arguments to GDL functions which take arguments, use parentheses around the message name and enclose the quantified element index or function arguments after the message name <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/2/function-docs/dokumentation/81/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_2_functions",
      "chunk_id": 1,
      "chunk_count": 2
    },
    "id": "9db332d6ee5e2c967a90137e67647acc"
  },
  {
    "text": "Function: ISO-8601-DATE <-Back Function: Iso-8601-Date ISO-8601-DATE string Returns the ISO8601 formatted date and possibly time from a Common Lisp universal time integer, e.g. 2007-11-30 or 2007-11-30T13:45:10 <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/2/function-docs/dokumentation/31/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_2_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "cce0ee5e7da1b2cc91b4982cbc9df725"
  },
  {
    "text": "Macro: THE-OBJECT <-Back Macro: The-Object THE-OBJECT lisp object Sends the reference-chain to object , which must be specified as a Lisp expression (e.g. a variable) which evaluates to a GDL object. arguments: reference-chain (&rest) A spliced-in list of symbols naming messages, which can be slots or objects starting from object . For referring to elements of a quantified set, or for passing arguments to GDL functions which take arguments, use parentheses around the message name and enclose the quantified element index or function arguments after the message name example: This example sends the length message to the ``zeroth'' element of the quantified set of arms contained in the body which is contained in the robot which is contained in object : (the-object object robot body (arms 0) length) <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/2/function-docs/dokumentation/71/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_2_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "110e480873dfc2f35a41ee711d44d4c2"
  },
  {
    "text": "Function: GENDL::CHECK-TRICKLE-DOWN-SLOTS <-Back Function: Gendl::Check-Trickle-Down-Slots CHECK-TRICKLE-DOWN-SLOTS functions: | :methods grammar: = :trickle-down-slots ( *) <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/2/function-docs/dokumentation/11/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_2_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "3e01c75603b2655286fc7fc988c216fa"
  },
  {
    "text": "Function: MAKE-OBJECT <-Back Function: Make-Object MAKE-OBJECT gdl object Instantiates an object with specified initial values for input-slots. arguments: object-name Symbol Should name a GDL object type arguments spliced-in plist A plist of keyword symbols and values for initial input-slots <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/2/function-docs/dokumentation/41/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_2_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "c438dc85a873f48fc8bfd8309c9fb630"
  },
  {
    "text": "Function: LOAD-GLIME <-Back Function: Load-Glime LOAD-GLIME void If the Glime (Slime Gendl auto-completion extensions) file exists, load it. Path is currently hardcoded to (merge-pathnames \"emacs/glime.lisp\" glime:*gdl-home*) or ~/genworks/gendl/emacs/glime.lisp . <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/2/function-docs/dokumentation/37/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_2_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "eb4c25832a7e64b0683efe8724cf9526"
  },
  {
    "text": "Function: DIV <-Back Function: Div DIV floating-point number Divides using rational division and converts the result (which may be a pure rational number) to a floating-point number. arguments: numerator Number denominator Number optional arguments: more-denominators (&rest) , Default Value: NIL More numbers to divide by <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/2/function-docs/dokumentation/19/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_2_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "9e359e0514ef0b89205815e67006db79"
  },
  {
    "text": "Function: REPLACE-SUBSTRING <-Back Function: Replace-Substring REPLACE-SUBSTRING string Replaces all substring occurrences of old with new in string . Note: In a full GDL system, you will have glisp:replace-regexp, which is more powerful and probably more efficient than this. arguments: string String The source string old String The substring to be replaced new String The substring to replace it with see-also: excl:replace-regexp <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/2/function-docs/dokumentation/59/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_2_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "53226879b1efb7c132965617ab45ecb9"
  },
  {
    "text": "Macro: THE <-Back Macro: The THE lisp object Sends the reference-chain to self , which typically means it is used within the context of a define-object where self is automatically lexically bound. arguments: reference-chain (&rest) A spliced-in list of symbols naming messages, which can be slots or objects starting from self . For referring to elements of a quantified set, or for passing arguments to GDL functions which take arguments, use parentheses around the message name and enclose the quantified element index or function arguments after the message name example: This example sends the length message to the ``zeroth'' element of the quantified set of arms contained in the body which is contained in the robot which is contained in self: (the robot body (arms 0) length) <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/2/function-docs/dokumentation/68/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_2_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "7b9fa25b22a4778700c64b24a63b2608"
  },
  {
    "text": "Function: GENDL::CHECK-INPUT-SLOTS <-Back Function: Gendl::Check-Input-Slots CHECK-INPUT-SLOTS void input-slots: grammar: = :input-slots ( *) = | | ( * + *) = :settable | :defaulting Also check for special case in which only strings without a symbol following. <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/2/function-docs/dokumentation/8/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_2_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "e0586003052d5e7665cb0a32acbc6bd5"
  },
  {
    "text": "Function: NEAR-TO? <-Back Function: Near-To? NEAR-TO? boolean Predicate to test if number is within tolerance of near-to . The default tolerance is the value of the parameter *zero-epsilon* . arguments: number Number near-to Number optional arguments: tolerance Number , Default Value: *ZERO-EPSILON* <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/2/function-docs/dokumentation/47/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_2_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "e5d93ffa2613bc4f4f6f9abba38dbe4a"
  },
  {
    "text": "Macro: MIN-OF-ELEMENTS <-Back Macro: Min-Of-Elements MIN-OF-ELEMENTS number [macro] Returns the minimum of expression from each element of an aggregate, with an optional filter. arguments: aggregate GDL aggregate object (e.g. from a :sequence (:size .) :object specification) optional arguments: expression Expression using the-element , Default Value: NIL Similar to a the-object reference, which should return a number <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/2/function-docs/dokumentation/45/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_2_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "eba904a6bfdbdee69cec89248df82048"
  },
  {
    "text": "Macro: WITH-FORMAT-SLOTS <-Back Macro: With-Format-Slots WITH-FORMAT-SLOTS void [macro] Wrap this around a body of code which should have access to multiple slots from the context of the current with-format output format object. arguments: slots List of Symbols <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/2/function-docs/dokumentation/77/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_2_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "eff683adae37f889deb5462c85f817bc"
  },
  {
    "text": "Function: NEVER <-Back Function: Never NEVER nil Always returns the value NIL regardless of arg . arguments: arg Lisp object Ignored <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/2/function-docs/dokumentation/49/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_2_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "f0477ac8248d7d6fd7e54e645f022832"
  },
  {
    "text": "Function: STATUS-MESSAGE <-Back Function: Status-Message STATUS-MESSAGE nil Prints string , followed by a newline, to *trace-output* , which is generally the system console. arguments: string String <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/2/function-docs/dokumentation/65/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_2_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "57021cb0c3a38eb1cc1b142dcd5f0360"
  },
  {
    "text": "Function: PLIST-KEYS <-Back Function: Plist-Keys PLIST-KEYS list of keyword symbols Returns the keys from a plist. arguments: plist Plist <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/2/function-docs/dokumentation/52/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_2_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "1108438541d1ddb716440b451d8b2515"
  },
  {
    "text": "Function: FIND-MESSAGES-USED-BY <-Back Function: Find-Messages-Used-By FIND-MESSAGES-USED-BY list of pairs of instance/keyword This returns the list of direct dependants of a given message in a given instance. Note that this is not recursive; if you want to generate a tree, then you have to call this recursively yourself. If you want an easy way to remember the meaning of dependant and dependency: You have a dependency on caffeine. Your children are your dependants. <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/2/function-docs/dokumentation/23/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_2_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "cb8be93b9c6b6f5cb0dfbdc07da3c4a6"
  },
  {
    "text": "Macro: WRITE-THE <-Back Macro: Write-The WRITE-THE lisp object [macro] Typcially used only to send output, not for the return value. This macro is used within the body of a with-format . It sends the reference-chain to self , which typically means it is used within the context of a define-object where self is automatically lexically bound. The reference-chain must terminate with an output-function defined for the combination of the output-format specified in the enclosing with-format , and the object identified by self . arguments: reference-chain (&rest) A spliced-in list of symbols naming messages, which can be slots or objects starting from self , terminating with the name of an output-function. For referring to elements of a quantified set, or for passing arguments to GDL functions which take arguments, use parentheses around the message name and enclose the quantified element index or function arguments after the message name <-Back Copyright \u00a9 2025 Genworks \u00ae International .",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/2/function-docs/dokumentation/80/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_2_functions",
      "chunk_id": 0,
      "chunk_count": 2
    },
    "id": "ef00dc76690fc0086c02ca31ad177bda"
  },
  {
    "text": "ch take arguments, use parentheses around the message name and enclose the quantified element index or function arguments after the message name <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/2/function-docs/dokumentation/80/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_2_functions",
      "chunk_id": 1,
      "chunk_count": 2
    },
    "id": "20691db8ff1faed7e115872cd74b6026"
  },
  {
    "text": "Function: GENDL::CHECK-FORM <-Back Function: Gendl::Check-Form CHECK-FORM general function that, given a predicate, validates all tokens in a slot declaration form <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/2/function-docs/dokumentation/6/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_2_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "90bbf34feed460d69e537d3c9c39e43a"
  },
  {
    "text": "Macro: WITH-ERROR-HANDLING <-Back Macro: With-Error-Handling WITH-ERROR-HANDLING [macro] Wraps the body of code with error-trapping and system timeout. A warning is given if an error condition occurs with body . keyword arguments: timeout Timeout in Seconds , Default Value: 2 timeout-body Body of code to evaluate if timeout occurs , Default Value: NIL Default is to print a warning and return nil rest arguments: body Body of code to be wrapped <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/2/function-docs/dokumentation/75/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_2_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "9f6d7ec812b4b38023aa2e10c212e567"
  },
  {
    "text": "Function: INDEX-FILTER <-Back Function: Index-Filter INDEX-FILTER list Returns all elements of list for whose index (starting at zero) the function fn returns non-NIL. arguments: fn Function object (e g. a lambda expression) list List <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/2/function-docs/dokumentation/30/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_2_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "af2040c514cc3941d20bdc1b154c621c"
  },
  {
    "text": "Function: GENDL::CHECK-DOCUMENTATION <-Back Function: Gendl::Check-Documentation CHECK-DOCUMENTATION plist containing keys :description :author :examples :date :version <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/2/function-docs/dokumentation/4/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_2_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "8d2e636db8bbeba613355af4fb371bee"
  },
  {
    "text": "Function: CYCLIC-NTH <-Back Function: Cyclic-Nth CYCLIC-NTH lisp object Returns nth from the list, or wraps around if nth is greater than the length of the list. <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/2/function-docs/dokumentation/13/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_2_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "b5711700a857f3c98c50b355683ce2b2"
  },
  {
    "text": "Function: PLIST-VALUES <-Back Function: Plist-Values PLIST-VALUES list of lisp objects Returns the values from a plist. arguments: plist Plist <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/2/function-docs/dokumentation/53/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_2_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "4e2c476673e00aed88313caaef522df1"
  },
  {
    "text": "Function: MOST <-Back Function: Most MOST list Returns the member of list which returns the maximum numerical value when function is applied to it. As second value is returned which is the actual maximum value (the return-value of function as applied). This function comes from the Paul Graham book ANSI Common Lisp . arguments: function Function list List <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/2/function-docs/dokumentation/46/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_2_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "12f47f3f2d1e06e859462befd1e656b6"
  },
  {
    "text": "Function: GENDL::CHECK-OBJECTS <-Back Function: Gendl::Check-Objects CHECK-OBJECTS void hidden-objects: and :objects grammar: = (hidden-):objects ( *) = ( * *) = <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/2/function-docs/dokumentation/9/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_2_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "6db5703c2d4bb38de61e09655ad1404f"
  },
  {
    "text": "Macro: PRINT-VARIABLES <-Back Macro: Print-Variables PRINT-VARIABLES [macro] void Prints the specified variables and current values to standard output. arguments: vars unquoted symbols (&rest argument) <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/2/function-docs/dokumentation/55/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_2_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "cbca3354342ad8f9615cdf49832ef70f"
  },
  {
    "text": "Macro: WITH-FORMAT <-Back Macro: With-Format WITH-FORMAT void [macro] Used to establish an output format and a stream to which data is to be sent. This supports a full range of output options such as page dimensions, view transforms, view scales, etc. example: (gdl::with-format (pdf \"/tmp/box.pdf\" :view-transform (getf *standard-views* :trimetric)) (write-the-object (make-instance 'box :length 100 :width 100 :height 100) cad-output)) <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/2/function-docs/dokumentation/76/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_2_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "f55caefc3b43fe1ea1e2f04716a37112"
  },
  {
    "text": "Macro: WRITE-ENV <-Back Macro: Write-Env WRITE-ENV void [macro] (usually used just for outputting) Within the context of a with-format , calls functions of the format object, optionally with arguments. Typically these functions will output data to the stream established by the with-format . arguments: function-calls (&rest) Functions on the named output-format to be called example: (with-format (base-format my-object) (write-env (:a \"Hello World, my object's length is: \") (:a (the length)))) <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/2/function-docs/dokumentation/78/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_2_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "26adde80d0df31d288dddc0c68eda008"
  },
  {
    "text": "Macro: LIST-ELEMENTS <-Back Macro: List-Elements LIST-ELEMENTS list of gdl objects [macro] Returns a listing of the elements of an aggregate, with an optional the-element expression and filter. If an expression is given, the list of results from the expressions is returned. If no expression is given, a list of the objects themselves is returned. arguments: aggregate GDL aggregate object (e.g. from a :sequence (:size .) :object specification) optional arguments: expression Expression using the-element , Default Value: NIL Similar to a the-object reference filter Function of one argument , Default Value: NIL Can be used to filter the result list <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/2/function-docs/dokumentation/34/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_2_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "1bf7e13f7f40417e1bcf608adf47bf4c"
  },
  {
    "text": "Function: SAFE-SORT <-Back Function: Safe-Sort SAFE-SORT list Nondestructive analog of the Common Lisp sort function. Returns a freshly created list. arguments: list List The list to be sorted rest arguments: args Argument list Identical to the arguments for Common Lisp sort <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/2/function-docs/dokumentation/62/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_2_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "a57bc1121ad58da88507efde8e98566c"
  },
  {
    "text": "Macro: DEFINE-LENS <-Back Macro: Define-Lens DEFINE-LENS void [macro] Defines output-functions for the combination of the given output-format and GDL object. arguments: format-and-object List of two symbols The first should name an output-format previously defined with define-format , and the second should name a GDL object previously defined with define-object mixin-list NIL This is not supported and should be left as NIL or an empty list for now keyword arguments: skin Name of a skin defined with define-skin , Default Value: T This allows a class hierarchy of look and feel for each view combination. Defaults to T, a generic skin <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/2/function-docs/dokumentation/16/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_2_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "e1fe19a4e9100b5d24a51a6f75d1754f"
  },
  {
    "text": "Macro: DEFINE-FORMAT <-Back Macro: Define-Format DEFINE-FORMAT standard-class [macro] Defines a standard GDL output format for use with GDL views. arguments: name Symbol mixin-list List of symbols keyword arguments: documentation Plist containing keys and strings for author, description, etc , Default Value: NIL slots List of lists or symbols , Default Value: NIL If a list, the list should contain a symbol, a default value, and optionally a documentation string. If a symbol, this is the name of the slot and there will be no default value functions List of format-function definitions , Default Value: NIL Each definition is made up of a symbol, an argument-list, and a body <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/2/function-docs/dokumentation/15/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_2_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "bb577e9b20cbdb4020d8c48d199b7f26"
  },
  {
    "text": "Function: FLATTEN <-Back Function: Flatten FLATTEN list Returns a new list consisting of only the leaf-level atoms from list . Since nil is technically a list, flatten also has the effect of removing nils from list , but may be inefficient if used only for this purpose. For removing nil values from a list, consider using remove nil ... instead. note: from Stack Overflow forum: http://stackoverflow.com/questions/25866292/flatten-a-list-using-common-lisp note: Creative Commons license (defun flatten (lst &aux (result '())) (labels ((rflatten (lst1) (dolist (el lst1 result) (if (listp el) (rflatten el) (push el result))))) (nreverse (rflatten lst)))) note: This will not work with dotted lists, only with actual lists.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/2/function-docs/dokumentation/25/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_2_functions",
      "chunk_id": 0,
      "chunk_count": 2
    },
    "id": "d0239c3a21e40c0d3da8a9cbffb26b1d"
  },
  {
    "text": "If you need dotted lists, use the old definition of flatten, from Paul Graham On Lisp: (defun flatten (tree) (if (atom tree) (ensure-list tree) (nconc (flatten (car tree)) (if (cdr tree) (flatten (cdr tree)))))) arguments: list List see-also: remove <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/2/function-docs/dokumentation/25/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_2_functions",
      "chunk_id": 1,
      "chunk_count": 2
    },
    "id": "07156c0bcf401b70e6285133780b616f"
  },
  {
    "text": "Macro: PRINT-MESSAGES <-Back Macro: Print-Messages PRINT-MESSAGES [macro] void Prints the specified GDL object messages (i.e. slots) and their current values to standard output. arguments: vars unquoted symbols (&rest argument) <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/2/function-docs/dokumentation/54/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_2_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "36f674e76595fbf0eeafe2a9744996c1"
  },
  {
    "text": "Macro: FORMAT-SLOT <-Back Macro: Format-Slot FORMAT-SLOT lisp object [macro] Returns the value of the given slot within the context of the current with-format output format object. arguments: slot-name Symbol <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/2/function-docs/dokumentation/26/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_2_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "678dca34649e6c087f5deca97a09d1ef"
  },
  {
    "text": "Function: SAFE-FLOAT <-Back Function: Safe-Float SAFE-FLOAT double-float number Coerces number to a double-precision floating-point number if possible. If this is not possible, returns 0.0d0 (i.e. zero in the form of a double-precision floating-point number). arguments: number Number <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/2/function-docs/dokumentation/61/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_2_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "e4449b579b3a8328e7e2162a026bc7cb"
  },
  {
    "text": "Macro: SET-FORMAT-SLOT <-Back Macro: Set-Format-Slot SET-FORMAT-SLOT void [macro] Sets the value of the given slot within the context of the current with-format output format object. arguments: slot-name Symbol value Lisp Value <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/2/function-docs/dokumentation/63/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_2_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "610444d8fa3ed5b8f69974ed35afda18"
  },
  {
    "text": "Function: LIST-OF-NUMBERS <-Back Function: List-Of-Numbers LIST-OF-NUMBERS list of numbers Returns a list of incrementing numbers starting from num1 and ending with num2 , inclusive. arguments: num1 Number num2 Number optional arguments: increment Number , Default Value: 1 The distance between the returned listed numbers <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/2/function-docs/dokumentation/36/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_2_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "4bf26c3d2ff4559be9b16d1940546917"
  },
  {
    "text": "Function: READ-SNAPSHOT <-Back Function: Read-Snapshot READ-SNAPSHOT gdl instance Reads the snapshot data from stream, from the string, or from file indicated by filename. If no optional keyword object argument is given, a new GDL instance based on the data in the snapshot file is returned. If an object is given, the object should be compatible in type to that specified in the snapshot file, and this existing object will be modified to contain the set slot values and toplevel inputs as specified in the snapshot file. keyword arguments: filename String or pathname , Default Value: \"/tmp/snap.gdl\" File to be read. If either string or stream is specified, this will not be used string String of data , Default Value: NIL The actual snapshot contents, stored in a string.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/2/function-docs/dokumentation/57/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_2_functions",
      "chunk_id": 0,
      "chunk_count": 2
    },
    "id": "9e764b731efb9beb6f597becdd275153"
  },
  {
    "text": "If stream is specified, this will not be used stream Stream open for input , Default Value: NIL A stream from which the snapshot data can be read keep-bashed-values? Boolean , Default Value: NIL Indicates whether to keep the currently bashed values in object before reading snap values into it object GDL object , Default Value: NIL Existing object to be modified with restored values <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/2/function-docs/dokumentation/57/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_2_functions",
      "chunk_id": 1,
      "chunk_count": 2
    },
    "id": "a6cd7f77a261e086c07f1cff5795a556"
  },
  {
    "text": "Function: GENDL::CHECK-QUERY-SLOTS <-Back Function: Gendl::Check-Query-Slots CHECK-QUERY-SLOTS unknown what is is <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/2/function-docs/dokumentation/10/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_2_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "fda411f14fa0ff226b86e769f8a0aef8"
  },
  {
    "text": "Function: MAKE-GDL-APP <-Back Function: Make-Gdl-App MAKE-GDL-APP void This function simply passes its arguments to an instance of gdl-app. Please see that object definition for the documentation of the inputs. <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/2/function-docs/dokumentation/39/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_2_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "9ca26f60188cf87f4bd3744f26f4619e"
  },
  {
    "text": "Function: MAKE-KEYWORD <-Back Function: Make-Keyword MAKE-KEYWORD keyword symbol Converts given strings to a keyword. If any of the given arguments is not a string, it will be converted to one with (format nil \"~a\" string). arguments: strings &rest Strings <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/2/function-docs/dokumentation/40/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_2_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "39463b58dbde3aa6dcbc377d28568ec2"
  },
  {
    "text": "The GEOM-BASE (Wireframe Geometry) Package Documentation Home The GEOM-BASE (Wireframe Geometry) Package Object Definitions angular-dimension arc arcoid-mixin base-coordinate-system base-drawing base-object base-view bezier-curve box c-cylinder center-line circle cone constrained-arc constrained-fillet constrained-line cylinder ellipse general-note global-filleted-polygon-projection global-filleted-polyline global-filleted-polyline-mixin global-polygon-projection global-polyline global-polyline-mixin horizontal-dimension label leader-line line linear-dimension parallel-dimension pie-chart point points-display renderer-mixin route-pipe sample-drawing sphere spherical-cap text-line torus typeset-block vertical-dimension Function and Macro Definitions 3d-distance 3d-point-p 3d-point? 3d-vector-p 3d-vector-to-array 3d-vector? acosd add-matrices add-vectors alignment angle-between-vectors angle-between-vectors-d apply-make-point array-to-3d-vector array-to-list asind atand",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5",
      "chunk_id": 0,
      "chunk_count": 3
    },
    "id": "ffed1a77025d9a27bc45195edb44a66e"
  },
  {
    "text": "r-p 3d-vector-to-array 3d-vector? acosd add-matrices add-vectors alignment angle-between-vectors angle-between-vectors-d apply-make-point array-to-3d-vector array-to-list asind atand coincident-point? create-obliqueness cross-vectors degree degrees-to-radians distance-to-line dot-vectors equi-space-points get-u get-v get-w get-x get-y get-z inter-circle-sphere inter-line-plane inter-line-sphere length-vector make-point [Macro] make-transform make-vector [Macro] matrix*vector matrix-to-quaternion merge-display-controls [Macro] midpoint multiply-matrices orthogonal-component parallel-vectors? point-on-plane? point-on-vector? print-characters proj-point-on-line projected-vector pythagorize quaternion-to-matrix quaternion-to-rotation radians-to-degrees radians-to-grads reverse-vector roll [Macro] rotate-point rotate-point-d rotate-vector rotate-vector-d rotation same-direction-vectors? scalar*matrix scalar*vector sort-points-along-vector subtract-vectors transform-and-translate-point",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5",
      "chunk_id": 1,
      "chunk_count": 3
    },
    "id": "d5cb71454819ab2943670f67d9b41a16"
  },
  {
    "text": "ro] rotate-point rotate-point-d rotate-vector rotate-vector-d rotation same-direction-vectors? scalar*matrix scalar*vector sort-points-along-vector subtract-vectors transform-and-translate-point transform-numeric-point translate [Macro] translate-along-vector transpose-matrix unitize-vector zero-vector? Variables and Constants *break-leaders?* *gs-graphics-alpha-bits* *gs-text-alpha-bits* *hash-transforms?* *zero-vector-checking?* +postnet-bits+ Documentation Home Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5",
      "chunk_id": 2,
      "chunk_count": 3
    },
    "id": "b7bd32d7bdf56fc61f6305451deb3173"
  },
  {
    "text": "Documentation for *GS-GRAPHICS-ALPHA-BITS* <-Back Parameter: *Gs-Graphics-Alpha-Bits* *GS-GRAPHICS-ALPHA-BITS* integer The amount of anti-aliasing for Ghostscript to apply to graphics when making PNG or JPEG images. Defaults to 4. Set to 0 for no antialiasing. <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/variable-docs/dokumentation/1/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_variables",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "7e0050bb7a6847937bb2ede7c03e9b1a"
  },
  {
    "text": "Documentation for *BREAK-LEADERS?* <-Back Parameter: *Break-Leaders?* *BREAK-LEADERS?* boolean Indicates whether to try making a gap in dimension leaders for the text block. Defaults to t. <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/variable-docs/dokumentation/0/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_variables",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "8adfd0d5ae547ffdc5e1a09cef55f93f"
  },
  {
    "text": "Documentation for *HASH-TRANSFORMS?* <-Back Parameter: *Hash-Transforms?* *HASH-TRANSFORMS?* boolean Controls whether the transformations of points from three-dimensional world coordinates to two-dimensional display coordinates are cached in memory. Set this to NIL to save memory at the expense of some execution speed. Note: in the current GDL release, transform caching is temporarily disabled, so this parameter will have no effect. Defaults to T. <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/variable-docs/dokumentation/3/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_variables",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "5cf1c0972970d09f3e1e96c24038b04c"
  },
  {
    "text": "Documentation for *GS-TEXT-ALPHA-BITS* <-Back Parameter: *Gs-Text-Alpha-Bits* *GS-TEXT-ALPHA-BITS* integer The amount of anti-aliasing for Ghostscript to apply to text when making PNG or JPEG images. Defaults to 4. Set to 0 for no antialiasing. <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/variable-docs/dokumentation/2/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_variables",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "604b75c63a0243536f5dd58507967146"
  },
  {
    "text": "Documentation for +POSTNET-BITS+ <-Back Constant: +Postnet-Bits+ +POSTNET-BITS+ [constant] 2d array of boolean Represents the encodings used by the US Post Office Postnet barcoding system. this will be included and documented in a future version of the GDL PDF output format. <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/variable-docs/dokumentation/5/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_variables",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "8ce993f177e71bd7265ea10ba9b81947"
  },
  {
    "text": "Documentation for GEOM-BASE::*ZERO-VECTOR-CHECKING?* <-Back Parameter: Geom-Base::*Zero-Vector-Checking?* *ZERO-VECTOR-CHECKING?* boolean Indicates whether GDL should perform checks for zero-length vectors where nonzero-length vectors are expected. Defaults to T. Setting to NIL will increase execution speed marginally, at the cost of decreased safety. Modify the value of this parameter at your own risk. <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/variable-docs/dokumentation/4/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_variables",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "bfa3cbce120b586359dc57104dff9f55"
  },
  {
    "text": "GendL Application - LEADER-LINE Package Documentation Object: LEADER-LINE (The :GEOM-BASE Package) Mixins: BASE-OBJECT Description Creates a leader line with arrows on zero, one, or both ends Input Slots (required) PATH-POINTS list of 3d points Leader-line is rendered as a polyline going through these points. Input Slots (optional) ARROWHEAD-LENGTH number The length of the arrows. Defaults to (* (the arrowhead-width) 2) ARROWHEAD-STYLE keyword Controls the style of first arrowhead. Currently only :wedge is supported. Default is :wedge. ARROWHEAD-STYLE-2 keyword Controls the style and presence of second arrowhead. Currently only :wedge is supported. Default is :none. ARROWHEAD-WIDTH number The width of the arrows. Defaults to (* (the line-thickness) 5). BOUNDING-BOX [ from BASE-OBJECT ] list of two 3d points The left front bottom and right rear top corners, in global coordinates, of the rectangular volume bounding the tree of geometric objects rooted at this object.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/27/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 0,
      "chunk_count": 6
    },
    "id": "5ae7b13c3e5aad652d9de20bab9115a5"
  },
  {
    "text": "t of two 3d points The left front bottom and right rear top corners, in global coordinates, of the rectangular volume bounding the tree of geometric objects rooted at this object. BREAK-POINTS list of two points or nil . The start and end of the break in the leader line to accomodate the dimension-text, in cases where there is overlap. HIDDEN? [ from VANILLA-MIXIN* ] boolean Indicates whether the object should effectively be a hidden-object even if specified in :objects. Default is nil. IMAGE-FILE [ from BASE-OBJECT ] pathname or string Points to a pre-existing image file to be displayed instead of actual geometry for this object. Defaults to nil LOCAL-BOX [ from BASE-OBJECT ] list of two 3d points The left front bottom and right rear top corners, in global coordinates, of the rectangular volume bounding this geometric object. OBLIQUENESS [ from BASE-OBJECT ] 3x3 orthonormal matrix of double-float numbers This is synonymous with the orientation .",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/27/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 1,
      "chunk_count": 6
    },
    "id": "d131d4f5477b653818ae78e752e552df"
  },
  {
    "text": "volume bounding this geometric object. OBLIQUENESS [ from BASE-OBJECT ] 3x3 orthonormal matrix of double-float numbers This is synonymous with the orientation . ONCLICK-FUNCTION [ from BASE-OBJECT ] lambda function of zero arguments, or nil If non-nil, this function gets invoked when the user clicks the object in graphics front-ends which support this functionality, e.g. SVG/Raphael and X3DOM. ROOT [ from VANILLA-MIXIN* ] gdl instance The root-level node in this object's ``tree'' (instance hierarchy). SAFE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances All objects from the :objects specification, including elements of sequences as flat lists. Any children which throw errors come back as a plist with error information STRINGS-FOR-DISPLAY [ from VANILLA-MIXIN* ] string or list of strings Determines how the name of objects of this type will be printed in most places.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/27/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 2,
      "chunk_count": 6
    },
    "id": "aef98cc1efc5d6372b21b58950386fab"
  },
  {
    "text": "ings Determines how the name of objects of this type will be printed in most places. This defaults to the name-for-display (generally the part's name as specified in its parent), followed by an index number if the part is an element of a sequence. VISIBLE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances Additional objects to display in Tatu tree. Typically this would be a subset of hidden-children. Defaults to NIL. Input Slots (optional, defaulting) CENTER [ from BASE-OBJECT ] 3d point Indicates in global coordinates where the center of the reference box of this object should be located. HEIGHT [ from BASE-OBJECT ] number Z-axis dimension of the reference box. Defaults to zero. LENGTH [ from BASE-OBJECT ] number Y-axis dimension of the reference box. Defaults to zero. ORIENTATION [ from BASE-OBJECT ] 3x3 matrix of double-float numbers Indicates the absolute Rotation Matrix used to create the coordinate system of this object. This matrix is given in absolute terms (i.e.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/27/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 3,
      "chunk_count": 6
    },
    "id": "04653ff4f5beceb11719226d922f9714"
  },
  {
    "text": "rom BASE-OBJECT ] 3x3 matrix of double-float numbers Indicates the absolute Rotation Matrix used to create the coordinate system of this object. This matrix is given in absolute terms (i.e. with respect to the root's orientation), and is generally created with the alignment function. It should be an orthonormal matrix, meaning each row is a vector with a magnitude of one (1.0). WIDTH [ from BASE-OBJECT ] number X-axis dimension of the reference box. Defaults to zero. Computed Slots DISPLAY-CONTROLS [ from BASE-OBJECT ] plist May contain keywords and values indicating display characteristics for this object. The following keywords are recognized currently: :color color keyword from the *color-table* parameter, or an HTML-style hexidecimal RGB string value, e.g. \"#FFFFFF\" for pure white. Defaults to :black. :line-thickness an integer, defaulting to 1, indicating relative line thickness for wireframe representations of this object. :dash-pattern (currently PDF/PNG/JPEG only).",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/27/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 4,
      "chunk_count": 6
    },
    "id": "2cae38dc304791e6ea95de56601b203b"
  },
  {
    "text": "aults to :black. :line-thickness an integer, defaulting to 1, indicating relative line thickness for wireframe representations of this object. :dash-pattern (currently PDF/PNG/JPEG only). This is a list of two or three numbers which indicate the length, in pixels, of the dashes and blank spaces in a dashed line. The optional third number indicates how far into the line or curve to start the dash pattern. Package Documentation Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/27/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 5,
      "chunk_count": 6
    },
    "id": "d1e0731eba0087766825a59c4541fa61"
  },
  {
    "text": "GendL Application - GLOBAL-POLYLINE-MIXIN Package Documentation Object: GLOBAL-POLYLINE-MIXIN (The :GEOM-BASE Package) Mixins: BASE-OBJECT Description Makes a connected polyline with vertices connected by straight line segments. Input Slots (required) VERTEX-LIST list of 3d points The vertices (``corners'') of the polyline. Input Slots (optional) CLOSED? boolean Controls whether the filleted-polyline should automatically be closed. HIDDEN? [ from VANILLA-MIXIN* ] boolean Indicates whether the object should effectively be a hidden-object even if specified in :objects. Default is nil. IMAGE-FILE [ from BASE-OBJECT ] pathname or string Points to a pre-existing image file to be displayed instead of actual geometry for this object. Defaults to nil LOCAL-BOX [ from BASE-OBJECT ] list of two 3d points The left front bottom and right rear top corners, in global coordinates, of the rectangular volume bounding this geometric object.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/24/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 0,
      "chunk_count": 6
    },
    "id": "7ae6441d50e3362ab1f6d8a361f6482c"
  },
  {
    "text": "oints The left front bottom and right rear top corners, in global coordinates, of the rectangular volume bounding this geometric object. OBLIQUENESS [ from BASE-OBJECT ] 3x3 orthonormal matrix of double-float numbers This is synonymous with the orientation . ONCLICK-FUNCTION [ from BASE-OBJECT ] lambda function of zero arguments, or nil If non-nil, this function gets invoked when the user clicks the object in graphics front-ends which support this functionality, e.g. SVG/Raphael and X3DOM. ROOT [ from VANILLA-MIXIN* ] gdl instance The root-level node in this object's ``tree'' (instance hierarchy). SAFE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances All objects from the :objects specification, including elements of sequences as flat lists. Any children which throw errors come back as a plist with error information STRINGS-FOR-DISPLAY [ from VANILLA-MIXIN* ] string or list of strings Determines how the name of objects of this type will be printed in most places.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/24/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 1,
      "chunk_count": 6
    },
    "id": "dc60a78c93fa7c428e28e49d742b8bd1"
  },
  {
    "text": "s a plist with error information STRINGS-FOR-DISPLAY [ from VANILLA-MIXIN* ] string or list of strings Determines how the name of objects of this type will be printed in most places. This defaults to the name-for-display (generally the part's name as specified in its parent), followed by an index number if the part is an element of a sequence. VISIBLE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances Additional objects to display in Tatu tree. Typically this would be a subset of hidden-children. Defaults to NIL. Input Slots (optional, defaulting) CENTER [ from BASE-OBJECT ] 3d point Indicates in global coordinates where the center of the reference box of this object should be located. DISPLAY-CONTROLS [ from BASE-OBJECT ] plist May contain keywords and values indicating display characteristics for this object. The following keywords are recognized currently: :color color keyword from the *color-table* parameter, or an HTML-style hexidecimal RGB string value, e.g.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/24/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 2,
      "chunk_count": 6
    },
    "id": "2eab0bd3143071b7679bb5869cc64f94"
  },
  {
    "text": "teristics for this object. The following keywords are recognized currently: :color color keyword from the *color-table* parameter, or an HTML-style hexidecimal RGB string value, e.g. \"#FFFFFF\" for pure white. Defaults to :black. :line-thickness an integer, defaulting to 1, indicating relative line thickness for wireframe representations of this object. :dash-pattern (currently PDF/PNG/JPEG only). This is a list of two or three numbers which indicate the length, in pixels, of the dashes and blank spaces in a dashed line. The optional third number indicates how far into the line or curve to start the dash pattern. HEIGHT [ from BASE-OBJECT ] number Z-axis dimension of the reference box. Defaults to zero. LENGTH [ from BASE-OBJECT ] number Y-axis dimension of the reference box. Defaults to zero. ORIENTATION [ from BASE-OBJECT ] 3x3 matrix of double-float numbers Indicates the absolute Rotation Matrix used to create the coordinate system of this object.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/24/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 3,
      "chunk_count": 6
    },
    "id": "8c076154534d2826c0f1f86e8c82e020"
  },
  {
    "text": "ro. ORIENTATION [ from BASE-OBJECT ] 3x3 matrix of double-float numbers Indicates the absolute Rotation Matrix used to create the coordinate system of this object. This matrix is given in absolute terms (i.e. with respect to the root's orientation), and is generally created with the alignment function. It should be an orthonormal matrix, meaning each row is a vector with a magnitude of one (1.0). WIDTH [ from BASE-OBJECT ] number X-axis dimension of the reference box. Defaults to zero. Computed Slots BOUNDING-BOX [ from BASE-OBJECT ] list of two 3d points The left front bottom and right rear top corners, in global coordinates, of the rectangular volume bounding the tree of geometric objects rooted at this object. LINES list of pairs of 3d points Each pair represents the start and end of each line segment in the polyline. Package Documentation Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/24/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 4,
      "chunk_count": 6
    },
    "id": "c1ca40d25f206ff7564d5d5521d6cf83"
  },
  {
    "text": "ch line segment in the polyline. Package Documentation Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/24/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 5,
      "chunk_count": 6
    },
    "id": "c38720267c73f3d833fb984b47fa08c1"
  },
  {
    "text": "GendL Application - ARC Package Documentation Object: ARC (The :GEOM-BASE Package) Mixins: ARCOID-MIXIN , BASE-OBJECT Description A segment of a circle. The start point is at the 3 o'clock position, and positive angles are measured anti-clockwise. Input Slots (required) RADIUS number Distance from center to any point on the arc. Input Slots (optional) BOUNDING-BOX [ from BASE-OBJECT ] list of two 3d points The left front bottom and right rear top corners, in global coordinates, of the rectangular volume bounding the tree of geometric objects rooted at this object. END-ANGLE angle in radians End angle of the arc. Defaults to twice pi. HIDDEN? [ from VANILLA-MIXIN* ] boolean Indicates whether the object should effectively be a hidden-object even if specified in :objects. Default is nil. IMAGE-FILE [ from BASE-OBJECT ] pathname or string Points to a pre-existing image file to be displayed instead of actual geometry for this object.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/1/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 0,
      "chunk_count": 7
    },
    "id": "dedd067c7fff029dc94aebf962596703"
  },
  {
    "text": "E-FILE [ from BASE-OBJECT ] pathname or string Points to a pre-existing image file to be displayed instead of actual geometry for this object. Defaults to nil LOCAL-BOX [ from BASE-OBJECT ] list of two 3d points The left front bottom and right rear top corners, in global coordinates, of the rectangular volume bounding this geometric object. OBLIQUENESS [ from BASE-OBJECT ] 3x3 orthonormal matrix of double-float numbers This is synonymous with the orientation . ONCLICK-FUNCTION [ from BASE-OBJECT ] lambda function of zero arguments, or nil If non-nil, this function gets invoked when the user clicks the object in graphics front-ends which support this functionality, e.g. SVG/Raphael and X3DOM. ROOT [ from VANILLA-MIXIN* ] gdl instance The root-level node in this object's ``tree'' (instance hierarchy). SAFE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances All objects from the :objects specification, including elements of sequences as flat lists.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/1/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 1,
      "chunk_count": 7
    },
    "id": "fa398ca593940dbc03f15ab8080cc528"
  },
  {
    "text": "ierarchy). SAFE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances All objects from the :objects specification, including elements of sequences as flat lists. Any children which throw errors come back as a plist with error information START-ANGLE angle in radians Start angle of the arc. Defaults to zero. STRINGS-FOR-DISPLAY [ from VANILLA-MIXIN* ] string or list of strings Determines how the name of objects of this type will be printed in most places. This defaults to the name-for-display (generally the part's name as specified in its parent), followed by an index number if the part is an element of a sequence. VISIBLE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances Additional objects to display in Tatu tree. Typically this would be a subset of hidden-children. Defaults to NIL. Input Slots (optional, defaulting) CENTER [ from BASE-OBJECT ] 3d point Indicates in global coordinates where the center of the reference box of this object should be located.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/1/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 2,
      "chunk_count": 7
    },
    "id": "5d8865bce7219e8048e7cda566ad5e0e"
  },
  {
    "text": "Input Slots (optional, defaulting) CENTER [ from BASE-OBJECT ] 3d point Indicates in global coordinates where the center of the reference box of this object should be located. DISPLAY-CONTROLS [ from BASE-OBJECT ] plist May contain keywords and values indicating display characteristics for this object. The following keywords are recognized currently: :color color keyword from the *color-table* parameter, or an HTML-style hexidecimal RGB string value, e.g. \"#FFFFFF\" for pure white. Defaults to :black. :line-thickness an integer, defaulting to 1, indicating relative line thickness for wireframe representations of this object. :dash-pattern (currently PDF/PNG/JPEG only). This is a list of two or three numbers which indicate the length, in pixels, of the dashes and blank spaces in a dashed line. The optional third number indicates how far into the line or curve to start the dash pattern.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/1/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 3,
      "chunk_count": 7
    },
    "id": "554869a23092546550ed1ea59fbcb38b"
  },
  {
    "text": "e. The optional third number indicates how far into the line or curve to start the dash pattern. ORIENTATION [ from BASE-OBJECT ] 3x3 matrix of double-float numbers Indicates the absolute Rotation Matrix used to create the coordinate system of this object. This matrix is given in absolute terms (i.e. with respect to the root's orientation), and is generally created with the alignment function. It should be an orthonormal matrix, meaning each row is a vector with a magnitude of one (1.0). Computed Slots END 3d point The end point of the arc. HEIGHT [ from BASE-OBJECT ] number Z-axis dimension of the reference box. Defaults to zero. LENGTH [ from BASE-OBJECT ] number Y-axis dimension of the reference box. Defaults to zero. START 3d point The start point of the arc. WIDTH [ from BASE-OBJECT ] number X-axis dimension of the reference box. Defaults to zero.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/1/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 4,
      "chunk_count": 7
    },
    "id": "3dc797b48108feb5aa20b1a378463b83"
  },
  {
    "text": "number X-axis dimension of the reference box. Defaults to zero. GDL Functions EQUI-SPACED-POINTS list of points Returns a list of points equally spaced around the arc, including the start and end point of the arc. optional arguments: number-of-points Number , Default Value: 4 How many points to return POINT-ON-ARC 3d point The point on the arc at a certain angle from the start. arguments: angle Number in Radians TANGENT 3d vector Returns the tangent to the arc at the given point (which should be on the arc). arguments: point 3D point The point at which you want the tangent Examples (in-package :gdl-user) (define-object arc-sample (arc) :computed-slots ((radius 30) (end-angle (half pi/2)))) (generate-sample-drawing :objects (make-object 'arc-sample)) Package Documentation Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/1/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 5,
      "chunk_count": 7
    },
    "id": "7684f32dbaf4c36f94793fcaca0d9cac"
  },
  {
    "text": "Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/1/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 6,
      "chunk_count": 7
    },
    "id": "96f3c812f067af308c875bd36dc0e72a"
  },
  {
    "text": "GendL Application - ANGULAR-DIMENSION Package Documentation Object: ANGULAR-DIMENSION (The :GEOM-BASE Package) Mixins: LINEAR-DIMENSION , VANILLA-MIXIN Description This dimensional object produces a clear and concise arc dimensional annotation. Input Slots (required) ARC-OBJECT gdl object The arc being measured. BASE-PLANE-NORMAL [ from LINEAR-DIMENSION ] Must be specified in the subclass except for angular LEADER-DIRECTION-1-VECTOR [ from LINEAR-DIMENSION ] Must be specified in the subclass except for angular LEADER-DIRECTION-2-VECTOR [ from LINEAR-DIMENSION ] Must be specified in the subclass except for angular WITNESS-DIRECTION-VECTOR [ from LINEAR-DIMENSION ] Must be specified in the subclass except for angular Input Slots (optional) ARROWHEAD-LENGTH [ from LINEAR-DIMENSION ] length (from tip to tail) of arrowhead glyph Defaults to twice the arrowhead-width ARROWHEAD-STYLE [ from LINEAR-DIMENSION ] keyword symbol Style for arrowhead on end of leader-line .",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/0/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 0,
      "chunk_count": 14
    },
    "id": "c08703bbf01090ca937378d62424d955"
  },
  {
    "text": "rom tip to tail) of arrowhead glyph Defaults to twice the arrowhead-width ARROWHEAD-STYLE [ from LINEAR-DIMENSION ] keyword symbol Style for arrowhead on end of leader-line . Currently supported values are :none , :wedge (the Default), and :double-wedge . ARROWHEAD-STYLE-2 [ from LINEAR-DIMENSION ] keyword symbol Style for arrowhead on end of leader-line . Currently supported values are :none (the Default), :wedge , and :double-wedge . ARROWHEAD-WIDTH [ from LINEAR-DIMENSION ] width of arrowhead glyph Defaults to half the character-size. BOUNDING-BOX [ from BASE-OBJECT ] list of two 3d points The left front bottom and right rear top corners, in global coordinates, of the rectangular volume bounding the tree of geometric objects rooted at this object. CENTER-POINT 3d point The center of the arc being measured. CHARACTER-SIZE [ from LINEAR-DIMENSION ] number Size (glyph height) of the label text, in model units. Defaults to 1.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/0/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 1,
      "chunk_count": 14
    },
    "id": "fe541872635c3232281159d20016c094"
  },
  {
    "text": "arc being measured. CHARACTER-SIZE [ from LINEAR-DIMENSION ] number Size (glyph height) of the label text, in model units. Defaults to 1. DIM-TEXT [ from LINEAR-DIMENSION ] string Determines the text which shows up as the dimension label. Defaults to the dim-value, which is computed specially in each specific dimension type. DIM-TEXT-BIAS [ from LINEAR-DIMENSION ] keyword symbol, :start, :end, or :center Indicates where to position the text in the case when outside-leaders? is non-nil. Defaults to :center DIM-TEXT-START 3d point Determines where the text will start. Defaults to halfway along the arc, just beyond the radius. DIM-TEXT-START-OFFSET [ from LINEAR-DIMENSION ] 3d vector (normally only 2d are used) . The dim-text-start is offset by this vector, in model space. Defaults to #(0.0 0.0 0.0) DXF-FONT [ from LINEAR-DIMENSION ] string This names the DXF font for this general-note. Defaults to (the font) .",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/0/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 2,
      "chunk_count": 14
    },
    "id": "1e36bbe0d64663fce3e76fd2d2a04450"
  },
  {
    "text": "0.0 0.0) DXF-FONT [ from LINEAR-DIMENSION ] string This names the DXF font for this general-note. Defaults to (the font) . DXF-OFFSET [ from LINEAR-DIMENSION ] number The start of text will be offset by this amount for DXF output. Default is 2. DXF-SIZE-RATIO [ from LINEAR-DIMENSION ] number The scale factor for DXF character size vs PDF character size. Default is 0.8 DXF-TEXT-X-SCALE [ from LINEAR-DIMENSION ] number in percentage Adjusts the character width for DXF output. Defaults to the text-x-scale. END-POINT 3d point The end point of the arc being measured. FLIP-LEADERS? [ from LINEAR-DIMENSION ] boolean Indicates which direction the witness lines should take from the start and end points. The Default is NIL, which indicates :rear (i.e. ``up'') for horizontal-dimensions and :right for vertical-dimensions FONT [ from LINEAR-DIMENSION ] string naming a standard pdf font Font for the label text.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/0/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 3,
      "chunk_count": 14
    },
    "id": "79e6605cd86a6294b9a1825f20824f94"
  },
  {
    "text": "vertical-dimensions FONT [ from LINEAR-DIMENSION ] string naming a standard pdf font Font for the label text. Defaults to \"Helvetica\" FULL-LEADER-LINE-LENGTH [ from LINEAR-DIMENSION ] number Indicates the length of the full leader when outside-leaders? is nil. This defaults to nil, which indicates that the full-leader's length should be auto-computed based on the given start-point and end-point. HIDDEN? [ from VANILLA-MIXIN* ] boolean Indicates whether the object should effectively be a hidden-object even if specified in :objects. Default is nil. IMAGE-FILE [ from BASE-OBJECT ] pathname or string Points to a pre-existing image file to be displayed instead of actual geometry for this object. Defaults to nil JUSTIFICATION [ from LINEAR-DIMENSION ] keyword symbol, :left, :right, or :center . For multi-line dim-text, this justification is applied. LEADER-1? [ from LINEAR-DIMENSION ] boolean Indicates whether the first (or only) leader line should be displayed.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/0/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 4,
      "chunk_count": 14
    },
    "id": "1d481bf92b0b68883e567c1bd4f4b235"
  },
  {
    "text": "For multi-line dim-text, this justification is applied. LEADER-1? [ from LINEAR-DIMENSION ] boolean Indicates whether the first (or only) leader line should be displayed. The Default is T LEADER-2? [ from LINEAR-DIMENSION ] boolean Indicates whether the second leader line should be displayed. The Default is T LEADER-LINE-LENGTH [ from LINEAR-DIMENSION ] number Indicates the length of the first leader for the case when outside-leaders? is non-NIL LEADER-LINE-LENGTH-2 [ from LINEAR-DIMENSION ] number Indicates the length of the second leader for the case when outside-leaders? is non-NIL LEADER-RADIUS number The radius for the leader-arc. LEADER-TEXT-GAP [ from LINEAR-DIMENSION ] number Amount of gap between leader lines and dimension text, when the dimension text is within the leader. Defaults to half the character-size. OBLIQUENESS [ from BASE-OBJECT ] 3x3 orthonormal matrix of double-float numbers This is synonymous with the orientation .",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/0/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 5,
      "chunk_count": 14
    },
    "id": "fe9eb1bc9c6d54dbfb7c4df73d135b6f"
  },
  {
    "text": "lts to half the character-size. OBLIQUENESS [ from BASE-OBJECT ] 3x3 orthonormal matrix of double-float numbers This is synonymous with the orientation . ONCLICK-FUNCTION [ from BASE-OBJECT ] lambda function of zero arguments, or nil If non-nil, this function gets invoked when the user clicks the object in graphics front-ends which support this functionality, e.g. SVG/Raphael and X3DOM. ORIENTATION [ from BASE-OBJECT ] 3x3 matrix of double-float numbers Indicates the absolute Rotation Matrix used to create the coordinate system of this object. This matrix is given in absolute terms (i.e. with respect to the root's orientation), and is generally created with the alignment function. It should be an orthonormal matrix, meaning each row is a vector with a magnitude of one (1.0). OUTLINE-SHAPE-TYPE [ from LINEAR-DIMENSION ] keyword symbol Currently can be :bubble, :rectangle, or :none. Default is :none.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/0/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 6,
      "chunk_count": 14
    },
    "id": "501da556752282f161af11e0a10f6f2b"
  },
  {
    "text": "TYPE [ from LINEAR-DIMENSION ] keyword symbol Currently can be :bubble, :rectangle, or :none. Default is :none. OUTSIDE-LEADERS-LENGTH-FACTOR [ from LINEAR-DIMENSION ] number Indicates the default length of the outside-leaders as a multiple of arrowhead-length. Defaults to 3. OUTSIDE-LEADERS? [ from LINEAR-DIMENSION ] boolean Indicates whether the leader line(s) should be inside or outside the interval between the start and end points. The default is NIL, which indicates that the leader line(s) should be inside the interval ROOT [ from VANILLA-MIXIN* ] gdl instance The root-level node in this object's ``tree'' (instance hierarchy). SAFE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances All objects from the :objects specification, including elements of sequences as flat lists. Any children which throw errors come back as a plist with error information START-POINT 3d point The start point of the arc being measured.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/0/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 7,
      "chunk_count": 14
    },
    "id": "e5e5fa9498f57b3749ccae1775b64299"
  },
  {
    "text": "dren which throw errors come back as a plist with error information START-POINT 3d point The start point of the arc being measured. STRINGS-FOR-DISPLAY [ from VANILLA-MIXIN* ] string or list of strings Determines how the name of objects of this type will be printed in most places. This defaults to the name-for-display (generally the part's name as specified in its parent), followed by an index number if the part is an element of a sequence. TEXT-ABOVE-LEADER? [ from LINEAR-DIMENSION ] boolean Indicates whether the text is to the right or above the leader line, rather than in-line with it. Default is T. TEXT-ALONG-AXIS? [ from LINEAR-DIMENSION ] boolean Where applicable, determines whether text direction follows leader-line direction TEXT-ALONG-LEADER-PADDING-FACTOR number Amount of padding above leader for text-along-leader? t. This is multiplied by the character-size to get the actual padding amount. Defaults to 1/3.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/0/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 8,
      "chunk_count": 14
    },
    "id": "cdf56fe482425208a7a42dcd5d9f1bdd"
  },
  {
    "text": "above leader for text-along-leader? t. This is multiplied by the character-size to get the actual padding amount. Defaults to 1/3. TEXT-X-SCALE [ from LINEAR-DIMENSION ] number in percentage Adjusts the character width for the dimension-text and currently only applies only to PDF output UNDERLINE? [ from LINEAR-DIMENSION ] GDL VIEW-REFERENCE-OBJECT [ from LINEAR-DIMENSION ] gdl object or nil View object which will use this dimension. Defaults to NIL. VISIBLE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances Additional objects to display in Tatu tree. Typically this would be a subset of hidden-children. Defaults to NIL. WITNESS-1-TO-CENTER? boolean Determines whether a witness line extends all the way from the start-point to the center. Defaults to nil. WITNESS-2-TO-CENTER? boolean Determines whether a witness line extends all the way from the end-point to the center. Defaults to nil.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/0/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 9,
      "chunk_count": 14
    },
    "id": "8c65c94bd469a64885825878ec305ecf"
  },
  {
    "text": "termines whether a witness line extends all the way from the end-point to the center. Defaults to nil. WITNESS-LINE-2? [ from LINEAR-DIMENSION ] boolean Indicates whether to display a witness line coming off the end-point . Default is T WITNESS-LINE-EXT [ from LINEAR-DIMENSION ] number Distance the witness line(s) extend beyond the leader line. Default is 0.3 WITNESS-LINE-GAP [ from LINEAR-DIMENSION ] number Distance from the start-point and end-point to the start of each witness-line. Default is 0.1 WITNESS-LINE-LENGTH [ from LINEAR-DIMENSION ] number Length of the witness lines (or of the shorter witness line in case they are different lengths) WITNESS-LINE? [ from LINEAR-DIMENSION ] boolean Indicates whether to display a witness line coming off the start-point . Default is T Input Slots (optional, defaulting) CENTER [ from BASE-OBJECT ] 3d point Indicates in global coordinates where the center of the reference box of this object should be located.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/0/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 10,
      "chunk_count": 14
    },
    "id": "b64ae88d1c03eed11711530b85317643"
  },
  {
    "text": "(optional, defaulting) CENTER [ from BASE-OBJECT ] 3d point Indicates in global coordinates where the center of the reference box of this object should be located. DISPLAY-CONTROLS [ from BASE-OBJECT ] plist May contain keywords and values indicating display characteristics for this object. The following keywords are recognized currently: :color color keyword from the *color-table* parameter, or an HTML-style hexidecimal RGB string value, e.g. \"#FFFFFF\" for pure white. Defaults to :black. :line-thickness an integer, defaulting to 1, indicating relative line thickness for wireframe representations of this object. :dash-pattern (currently PDF/PNG/JPEG only). This is a list of two or three numbers which indicate the length, in pixels, of the dashes and blank spaces in a dashed line. The optional third number indicates how far into the line or curve to start the dash pattern. HEIGHT [ from BASE-OBJECT ] number Z-axis dimension of the reference box. Defaults to zero.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/0/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 11,
      "chunk_count": 14
    },
    "id": "c22b6515a2668aba886b87f3c34ba564"
  },
  {
    "text": "onal third number indicates how far into the line or curve to start the dash pattern. HEIGHT [ from BASE-OBJECT ] number Z-axis dimension of the reference box. Defaults to zero. LENGTH [ from BASE-OBJECT ] number Y-axis dimension of the reference box. Defaults to zero. WIDTH [ from BASE-OBJECT ] number X-axis dimension of the reference box. Defaults to zero. Computed Slots DIM-VALUE [ from LINEAR-DIMENSION ] number 2D distance relative to the base-plane-normal. Can be over-ridden in the subclass Examples (in-package :gdl-user) (define-object angular-dimension-test (base-object) :objects ((arc :type 'arc :display-controls (list :color :green ) :radius 30 :end-angle (degrees-to-radians 90)) (dimension :type 'angular-dimension :display-controls (list :color :blue ) :leader-radius (+ (* 0.1 (the arc radius))(the arc radius)) :arc-object (the arc)) (explicit-dimension :type 'angular-dimension :center-point (the arc center) :start-point (the arc (point-on-arc (degrees-to-radians 10)))",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/0/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 12,
      "chunk_count": 14
    },
    "id": "a2e9c9772d446c13707ae20c0fe7205d"
  },
  {
    "text": "he arc radius))(the arc radius)) :arc-object (the arc)) (explicit-dimension :type 'angular-dimension :center-point (the arc center) :start-point (the arc (point-on-arc (degrees-to-radians 10))) :end-point (the arc (point-on-arc (degrees-to-radians 60)))))) (generate-sample-drawing :objects (list (the-object (make-object 'angular-dimension-test) arc) (the-object (make-object 'angular-dimension-test) dimension) (the-object (make-object 'angular-dimension-test) explicit-dimension)) :projection-direction (getf *standard-views* :top)) Package Documentation Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/0/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 13,
      "chunk_count": 14
    },
    "id": "d5fe7316d6e2223b57a0dedac3cca8fb"
  },
  {
    "text": "GendL Application - BASE-COORDINATE-SYSTEM Package Documentation Object: BASE-COORDINATE-SYSTEM (The :GEOM-BASE Package) Mixins: BASE-OBJECT , VANILLA-MIXIN Description This provides a default 3D Cartesian coordinate system. It mixes in base-object and does not extend it in any way, so as with base-object, it provides an imaginary geometric reference box with a length, width, height, center, and orientation. Input Slots (optional) BOUNDING-BOX [ from BASE-OBJECT ] list of two 3d points The left front bottom and right rear top corners, in global coordinates, of the rectangular volume bounding the tree of geometric objects rooted at this object. HIDDEN? [ from VANILLA-MIXIN* ] boolean Indicates whether the object should effectively be a hidden-object even if specified in :objects. Default is nil. IMAGE-FILE [ from BASE-OBJECT ] pathname or string Points to a pre-existing image file to be displayed instead of actual geometry for this object.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/3/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 0,
      "chunk_count": 6
    },
    "id": "0c49c2d71a3c8d9c336c18afc2d0342d"
  },
  {
    "text": "nil. IMAGE-FILE [ from BASE-OBJECT ] pathname or string Points to a pre-existing image file to be displayed instead of actual geometry for this object. Defaults to nil LOCAL-BOX [ from BASE-OBJECT ] list of two 3d points The left front bottom and right rear top corners, in global coordinates, of the rectangular volume bounding this geometric object. OBLIQUENESS [ from BASE-OBJECT ] 3x3 orthonormal matrix of double-float numbers This is synonymous with the orientation . ONCLICK-FUNCTION [ from BASE-OBJECT ] lambda function of zero arguments, or nil If non-nil, this function gets invoked when the user clicks the object in graphics front-ends which support this functionality, e.g. SVG/Raphael and X3DOM. ROOT [ from VANILLA-MIXIN* ] gdl instance The root-level node in this object's ``tree'' (instance hierarchy). SAFE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances All objects from the :objects specification, including elements of sequences as flat lists.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/3/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 1,
      "chunk_count": 6
    },
    "id": "390fc47120d7951a07938ed5b5fe0225"
  },
  {
    "text": "instance hierarchy). SAFE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances All objects from the :objects specification, including elements of sequences as flat lists. Any children which throw errors come back as a plist with error information STRINGS-FOR-DISPLAY [ from VANILLA-MIXIN* ] string or list of strings Determines how the name of objects of this type will be printed in most places. This defaults to the name-for-display (generally the part's name as specified in its parent), followed by an index number if the part is an element of a sequence. VISIBLE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances Additional objects to display in Tatu tree. Typically this would be a subset of hidden-children. Defaults to NIL. Input Slots (optional, defaulting) CENTER [ from BASE-OBJECT ] 3d point Indicates in global coordinates where the center of the reference box of this object should be located.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/3/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 2,
      "chunk_count": 6
    },
    "id": "0f33b139b35de4b7d61dfeb1fd2ec805"
  },
  {
    "text": "] 3d point Indicates in global coordinates where the center of the reference box of this object should be located. DISPLAY-CONTROLS [ from BASE-OBJECT ] plist May contain keywords and values indicating display characteristics for this object. The following keywords are recognized currently: :color color keyword from the *color-table* parameter, or an HTML-style hexidecimal RGB string value, e.g. \"#FFFFFF\" for pure white. Defaults to :black. :line-thickness an integer, defaulting to 1, indicating relative line thickness for wireframe representations of this object. :dash-pattern (currently PDF/PNG/JPEG only). This is a list of two or three numbers which indicate the length, in pixels, of the dashes and blank spaces in a dashed line. The optional third number indicates how far into the line or curve to start the dash pattern. HEIGHT [ from BASE-OBJECT ] number Z-axis dimension of the reference box. Defaults to zero.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/3/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 3,
      "chunk_count": 6
    },
    "id": "d5e819f4470a94ec5319faf1e9ab6f22"
  },
  {
    "text": "or curve to start the dash pattern. HEIGHT [ from BASE-OBJECT ] number Z-axis dimension of the reference box. Defaults to zero. LENGTH [ from BASE-OBJECT ] number Y-axis dimension of the reference box. Defaults to zero. ORIENTATION [ from BASE-OBJECT ] 3x3 matrix of double-float numbers Indicates the absolute Rotation Matrix used to create the coordinate system of this object. This matrix is given in absolute terms (i.e. with respect to the root's orientation), and is generally created with the alignment function. It should be an orthonormal matrix, meaning each row is a vector with a magnitude of one (1.0). WIDTH [ from BASE-OBJECT ] number X-axis dimension of the reference box. Defaults to zero. Package Documentation Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/3/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 4,
      "chunk_count": 6
    },
    "id": "5b73d4493704c594860249cf3679af5c"
  },
  {
    "text": "ks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/3/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 5,
      "chunk_count": 6
    },
    "id": "c1c8db3223fb1ee56cca69d6c7c0ae5e"
  },
  {
    "text": "GendL Application - GLOBAL-FILLETED-POLYLINE Package Documentation Object: GLOBAL-FILLETED-POLYLINE (The :GEOM-BASE Package) Mixins: GLOBAL-FILLETED-POLYLINE-MIXIN , VANILLA-MIXIN Description A sequence of points connected by straight line segments, whose corners are filleted according to specified radii. Please see global-filleted-polyline-mixin for documentation on the messages. Input Slots (required) VERTEX-LIST [ from GLOBAL-POLYLINE-MIXIN ] list of 3d points The vertices (``corners'') of the polyline. Input Slots (optional) CLOSED? [ from GLOBAL-POLYLINE-MIXIN ] boolean Controls whether the filleted-polyline should automatically be closed. DEFAULT-RADIUS [ from GLOBAL-FILLETED-POLYLINE-MIXIN ] number Specifies a radius to use for all vertices. Radius-list will take precedence over this. HIDDEN? [ from VANILLA-MIXIN* ] boolean Indicates whether the object should effectively be a hidden-object even if specified in :objects. Default is nil.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/20/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 0,
      "chunk_count": 6
    },
    "id": "3756fa8aa3647189e1d6233e0d745635"
  },
  {
    "text": "s. HIDDEN? [ from VANILLA-MIXIN* ] boolean Indicates whether the object should effectively be a hidden-object even if specified in :objects. Default is nil. IMAGE-FILE [ from BASE-OBJECT ] pathname or string Points to a pre-existing image file to be displayed instead of actual geometry for this object. Defaults to nil LOCAL-BOX [ from BASE-OBJECT ] list of two 3d points The left front bottom and right rear top corners, in global coordinates, of the rectangular volume bounding this geometric object. OBLIQUENESS [ from BASE-OBJECT ] 3x3 orthonormal matrix of double-float numbers This is synonymous with the orientation . ONCLICK-FUNCTION [ from BASE-OBJECT ] lambda function of zero arguments, or nil If non-nil, this function gets invoked when the user clicks the object in graphics front-ends which support this functionality, e.g. SVG/Raphael and X3DOM.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/20/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 1,
      "chunk_count": 6
    },
    "id": "be56befade4568c6252a608170f885a5"
  },
  {
    "text": "which support this functionality, e.g. SVG/Raphael and X3DOM. RADIUS-LIST [ from GLOBAL-FILLETED-POLYLINE-MIXIN ] list of numbers Specifies the radius for each vertex (``corner'') of the filleted-polyline. ROOT [ from VANILLA-MIXIN* ] gdl instance The root-level node in this object's ``tree'' (instance hierarchy). SAFE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances All objects from the :objects specification, including elements of sequences as flat lists. Any children which throw errors come back as a plist with error information STRINGS-FOR-DISPLAY [ from VANILLA-MIXIN* ] string or list of strings Determines how the name of objects of this type will be printed in most places. This defaults to the name-for-display (generally the part's name as specified in its parent), followed by an index number if the part is an element of a sequence. VISIBLE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances Additional objects to display in Tatu tree.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/20/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 2,
      "chunk_count": 6
    },
    "id": "176e743a9fbde20872d70fceeb65baee"
  },
  {
    "text": "an index number if the part is an element of a sequence. VISIBLE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances Additional objects to display in Tatu tree. Typically this would be a subset of hidden-children. Defaults to NIL. Input Slots (optional, defaulting) CENTER [ from BASE-OBJECT ] 3d point Indicates in global coordinates where the center of the reference box of this object should be located. DISPLAY-CONTROLS [ from BASE-OBJECT ] plist May contain keywords and values indicating display characteristics for this object. The following keywords are recognized currently: :color color keyword from the *color-table* parameter, or an HTML-style hexidecimal RGB string value, e.g. \"#FFFFFF\" for pure white. Defaults to :black. :line-thickness an integer, defaulting to 1, indicating relative line thickness for wireframe representations of this object. :dash-pattern (currently PDF/PNG/JPEG only).",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/20/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 3,
      "chunk_count": 6
    },
    "id": "ab06f1f972178cae38478cbd5888c87f"
  },
  {
    "text": "tive line thickness for wireframe representations of this object. :dash-pattern (currently PDF/PNG/JPEG only). This is a list of two or three numbers which indicate the length, in pixels, of the dashes and blank spaces in a dashed line. The optional third number indicates how far into the line or curve to start the dash pattern. HEIGHT [ from BASE-OBJECT ] number Z-axis dimension of the reference box. Defaults to zero. LENGTH [ from BASE-OBJECT ] number Y-axis dimension of the reference box. Defaults to zero. ORIENTATION [ from BASE-OBJECT ] 3x3 matrix of double-float numbers Indicates the absolute Rotation Matrix used to create the coordinate system of this object. This matrix is given in absolute terms (i.e. with respect to the root's orientation), and is generally created with the alignment function. It should be an orthonormal matrix, meaning each row is a vector with a magnitude of one (1.0). WIDTH [ from BASE-OBJECT ] number X-axis dimension of the reference box.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/20/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 4,
      "chunk_count": 6
    },
    "id": "a7d6b99406d4adb529b29c226df9b617"
  },
  {
    "text": "ment function. It should be an orthonormal matrix, meaning each row is a vector with a magnitude of one (1.0). WIDTH [ from BASE-OBJECT ] number X-axis dimension of the reference box. Defaults to zero. Examples (in-package :gdl-user) (define-object global-filleted-polyline-sample (global-filleted-polyline) :computed-slots ((default-radius 5) (vertex-list (list (make-point 0 0 0) (make-point 10 10 0) (make-point 30 10 0) (make-point 40 0 0) (make-point 30 -10 0) (make-point 10 -10 0) (make-point 0 0 0))))) (generate-sample-drawing :objects (make-object 'global-filleted-polyline-sample)) Package Documentation Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/20/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 5,
      "chunk_count": 6
    },
    "id": "7995ab28c9a9b40ee5336e5a216350e5"
  },
  {
    "text": "GendL Application - POINTS-DISPLAY Package Documentation Object: POINTS-DISPLAY (The :GEOM-BASE Package) Mixins: OUTLINE-SPECIALIZATION-MIXIN Description Product a list of hidden-children which are GDL point objects, which will be displayed in normal renderings using the outline-specialization-mixin mechanism. Input Slots (required) POINTS list of 3d points (i e. vectors). The points to be displayed. Input Slots (optional) BOUNDING-BOX [ from BASE-OBJECT ] list of two 3d points The left front bottom and right rear top corners, in global coordinates, of the rectangular volume bounding the tree of geometric objects rooted at this object. HIDDEN? [ from VANILLA-MIXIN* ] boolean Indicates whether the object should effectively be a hidden-object even if specified in :objects. Default is nil. IMAGE-FILE [ from BASE-OBJECT ] pathname or string Points to a pre-existing image file to be displayed instead of actual geometry for this object.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/33/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 0,
      "chunk_count": 5
    },
    "id": "1739f1fe2b480622d0876263ea69a379"
  },
  {
    "text": "AGE-FILE [ from BASE-OBJECT ] pathname or string Points to a pre-existing image file to be displayed instead of actual geometry for this object. Defaults to nil OBLIQUENESS [ from BASE-OBJECT ] 3x3 orthonormal matrix of double-float numbers This is synonymous with the orientation . ONCLICK-FUNCTION [ from BASE-OBJECT ] lambda function of zero arguments, or nil If non-nil, this function gets invoked when the user clicks the object in graphics front-ends which support this functionality, e.g. SVG/Raphael and X3DOM. ROOT [ from VANILLA-MIXIN* ] gdl instance The root-level node in this object's ``tree'' (instance hierarchy). SAFE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances All objects from the :objects specification, including elements of sequences as flat lists.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/33/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 1,
      "chunk_count": 5
    },
    "id": "5b39b542c618b45edf71a3cfccf61156"
  },
  {
    "text": "Any children which throw errors come back as a plist with error information STRINGS-FOR-DISPLAY [ from VANILLA-MIXIN* ] string or list of strings Determines how the name of objects of this type will be printed in most places. This defaults to the name-for-display (generally the part's name as specified in its parent), followed by an index number if the part is an element of a sequence. VISIBLE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances Additional objects to display in Tatu tree. Typically this would be a subset of hidden-children. Defaults to NIL. Input Slots (optional, defaulting) CENTER [ from BASE-OBJECT ] 3d point Indicates in global coordinates where the center of the reference box of this object should be located. DISPLAY-CONTROLS [ from BASE-OBJECT ] plist May contain keywords and values indicating display characteristics for this object.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/33/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 2,
      "chunk_count": 5
    },
    "id": "17bfefa0b107a65f81255a5357d8e248"
  },
  {
    "text": "eywords and values indicating display characteristics for this object. The following keywords are recognized currently: :color color keyword from the *color-table* parameter, or an HTML-style hexidecimal RGB string value, e.g. \"#FFFFFF\" for pure white. Defaults to :black. :line-thickness an integer, defaulting to 1, indicating relative line thickness for wireframe representations of this object. :dash-pattern (currently PDF/PNG/JPEG only). This is a list of two or three numbers which indicate the length, in pixels, of the dashes and blank spaces in a dashed line. The optional third number indicates how far into the line or curve to start the dash pattern. HEIGHT [ from BASE-OBJECT ] number Z-axis dimension of the reference box. Defaults to zero. LENGTH [ from BASE-OBJECT ] number Y-axis dimension of the reference box. Defaults to zero.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/33/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 3,
      "chunk_count": 5
    },
    "id": "1a8a47c886938fffbf0d00247bc12695"
  },
  {
    "text": "mension of the reference box. Defaults to zero. ORIENTATION [ from BASE-OBJECT ] 3x3 matrix of double-float numbers Indicates the absolute Rotation Matrix used to create the coordinate system of this object. This matrix is given in absolute terms (i.e. with respect to the root's orientation), and is generally created with the alignment function. It should be an orthonormal matrix, meaning each row is a vector with a magnitude of one (1.0). WIDTH [ from BASE-OBJECT ] number X-axis dimension of the reference box. Defaults to zero. Package Documentation Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/33/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 4,
      "chunk_count": 5
    },
    "id": "2ccf80bb5363ca028fb500be8c80044b"
  },
  {
    "text": "GendL Application - LINE Package Documentation Object: LINE (The :GEOM-BASE Package) Mixins: BASE-OBJECT Description Provides a simple way to create a line, by specifying a start point and an end point. Input Slots (required) END 3d point The end point of the line, in global coordinates. START 3d point The start point of the line, in global coordinates. Input Slots (optional) HIDDEN? [ from VANILLA-MIXIN* ] boolean Indicates whether the object should effectively be a hidden-object even if specified in :objects. Default is nil. IMAGE-FILE [ from BASE-OBJECT ] pathname or string Points to a pre-existing image file to be displayed instead of actual geometry for this object. Defaults to nil LOCAL-BOX [ from BASE-OBJECT ] list of two 3d points The left front bottom and right rear top corners, in global coordinates, of the rectangular volume bounding this geometric object.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/28/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 0,
      "chunk_count": 6
    },
    "id": "6a53f7ca3c48e28dae11187b583824f0"
  },
  {
    "text": "n global coordinates, of the rectangular volume bounding this geometric object. OBLIQUENESS [ from BASE-OBJECT ] 3x3 orthonormal matrix of double-float numbers This is synonymous with the orientation . ONCLICK-FUNCTION [ from BASE-OBJECT ] lambda function of zero arguments, or nil If non-nil, this function gets invoked when the user clicks the object in graphics front-ends which support this functionality, e.g. SVG/Raphael and X3DOM. ROOT [ from VANILLA-MIXIN* ] gdl instance The root-level node in this object's ``tree'' (instance hierarchy). SAFE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances All objects from the :objects specification, including elements of sequences as flat lists. Any children which throw errors come back as a plist with error information STRINGS-FOR-DISPLAY [ from VANILLA-MIXIN* ] string or list of strings Determines how the name of objects of this type will be printed in most places.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/28/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 1,
      "chunk_count": 6
    },
    "id": "8b3ddcb9cdd6f290a1048638ad451ddb"
  },
  {
    "text": "om VANILLA-MIXIN* ] string or list of strings Determines how the name of objects of this type will be printed in most places. This defaults to the name-for-display (generally the part's name as specified in its parent), followed by an index number if the part is an element of a sequence. VISIBLE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances Additional objects to display in Tatu tree. Typically this would be a subset of hidden-children. Defaults to NIL. Input Slots (optional, defaulting) DISPLAY-CONTROLS [ from BASE-OBJECT ] plist May contain keywords and values indicating display characteristics for this object. The following keywords are recognized currently: :color color keyword from the *color-table* parameter, or an HTML-style hexidecimal RGB string value, e.g. \"#FFFFFF\" for pure white. Defaults to :black. :line-thickness an integer, defaulting to 1, indicating relative line thickness for wireframe representations of this object.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/28/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 2,
      "chunk_count": 6
    },
    "id": "237e8423585d433c9e991f8993372714"
  },
  {
    "text": "ure white. Defaults to :black. :line-thickness an integer, defaulting to 1, indicating relative line thickness for wireframe representations of this object. :dash-pattern (currently PDF/PNG/JPEG only). This is a list of two or three numbers which indicate the length, in pixels, of the dashes and blank spaces in a dashed line. The optional third number indicates how far into the line or curve to start the dash pattern. HEIGHT [ from BASE-OBJECT ] number Z-axis dimension of the reference box. Defaults to zero. ORIENTATION [ from BASE-OBJECT ] 3x3 matrix of double-float numbers Indicates the absolute Rotation Matrix used to create the coordinate system of this object. This matrix is given in absolute terms (i.e. with respect to the root's orientation), and is generally created with the alignment function. It should be an orthonormal matrix, meaning each row is a vector with a magnitude of one (1.0). WIDTH [ from BASE-OBJECT ] number X-axis dimension of the reference box.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/28/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 3,
      "chunk_count": 6
    },
    "id": "39b5362dc465fa423b7bb10c150788c1"
  },
  {
    "text": "ent function. It should be an orthonormal matrix, meaning each row is a vector with a magnitude of one (1.0). WIDTH [ from BASE-OBJECT ] number X-axis dimension of the reference box. Defaults to zero. Computed Slots BOUNDING-BOX [ from BASE-OBJECT ] list of two 3d points The left front bottom and right rear top corners, in global coordinates, of the rectangular volume bounding the tree of geometric objects rooted at this object. CENTER 3d point The center of the line. DIRECTION-VECTOR 3d vector Points from start to end of the line. LENGTH number The distance from start to end of the line. Examples (in-package :gdl-user) (define-object line-sample (line) :computed-slots ((start (make-point -10 -10 0)) (end (make-point 10 10 0)))) (generate-sample-drawing :objects (make-object 'line-sample)) Package Documentation Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/28/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 4,
      "chunk_count": 6
    },
    "id": "377a4f221f21d14306cb7a2dd5eab05e"
  },
  {
    "text": "Package Documentation Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/28/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 5,
      "chunk_count": 6
    },
    "id": "c6b20a2ead8647ee8c54a31e4976cb90"
  },
  {
    "text": "GendL Application - BEZIER-CURVE Package Documentation Object: BEZIER-CURVE (The :GEOM-BASE Package) Mixins: BASE-OBJECT Description GDL currently supports third-degree Bezier curves, which are defined using four 3D control-points . The Bezier curve always passes through the first and last control points and lies within the convex hull of the control points. At the start point (i.e. the first control point), the curve is tangent to the vector pointing from the start point to the second control point. At the end point (i.e. the last control point), the curve is tangent to the vector pointing from the end point to the third control point. Input Slots (required) CONTROL-POINTS list of 4 3d points Specifies the control points for the Bezier curve. Input Slots (optional) HIDDEN? [ from VANILLA-MIXIN* ] boolean Indicates whether the object should effectively be a hidden-object even if specified in :objects. Default is nil.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/7/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 0,
      "chunk_count": 8
    },
    "id": "88409cc16e13957f866b1e03dd0dc20f"
  },
  {
    "text": "MIXIN* ] boolean Indicates whether the object should effectively be a hidden-object even if specified in :objects. Default is nil. IMAGE-FILE [ from BASE-OBJECT ] pathname or string Points to a pre-existing image file to be displayed instead of actual geometry for this object. Defaults to nil LOCAL-BOX [ from BASE-OBJECT ] list of two 3d points The left front bottom and right rear top corners, in global coordinates, of the rectangular volume bounding this geometric object. OBLIQUENESS [ from BASE-OBJECT ] 3x3 orthonormal matrix of double-float numbers This is synonymous with the orientation . ONCLICK-FUNCTION [ from BASE-OBJECT ] lambda function of zero arguments, or nil If non-nil, this function gets invoked when the user clicks the object in graphics front-ends which support this functionality, e.g. SVG/Raphael and X3DOM. ROOT [ from VANILLA-MIXIN* ] gdl instance The root-level node in this object's ``tree'' (instance hierarchy).",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/7/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 1,
      "chunk_count": 8
    },
    "id": "b7762eb89a60e0097c9832f3f85dae78"
  },
  {
    "text": "nality, e.g. SVG/Raphael and X3DOM. ROOT [ from VANILLA-MIXIN* ] gdl instance The root-level node in this object's ``tree'' (instance hierarchy). SAFE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances All objects from the :objects specification, including elements of sequences as flat lists. Any children which throw errors come back as a plist with error information STRINGS-FOR-DISPLAY [ from VANILLA-MIXIN* ] string or list of strings Determines how the name of objects of this type will be printed in most places. This defaults to the name-for-display (generally the part's name as specified in its parent), followed by an index number if the part is an element of a sequence. VISIBLE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances Additional objects to display in Tatu tree. Typically this would be a subset of hidden-children. Defaults to NIL.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/7/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 2,
      "chunk_count": 8
    },
    "id": "be6f91dae4ebd75f750a5a9de7f246d3"
  },
  {
    "text": "lly this would be a subset of hidden-children. Defaults to NIL. Input Slots (optional, defaulting) CENTER [ from BASE-OBJECT ] 3d point Indicates in global coordinates where the center of the reference box of this object should be located. DISPLAY-CONTROLS [ from BASE-OBJECT ] plist May contain keywords and values indicating display characteristics for this object. The following keywords are recognized currently: :color color keyword from the *color-table* parameter, or an HTML-style hexidecimal RGB string value, e.g. \"#FFFFFF\" for pure white. Defaults to :black. :line-thickness an integer, defaulting to 1, indicating relative line thickness for wireframe representations of this object. :dash-pattern (currently PDF/PNG/JPEG only). This is a list of two or three numbers which indicate the length, in pixels, of the dashes and blank spaces in a dashed line. The optional third number indicates how far into the line or curve to start the dash pattern.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/7/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 3,
      "chunk_count": 8
    },
    "id": "db500bee72e4a47ef600ac5c17052b9a"
  },
  {
    "text": "ength, in pixels, of the dashes and blank spaces in a dashed line. The optional third number indicates how far into the line or curve to start the dash pattern. HEIGHT [ from BASE-OBJECT ] number Z-axis dimension of the reference box. Defaults to zero. LENGTH [ from BASE-OBJECT ] number Y-axis dimension of the reference box. Defaults to zero. ORIENTATION [ from BASE-OBJECT ] 3x3 matrix of double-float numbers Indicates the absolute Rotation Matrix used to create the coordinate system of this object. This matrix is given in absolute terms (i.e. with respect to the root's orientation), and is generally created with the alignment function. It should be an orthonormal matrix, meaning each row is a vector with a magnitude of one (1.0). WIDTH [ from BASE-OBJECT ] number X-axis dimension of the reference box. Defaults to zero.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/7/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 4,
      "chunk_count": 8
    },
    "id": "3c3d1928524f80432ae259eae9f62c4c"
  },
  {
    "text": "eference box. Defaults to zero. Computed Slots BOUNDING-BOX [ from BASE-OBJECT ] list of two 3d points The left front bottom and right rear top corners, in global coordinates, of the rectangular volume bounding the tree of geometric objects rooted at this object. GDL Functions CIRCLE-INTERSECTION-2D list of 3d points Returns points of intersection in the Z plane between this Bezier curve and the circle in the Z plane with center center and radius radius . arguments: center 3D Point The center of the circle to be intersected radius Number The radius of the circle to be intersected keyword arguments: accuracy Number , Default Value: (* 10.0 DOUBLE-FLOAT-EPSILON) Target accuracy maximum-number-of-iterations Integer , Default Value: 30 Maximum iterations of polynomial solver LINE-INTERSECTION-2D list of 3d points Returns points of intersection in the Z plane between this Bezier curve and the infinite line containing point point and direction vector .",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/7/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 5,
      "chunk_count": 8
    },
    "id": "90acce9c9cd1325b63fe6045eb3b60a5"
  },
  {
    "text": "2D list of 3d points Returns points of intersection in the Z plane between this Bezier curve and the infinite line containing point point and direction vector . Use the between? function if you wish to establish whether the point is contained in a particular line segment. arguments: point 3D Point Any point in the line to be intersected vector 3D Vector The direction of the line to be intersected keyword arguments: accuracy Number , Default Value: (* 10.0 DOUBLE-FLOAT-EPSILON) Target accuracy maximum-number-of-iterations Integer , Default Value: 30 Maximum iterations of polynomial solver POINT 3d point Returns the point on this Bezier curve corresponding to the given parameter , which should be between 0 and 1.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/7/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 6,
      "chunk_count": 8
    },
    "id": "833d34ed9d51379544aefbecff03d403"
  },
  {
    "text": "arguments: parameter Number Curve parameter, between zero and one (0 and 1) Examples (in-package :gdl-user) (define-object bezier-sample (bezier-curve) :computed-slots ((control-points (list (make-point 0 0 0) (make-point 1 1 0) (make-point 2 1 0) (make-point 3 0 0)))) :objects ((points-display :type 'points-display :points (the control-points)))) (generate-sample-drawing :objects (let ((self (make-object 'bezier-sample))) (list self (the points-display)))) Package Documentation Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/7/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 7,
      "chunk_count": 8
    },
    "id": "9a78bfa5b1d4f32005f0ebc90433169d"
  },
  {
    "text": "GendL Application - ARCOID-MIXIN Package Documentation Object: ARCOID-MIXIN (The :GEOM-BASE Package) Mixins: VANILLA-MIXIN Description This object is a low level object used to define an arc like object. It is not recommended to be used directly by GDL common users. For developers it should be used as a mixin. Input Slots (required) RADIUS number Distance from center to any point on the arc. Input Slots (optional) END-ANGLE angle in radians End angle of the arc. Defaults to twice pi. HIDDEN? [ from VANILLA-MIXIN* ] boolean Indicates whether the object should effectively be a hidden-object even if specified in :objects. Default is nil. ROOT [ from VANILLA-MIXIN* ] gdl instance The root-level node in this object's ``tree'' (instance hierarchy). SAFE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances All objects from the :objects specification, including elements of sequences as flat lists.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/2/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 0,
      "chunk_count": 3
    },
    "id": "68d34cbd6754a1293f42a14da1ca07fa"
  },
  {
    "text": "dl instances All objects from the :objects specification, including elements of sequences as flat lists. Any children which throw errors come back as a plist with error information START-ANGLE angle in radians Start angle of the arc. Defaults to zero. STRINGS-FOR-DISPLAY [ from VANILLA-MIXIN* ] string or list of strings Determines how the name of objects of this type will be printed in most places. This defaults to the name-for-display (generally the part's name as specified in its parent), followed by an index number if the part is an element of a sequence. VISIBLE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances Additional objects to display in Tatu tree. Typically this would be a subset of hidden-children. Defaults to NIL. Package Documentation Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/2/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 1,
      "chunk_count": 3
    },
    "id": "4b244b087ab7d563c2d28afe8424e8a4"
  },
  {
    "text": "ional . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/2/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 2,
      "chunk_count": 3
    },
    "id": "f67931ed110f919fafdb7d7530bb5cdc"
  },
  {
    "text": "GendL Application - SPHERICAL-CAP Package Documentation Object: SPHERICAL-CAP (The :GEOM-BASE Package) Mixins: IFS-OUTPUT-MIXIN, ARCOID-MIXIN , BASE-OBJECT Description The region of a sphere which lies above (or below) a given plane. Although this could be created with a partial sphere using the sphere primitive, the spherical cap allows for more convenient construction and positioning since the actual center of the spherical cap is the center of its reference box. Input Slots (required) AXIS-LENGTH number The distance from the center of the base to the center of the dome. BASE-RADIUS number Radius of the base. RADIUS [ from ARCOID-MIXIN ] number Distance from center to any point on the arc. Input Slots (optional) BOUNDING-BOX [ from BASE-OBJECT ] list of two 3d points The left front bottom and right rear top corners, in global coordinates, of the rectangular volume bounding the tree of geometric objects rooted at this object.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/38/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 0,
      "chunk_count": 7
    },
    "id": "6f51f55b36208e19caa8ce9ef79bdfdb"
  },
  {
    "text": "m and right rear top corners, in global coordinates, of the rectangular volume bounding the tree of geometric objects rooted at this object. CAP-THICKNESS number Thickness of the shell for a hollow spherical-cap. Specify this or inner-base-radius, not both. HIDDEN? [ from VANILLA-MIXIN* ] boolean Indicates whether the object should effectively be a hidden-object even if specified in :objects. Default is nil. IMAGE-FILE [ from BASE-OBJECT ] pathname or string Points to a pre-existing image file to be displayed instead of actual geometry for this object. Defaults to nil INNER-BASE-RADIUS number Radius of base of inner for a hollow spherical-cap. Specify this or cap-thickness, not both. LOCAL-BOX [ from BASE-OBJECT ] list of two 3d points The left front bottom and right rear top corners, in global coordinates, of the rectangular volume bounding this geometric object. NUMBER-OF-HORIZONTAL-SECTIONS integer How many lines of latitude to show on the spherical-cap in some renderings.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/38/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 1,
      "chunk_count": 7
    },
    "id": "22cdbebdfac831ee305d2843f9033271"
  },
  {
    "text": "lobal coordinates, of the rectangular volume bounding this geometric object. NUMBER-OF-HORIZONTAL-SECTIONS integer How many lines of latitude to show on the spherical-cap in some renderings. Default value is 2. NUMBER-OF-VERTICAL-SECTIONS integer How many lines of longitude to show on the spherical-cap in some renderings. Default value is 2. OBLIQUENESS [ from BASE-OBJECT ] 3x3 orthonormal matrix of double-float numbers This is synonymous with the orientation . ONCLICK-FUNCTION [ from BASE-OBJECT ] lambda function of zero arguments, or nil If non-nil, this function gets invoked when the user clicks the object in graphics front-ends which support this functionality, e.g. SVG/Raphael and X3DOM. ROOT [ from VANILLA-MIXIN* ] gdl instance The root-level node in this object's ``tree'' (instance hierarchy). SAFE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances All objects from the :objects specification, including elements of sequences as flat lists.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/38/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 2,
      "chunk_count": 7
    },
    "id": "0c04d2d5ddb559aede4109238e56c904"
  },
  {
    "text": "hierarchy). SAFE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances All objects from the :objects specification, including elements of sequences as flat lists. Any children which throw errors come back as a plist with error information STRINGS-FOR-DISPLAY [ from VANILLA-MIXIN* ] string or list of strings Determines how the name of objects of this type will be printed in most places. This defaults to the name-for-display (generally the part's name as specified in its parent), followed by an index number if the part is an element of a sequence. VISIBLE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances Additional objects to display in Tatu tree. Typically this would be a subset of hidden-children. Defaults to NIL. Input Slots (optional, defaulting) CENTER [ from BASE-OBJECT ] 3d point Indicates in global coordinates where the center of the reference box of this object should be located.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/38/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 3,
      "chunk_count": 7
    },
    "id": "e84975aee61357eeb06c05b1e6c9c4f6"
  },
  {
    "text": "t Indicates in global coordinates where the center of the reference box of this object should be located. DISPLAY-CONTROLS [ from BASE-OBJECT ] plist May contain keywords and values indicating display characteristics for this object. The following keywords are recognized currently: :color color keyword from the *color-table* parameter, or an HTML-style hexidecimal RGB string value, e.g. \"#FFFFFF\" for pure white. Defaults to :black. :line-thickness an integer, defaulting to 1, indicating relative line thickness for wireframe representations of this object. :dash-pattern (currently PDF/PNG/JPEG only). This is a list of two or three numbers which indicate the length, in pixels, of the dashes and blank spaces in a dashed line. The optional third number indicates how far into the line or curve to start the dash pattern. ORIENTATION [ from BASE-OBJECT ] 3x3 matrix of double-float numbers Indicates the absolute Rotation Matrix used to create the coordinate system of this object.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/38/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 4,
      "chunk_count": 7
    },
    "id": "a426d850d664d721ce1e03b81772c431"
  },
  {
    "text": "to start the dash pattern. ORIENTATION [ from BASE-OBJECT ] 3x3 matrix of double-float numbers Indicates the absolute Rotation Matrix used to create the coordinate system of this object. This matrix is given in absolute terms (i.e. with respect to the root's orientation), and is generally created with the alignment function. It should be an orthonormal matrix, meaning each row is a vector with a magnitude of one (1.0). Computed Slots END-ANGLE [ from ARCOID-MIXIN ] angle in radians End angle of the arc. Defaults to twice pi. HEIGHT [ from BASE-OBJECT ] number Z-axis dimension of the reference box. Defaults to zero. LENGTH [ from BASE-OBJECT ] number Y-axis dimension of the reference box. Defaults to zero. SPHERE-CENTER 3d point Center of the sphere containing the spherical-cap. SPHERE-RADIUS number Radius of the sphere containing the spherical-cap. START-ANGLE [ from ARCOID-MIXIN ] angle in radians Start angle of the arc. Defaults to zero.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/38/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 5,
      "chunk_count": 7
    },
    "id": "98c959972ee6e0f5ebf43968a7248119"
  },
  {
    "text": "US number Radius of the sphere containing the spherical-cap. START-ANGLE [ from ARCOID-MIXIN ] angle in radians Start angle of the arc. Defaults to zero. WIDTH [ from BASE-OBJECT ] number X-axis dimension of the reference box. Defaults to zero. Examples (in-package :gdl-user) (define-object spherical-cap-sample (spherical-cap) :computed-slots ((base-radius 150) (cap-thickness 7) (axis-length (* (the base-radius) +phi+)) (number-of-vertical-sections 10) (number-of-horizontal-sections 10) (display-controls (list :color :orchid-medium :transparency 0.5)))) (generate-sample-drawing :objects (make-object 'spherical-cap-sample) :projection-direction :trimetric) Package Documentation Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/38/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 6,
      "chunk_count": 7
    },
    "id": "fd253845127e807ff4994286220224cf"
  },
  {
    "text": "GendL Application - POINT Package Documentation Object: POINT (The :GEOM-BASE Package) Mixins: SPHERE Description Visual representation of a point as a small view-independent crosshair. This means the crosshair will always appear in a ``top'' view regardless of the current view transform. The crosshair will not scale along with any zoom state unless the scale? optional input-slot is non-NIL. The default color for the crosshairs is a light grey (:grey-light-very in the *color-table*). Input Slots (optional) CROSSHAIR-LENGTH number Distance from center to end of crosshairs used to show the point. Default value is 3. END-ANGLE [ from ARCOID-MIXIN ] angle in radians End angle of the arc. Defaults to twice pi. END-HORIZONTAL-ARC [ from SPHERE ] angle in radians Ending horizontal angle for a partial sphere. Default is twice pi. END-VERTICAL-ARC [ from SPHERE ] angle in radians Ending vertical angle for a partial sphere. Default is pi/2.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/32/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 0,
      "chunk_count": 8
    },
    "id": "e83979b8e60240f64857a2232df43fa4"
  },
  {
    "text": "tial sphere. Default is twice pi. END-VERTICAL-ARC [ from SPHERE ] angle in radians Ending vertical angle for a partial sphere. Default is pi/2. HIDDEN? [ from VANILLA-MIXIN* ] boolean Indicates whether the object should effectively be a hidden-object even if specified in :objects. Default is nil. IMAGE-FILE [ from BASE-OBJECT ] pathname or string Points to a pre-existing image file to be displayed instead of actual geometry for this object. Defaults to nil INNER-RADIUS [ from SPHERE ] number Radius of inner hollow for a hollow sphere. Default is NIL, for a non-hollow sphere. LOCAL-BOX [ from BASE-OBJECT ] list of two 3d points The left front bottom and right rear top corners, in global coordinates, of the rectangular volume bounding this geometric object. NUMBER-OF-HORIZONTAL-SECTIONS [ from SPHERE ] number How many lines of latitude to show on the sphere in some renderings. Default value is 4.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/32/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 1,
      "chunk_count": 8
    },
    "id": "5a037e71eb05a38ddb104af06eba652f"
  },
  {
    "text": "rom SPHERE ] number How many lines of latitude to show on the sphere in some renderings. Default value is 4. NUMBER-OF-VERTICAL-SECTIONS [ from SPHERE ] number How many lines of longitude to show on the sphere in some renderings. Default value is 4. OBLIQUENESS [ from BASE-OBJECT ] 3x3 orthonormal matrix of double-float numbers This is synonymous with the orientation . ONCLICK-FUNCTION [ from BASE-OBJECT ] lambda function of zero arguments, or nil If non-nil, this function gets invoked when the user clicks the object in graphics front-ends which support this functionality, e.g. SVG/Raphael and X3DOM. RADIUS [ from SPHERE ] number Distance from center to any point on the sphere. ROOT [ from VANILLA-MIXIN* ] gdl instance The root-level node in this object's ``tree'' (instance hierarchy). SAFE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances All objects from the :objects specification, including elements of sequences as flat lists.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/32/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 2,
      "chunk_count": 8
    },
    "id": "84b96fb4db2b166cc4d6726bea90c23f"
  },
  {
    "text": "E-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances All objects from the :objects specification, including elements of sequences as flat lists. Any children which throw errors come back as a plist with error information SCALED? boolean Indicates whether the crosshairs drawn to represent the point are scaled along with any zoom factor applied to the display, or are fixed with respect to drawing space. The default is NIL, meaning the crosshairs will remain the same size regardless of zoom state. START-ANGLE [ from ARCOID-MIXIN ] angle in radians Start angle of the arc. Defaults to zero. START-HORIZONTAL-ARC [ from SPHERE ] angle in radians Starting horizontal angle for a partial sphere. Default is 0. START-VERTICAL-ARC [ from SPHERE ] angle in radians Starting vertical angle for a partial sphere. Default is -pi/2. STRINGS-FOR-DISPLAY [ from VANILLA-MIXIN* ] string or list of strings Determines how the name of objects of this type will be printed in most places.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/32/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 3,
      "chunk_count": 8
    },
    "id": "d311aac796b14e55ee5083720e9fdf65"
  },
  {
    "text": "al sphere. Default is -pi/2. STRINGS-FOR-DISPLAY [ from VANILLA-MIXIN* ] string or list of strings Determines how the name of objects of this type will be printed in most places. This defaults to the name-for-display (generally the part's name as specified in its parent), followed by an index number if the part is an element of a sequence. VISIBLE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances Additional objects to display in Tatu tree. Typically this would be a subset of hidden-children. Defaults to NIL. Input Slots (optional, defaulting) CENTER [ from BASE-OBJECT ] 3d point Indicates in global coordinates where the center of the reference box of this object should be located. DISPLAY-CONTROLS [ from BASE-OBJECT ] plist May contain keywords and values indicating display characteristics for this object. The following keywords are recognized currently: :color color keyword from the *color-table* parameter, or an HTML-style hexidecimal RGB string value, e.g.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/32/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 4,
      "chunk_count": 8
    },
    "id": "32de85e88ce2a5372535b022194ceb1d"
  },
  {
    "text": "stics for this object. The following keywords are recognized currently: :color color keyword from the *color-table* parameter, or an HTML-style hexidecimal RGB string value, e.g. \"#FFFFFF\" for pure white. Defaults to :black. :line-thickness an integer, defaulting to 1, indicating relative line thickness for wireframe representations of this object. :dash-pattern (currently PDF/PNG/JPEG only). This is a list of two or three numbers which indicate the length, in pixels, of the dashes and blank spaces in a dashed line. The optional third number indicates how far into the line or curve to start the dash pattern. ORIENTATION [ from BASE-OBJECT ] 3x3 matrix of double-float numbers Indicates the absolute Rotation Matrix used to create the coordinate system of this object. This matrix is given in absolute terms (i.e. with respect to the root's orientation), and is generally created with the alignment function.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/32/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 5,
      "chunk_count": 8
    },
    "id": "c40c312a1329be7729044dc00a4ec221"
  },
  {
    "text": "absolute terms (i.e. with respect to the root's orientation), and is generally created with the alignment function. It should be an orthonormal matrix, meaning each row is a vector with a magnitude of one (1.0). Computed Slots BOUNDING-BOX [ from BASE-OBJECT ] list of two 3d points The left front bottom and right rear top corners, in global coordinates, of the rectangular volume bounding the tree of geometric objects rooted at this object. Examples (in-package :gdl-user) (define-object point-sample (base-object) :objects ((bezier :type 'bezier-curve :control-points (list (make-point 0 0 0) (make-point 1 1 0) (make-point 2 1 0) (make-point 3 0 0))) (points-to-show :type 'point :sequence (:size (length (the bezier control-points))) :center (nth (the-child :index) (the bezier control-points)) :radius 0.08 :display-controls (list :color :blue)))) (generate-sample-drawing :object-roots (make-object 'point-sample)) Package Documentation Copyright \u00a9 2025 Genworks \u00ae International .",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/32/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 6,
      "chunk_count": 8
    },
    "id": "fdb4d196f7bbc9bc5d09a2594bc9efaf"
  },
  {
    "text": ":radius 0.08 :display-controls (list :color :blue)))) (generate-sample-drawing :object-roots (make-object 'point-sample)) Package Documentation Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/32/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 7,
      "chunk_count": 8
    },
    "id": "3b62a3a494318cbcfd818bdec2bfe092"
  },
  {
    "text": "GendL Application - GLOBAL-POLYGON-PROJECTION Package Documentation Object: GLOBAL-POLYGON-PROJECTION (The :GEOM-BASE Package) Mixins: IFS-OUTPUT-MIXIN, BASE-OBJECT Description A polygon ``extruded'' for a given distance along a single vector. For planar polygons, the projection vector must not be orthogonal to the normal of the plane of the polygon. The vertices and projection-vector are given in the global coordinate system, so the local center and orientation do not affect the positioning or orientation of this part. Input Slots (required) PROJECTION-DEPTH number The resultant distance from the two end faces of the extrusion. VERTEX-LIST list of 3d points The vertex list making up the polyline, same as the input for global-polyline. Input Slots (optional) HIDDEN? [ from VANILLA-MIXIN* ] boolean Indicates whether the object should effectively be a hidden-object even if specified in :objects. Default is nil.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/22/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 0,
      "chunk_count": 7
    },
    "id": "9df862b92063cf170b1caf9703889d61"
  },
  {
    "text": "boolean Indicates whether the object should effectively be a hidden-object even if specified in :objects. Default is nil. IMAGE-FILE [ from BASE-OBJECT ] pathname or string Points to a pre-existing image file to be displayed instead of actual geometry for this object. Defaults to nil LOCAL-BOX [ from BASE-OBJECT ] list of two 3d points The left front bottom and right rear top corners, in global coordinates, of the rectangular volume bounding this geometric object. OBLIQUENESS [ from BASE-OBJECT ] 3x3 orthonormal matrix of double-float numbers This is synonymous with the orientation . OFFSET keyword symbol The direction of extrusion with respect to the vertices in vertex-list and the projection-vector: :up Indicates to start from current location of vertices and move in the direction of the projection-vector. :down Indicates to start from current location of vertices and move in the direction opposite the projection-vector.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/22/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 1,
      "chunk_count": 7
    },
    "id": "b87953bcfdd2d571a47fdbb98369c88a"
  },
  {
    "text": "e projection-vector. :down Indicates to start from current location of vertices and move in the direction opposite the projection-vector. :center Indicates to start from current location of vertices and move in the direction of the projection-vector and opposite the projection-vector, going half the projection-depth in each direction. ONCLICK-FUNCTION [ from BASE-OBJECT ] lambda function of zero arguments, or nil If non-nil, this function gets invoked when the user clicks the object in graphics front-ends which support this functionality, e.g. SVG/Raphael and X3DOM. PROJECTION-VECTOR 3d vector Indicates the straight path along which the extrusion should occur. ROOT [ from VANILLA-MIXIN* ] gdl instance The root-level node in this object's ``tree'' (instance hierarchy). SAFE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances All objects from the :objects specification, including elements of sequences as flat lists.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/22/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 2,
      "chunk_count": 7
    },
    "id": "324f3a77c5d0bc108e4e09aa44284c2c"
  },
  {
    "text": "VANILLA-MIXIN* ] list of gdl instances All objects from the :objects specification, including elements of sequences as flat lists. Any children which throw errors come back as a plist with error information STRINGS-FOR-DISPLAY [ from VANILLA-MIXIN* ] string or list of strings Determines how the name of objects of this type will be printed in most places. This defaults to the name-for-display (generally the part's name as specified in its parent), followed by an index number if the part is an element of a sequence. VISIBLE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances Additional objects to display in Tatu tree. Typically this would be a subset of hidden-children. Defaults to NIL. Input Slots (optional, defaulting) CENTER [ from BASE-OBJECT ] 3d point Indicates in global coordinates where the center of the reference box of this object should be located.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/22/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 3,
      "chunk_count": 7
    },
    "id": "48017394caf8788dfdac3bdc31f686e0"
  },
  {
    "text": "where the center of the reference box of this object should be located. DISPLAY-CONTROLS [ from BASE-OBJECT ] plist May contain keywords and values indicating display characteristics for this object. The following keywords are recognized currently: :color color keyword from the *color-table* parameter, or an HTML-style hexidecimal RGB string value, e.g. \"#FFFFFF\" for pure white. Defaults to :black. :line-thickness an integer, defaulting to 1, indicating relative line thickness for wireframe representations of this object. :dash-pattern (currently PDF/PNG/JPEG only). This is a list of two or three numbers which indicate the length, in pixels, of the dashes and blank spaces in a dashed line. The optional third number indicates how far into the line or curve to start the dash pattern. HEIGHT [ from BASE-OBJECT ] number Z-axis dimension of the reference box. Defaults to zero. LENGTH [ from BASE-OBJECT ] number Y-axis dimension of the reference box. Defaults to zero.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/22/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 4,
      "chunk_count": 7
    },
    "id": "5ec9754fdcb871976334c271da01df9b"
  },
  {
    "text": "[ from BASE-OBJECT ] number Z-axis dimension of the reference box. Defaults to zero. LENGTH [ from BASE-OBJECT ] number Y-axis dimension of the reference box. Defaults to zero. ORIENTATION [ from BASE-OBJECT ] 3x3 matrix of double-float numbers Indicates the absolute Rotation Matrix used to create the coordinate system of this object. This matrix is given in absolute terms (i.e. with respect to the root's orientation), and is generally created with the alignment function. It should be an orthonormal matrix, meaning each row is a vector with a magnitude of one (1.0). WIDTH [ from BASE-OBJECT ] number X-axis dimension of the reference box. Defaults to zero. Computed Slots BOUNDING-BOX [ from BASE-OBJECT ] list of two 3d points The left front bottom and right rear top corners, in global coordinates, of the rectangular volume bounding the tree of geometric objects rooted at this object.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/22/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 5,
      "chunk_count": 7
    },
    "id": "3bf0b268e0d02d9e2996b1bb386175f0"
  },
  {
    "text": "dinates, of the rectangular volume bounding the tree of geometric objects rooted at this object. Examples (in-package :gdl-user) (define-object global-polygon-projection-sample (global-polygon-projection) :computed-slots ((display-controls (list :color :gold-old :transparency 0.3)) (projection-depth 5) (vertex-list (list (make-point 0 0 0) (make-point 10 10 0) (make-point 30 10 0) (make-point 40 0 0) (make-point 30 -10 0) (make-point 10 -10 0) (make-point 0 0 0))))) (generate-sample-drawing :objects (make-object 'global-polygon-projection-sample) :projection-direction (getf *standard-views* :trimetric)) Package Documentation Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/22/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 6,
      "chunk_count": 7
    },
    "id": "57dab979be14525acbd115dec6b47cbf"
  },
  {
    "text": "GendL Application - ROUTE-PIPE Package Documentation Object: ROUTE-PIPE (The :GEOM-BASE Package) Mixins: GLOBAL-FILLETED-POLYLINE-MIXIN , OUTLINE-SPECIALIZATION-MIXIN Description Defines an alternating set of cylinders and torus sections for the elbows Input Slots (required) OUTER-PIPE-RADIUS number Radius to the outer surface of the piping. VERTEX-LIST list of 3d points Same as for global-filleted-polyline (which is mixed in to this part) Input Slots (optional) CLOSED? [ from GLOBAL-POLYLINE-MIXIN ] boolean Controls whether the filleted-polyline should automatically be closed. DEFAULT-RADIUS [ from GLOBAL-FILLETED-POLYLINE-MIXIN ] number Specifies a radius to use for all vertices. Radius-list will take precedence over this. HIDDEN? [ from VANILLA-MIXIN* ] boolean Indicates whether the object should effectively be a hidden-object even if specified in :objects. Default is nil.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/35/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 0,
      "chunk_count": 7
    },
    "id": "df337cda13d7f8a3901d707a1defd182"
  },
  {
    "text": "ect should effectively be a hidden-object even if specified in :objects. Default is nil. IMAGE-FILE [ from BASE-OBJECT ] pathname or string Points to a pre-existing image file to be displayed instead of actual geometry for this object. Defaults to nil INNER-PIPE-RADIUS number Radius of the inner hollow part of the piping. NIL for a solid pipe. OBLIQUENESS [ from BASE-OBJECT ] 3x3 orthonormal matrix of double-float numbers This is synonymous with the orientation . ONCLICK-FUNCTION [ from BASE-OBJECT ] lambda function of zero arguments, or nil If non-nil, this function gets invoked when the user clicks the object in graphics front-ends which support this functionality, e.g. SVG/Raphael and X3DOM. RADIUS-LIST [ from GLOBAL-FILLETED-POLYLINE-MIXIN ] list of numbers Specifies the radius for each vertex (``corner'') of the filleted-polyline. ROOT [ from VANILLA-MIXIN* ] gdl instance The root-level node in this object's ``tree'' (instance hierarchy).",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/35/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 1,
      "chunk_count": 7
    },
    "id": "a4ef0d8b2c3f0f4f7e0fbee08b08f031"
  },
  {
    "text": "h vertex (``corner'') of the filleted-polyline. ROOT [ from VANILLA-MIXIN* ] gdl instance The root-level node in this object's ``tree'' (instance hierarchy). SAFE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances All objects from the :objects specification, including elements of sequences as flat lists. Any children which throw errors come back as a plist with error information STRINGS-FOR-DISPLAY [ from VANILLA-MIXIN* ] string or list of strings Determines how the name of objects of this type will be printed in most places. This defaults to the name-for-display (generally the part's name as specified in its parent), followed by an index number if the part is an element of a sequence. VISIBLE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances Additional objects to display in Tatu tree. Typically this would be a subset of hidden-children. Defaults to NIL.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/35/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 2,
      "chunk_count": 7
    },
    "id": "9e38c88fb20b5bd55f88d4fadbdc4f17"
  },
  {
    "text": "tree. Typically this would be a subset of hidden-children. Defaults to NIL. Input Slots (optional, defaulting) CENTER [ from BASE-OBJECT ] 3d point Indicates in global coordinates where the center of the reference box of this object should be located. DISPLAY-CONTROLS [ from BASE-OBJECT ] plist May contain keywords and values indicating display characteristics for this object. The following keywords are recognized currently: :color color keyword from the *color-table* parameter, or an HTML-style hexidecimal RGB string value, e.g. \"#FFFFFF\" for pure white. Defaults to :black. :line-thickness an integer, defaulting to 1, indicating relative line thickness for wireframe representations of this object. :dash-pattern (currently PDF/PNG/JPEG only). This is a list of two or three numbers which indicate the length, in pixels, of the dashes and blank spaces in a dashed line. The optional third number indicates how far into the line or curve to start the dash pattern.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/35/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 3,
      "chunk_count": 7
    },
    "id": "d22d68418267a5fa31b3ab134dab62dc"
  },
  {
    "text": "dicate the length, in pixels, of the dashes and blank spaces in a dashed line. The optional third number indicates how far into the line or curve to start the dash pattern. Computed Slots BOUNDING-BOX [ from BASE-OBJECT ] list of two 3d points The left front bottom and right rear top corners, in global coordinates, of the rectangular volume bounding the tree of geometric objects rooted at this object. HEIGHT [ from BASE-OBJECT ] number Z-axis dimension of the reference box. Defaults to zero. LENGTH [ from BASE-OBJECT ] number Y-axis dimension of the reference box. Defaults to zero. ORIENTATION [ from BASE-OBJECT ] 3x3 matrix of double-float numbers Indicates the absolute Rotation Matrix used to create the coordinate system of this object. This matrix is given in absolute terms (i.e. with respect to the root's orientation), and is generally created with the alignment function. It should be an orthonormal matrix, meaning each row is a vector with a magnitude of one (1.0).",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/35/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 4,
      "chunk_count": 7
    },
    "id": "5d268169fd751b73cf6142da66f67642"
  },
  {
    "text": "espect to the root's orientation), and is generally created with the alignment function. It should be an orthonormal matrix, meaning each row is a vector with a magnitude of one (1.0). WIDTH [ from BASE-OBJECT ] number X-axis dimension of the reference box. Defaults to zero. Examples (in-package :gdl-user) (define-object route-pipe-sample (base-object) :objects ((pipe :type 'route-pipe :vertex-list (list #(410.36 436.12 664.68) #(404.21 436.12 734.97) #(402.22 397.48 757.72) #(407.24 397.48 801.12) #(407.24 448.0 837.0) #(346.76 448.0 837.0)) :default-radius 19 :outer-pipe-radius 7 :inner-pipe-radius nil :display-controls (list :color :blue-steel :transparency 0.0 :shininess 0.7 :spectral-color :white)))) (generate-sample-drawing :objects (the-object (make-object 'route-pipe-sample) pipe) :projection-direction (getf *standard-views* :trimetric)) Package Documentation Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/35/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 5,
      "chunk_count": 7
    },
    "id": "097f9fdc58cf3e3a38948febc62bb287"
  },
  {
    "text": ":projection-direction (getf *standard-views* :trimetric)) Package Documentation Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/35/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 6,
      "chunk_count": 7
    },
    "id": "56a342bdede24a693690bc3db505c645"
  },
  {
    "text": "GendL Application - GLOBAL-FILLETED-POLYLINE-MIXIN Package Documentation Object: GLOBAL-FILLETED-POLYLINE-MIXIN (The :GEOM-BASE Package) Mixins: GLOBAL-POLYLINE-MIXIN Description Generates a polyline with the corners filleted according to default radius or the radius-list. Input Slots (required) VERTEX-LIST [ from GLOBAL-POLYLINE-MIXIN ] list of 3d points The vertices (``corners'') of the polyline. Input Slots (optional) CLOSED? [ from GLOBAL-POLYLINE-MIXIN ] boolean Controls whether the filleted-polyline should automatically be closed. DEFAULT-RADIUS number Specifies a radius to use for all vertices. Radius-list will take precedence over this. HIDDEN? [ from VANILLA-MIXIN* ] boolean Indicates whether the object should effectively be a hidden-object even if specified in :objects. Default is nil. IMAGE-FILE [ from BASE-OBJECT ] pathname or string Points to a pre-existing image file to be displayed instead of actual geometry for this object.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/21/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 0,
      "chunk_count": 6
    },
    "id": "9b723aad7c97b622d90ed4085fdeff6f"
  },
  {
    "text": "s nil. IMAGE-FILE [ from BASE-OBJECT ] pathname or string Points to a pre-existing image file to be displayed instead of actual geometry for this object. Defaults to nil LOCAL-BOX [ from BASE-OBJECT ] list of two 3d points The left front bottom and right rear top corners, in global coordinates, of the rectangular volume bounding this geometric object. OBLIQUENESS [ from BASE-OBJECT ] 3x3 orthonormal matrix of double-float numbers This is synonymous with the orientation . ONCLICK-FUNCTION [ from BASE-OBJECT ] lambda function of zero arguments, or nil If non-nil, this function gets invoked when the user clicks the object in graphics front-ends which support this functionality, e.g. SVG/Raphael and X3DOM. RADIUS-LIST list of numbers Specifies the radius for each vertex (``corner'') of the filleted-polyline. ROOT [ from VANILLA-MIXIN* ] gdl instance The root-level node in this object's ``tree'' (instance hierarchy).",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/21/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 1,
      "chunk_count": 6
    },
    "id": "45ed105455dabdf000c438888a25628f"
  },
  {
    "text": "leted-polyline. ROOT [ from VANILLA-MIXIN* ] gdl instance The root-level node in this object's ``tree'' (instance hierarchy). SAFE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances All objects from the :objects specification, including elements of sequences as flat lists. Any children which throw errors come back as a plist with error information STRINGS-FOR-DISPLAY [ from VANILLA-MIXIN* ] string or list of strings Determines how the name of objects of this type will be printed in most places. This defaults to the name-for-display (generally the part's name as specified in its parent), followed by an index number if the part is an element of a sequence. VISIBLE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances Additional objects to display in Tatu tree. Typically this would be a subset of hidden-children. Defaults to NIL.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/21/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 2,
      "chunk_count": 6
    },
    "id": "11db9669b9c9d701b18287f5ea594769"
  },
  {
    "text": "subset of hidden-children. Defaults to NIL. Input Slots (optional, defaulting) CENTER [ from BASE-OBJECT ] 3d point Indicates in global coordinates where the center of the reference box of this object should be located. DISPLAY-CONTROLS [ from BASE-OBJECT ] plist May contain keywords and values indicating display characteristics for this object. The following keywords are recognized currently: :color color keyword from the *color-table* parameter, or an HTML-style hexidecimal RGB string value, e.g. \"#FFFFFF\" for pure white. Defaults to :black. :line-thickness an integer, defaulting to 1, indicating relative line thickness for wireframe representations of this object. :dash-pattern (currently PDF/PNG/JPEG only). This is a list of two or three numbers which indicate the length, in pixels, of the dashes and blank spaces in a dashed line. The optional third number indicates how far into the line or curve to start the dash pattern.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/21/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 3,
      "chunk_count": 6
    },
    "id": "25f64d74f8a5b1b0add9478ad52a8159"
  },
  {
    "text": "the dashes and blank spaces in a dashed line. The optional third number indicates how far into the line or curve to start the dash pattern. HEIGHT [ from BASE-OBJECT ] number Z-axis dimension of the reference box. Defaults to zero. LENGTH [ from BASE-OBJECT ] number Y-axis dimension of the reference box. Defaults to zero. ORIENTATION [ from BASE-OBJECT ] 3x3 matrix of double-float numbers Indicates the absolute Rotation Matrix used to create the coordinate system of this object. This matrix is given in absolute terms (i.e. with respect to the root's orientation), and is generally created with the alignment function. It should be an orthonormal matrix, meaning each row is a vector with a magnitude of one (1.0). WIDTH [ from BASE-OBJECT ] number X-axis dimension of the reference box. Defaults to zero. Computed Slots STRAIGHTS list of pairs of 3d points Each pair represents the start and end of each straight segment of the filleted-polyline.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/21/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 4,
      "chunk_count": 6
    },
    "id": "b6b0b6d4ec472ef69e5b281cd1b83d7e"
  },
  {
    "text": "ts to zero. Computed Slots STRAIGHTS list of pairs of 3d points Each pair represents the start and end of each straight segment of the filleted-polyline. Hidden Objects (sequence) FILLETS sequence of fillets Each fillet is essentially an arc representing the curved elbow of the filleted-polyline. Package Documentation Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/21/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 5,
      "chunk_count": 6
    },
    "id": "1912f10193d9b12ef5a1a1959a59eb4b"
  },
  {
    "text": "GendL Application - ELLIPSE Package Documentation Object: ELLIPSE (The :GEOM-BASE Package) Mixins: ARCOID-MIXIN , BASE-OBJECT Description A curve which is the locus of all points in the plane the sum of whose distances from two fixed points (the foci) is a given positive constant. This is a simplified 3D ellipse which will snap to the nearest quarter if you make it a partial ellipse. For a full ellipse, do not specify start-angle or end-angle. Input Slots (required) MAJOR-AXIS-LENGTH number Length of (generally) the longer ellipse axis MINOR-AXIS-LENGTH number Length of (generally) the shorter ellipse axis RADIUS [ from ARCOID-MIXIN ] number Distance from center to any point on the arc. Input Slots (optional) BOUNDING-BOX [ from BASE-OBJECT ] list of two 3d points The left front bottom and right rear top corners, in global coordinates, of the rectangular volume bounding the tree of geometric objects rooted at this object. END-ANGLE angle in radians End angle of the ellipse.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/17/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 0,
      "chunk_count": 6
    },
    "id": "026e5c479480bd9b1e615670c8df8852"
  },
  {
    "text": "right rear top corners, in global coordinates, of the rectangular volume bounding the tree of geometric objects rooted at this object. END-ANGLE angle in radians End angle of the ellipse. Defaults to 2pi for full ellipse. HIDDEN? [ from VANILLA-MIXIN* ] boolean Indicates whether the object should effectively be a hidden-object even if specified in :objects. Default is nil. IMAGE-FILE [ from BASE-OBJECT ] pathname or string Points to a pre-existing image file to be displayed instead of actual geometry for this object. Defaults to nil LOCAL-BOX [ from BASE-OBJECT ] list of two 3d points The left front bottom and right rear top corners, in global coordinates, of the rectangular volume bounding this geometric object. OBLIQUENESS [ from BASE-OBJECT ] 3x3 orthonormal matrix of double-float numbers This is synonymous with the orientation .",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/17/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 1,
      "chunk_count": 6
    },
    "id": "24fce444dd9b09e99c0d9d6baa1847d6"
  },
  {
    "text": "ers This is synonymous with the orientation . ONCLICK-FUNCTION [ from BASE-OBJECT ] lambda function of zero arguments, or nil If non-nil, this function gets invoked when the user clicks the object in graphics front-ends which support this functionality, e.g. SVG/Raphael and X3DOM. ROOT [ from VANILLA-MIXIN* ] gdl instance The root-level node in this object's ``tree'' (instance hierarchy). SAFE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances All objects from the :objects specification, including elements of sequences as flat lists. Any children which throw errors come back as a plist with error information START-ANGLE angle in radians Start angle of the ellipse. Defaults to 0 for full ellipse. STRINGS-FOR-DISPLAY [ from VANILLA-MIXIN* ] string or list of strings Determines how the name of objects of this type will be printed in most places.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/17/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 2,
      "chunk_count": 6
    },
    "id": "b92d1f28a9996ea34af36809b43b4f34"
  },
  {
    "text": "me of objects of this type will be printed in most places. This defaults to the name-for-display (generally the part's name as specified in its parent), followed by an index number if the part is an element of a sequence. VISIBLE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances Additional objects to display in Tatu tree. Typically this would be a subset of hidden-children. Defaults to NIL. Input Slots (optional, defaulting) CENTER [ from BASE-OBJECT ] 3d point Indicates in global coordinates where the center of the reference box of this object should be located. DISPLAY-CONTROLS [ from BASE-OBJECT ] plist May contain keywords and values indicating display characteristics for this object. The following keywords are recognized currently: :color color keyword from the *color-table* parameter, or an HTML-style hexidecimal RGB string value, e.g. \"#FFFFFF\" for pure white. Defaults to :black.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/17/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 3,
      "chunk_count": 6
    },
    "id": "a77a1b13b2809729309e3a07014abd44"
  },
  {
    "text": "meter, or an HTML-style hexidecimal RGB string value, e.g. \"#FFFFFF\" for pure white. Defaults to :black. :line-thickness an integer, defaulting to 1, indicating relative line thickness for wireframe representations of this object. :dash-pattern (currently PDF/PNG/JPEG only). This is a list of two or three numbers which indicate the length, in pixels, of the dashes and blank spaces in a dashed line. The optional third number indicates how far into the line or curve to start the dash pattern. ORIENTATION [ from BASE-OBJECT ] 3x3 matrix of double-float numbers Indicates the absolute Rotation Matrix used to create the coordinate system of this object. This matrix is given in absolute terms (i.e. with respect to the root's orientation), and is generally created with the alignment function. It should be an orthonormal matrix, meaning each row is a vector with a magnitude of one (1.0). Computed Slots HEIGHT [ from BASE-OBJECT ] number Z-axis dimension of the reference box. Defaults to zero.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/17/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 4,
      "chunk_count": 6
    },
    "id": "04bc8897b521dc92713cae83c61c23cf"
  },
  {
    "text": "hould be an orthonormal matrix, meaning each row is a vector with a magnitude of one (1.0). Computed Slots HEIGHT [ from BASE-OBJECT ] number Z-axis dimension of the reference box. Defaults to zero. LENGTH [ from BASE-OBJECT ] number Y-axis dimension of the reference box. Defaults to zero. WIDTH [ from BASE-OBJECT ] number X-axis dimension of the reference box. Defaults to zero. Examples (in-package :gdl-user) (define-object ellipse-sample (ellipse) :computed-slots ((minor-axis-length 10) (major-axis-length (* (the minor-axis-length) +phi+)) (start-angle 0) (end-angle pi))) (generate-sample-drawing :objects (make-object 'ellipse-sample)) Package Documentation Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/17/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 5,
      "chunk_count": 6
    },
    "id": "319565b55f791ee9ec52d9b2718dbe3e"
  },
  {
    "text": "GendL Application - LINEAR-DIMENSION Package Documentation Object: LINEAR-DIMENSION (The :GEOM-BASE Package) Mixins: OUTLINE-SPECIALIZATION-MIXIN, BASE-OBJECT Description Creates a dimension along either the horizontal, vertical, or an arbitray axis. Use horizontal-dimension , vertical-dimension , or parallel-dimension , respectively, to achieve these. Input Slots (required) BASE-PLANE-NORMAL Must be specified in the subclass except for angular END-POINT 3d point Actual point where the dimension will stop measuring LEADER-DIRECTION-1-VECTOR Must be specified in the subclass except for angular LEADER-DIRECTION-2-VECTOR Must be specified in the subclass except for angular START-POINT 3d point Actual point where the dimension will start measuring WITNESS-DIRECTION-VECTOR Must be specified in the subclass except for angular Input Slots (optional) ARROWHEAD-LENGTH length (from tip to tail) of arrowhead glyph Defaults to twice the arrowhead-width ARROWHEAD-STYLE keyword symbol Style for",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/29/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 0,
      "chunk_count": 11
    },
    "id": "2c10a6cb05a395534102b7a073dfe298"
  },
  {
    "text": "the subclass except for angular Input Slots (optional) ARROWHEAD-LENGTH length (from tip to tail) of arrowhead glyph Defaults to twice the arrowhead-width ARROWHEAD-STYLE keyword symbol Style for arrowhead on end of leader-line . Currently supported values are :none , :wedge (the Default), and :double-wedge . ARROWHEAD-STYLE-2 keyword symbol Style for arrowhead on end of leader-line . Currently supported values are :none (the Default), :wedge , and :double-wedge . ARROWHEAD-WIDTH width of arrowhead glyph Defaults to half the character-size. BOUNDING-BOX [ from BASE-OBJECT ] list of two 3d points The left front bottom and right rear top corners, in global coordinates, of the rectangular volume bounding the tree of geometric objects rooted at this object. CHARACTER-SIZE number Size (glyph height) of the label text, in model units. Defaults to 1. DIM-TEXT string Determines the text which shows up as the dimension label.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/29/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 1,
      "chunk_count": 11
    },
    "id": "e08c45520c19c903a64cee6de0b2b36e"
  },
  {
    "text": "ight) of the label text, in model units. Defaults to 1. DIM-TEXT string Determines the text which shows up as the dimension label. Defaults to the dim-value, which is computed specially in each specific dimension type. DIM-TEXT-BIAS keyword symbol, :start, :end, or :center Indicates where to position the text in the case when outside-leaders? is non-nil. Defaults to :center DIM-TEXT-START 3d point Determines where the text will start. Defaults to halfway between start-point and end-point. DIM-TEXT-START-OFFSET 3d vector (normally only 2d are used) . The dim-text-start is offset by this vector, in model space. Defaults to #(0.0 0.0 0.0) DIM-VALUE number 2D distance relative to the base-plane-normal. Can be over-ridden in the subclass DXF-FONT string This names the DXF font for this general-note. Defaults to (the font) . DXF-OFFSET number The start of text will be offset by this amount for DXF output. Default is 2.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/29/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 2,
      "chunk_count": 11
    },
    "id": "c8ac94569fd37c14aeea1f07f56b3afe"
  },
  {
    "text": "note. Defaults to (the font) . DXF-OFFSET number The start of text will be offset by this amount for DXF output. Default is 2. DXF-SIZE-RATIO number The scale factor for DXF character size vs PDF character size. Default is 0.8 DXF-TEXT-X-SCALE number in percentage Adjusts the character width for DXF output. Defaults to the text-x-scale. FLIP-LEADERS? boolean Indicates which direction the witness lines should take from the start and end points. The Default is NIL, which indicates :rear (i.e. ``up'') for horizontal-dimensions and :right for vertical-dimensions FONT string naming a standard pdf font Font for the label text. Defaults to \"Helvetica\" FULL-LEADER-LINE-LENGTH number Indicates the length of the full leader when outside-leaders? is nil. This defaults to nil, which indicates that the full-leader's length should be auto-computed based on the given start-point and end-point.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/29/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 3,
      "chunk_count": 11
    },
    "id": "60b8da8d65ee212b0ee305ea850446e3"
  },
  {
    "text": "full-leader's length should be auto-computed based on the given start-point and end-point. HIDDEN? [ from VANILLA-MIXIN* ] boolean Indicates whether the object should effectively be a hidden-object even if specified in :objects. Default is nil. IMAGE-FILE [ from BASE-OBJECT ] pathname or string Points to a pre-existing image file to be displayed instead of actual geometry for this object. Defaults to nil JUSTIFICATION keyword symbol, :left, :right, or :center . For multi-line dim-text, this justification is applied. LEADER-1? boolean Indicates whether the first (or only) leader line should be displayed. The Default is T LEADER-2? boolean Indicates whether the second leader line should be displayed.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/29/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 4,
      "chunk_count": 11
    },
    "id": "67648f211c8571bdac3a55e6df2768d2"
  },
  {
    "text": "The Default is T LEADER-LINE-LENGTH number Indicates the length of the first leader for the case when outside-leaders? is non-NIL LEADER-LINE-LENGTH-2 number Indicates the length of the second leader for the case when outside-leaders? is non-NIL LEADER-TEXT-GAP number Amount of gap between leader lines and dimension text, when the dimension text is within the leader. Defaults to half the character-size. OBLIQUENESS [ from BASE-OBJECT ] 3x3 orthonormal matrix of double-float numbers This is synonymous with the orientation . ONCLICK-FUNCTION [ from BASE-OBJECT ] lambda function of zero arguments, or nil If non-nil, this function gets invoked when the user clicks the object in graphics front-ends which support this functionality, e.g. SVG/Raphael and X3DOM. ORIENTATION [ from BASE-OBJECT ] 3x3 matrix of double-float numbers Indicates the absolute Rotation Matrix used to create the coordinate system of this object. This matrix is given in absolute terms (i.e.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/29/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 5,
      "chunk_count": 11
    },
    "id": "6d2bb5b06216c99180357d1d3d45a38b"
  },
  {
    "text": "x3 matrix of double-float numbers Indicates the absolute Rotation Matrix used to create the coordinate system of this object. This matrix is given in absolute terms (i.e. with respect to the root's orientation), and is generally created with the alignment function. It should be an orthonormal matrix, meaning each row is a vector with a magnitude of one (1.0). OUTLINE-SHAPE-TYPE keyword symbol Currently can be :bubble, :rectangle, or :none. Default is :none. OUTSIDE-LEADERS-LENGTH-FACTOR number Indicates the default length of the outside-leaders as a multiple of arrowhead-length. Defaults to 3. OUTSIDE-LEADERS? boolean Indicates whether the leader line(s) should be inside or outside the interval between the start and end points. The default is NIL, which indicates that the leader line(s) should be inside the interval ROOT [ from VANILLA-MIXIN* ] gdl instance The root-level node in this object's ``tree'' (instance hierarchy).",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/29/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 6,
      "chunk_count": 11
    },
    "id": "4e6ba5e399a07c68c66a5d0992f5c9ca"
  },
  {
    "text": "ould be inside the interval ROOT [ from VANILLA-MIXIN* ] gdl instance The root-level node in this object's ``tree'' (instance hierarchy). SAFE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances All objects from the :objects specification, including elements of sequences as flat lists. Any children which throw errors come back as a plist with error information STRINGS-FOR-DISPLAY [ from VANILLA-MIXIN* ] string or list of strings Determines how the name of objects of this type will be printed in most places. This defaults to the name-for-display (generally the part's name as specified in its parent), followed by an index number if the part is an element of a sequence. TEXT-ABOVE-LEADER? boolean Indicates whether the text is to the right or above the leader line, rather than in-line with it. Default is T.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/29/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 7,
      "chunk_count": 11
    },
    "id": "00c701755a4fe140c1b82999df44c564"
  },
  {
    "text": "it. Default is T. TEXT-ALONG-AXIS? boolean Where applicable, determines whether text direction follows leader-line direction TEXT-X-SCALE number in percentage Adjusts the character width for the dimension-text and currently only applies only to PDF output UNDERLINE? GDL VIEW-REFERENCE-OBJECT gdl object or nil View object which will use this dimension. Defaults to NIL. VISIBLE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances Additional objects to display in Tatu tree. Typically this would be a subset of hidden-children. Defaults to NIL. WITNESS-LINE-2? boolean Indicates whether to display a witness line coming off the end-point . Default is T WITNESS-LINE-EXT number Distance the witness line(s) extend beyond the leader line. Default is 0.3 WITNESS-LINE-GAP number Distance from the start-point and end-point to the start of each witness-line.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/29/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 8,
      "chunk_count": 11
    },
    "id": "0be86f51c88b1b5ae3d2e549e8b403b2"
  },
  {
    "text": "rt-point and end-point to the start of each witness-line. Default is 0.1 WITNESS-LINE-LENGTH number Length of the witness lines (or of the shorter witness line in case they are different lengths) WITNESS-LINE? boolean Indicates whether to display a witness line coming off the start-point . Default is T Input Slots (optional, defaulting) CENTER [ from BASE-OBJECT ] 3d point Indicates in global coordinates where the center of the reference box of this object should be located. DISPLAY-CONTROLS [ from BASE-OBJECT ] plist May contain keywords and values indicating display characteristics for this object. The following keywords are recognized currently: :color color keyword from the *color-table* parameter, or an HTML-style hexidecimal RGB string value, e.g. \"#FFFFFF\" for pure white. Defaults to :black. :line-thickness an integer, defaulting to 1, indicating relative line thickness for wireframe representations of this object. :dash-pattern (currently PDF/PNG/JPEG only).",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/29/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 9,
      "chunk_count": 11
    },
    "id": "88f17285371d2318e71ad0ea92754256"
  },
  {
    "text": "o :black. :line-thickness an integer, defaulting to 1, indicating relative line thickness for wireframe representations of this object. :dash-pattern (currently PDF/PNG/JPEG only). This is a list of two or three numbers which indicate the length, in pixels, of the dashes and blank spaces in a dashed line. The optional third number indicates how far into the line or curve to start the dash pattern. HEIGHT [ from BASE-OBJECT ] number Z-axis dimension of the reference box. Defaults to zero. LENGTH [ from BASE-OBJECT ] number Y-axis dimension of the reference box. Defaults to zero. WIDTH [ from BASE-OBJECT ] number X-axis dimension of the reference box. Defaults to zero. Package Documentation Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/29/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 10,
      "chunk_count": 11
    },
    "id": "97bd33b75730c704a42232ffff9140c2"
  },
  {
    "text": "GendL Application - BASE-OBJECT Package Documentation Object: BASE-OBJECT (The :GEOM-BASE Package) Mixins: VANILLA-MIXIN Description Base-Object is a superclass of most of GDL's geometric primitives. It provides an imaginary geometric reference box with a length, width, height, center, and orientation. Input Slots (optional) BOUNDING-BOX list of two 3d points The left front bottom and right rear top corners, in global coordinates, of the rectangular volume bounding the tree of geometric objects rooted at this object. HIDDEN? [ from VANILLA-MIXIN* ] boolean Indicates whether the object should effectively be a hidden-object even if specified in :objects. Default is nil. IMAGE-FILE pathname or string Points to a pre-existing image file to be displayed instead of actual geometry for this object. Defaults to nil LOCAL-BOX list of two 3d points The left front bottom and right rear top corners, in global coordinates, of the rectangular volume bounding this geometric object.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/5/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 0,
      "chunk_count": 12
    },
    "id": "e68dea2d1fe0baf2089c5cdcdb9ff9e2"
  },
  {
    "text": "t. Defaults to nil LOCAL-BOX list of two 3d points The left front bottom and right rear top corners, in global coordinates, of the rectangular volume bounding this geometric object. OBLIQUENESS 3x3 orthonormal matrix of double-float numbers This is synonymous with the orientation . ONCLICK-FUNCTION lambda function of zero arguments, or nil If non-nil, this function gets invoked when the user clicks the object in graphics front-ends which support this functionality, e.g. SVG/Raphael and X3DOM. ROOT [ from VANILLA-MIXIN* ] gdl instance The root-level node in this object's ``tree'' (instance hierarchy). SAFE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances All objects from the :objects specification, including elements of sequences as flat lists. Any children which throw errors come back as a plist with error information STRINGS-FOR-DISPLAY [ from VANILLA-MIXIN* ] string or list of strings Determines how the name of objects of this type will be printed in most places.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/5/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 1,
      "chunk_count": 12
    },
    "id": "22577b42f41456a8a980990184ba0a4d"
  },
  {
    "text": "k as a plist with error information STRINGS-FOR-DISPLAY [ from VANILLA-MIXIN* ] string or list of strings Determines how the name of objects of this type will be printed in most places. This defaults to the name-for-display (generally the part's name as specified in its parent), followed by an index number if the part is an element of a sequence. VISIBLE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances Additional objects to display in Tatu tree. Typically this would be a subset of hidden-children. Defaults to NIL. Input Slots (optional, defaulting) CENTER 3d point Indicates in global coordinates where the center of the reference box of this object should be located. DISPLAY-CONTROLS plist May contain keywords and values indicating display characteristics for this object. The following keywords are recognized currently: :color color keyword from the *color-table* parameter, or an HTML-style hexidecimal RGB string value, e.g. \"#FFFFFF\" for pure white. Defaults to :black.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/5/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 2,
      "chunk_count": 12
    },
    "id": "7e20b221bf1a120d1a8fdbc052279b14"
  },
  {
    "text": "g keywords are recognized currently: :color color keyword from the *color-table* parameter, or an HTML-style hexidecimal RGB string value, e.g. \"#FFFFFF\" for pure white. Defaults to :black. :line-thickness an integer, defaulting to 1, indicating relative line thickness for wireframe representations of this object. :dash-pattern (currently PDF/PNG/JPEG only). This is a list of two or three numbers which indicate the length, in pixels, of the dashes and blank spaces in a dashed line. The optional third number indicates how far into the line or curve to start the dash pattern. HEIGHT number Z-axis dimension of the reference box. Defaults to zero. LENGTH number Y-axis dimension of the reference box. Defaults to zero. ORIENTATION 3x3 matrix of double-float numbers Indicates the absolute Rotation Matrix used to create the coordinate system of this object. This matrix is given in absolute terms (i.e.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/5/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 3,
      "chunk_count": 12
    },
    "id": "8adc0f3bfebd0c867f5835e5df172dfc"
  },
  {
    "text": "n Matrix used to create the coordinate system of this object. This matrix is given in absolute terms (i.e. with respect to the root's orientation), and is generally created with the alignment function. It should be an orthonormal matrix, meaning each row is a vector with a magnitude of one (1.0). WIDTH number X-axis dimension of the reference box. Defaults to zero. Computed Slots COLOR-DECIMAL vector of three real numbers The RBG color of this object specified in :display-controls. Defaults to the foreground color specified in *colors-default* . This message should not normally be overridden in user application code. LOCAL-CENTER 3d point The center of this object, from the perspective of the parent. Starting from the parent's center and using the parent's orientation, this is the relative center of this object. LOCAL-CENTER* 3d point The center of this object, from the perspective of the parent.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/5/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 4,
      "chunk_count": 12
    },
    "id": "40b1ccea6aecaf98c24f1777c8459dcd"
  },
  {
    "text": "center of this object. LOCAL-CENTER* 3d point The center of this object, from the perspective of the parent. Starting from the parent's center and using the parent's orientation, this is the relative center of this object. LOCAL-ORIENTATION 3x3 matrix of double-float numbers Indicates the local Rotation Matrix used to create the coordinate system of this object. This is the ``local'' orientation with respect to the parent. Multiplying the parent's orientation with this matrix will always result in the absolute orientation for this part. note: An orientation of NIL indicates the 3x3 identity matrix. Hidden Objects BOUNDING-BBOX gdl object of type box A box representing the bounding-box. LOCAL-BBOX gdl object of type box A box representing the local-box. GDL Functions AXIS-VECTOR 3d vector Returns the vector pointing in the positive direction of the specified axis of this object's reference box.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/5/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 5,
      "chunk_count": 12
    },
    "id": "4055f2ebe986b868c20ca065c2685cfc"
  },
  {
    "text": "Returns the vector pointing in the positive direction of the specified axis of this object's reference box. arguments: axis Keyword One of the standard axis keywords: :lateral, :longitudinal, :vertical EDGE-CENTER 3d point Returns the center of the requested edge of this object's reference box. arguments: direction-1 Keyword One of the standard direction keywords: :right, :left, :rear, :front, :top, :bottom direction-2 Keyword A standard direction keyword orthogonal to direction-1 FACE-CENTER 3d point Returns the center of the requested face (the requested face with respect to the `wrt` argument if present, or self if `wrt` is nil) of this object's reference box. arguments: direction Keyword One of the standard direction keywords: :right, :left, :rear, :front, :top, :bottom FACE-NORMAL-VECTOR 3d vector Returns the vector pointing from this object's reference box center to its requested face-center.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/5/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 6,
      "chunk_count": 12
    },
    "id": "ebec3318c90a7285e4e848b6c233e428"
  },
  {
    "text": "TOR 3d vector Returns the vector pointing from this object's reference box center to its requested face-center. arguments: direction Keyword One of the standard direction keywords: :right, :left, :rear, :front, :top, :bottom FACE-VERTICES list of four 3d points Returns the vertices of the indicated face. arguments: direction Direction keyword, e g. :top, :bottom etc. Indicates for which face to return the vertices GLOBAL-TO-LOCAL 3d-point This function returns the point given in global coordinates, into relative local coordinates, based on the orientation and center of the object to which the global-to-local message is sent. arguments: point 3D-point The point to be converted to local coordinates examples: Please see the examples area. IN-FACE? boolean Returns non-nil if the given point is in halfspace defined by the plane given a point and direction.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/5/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 7,
      "chunk_count": 12
    },
    "id": "b58b2f4e24d59c36394a4e7638a45e55"
  },
  {
    "text": "in halfspace defined by the plane given a point and direction. arguments: point 3D point a point in the plane direction 3D vector The normal of the plane LINE-INTERSECTION-POINTS list of 3d points Returns the points of intersection between given line and the reference box of this object. arguments: p-line 3D point A point in the line u-line 3D vector The direction vector of the line LOCAL-TO-GLOBAL 3d-point This function returns the point given in relative local coordinates, converted into global coordinates, based on the orientation and center of the object to which the local-to-global message is sent. arguments: point 3D-point The local point to be converted to global coordinates examples: Please see the examples area. VERTEX 3d point Returns the center of the requested vertex (corner) of this object's reference box.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/5/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 8,
      "chunk_count": 12
    },
    "id": "1afc81b5ba430402a44e85ed5ba7a4e0"
  },
  {
    "text": "of this object's reference box. arguments: direction-1 Keyword One of the standard direction keywords: :right, :left, :rear, :front, :top, :bottom direction-2 Keyword A standard direction keyword orthogonal to direction-1 direction-3 Keyword A standard direction keyword orthogonal to direction-1 and direction-2 Examples (in-package :gdl-user) (define-object tower (base-object) :input-slots ((number-of-blocks 50) (twist-per-block 1) (block-height 1) (block-width 5) (block-length 7)) :objects ((blocks :type 'box :sequence (:size (the number-of-blocks)) :center (translate (the center) :up (* (the-child index) (the-child height))) :width (the block-width) :height (the block-height) :length (the block-length) :orientation (alignment :rear (if (the-child first?) (rotate-vector-d (the (face-normal-vector :rear)) (the twist-per-block) (the (face-normal-vector :top))) (rotate-vector-d (the-child previous (face-normal-vector :rear)) (the twist-per-block) (the (face-normal-vector :top)))) :top",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/5/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 9,
      "chunk_count": 12
    },
    "id": "b943ac5bb88603628587d7a1b6a12058"
  },
  {
    "text": "l-vector :rear)) (the twist-per-block) (the (face-normal-vector :top))) (rotate-vector-d (the-child previous (face-normal-vector :rear)) (the twist-per-block) (the (face-normal-vector :top)))) :top (the (face-normal-vector :top)))))) ;; ;;Test run ;; #| gdl-user(46): (setq self (make-object 'tower)) #tower @ #x750666f2 gdl-user(47): (setq test-center (the (blocks 10) center)) #(0.0 0.0 10.0) gdl-user(48): (the (blocks 10) (global-to-local test-center)) #(0.0 0.0 0.0) gdl-user(49): (the (blocks 10) (local-to-global (the (blocks 10) (global-to-local test-center)))) #(0.0 0.0 10.0) gdl-user(50): gdl-user(50): (setq test-vertex (the (blocks 10) (vertex :top :right :rear))) #(1.7862364748012536 3.9127176305081863 10.5) gdl-user(51): (the (blocks 10) (global-to-local test-vertex)) #(2.500000000000001 3.500000000000001 0.5) gdl-user(52): (the (blocks 10) (local-to-global (the (blocks 10) (global-to-local test-vertex)))) #(1.786236474801254 3.9127176305081877 10.5) gdl-user(53): |# ;; ;; ;",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/5/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 10,
      "chunk_count": 12
    },
    "id": "ada7d92ef053d251c17a0558cd8ee651"
  },
  {
    "text": "00001 3.500000000000001 0.5) gdl-user(52): (the (blocks 10) (local-to-global (the (blocks 10) (global-to-local test-vertex)))) #(1.786236474801254 3.9127176305081877 10.5) gdl-user(53): |# ;; ;; ;; Package Documentation Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/5/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 11,
      "chunk_count": 12
    },
    "id": "98559807db71a428588fe467e9f5e0c5"
  },
  {
    "text": "GendL Application - GENERAL-NOTE Package Documentation Object: GENERAL-NOTE (The :GEOM-BASE Package) Mixins: OUTLINE-SPECIALIZATION-MIXIN, BASE-OBJECT Description Creates a text note in the graphical view port and in a PDF DXF output file. Input Slots (optional) BOUNDING-BOX [ from BASE-OBJECT ] list of two 3d points The left front bottom and right rear top corners, in global coordinates, of the rectangular volume bounding the tree of geometric objects rooted at this object. CENTER 3d-point Center of the text. Specify this or start, not both. note: that the center is no longer defaulting (so that it can self-compute properly when start is specified), so it is necessary to explicitly give either start or center for general-note. CHARACTER-SIZE number Specifies the character size in drawing units. DXF-FONT string This names the DXF font for this general-note. Defaults to (the font) . DXF-OFFSET number The start of text will be offset by this amount for DXF output. Default is 0.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/18/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 0,
      "chunk_count": 8
    },
    "id": "faa85dc111eae971cf1c51dd84758944"
  },
  {
    "text": "units. DXF-FONT string This names the DXF font for this general-note. Defaults to (the font) . DXF-OFFSET number The start of text will be offset by this amount for DXF output. Default is 0. DXF-SIZE-RATIO number The scale factor for DXF character size vs PDF character size. Default is 0.8 DXF-TEXT-X-SCALE number in percentage Adjusts the character width for DXF output. Defaults to the text-x-scale. FONT string The font for PDF. Possibilities for built-in PDF fonts are: courier courier-bold courier-boldoblique courier-oblique helvetica helvetica-bold helvetica-boldoblique helvetica-oblique symbol times-roman times-bold times-bolditalic times-italic zapfdingbats Defaults to \"Courier\". HEIGHT [ from BASE-OBJECT ] number Z-axis dimension of the reference box. Defaults to zero. HIDDEN? [ from VANILLA-MIXIN* ] boolean Indicates whether the object should effectively be a hidden-object even if specified in :objects. Default is nil.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/18/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 1,
      "chunk_count": 8
    },
    "id": "9e643cf1f1a37b2052fc0ed5da5741b4"
  },
  {
    "text": "VANILLA-MIXIN* ] boolean Indicates whether the object should effectively be a hidden-object even if specified in :objects. Default is nil. IMAGE-FILE [ from BASE-OBJECT ] pathname or string Points to a pre-existing image file to be displayed instead of actual geometry for this object. Defaults to nil JUSTIFICATION keyword symbol, :left, :right, or :center Justifies text with its box. Default is :left. LEADING number Space between lines of text. Default is 1.2 times the character size. LENGTH [ from BASE-OBJECT ] number Y-axis dimension of the reference box. Defaults to zero. OBLIQUENESS [ from BASE-OBJECT ] 3x3 orthonormal matrix of double-float numbers This is synonymous with the orientation . ONCLICK-FUNCTION [ from BASE-OBJECT ] lambda function of zero arguments, or nil If non-nil, this function gets invoked when the user clicks the object in graphics front-ends which support this functionality, e.g. SVG/Raphael and X3DOM.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/18/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 2,
      "chunk_count": 8
    },
    "id": "c36051522beff490148577d36874d50f"
  },
  {
    "text": "function gets invoked when the user clicks the object in graphics front-ends which support this functionality, e.g. SVG/Raphael and X3DOM. OUTLINE-SHAPE-TYPE keyword symbol Currently can be :bubble, :rectangle, or :none. Default is :none. ROOT [ from VANILLA-MIXIN* ] gdl instance The root-level node in this object's ``tree'' (instance hierarchy). SAFE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances All objects from the :objects specification, including elements of sequences as flat lists. Any children which throw errors come back as a plist with error information START 3d-point Start of the text. Specify this or center, not both. STRINGS list of strings The text to be displayed in the note. STRINGS-FOR-DISPLAY [ from VANILLA-MIXIN* ] string or list of strings Determines how the name of objects of this type will be printed in most places.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/18/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 3,
      "chunk_count": 8
    },
    "id": "4a9101d1fdc70a9f6975b4a6261c4a57"
  },
  {
    "text": "e of objects of this type will be printed in most places. This defaults to the name-for-display (generally the part's name as specified in its parent), followed by an index number if the part is an element of a sequence. TEXT-X-SCALE number in percentage Adjusts the character width for PDF output. Defaults to 100. UNDERLINE? boolean Determines whether text is underlined. VISIBLE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances Additional objects to display in Tatu tree. Typically this would be a subset of hidden-children. Defaults to NIL. WIDTH number Determines the width of the containing box. Default is the maximum-text-width. Input Slots (optional, defaulting) DISPLAY-CONTROLS [ from BASE-OBJECT ] plist May contain keywords and values indicating display characteristics for this object. The following keywords are recognized currently: :color color keyword from the *color-table* parameter, or an HTML-style hexidecimal RGB string value, e.g. \"#FFFFFF\" for pure white.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/18/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 4,
      "chunk_count": 8
    },
    "id": "d2235ab39a8b756548fd138992c5e0dd"
  },
  {
    "text": "ject. The following keywords are recognized currently: :color color keyword from the *color-table* parameter, or an HTML-style hexidecimal RGB string value, e.g. \"#FFFFFF\" for pure white. Defaults to :black. :line-thickness an integer, defaulting to 1, indicating relative line thickness for wireframe representations of this object. :dash-pattern (currently PDF/PNG/JPEG only). This is a list of two or three numbers which indicate the length, in pixels, of the dashes and blank spaces in a dashed line. The optional third number indicates how far into the line or curve to start the dash pattern. ORIENTATION [ from BASE-OBJECT ] 3x3 matrix of double-float numbers Indicates the absolute Rotation Matrix used to create the coordinate system of this object. This matrix is given in absolute terms (i.e. with respect to the root's orientation), and is generally created with the alignment function. It should be an orthonormal matrix, meaning each row is a vector with a magnitude of one (1.0).",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/18/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 5,
      "chunk_count": 8
    },
    "id": "6294c1b835a2e0b78a47b873625ccb78"
  },
  {
    "text": ".e. with respect to the root's orientation), and is generally created with the alignment function. It should be an orthonormal matrix, meaning each row is a vector with a magnitude of one (1.0). Computed Slots MAXIMUM-TEXT-WIDTH number Convienence computation giving the maximum input width required to keep one line per string Examples (in-package :gdl-user) (define-object general-note-test (base-object) :computed-slots ((blocks-note (list \"David Brown\" \"Created by\" \"ABC 2\" \"Jane Smith\" \"Approved by\" \"CCD 2\")) (blocks-center (list '(-15 5 0) '(-40 5 0) '(-55 5 0) '(-15 15 0) '(-40 15 0) '(-55 15 0))) (blocks-width (list 30 20 10 30 20 10))) :objects ((title-block :type 'box :sequence (:size (length (the blocks-center))) :display-controls (list :color :red) :center (apply-make-point (nth (the-child index ) (the blocks-center))) :length 10 :width (nth (the-child index ) (the blocks-width)) :height 0) (general-note-sample :type 'general-note :sequence (:size (length (the blocks-note)))",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/18/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 6,
      "chunk_count": 8
    },
    "id": "229412f6599e074db941a69d4ee5eabf"
  },
  {
    "text": "e-child index ) (the blocks-center))) :length 10 :width (nth (the-child index ) (the blocks-width)) :height 0) (general-note-sample :type 'general-note :sequence (:size (length (the blocks-note))) :center (the (title-block (the-child index)) center) :character-size 2.5 :strings (nth (the-child index) (the blocks-note))))) (generate-sample-drawing :objects (list-elements (make-object 'general-note-test)) :projection-direction (getf *standard-views* :top)) Package Documentation Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/18/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 7,
      "chunk_count": 8
    },
    "id": "a614f4c6bd912f46c8fe68fd8dac529e"
  },
  {
    "text": "GendL Application - CONE Package Documentation Object: CONE (The :GEOM-BASE Package) Mixins: CYLINDER Description A pyramid with a circular cross section, with its vertex above the center of its base. Partial cones and hollow cones are supported. Input Slots (required) LENGTH [ from CYLINDER ] number Distance from center of start cap to center of end cap. RADIUS [ from CYLINDER ] number Radius of the circular cross section of the cylinder. Input Slots (optional) BOTTOM-CAP? [ from CYLINDER ] boolean Determines whether to include bottom cap in shaded renderings. Defaults to T. BOUNDING-BOX [ from BASE-OBJECT ] list of two 3d points The left front bottom and right rear top corners, in global coordinates, of the rectangular volume bounding the tree of geometric objects rooted at this object. CLOSED? [ from CYLINDER ] boolean Indicates that a partial cylinder (or cone) should have a closed gap. END-ANGLE [ from ARCOID-MIXIN ] angle in radians End angle of the arc. Defaults to twice pi.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/12/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 0,
      "chunk_count": 7
    },
    "id": "5621ee3b3e5f6e70a1f2e6a03a89aeea"
  },
  {
    "text": "CLOSED? [ from CYLINDER ] boolean Indicates that a partial cylinder (or cone) should have a closed gap. END-ANGLE [ from ARCOID-MIXIN ] angle in radians End angle of the arc. Defaults to twice pi. HIDDEN? [ from VANILLA-MIXIN* ] boolean Indicates whether the object should effectively be a hidden-object even if specified in :objects. Default is nil. IMAGE-FILE [ from BASE-OBJECT ] pathname or string Points to a pre-existing image file to be displayed instead of actual geometry for this object. Defaults to nil INNER-RADIUS [ from CYLINDER ] number Radius of the hollow inner portion for a hollow cylinder. INNER-RADIUS-1 number The radius of the inner hollow part at the top end for a hollow cone. INNER-RADIUS-2 number The radius of the inner hollow part at the bottom end for a hollow cone. LOCAL-BOX [ from BASE-OBJECT ] list of two 3d points The left front bottom and right rear top corners, in global coordinates, of the rectangular volume bounding this geometric object.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/12/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 1,
      "chunk_count": 7
    },
    "id": "ac817ffd093b48e82b3eda4f8e38376e"
  },
  {
    "text": "AL-BOX [ from BASE-OBJECT ] list of two 3d points The left front bottom and right rear top corners, in global coordinates, of the rectangular volume bounding this geometric object. NUMBER-OF-SECTIONS [ from CYLINDER ] integer Number of vertical sections to be drawn in wireframe rendering mode. OBLIQUENESS [ from BASE-OBJECT ] 3x3 orthonormal matrix of double-float numbers This is synonymous with the orientation . ONCLICK-FUNCTION [ from BASE-OBJECT ] lambda function of zero arguments, or nil If non-nil, this function gets invoked when the user clicks the object in graphics front-ends which support this functionality, e.g. SVG/Raphael and X3DOM. RADIUS-1 number The radius of the top end of the cone. RADIUS-2 number The radius of the bottom end of the cone. ROOT [ from VANILLA-MIXIN* ] gdl instance The root-level node in this object's ``tree'' (instance hierarchy).",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/12/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 2,
      "chunk_count": 7
    },
    "id": "ba0764b2b32eeab53dbf979d7c083ca6"
  },
  {
    "text": "nstance The root-level node in this object's ``tree'' (instance hierarchy). SAFE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances All objects from the :objects specification, including elements of sequences as flat lists. Any children which throw errors come back as a plist with error information START-ANGLE [ from ARCOID-MIXIN ] angle in radians Start angle of the arc. Defaults to zero. STRINGS-FOR-DISPLAY [ from VANILLA-MIXIN* ] string or list of strings Determines how the name of objects of this type will be printed in most places. This defaults to the name-for-display (generally the part's name as specified in its parent), followed by an index number if the part is an element of a sequence. TOP-CAP? [ from CYLINDER ] boolean Determines whether to include bottom cap in shaded renderings. Defaults to T. VISIBLE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances Additional objects to display in Tatu tree. Typically this would be a subset of hidden-children. Defaults to NIL.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/12/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 3,
      "chunk_count": 7
    },
    "id": "6fe1f9460cb9977d579ffd3cb6c00150"
  },
  {
    "text": "erings. Defaults to T. VISIBLE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances Additional objects to display in Tatu tree. Typically this would be a subset of hidden-children. Defaults to NIL. Input Slots (optional, defaulting) CENTER [ from BASE-OBJECT ] 3d point Indicates in global coordinates where the center of the reference box of this object should be located. DISPLAY-CONTROLS [ from BASE-OBJECT ] plist May contain keywords and values indicating display characteristics for this object. The following keywords are recognized currently: :color color keyword from the *color-table* parameter, or an HTML-style hexidecimal RGB string value, e.g. \"#FFFFFF\" for pure white. Defaults to :black. :line-thickness an integer, defaulting to 1, indicating relative line thickness for wireframe representations of this object. :dash-pattern (currently PDF/PNG/JPEG only).",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/12/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 4,
      "chunk_count": 7
    },
    "id": "6b43a1dc91f1b31cbc9d347173d9b99c"
  },
  {
    "text": "representations of this object. :dash-pattern (currently PDF/PNG/JPEG only). This is a list of two or three numbers which indicate the length, in pixels, of the dashes and blank spaces in a dashed line. The optional third number indicates how far into the line or curve to start the dash pattern. ORIENTATION [ from BASE-OBJECT ] 3x3 matrix of double-float numbers Indicates the absolute Rotation Matrix used to create the coordinate system of this object. This matrix is given in absolute terms (i.e. with respect to the root's orientation), and is generally created with the alignment function. It should be an orthonormal matrix, meaning each row is a vector with a magnitude of one (1.0). Computed Slots HEIGHT [ from BASE-OBJECT ] number Z-axis dimension of the reference box. Defaults to zero. WIDTH [ from BASE-OBJECT ] number X-axis dimension of the reference box. Defaults to zero.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/12/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 5,
      "chunk_count": 7
    },
    "id": "0ce54bc04154efb24125485ee5be6cda"
  },
  {
    "text": "WIDTH [ from BASE-OBJECT ] number X-axis dimension of the reference box. Defaults to zero. Examples (in-package :gdl-user) (define-object cone-sample (cone) :computed-slots ((display-controls (list :color :blue-neon :transparency 0.5 :shininess 0.8 :specular-color :white)) (length 10) (radius-1 2)(inner-radius-1 1) (radius-2 5) (number-of-sections 5) (inner-radius-2 3))) (generate-sample-drawing :objects (make-object 'cone-sample) :projection-direction :trimetric) Package Documentation Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/12/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 6,
      "chunk_count": 7
    },
    "id": "ba4e2b52225889bbfbf1eeba1441e2be"
  },
  {
    "text": "GendL Application - CONSTRAINED-FILLET Package Documentation Object: CONSTRAINED-FILLET (The :GEOM-BASE Package) Mixins: CONSTRAINED-ARC , VANILLA-MIXIN Description This object is the same as constrained-arc, but it is only meaningful for arc-constraints which contain two :tangent-to clauses, and it automatically trims the result to each point of tangency Input Slots (optional) BOUNDING-BOX [ from BASE-OBJECT ] list of two 3d points The left front bottom and right rear top corners, in global coordinates, of the rectangular volume bounding the tree of geometric objects rooted at this object. HIDDEN? [ from VANILLA-MIXIN* ] boolean Indicates whether the object should effectively be a hidden-object even if specified in :objects. Default is nil. IMAGE-FILE [ from BASE-OBJECT ] pathname or string Points to a pre-existing image file to be displayed instead of actual geometry for this object.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/14/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 0,
      "chunk_count": 5
    },
    "id": "325a88f079b4d5b145a34b0aab67a9e6"
  },
  {
    "text": "ng Points to a pre-existing image file to be displayed instead of actual geometry for this object. Defaults to nil LOCAL-BOX [ from BASE-OBJECT ] list of two 3d points The left front bottom and right rear top corners, in global coordinates, of the rectangular volume bounding this geometric object. OBLIQUENESS [ from BASE-OBJECT ] 3x3 orthonormal matrix of double-float numbers This is synonymous with the orientation . ONCLICK-FUNCTION [ from BASE-OBJECT ] lambda function of zero arguments, or nil If non-nil, this function gets invoked when the user clicks the object in graphics front-ends which support this functionality, e.g. SVG/Raphael and X3DOM. ROOT [ from VANILLA-MIXIN* ] gdl instance The root-level node in this object's ``tree'' (instance hierarchy). SAFE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances All objects from the :objects specification, including elements of sequences as flat lists.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/14/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 1,
      "chunk_count": 5
    },
    "id": "66800f8366ea6a189d91a5b89bcb6528"
  },
  {
    "text": "N* ] list of gdl instances All objects from the :objects specification, including elements of sequences as flat lists. Any children which throw errors come back as a plist with error information STRINGS-FOR-DISPLAY [ from VANILLA-MIXIN* ] string or list of strings Determines how the name of objects of this type will be printed in most places. This defaults to the name-for-display (generally the part's name as specified in its parent), followed by an index number if the part is an element of a sequence. VISIBLE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances Additional objects to display in Tatu tree. Typically this would be a subset of hidden-children. Defaults to NIL. Input Slots (optional, defaulting) DISPLAY-CONTROLS [ from BASE-OBJECT ] plist May contain keywords and values indicating display characteristics for this object.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/14/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 2,
      "chunk_count": 5
    },
    "id": "f1d423d772a04f10deff3bfd8c0fb653"
  },
  {
    "text": "cating display characteristics for this object. The following keywords are recognized currently: :color color keyword from the *color-table* parameter, or an HTML-style hexidecimal RGB string value, e.g. \"#FFFFFF\" for pure white. Defaults to :black. :line-thickness an integer, defaulting to 1, indicating relative line thickness for wireframe representations of this object. :dash-pattern (currently PDF/PNG/JPEG only). This is a list of two or three numbers which indicate the length, in pixels, of the dashes and blank spaces in a dashed line. The optional third number indicates how far into the line or curve to start the dash pattern. Computed Slots END-ANGLE [ from ARC ] angle in radians End angle of the arc. Defaults to twice pi. START-ANGLE [ from ARC ] angle in radians Start angle of the arc. Defaults to zero. Package Documentation Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/14/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 3,
      "chunk_count": 5
    },
    "id": "83f90628ad54b81bcb6e725bae14811b"
  },
  {
    "text": "arc. Defaults to zero. Package Documentation Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/14/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 4,
      "chunk_count": 5
    },
    "id": "a0d99755b898f239736c3698db2f317f"
  },
  {
    "text": "GendL Application - VERTICAL-DIMENSION Package Documentation Object: VERTICAL-DIMENSION (The :GEOM-BASE Package) Mixins: LINEAR-DIMENSION Description Creates a dimension annotation along the vertical axis. Input Slots (required) END-POINT [ from LINEAR-DIMENSION ] 3d point Actual point where the dimension will stop measuring START-POINT [ from LINEAR-DIMENSION ] 3d point Actual point where the dimension will start measuring Input Slots (optional) ARROWHEAD-LENGTH [ from LINEAR-DIMENSION ] length (from tip to tail) of arrowhead glyph Defaults to twice the arrowhead-width ARROWHEAD-STYLE [ from LINEAR-DIMENSION ] keyword symbol Style for arrowhead on end of leader-line . Currently supported values are :none , :wedge (the Default), and :double-wedge . ARROWHEAD-STYLE-2 [ from LINEAR-DIMENSION ] keyword symbol Style for arrowhead on end of leader-line . Currently supported values are :none (the Default), :wedge , and :double-wedge .",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/42/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 0,
      "chunk_count": 13
    },
    "id": "230810555cf8c6526fa2d4cc19db438e"
  },
  {
    "text": "] keyword symbol Style for arrowhead on end of leader-line . Currently supported values are :none (the Default), :wedge , and :double-wedge . ARROWHEAD-WIDTH [ from LINEAR-DIMENSION ] width of arrowhead glyph Defaults to half the character-size. BOUNDING-BOX [ from BASE-OBJECT ] list of two 3d points The left front bottom and right rear top corners, in global coordinates, of the rectangular volume bounding the tree of geometric objects rooted at this object. CHARACTER-SIZE [ from LINEAR-DIMENSION ] number Size (glyph height) of the label text, in model units. Defaults to 1. DIM-TEXT [ from LINEAR-DIMENSION ] string Determines the text which shows up as the dimension label. Defaults to the dim-value, which is computed specially in each specific dimension type. DIM-TEXT-BIAS [ from LINEAR-DIMENSION ] keyword symbol, :start, :end, or :center Indicates where to position the text in the case when outside-leaders? is non-nil.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/42/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 1,
      "chunk_count": 13
    },
    "id": "21806b60b3e41c7d22d9898262754d0a"
  },
  {
    "text": "IMENSION ] keyword symbol, :start, :end, or :center Indicates where to position the text in the case when outside-leaders? is non-nil. Defaults to :center DIM-TEXT-START 3d point Determines where the text will start. Defaults to reasonable location for horizontal-dimension. DIM-TEXT-START-OFFSET [ from LINEAR-DIMENSION ] 3d vector (normally only 2d are used) . The dim-text-start is offset by this vector, in model space. Defaults to #(0.0 0.0 0.0) DIM-VALUE [ from LINEAR-DIMENSION ] number 2D distance relative to the base-plane-normal. Can be over-ridden in the subclass DXF-FONT [ from LINEAR-DIMENSION ] string This names the DXF font for this general-note. Defaults to (the font) . DXF-OFFSET [ from LINEAR-DIMENSION ] number The start of text will be offset by this amount for DXF output. Default is 2. DXF-SIZE-RATIO [ from LINEAR-DIMENSION ] number The scale factor for DXF character size vs PDF character size.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/42/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 2,
      "chunk_count": 13
    },
    "id": "310e89143207b2957e5b988199bc2b67"
  },
  {
    "text": "fault is 2. DXF-SIZE-RATIO [ from LINEAR-DIMENSION ] number The scale factor for DXF character size vs PDF character size. Default is 0.8 DXF-TEXT-X-SCALE [ from LINEAR-DIMENSION ] number in percentage Adjusts the character width for DXF output. Defaults to the text-x-scale. FLIP-LEADERS? [ from LINEAR-DIMENSION ] boolean Indicates which direction the witness lines should take from the start and end points. The Default is NIL, which indicates :rear (i.e. ``up'') for horizontal-dimensions and :right for vertical-dimensions FONT [ from LINEAR-DIMENSION ] string naming a standard pdf font Font for the label text. Defaults to \"Helvetica\" FULL-LEADER-LINE-LENGTH [ from LINEAR-DIMENSION ] number Indicates the length of the full leader when outside-leaders? is nil. This defaults to nil, which indicates that the full-leader's length should be auto-computed based on the given start-point and end-point.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/42/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 3,
      "chunk_count": 13
    },
    "id": "b6a5287ae271eeb6c96e999e236ae6bf"
  },
  {
    "text": "icates that the full-leader's length should be auto-computed based on the given start-point and end-point. HIDDEN? [ from VANILLA-MIXIN* ] boolean Indicates whether the object should effectively be a hidden-object even if specified in :objects. Default is nil. IMAGE-FILE [ from BASE-OBJECT ] pathname or string Points to a pre-existing image file to be displayed instead of actual geometry for this object. Defaults to nil JUSTIFICATION [ from LINEAR-DIMENSION ] keyword symbol, :left, :right, or :center . For multi-line dim-text, this justification is applied. LEADER-1? [ from LINEAR-DIMENSION ] boolean Indicates whether the first (or only) leader line should be displayed. The Default is T LEADER-2? [ from LINEAR-DIMENSION ] boolean Indicates whether the second leader line should be displayed.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/42/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 4,
      "chunk_count": 13
    },
    "id": "7730936be7364bd4936e59f46c9b990c"
  },
  {
    "text": ". The Default is T LEADER-LINE-LENGTH [ from LINEAR-DIMENSION ] number Indicates the length of the first leader for the case when outside-leaders? is non-NIL LEADER-LINE-LENGTH-2 [ from LINEAR-DIMENSION ] number Indicates the length of the second leader for the case when outside-leaders? is non-NIL LEADER-TEXT-GAP [ from LINEAR-DIMENSION ] number Amount of gap between leader lines and dimension text, when the dimension text is within the leader. Defaults to half the character-size. OBLIQUENESS [ from BASE-OBJECT ] 3x3 orthonormal matrix of double-float numbers This is synonymous with the orientation . ONCLICK-FUNCTION [ from BASE-OBJECT ] lambda function of zero arguments, or nil If non-nil, this function gets invoked when the user clicks the object in graphics front-ends which support this functionality, e.g. SVG/Raphael and X3DOM.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/42/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 5,
      "chunk_count": 13
    },
    "id": "d82f280745f0d2057028d93954566eca"
  },
  {
    "text": "s functionality, e.g. SVG/Raphael and X3DOM. ORIENTATION [ from BASE-OBJECT ] 3x3 matrix of double-float numbers Indicates the absolute Rotation Matrix used to create the coordinate system of this object. This matrix is given in absolute terms (i.e. with respect to the root's orientation), and is generally created with the alignment function. It should be an orthonormal matrix, meaning each row is a vector with a magnitude of one (1.0). OUTLINE-SHAPE-TYPE [ from LINEAR-DIMENSION ] keyword symbol Currently can be :bubble, :rectangle, or :none. Default is :none. OUTSIDE-LEADERS-LENGTH-FACTOR [ from LINEAR-DIMENSION ] number Indicates the default length of the outside-leaders as a multiple of arrowhead-length. Defaults to 3. OUTSIDE-LEADERS? [ from LINEAR-DIMENSION ] boolean Indicates whether the leader line(s) should be inside or outside the interval between the start and end points.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/42/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 6,
      "chunk_count": 13
    },
    "id": "c0a15803e5d0abd1670b397a28135915"
  },
  {
    "text": "the leader line(s) should be inside or outside the interval between the start and end points. The default is NIL, which indicates that the leader line(s) should be inside the interval ROOT [ from VANILLA-MIXIN* ] gdl instance The root-level node in this object's ``tree'' (instance hierarchy). SAFE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances All objects from the :objects specification, including elements of sequences as flat lists. Any children which throw errors come back as a plist with error information STRINGS-FOR-DISPLAY [ from VANILLA-MIXIN* ] string or list of strings Determines how the name of objects of this type will be printed in most places. This defaults to the name-for-display (generally the part's name as specified in its parent), followed by an index number if the part is an element of a sequence. TEXT-ABOVE-LEADER? [ from LINEAR-DIMENSION ] boolean Indicates whether the text is to the right or above the leader line, rather than in-line with it.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/42/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 7,
      "chunk_count": 13
    },
    "id": "cbc56e64c3763e063fed6d15c18d4266"
  },
  {
    "text": "e part is an element of a sequence. TEXT-ABOVE-LEADER? [ from LINEAR-DIMENSION ] boolean Indicates whether the text is to the right or above the leader line, rather than in-line with it. Default is T. TEXT-ALONG-AXIS? [ from LINEAR-DIMENSION ] boolean Where applicable, determines whether text direction follows leader-line direction TEXT-X-SCALE [ from LINEAR-DIMENSION ] number in percentage Adjusts the character width for the dimension-text and currently only applies only to PDF output UNDERLINE? [ from LINEAR-DIMENSION ] GDL VIEW-REFERENCE-OBJECT [ from LINEAR-DIMENSION ] gdl object or nil View object which will use this dimension. Defaults to NIL. VISIBLE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances Additional objects to display in Tatu tree. Typically this would be a subset of hidden-children. Defaults to NIL. WITNESS-LINE-2? [ from LINEAR-DIMENSION ] boolean Indicates whether to display a witness line coming off the end-point .",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/42/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 8,
      "chunk_count": 13
    },
    "id": "b7b0f8f0b70f7553fc4e0bf9cbc01b04"
  },
  {
    "text": "hidden-children. Defaults to NIL. WITNESS-LINE-2? [ from LINEAR-DIMENSION ] boolean Indicates whether to display a witness line coming off the end-point . Default is T WITNESS-LINE-EXT [ from LINEAR-DIMENSION ] number Distance the witness line(s) extend beyond the leader line. Default is 0.3 WITNESS-LINE-GAP [ from LINEAR-DIMENSION ] number Distance from the start-point and end-point to the start of each witness-line. Default is 0.1 WITNESS-LINE-LENGTH [ from LINEAR-DIMENSION ] number Length of the witness lines (or of the shorter witness line in case they are different lengths) WITNESS-LINE? [ from LINEAR-DIMENSION ] boolean Indicates whether to display a witness line coming off the start-point . Default is T Input Slots (optional, defaulting) CENTER [ from BASE-OBJECT ] 3d point Indicates in global coordinates where the center of the reference box of this object should be located.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/42/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 9,
      "chunk_count": 13
    },
    "id": "14f5bb0cd553b4dc61be99faaf219545"
  },
  {
    "text": "es in global coordinates where the center of the reference box of this object should be located. DISPLAY-CONTROLS [ from BASE-OBJECT ] plist May contain keywords and values indicating display characteristics for this object. The following keywords are recognized currently: :color color keyword from the *color-table* parameter, or an HTML-style hexidecimal RGB string value, e.g. \"#FFFFFF\" for pure white. Defaults to :black. :line-thickness an integer, defaulting to 1, indicating relative line thickness for wireframe representations of this object. :dash-pattern (currently PDF/PNG/JPEG only). This is a list of two or three numbers which indicate the length, in pixels, of the dashes and blank spaces in a dashed line. The optional third number indicates how far into the line or curve to start the dash pattern. HEIGHT [ from BASE-OBJECT ] number Z-axis dimension of the reference box. Defaults to zero. LENGTH [ from BASE-OBJECT ] number Y-axis dimension of the reference box.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/42/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 10,
      "chunk_count": 13
    },
    "id": "d31b5ee0ad8569d7abaa409c68dcba4c"
  },
  {
    "text": "the dash pattern. HEIGHT [ from BASE-OBJECT ] number Z-axis dimension of the reference box. Defaults to zero. LENGTH [ from BASE-OBJECT ] number Y-axis dimension of the reference box. Defaults to zero. WIDTH [ from BASE-OBJECT ] number X-axis dimension of the reference box. Defaults to zero. Computed Slots BASE-PLANE-NORMAL [ from LINEAR-DIMENSION ] Must be specified in the subclass except for angular LEADER-DIRECTION-1-VECTOR [ from LINEAR-DIMENSION ] Must be specified in the subclass except for angular LEADER-DIRECTION-2-VECTOR [ from LINEAR-DIMENSION ] Must be specified in the subclass except for angular WITNESS-DIRECTION-VECTOR [ from LINEAR-DIMENSION ] Must be specified in the subclass except for angular Examples (in-package :gdl-user) (define-object vertical-dimension-sample (base-object) :objects ((box :type 'box :length 10 :width (* (the-child length) +phi+) :height (* (the-child :width) +phi+)) (length-dimension :type 'vertical-dimension :character-size (/ (the box length)",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/42/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 11,
      "chunk_count": 13
    },
    "id": "af82fcc4015c10e2a9aae175c7a62405"
  },
  {
    "text": "ject) :objects ((box :type 'box :length 10 :width (* (the-child length) +phi+) :height (* (the-child :width) +phi+)) (length-dimension :type 'vertical-dimension :character-size (/ (the box length) 20) :flip-leaders? t :start-point (the box (vertex :top :left :front)) :end-point (the box (vertex :top :left :rear))))) (generate-sample-drawing :object-roots (make-object 'vertical-dimension-sample)) Package Documentation Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/42/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 12,
      "chunk_count": 13
    },
    "id": "23890ebe8db72c253add11fa368967e1"
  },
  {
    "text": "GendL Application - PIE-CHART Package Documentation Object: PIE-CHART (The :GEOM-BASE Package) Mixins: BASE-OBJECT Description Generates a standard Pie Chart with colored filled pie sections. This object was inspired by the pie-chart in Marc Battyani's (marc.battyani(at)fractalconcept.com) cl-pdf, with contributions from Carlos Ungil (Carlos.Ungil(at)cern.ch). Input Slots (optional) BOUNDING-BOX [ from BASE-OBJECT ] list of two 3d points The left front bottom and right rear top corners, in global coordinates, of the rectangular volume bounding the tree of geometric objects rooted at this object. DATA list of numbers The relative size for each pie piece. These will be normalized to percentages. Defaults to NIL, must be specified as non-NIL to get a result. HIDDEN? [ from VANILLA-MIXIN* ] boolean Indicates whether the object should effectively be a hidden-object even if specified in :objects. Default is nil.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/31/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 0,
      "chunk_count": 7
    },
    "id": "b55154163a905d88294106ccf7cb04d3"
  },
  {
    "text": "olean Indicates whether the object should effectively be a hidden-object even if specified in :objects. Default is nil. IMAGE-FILE [ from BASE-OBJECT ] pathname or string Points to a pre-existing image file to be displayed instead of actual geometry for this object. Defaults to nil INCLUDE-LEGEND? boolean Determines whether the Legend is included in standard output formats. Defaults to t . LABELS&COLORS list of lists, each containing a string and a keyword symbol This list should be the same length as data . These colors and labels will be assigned to each pie piece and to the legend. Defaults to NIL, must be specified as non-NIL to get a result. LINE-COLOR keyword symbol naming color from *color-table* . Color of the outline of the pie. Defaults to :black. LOCAL-BOX [ from BASE-OBJECT ] list of two 3d points The left front bottom and right rear top corners, in global coordinates, of the rectangular volume bounding this geometric object.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/31/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 1,
      "chunk_count": 7
    },
    "id": "ef336bf5a2084053bb8b2566d5c3c6d8"
  },
  {
    "text": "ist of two 3d points The left front bottom and right rear top corners, in global coordinates, of the rectangular volume bounding this geometric object. OBLIQUENESS [ from BASE-OBJECT ] 3x3 orthonormal matrix of double-float numbers This is synonymous with the orientation . ONCLICK-FUNCTION [ from BASE-OBJECT ] lambda function of zero arguments, or nil If non-nil, this function gets invoked when the user clicks the object in graphics front-ends which support this functionality, e.g. SVG/Raphael and X3DOM. RADIUS number The radius of the pie. Defaults to 0.35 times the width . ROOT [ from VANILLA-MIXIN* ] gdl instance The root-level node in this object's ``tree'' (instance hierarchy). SAFE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances All objects from the :objects specification, including elements of sequences as flat lists.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/31/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 2,
      "chunk_count": 7
    },
    "id": "bdb9bf3ecd09d0c2f1ff469921d8c6c2"
  },
  {
    "text": "luding elements of sequences as flat lists. Any children which throw errors come back as a plist with error information STRINGS-FOR-DISPLAY [ from VANILLA-MIXIN* ] string or list of strings Determines how the name of objects of this type will be printed in most places. This defaults to the name-for-display (generally the part's name as specified in its parent), followed by an index number if the part is an element of a sequence. TITLE string Title for the chart. Defaults to the empty string. TITLE-COLOR keyword symbol naming color from *color-table* . Color of title text. Defaults to :black. TITLE-FONT string Currently this must be a PDF font name. Defaults to \"Helvetica.\" TITLE-FONT-SIZE number Size in points of title font. Defaults to 12. VISIBLE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances Additional objects to display in Tatu tree. Typically this would be a subset of hidden-children. Defaults to NIL.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/31/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 3,
      "chunk_count": 7
    },
    "id": "dcb7c3d7d7884454206e0004dfe6874a"
  },
  {
    "text": "gdl instances Additional objects to display in Tatu tree. Typically this would be a subset of hidden-children. Defaults to NIL. Input Slots (optional, defaulting) CENTER [ from BASE-OBJECT ] 3d point Indicates in global coordinates where the center of the reference box of this object should be located. DISPLAY-CONTROLS [ from BASE-OBJECT ] plist May contain keywords and values indicating display characteristics for this object. The following keywords are recognized currently: :color color keyword from the *color-table* parameter, or an HTML-style hexidecimal RGB string value, e.g. \"#FFFFFF\" for pure white. Defaults to :black. :line-thickness an integer, defaulting to 1, indicating relative line thickness for wireframe representations of this object. :dash-pattern (currently PDF/PNG/JPEG only). This is a list of two or three numbers which indicate the length, in pixels, of the dashes and blank spaces in a dashed line.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/31/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 4,
      "chunk_count": 7
    },
    "id": "5e84a053c1e077244e7dd6cd6535ed62"
  },
  {
    "text": "ly). This is a list of two or three numbers which indicate the length, in pixels, of the dashes and blank spaces in a dashed line. The optional third number indicates how far into the line or curve to start the dash pattern. HEIGHT [ from BASE-OBJECT ] number Z-axis dimension of the reference box. Defaults to zero. LENGTH [ from BASE-OBJECT ] number Y-axis dimension of the reference box. Defaults to zero. ORIENTATION [ from BASE-OBJECT ] 3x3 matrix of double-float numbers Indicates the absolute Rotation Matrix used to create the coordinate system of this object. This matrix is given in absolute terms (i.e. with respect to the root's orientation), and is generally created with the alignment function. It should be an orthonormal matrix, meaning each row is a vector with a magnitude of one (1.0). WIDTH [ from BASE-OBJECT ] number X-axis dimension of the reference box. Defaults to zero.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/31/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 5,
      "chunk_count": 7
    },
    "id": "23c19537a2b4874b1bf90e523a3ee8c8"
  },
  {
    "text": ".0). WIDTH [ from BASE-OBJECT ] number X-axis dimension of the reference box. Defaults to zero. Examples (in-package :gdl-user) (define-object pie-sample (pie-chart) :computed-slots ((data (list 30 70)) (labels&colors '((\"Expenses\" :red) (\"Revenue\" :green))) (width 200) (title \"Cash Flow\"))) (generate-sample-drawing :objects (make-object 'pie-sample)) Package Documentation Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/31/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 6,
      "chunk_count": 7
    },
    "id": "2717330fa7645b85ba1cb422d739fa94"
  },
  {
    "text": "GendL Application - CIRCLE Package Documentation Object: CIRCLE (The :GEOM-BASE Package) Mixins: ARC Description The set of points equidistant from a given point. The distance from the center is called the radius, and the point is called the center. The start point of the circle is at the 3 o'clock position, and positive angles are measured anti-clockwise. Input Slots (required) RADIUS [ from ARC ] number Distance from center to any point on the arc. Input Slots (optional) BOUNDING-BOX [ from BASE-OBJECT ] list of two 3d points The left front bottom and right rear top corners, in global coordinates, of the rectangular volume bounding the tree of geometric objects rooted at this object. HIDDEN? [ from VANILLA-MIXIN* ] boolean Indicates whether the object should effectively be a hidden-object even if specified in :objects. Default is nil. IMAGE-FILE [ from BASE-OBJECT ] pathname or string Points to a pre-existing image file to be displayed instead of actual geometry for this object.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/11/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 0,
      "chunk_count": 6
    },
    "id": "2d147d3a49902d91866a2098f0df2cc9"
  },
  {
    "text": "t even if specified in :objects. Default is nil. IMAGE-FILE [ from BASE-OBJECT ] pathname or string Points to a pre-existing image file to be displayed instead of actual geometry for this object. Defaults to nil LOCAL-BOX [ from BASE-OBJECT ] list of two 3d points The left front bottom and right rear top corners, in global coordinates, of the rectangular volume bounding this geometric object. OBLIQUENESS [ from BASE-OBJECT ] 3x3 orthonormal matrix of double-float numbers This is synonymous with the orientation . ONCLICK-FUNCTION [ from BASE-OBJECT ] lambda function of zero arguments, or nil If non-nil, this function gets invoked when the user clicks the object in graphics front-ends which support this functionality, e.g. SVG/Raphael and X3DOM. ROOT [ from VANILLA-MIXIN* ] gdl instance The root-level node in this object's ``tree'' (instance hierarchy).",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/11/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 1,
      "chunk_count": 6
    },
    "id": "6ed6fa45f9e2ed0d4e88eeb5739b2e0e"
  },
  {
    "text": "root-level node in this object's ``tree'' (instance hierarchy). SAFE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances All objects from the :objects specification, including elements of sequences as flat lists. Any children which throw errors come back as a plist with error information STRINGS-FOR-DISPLAY [ from VANILLA-MIXIN* ] string or list of strings Determines how the name of objects of this type will be printed in most places. This defaults to the name-for-display (generally the part's name as specified in its parent), followed by an index number if the part is an element of a sequence. VISIBLE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances Additional objects to display in Tatu tree. Typically this would be a subset of hidden-children. Defaults to NIL. Input Slots (optional, defaulting) CENTER [ from BASE-OBJECT ] 3d point Indicates in global coordinates where the center of the reference box of this object should be located.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/11/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 2,
      "chunk_count": 6
    },
    "id": "6c69539810a66221aefc21658fd8df43"
  },
  {
    "text": "nal, defaulting) CENTER [ from BASE-OBJECT ] 3d point Indicates in global coordinates where the center of the reference box of this object should be located. DISPLAY-CONTROLS [ from BASE-OBJECT ] plist May contain keywords and values indicating display characteristics for this object. The following keywords are recognized currently: :color color keyword from the *color-table* parameter, or an HTML-style hexidecimal RGB string value, e.g. \"#FFFFFF\" for pure white. Defaults to :black. :line-thickness an integer, defaulting to 1, indicating relative line thickness for wireframe representations of this object. :dash-pattern (currently PDF/PNG/JPEG only). This is a list of two or three numbers which indicate the length, in pixels, of the dashes and blank spaces in a dashed line. The optional third number indicates how far into the line or curve to start the dash pattern.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/11/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 3,
      "chunk_count": 6
    },
    "id": "bf1097bd3a64fc8619dd7c2995ff292f"
  },
  {
    "text": "ird number indicates how far into the line or curve to start the dash pattern. ORIENTATION [ from BASE-OBJECT ] 3x3 matrix of double-float numbers Indicates the absolute Rotation Matrix used to create the coordinate system of this object. This matrix is given in absolute terms (i.e. with respect to the root's orientation), and is generally created with the alignment function. It should be an orthonormal matrix, meaning each row is a vector with a magnitude of one (1.0). Computed Slots AREA number The area enclosed by the circle. CIRCUMFERENCE number The perimeter of the circle. END-ANGLE [ from ARC ] angle in radians End angle of the arc. Defaults to twice pi. START-ANGLE [ from ARC ] angle in radians Start angle of the arc. Defaults to zero. Examples (in-package :gdl-user) (define-object circle-sample (circle) :computed-slots ((radius 10))) (generate-sample-drawing :objects (make-object 'circle-sample)) Package Documentation Copyright \u00a9 2025 Genworks \u00ae International .",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/11/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 4,
      "chunk_count": 6
    },
    "id": "ff0449bee449353f0f310479dff25817"
  },
  {
    "text": "circle-sample (circle) :computed-slots ((radius 10))) (generate-sample-drawing :objects (make-object 'circle-sample)) Package Documentation Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/11/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 5,
      "chunk_count": 6
    },
    "id": "561429e9b3cc7d2ad6bd345554d8c5ca"
  },
  {
    "text": "GendL Application - TYPESET-BLOCK Package Documentation Object: TYPESET-BLOCK (The :GEOM-BASE Package) Mixins: BASE-OBJECT Description Block of text typeset using cl-typesetting. This object wraps the typeset block as a standard GDL object, so it can be placed in a view and positioned according to normal GDL positioning. You can specify the width, and by default this object will compute its length automatically from the typeset content, to fit all the lines of text into the box. Because of this computed behavior of the length, the center of the box will not, in general, be in a known location compared to the start of the text. Because of this it is recommended to use :corner, rather than :center, for positioning a base-view which contains a typeset block. In the normal case, if you want a single block in a view on a drawing, you should make the base-view object have the same width and length as the typeset-block.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/41/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 0,
      "chunk_count": 7
    },
    "id": "c8598541545889c0412f133a857746a9"
  },
  {
    "text": "single block in a view on a drawing, you should make the base-view object have the same width and length as the typeset-block. The base-view should also probably have :left-margin 0 and :front-margin 0. Input Slots (optional) BOUNDING-BOX [ from BASE-OBJECT ] list of two 3d points The left front bottom and right rear top corners, in global coordinates, of the rectangular volume bounding the tree of geometric objects rooted at this object. CENTER 3d-point Center of the text. Specify this or start, not both. note: that the center is no longer defaulting (so that it can self-compute properly when start is specified), so it is necessary to explicitly give either start or center for general-note. HIDDEN? [ from VANILLA-MIXIN* ] boolean Indicates whether the object should effectively be a hidden-object even if specified in :objects. Default is nil.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/41/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 1,
      "chunk_count": 7
    },
    "id": "0ae4269f4356d2ea3c7099e30ae188d1"
  },
  {
    "text": "-object even if specified in :objects. Default is nil. IMAGE-FILE [ from BASE-OBJECT ] pathname or string Points to a pre-existing image file to be displayed instead of actual geometry for this object. Defaults to nil LENGTH number The length of the box to contain the compiled content. Defaults is (the length-default), which will exactly fit the compiled content into the specified width. If you override it to be less than this default, the content will be cropped. LOCAL-BOX [ from BASE-OBJECT ] list of two 3d points The left front bottom and right rear top corners, in global coordinates, of the rectangular volume bounding this geometric object. OBLIQUENESS [ from BASE-OBJECT ] 3x3 orthonormal matrix of double-float numbers This is synonymous with the orientation . ONCLICK-FUNCTION [ from BASE-OBJECT ] lambda function of zero arguments, or nil If non-nil, this function gets invoked when the user clicks the object in graphics front-ends which support this functionality, e.g.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/41/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 2,
      "chunk_count": 7
    },
    "id": "72036b407f08b74d5583f65949d692b0"
  },
  {
    "text": "ASE-OBJECT ] lambda function of zero arguments, or nil If non-nil, this function gets invoked when the user clicks the object in graphics front-ends which support this functionality, e.g. SVG/Raphael and X3DOM. ROOT [ from VANILLA-MIXIN* ] gdl instance The root-level node in this object's ``tree'' (instance hierarchy). SAFE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances All objects from the :objects specification, including elements of sequences as flat lists. Any children which throw errors come back as a plist with error information START 3d-point Start of the text. Specify this or center, not both. START-LINE-INDEX number The line number to start STRINGS-FOR-DISPLAY [ from VANILLA-MIXIN* ] string or list of strings Determines how the name of objects of this type will be printed in most places. This defaults to the name-for-display (generally the part's name as specified in its parent), followed by an index number if the part is an element of a sequence.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/41/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 3,
      "chunk_count": 7
    },
    "id": "92bfffa42730ca64e601d0381d94d9a7"
  },
  {
    "text": "in most places. This defaults to the name-for-display (generally the part's name as specified in its parent), followed by an index number if the part is an element of a sequence. VISIBLE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances Additional objects to display in Tatu tree. Typically this would be a subset of hidden-children. Defaults to NIL. Input Slots (optional, defaulting) DISPLAY-CONTROLS [ from BASE-OBJECT ] plist May contain keywords and values indicating display characteristics for this object. The following keywords are recognized currently: :color color keyword from the *color-table* parameter, or an HTML-style hexidecimal RGB string value, e.g. \"#FFFFFF\" for pure white. Defaults to :black. :line-thickness an integer, defaulting to 1, indicating relative line thickness for wireframe representations of this object. :dash-pattern (currently PDF/PNG/JPEG only).",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/41/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 4,
      "chunk_count": 7
    },
    "id": "498ed331f276ca398385fe74e2d37bc2"
  },
  {
    "text": "for wireframe representations of this object. :dash-pattern (currently PDF/PNG/JPEG only). This is a list of two or three numbers which indicate the length, in pixels, of the dashes and blank spaces in a dashed line. The optional third number indicates how far into the line or curve to start the dash pattern. HEIGHT [ from BASE-OBJECT ] number Z-axis dimension of the reference box. Defaults to zero. ORIENTATION [ from BASE-OBJECT ] 3x3 matrix of double-float numbers Indicates the absolute Rotation Matrix used to create the coordinate system of this object. This matrix is given in absolute terms (i.e. with respect to the root's orientation), and is generally created with the alignment function. It should be an orthonormal matrix, meaning each row is a vector with a magnitude of one (1.0). WIDTH [ from BASE-OBJECT ] number X-axis dimension of the reference box. Defaults to zero.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/41/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 5,
      "chunk_count": 7
    },
    "id": "ada2fd3e07a561680f3291bb02a1b102"
  },
  {
    "text": "WIDTH [ from BASE-OBJECT ] number X-axis dimension of the reference box. Defaults to zero. Computed Slots LENGTH-DEFAULT number The computed length which will exactly fit the content based on (the width). LINES list of typeset line objects The list of lines in the nominal block. Package Documentation Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/41/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 6,
      "chunk_count": 7
    },
    "id": "fbd414463f363218b4d7e55c407d230c"
  },
  {
    "text": "GendL Application - SPHERE Package Documentation Object: SPHERE (The :GEOM-BASE Package) Mixins: IFS-OUTPUT-MIXIN, ARCOID-MIXIN , BASE-OBJECT Description The set of points equidistant from a given center point. Input Slots (required) RADIUS number Distance from center to any point on the sphere. Input Slots (optional) BOUNDING-BOX [ from BASE-OBJECT ] list of two 3d points The left front bottom and right rear top corners, in global coordinates, of the rectangular volume bounding the tree of geometric objects rooted at this object. END-ANGLE [ from ARCOID-MIXIN ] angle in radians End angle of the arc. Defaults to twice pi. END-HORIZONTAL-ARC angle in radians Ending horizontal angle for a partial sphere. Default is twice pi. END-VERTICAL-ARC angle in radians Ending vertical angle for a partial sphere. Default is pi/2. HIDDEN? [ from VANILLA-MIXIN* ] boolean Indicates whether the object should effectively be a hidden-object even if specified in :objects. Default is nil.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/37/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 0,
      "chunk_count": 7
    },
    "id": "7293b3c677aa0aee95a2aef305bc2c90"
  },
  {
    "text": "al sphere. Default is pi/2. HIDDEN? [ from VANILLA-MIXIN* ] boolean Indicates whether the object should effectively be a hidden-object even if specified in :objects. Default is nil. IMAGE-FILE [ from BASE-OBJECT ] pathname or string Points to a pre-existing image file to be displayed instead of actual geometry for this object. Defaults to nil INNER-RADIUS number Radius of inner hollow for a hollow sphere. Default is NIL, for a non-hollow sphere. LOCAL-BOX [ from BASE-OBJECT ] list of two 3d points The left front bottom and right rear top corners, in global coordinates, of the rectangular volume bounding this geometric object. NUMBER-OF-HORIZONTAL-SECTIONS number How many lines of latitude to show on the sphere in some renderings. Default value is 4. NUMBER-OF-VERTICAL-SECTIONS number How many lines of longitude to show on the sphere in some renderings. Default value is 4.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/37/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 1,
      "chunk_count": 7
    },
    "id": "2c7ed6db960bb794aaab891facfa5524"
  },
  {
    "text": "any lines of longitude to show on the sphere in some renderings. Default value is 4. OBLIQUENESS [ from BASE-OBJECT ] 3x3 orthonormal matrix of double-float numbers This is synonymous with the orientation . ONCLICK-FUNCTION [ from BASE-OBJECT ] lambda function of zero arguments, or nil If non-nil, this function gets invoked when the user clicks the object in graphics front-ends which support this functionality, e.g. SVG/Raphael and X3DOM. ROOT [ from VANILLA-MIXIN* ] gdl instance The root-level node in this object's ``tree'' (instance hierarchy). SAFE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances All objects from the :objects specification, including elements of sequences as flat lists. Any children which throw errors come back as a plist with error information START-ANGLE [ from ARCOID-MIXIN ] angle in radians Start angle of the arc. Defaults to zero. START-HORIZONTAL-ARC angle in radians Starting horizontal angle for a partial sphere. Default is 0.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/37/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 2,
      "chunk_count": 7
    },
    "id": "21ad7423a92ff8f2d48325c280921532"
  },
  {
    "text": "ARCOID-MIXIN ] angle in radians Start angle of the arc. Defaults to zero. START-HORIZONTAL-ARC angle in radians Starting horizontal angle for a partial sphere. Default is 0. START-VERTICAL-ARC angle in radians Starting vertical angle for a partial sphere. Default is -pi/2. STRINGS-FOR-DISPLAY [ from VANILLA-MIXIN* ] string or list of strings Determines how the name of objects of this type will be printed in most places. This defaults to the name-for-display (generally the part's name as specified in its parent), followed by an index number if the part is an element of a sequence. VISIBLE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances Additional objects to display in Tatu tree. Typically this would be a subset of hidden-children. Defaults to NIL. Input Slots (optional, defaulting) CENTER [ from BASE-OBJECT ] 3d point Indicates in global coordinates where the center of the reference box of this object should be located.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/37/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 3,
      "chunk_count": 7
    },
    "id": "5d8874fe9f5c2c69904dbc05c082a207"
  },
  {
    "text": "ENTER [ from BASE-OBJECT ] 3d point Indicates in global coordinates where the center of the reference box of this object should be located. DISPLAY-CONTROLS [ from BASE-OBJECT ] plist May contain keywords and values indicating display characteristics for this object. The following keywords are recognized currently: :color color keyword from the *color-table* parameter, or an HTML-style hexidecimal RGB string value, e.g. \"#FFFFFF\" for pure white. Defaults to :black. :line-thickness an integer, defaulting to 1, indicating relative line thickness for wireframe representations of this object. :dash-pattern (currently PDF/PNG/JPEG only). This is a list of two or three numbers which indicate the length, in pixels, of the dashes and blank spaces in a dashed line. The optional third number indicates how far into the line or curve to start the dash pattern.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/37/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 4,
      "chunk_count": 7
    },
    "id": "1c0f0e14137700061df735eebcf466e1"
  },
  {
    "text": "es how far into the line or curve to start the dash pattern. ORIENTATION [ from BASE-OBJECT ] 3x3 matrix of double-float numbers Indicates the absolute Rotation Matrix used to create the coordinate system of this object. This matrix is given in absolute terms (i.e. with respect to the root's orientation), and is generally created with the alignment function. It should be an orthonormal matrix, meaning each row is a vector with a magnitude of one (1.0). Computed Slots HEIGHT [ from BASE-OBJECT ] number Z-axis dimension of the reference box. Defaults to zero. LENGTH [ from BASE-OBJECT ] number Y-axis dimension of the reference box. Defaults to zero. WIDTH [ from BASE-OBJECT ] number X-axis dimension of the reference box. Defaults to zero.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/37/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 5,
      "chunk_count": 7
    },
    "id": "da6dd0b4be8feb3d78765a240c574c5d"
  },
  {
    "text": "Examples (in-package :gdl-user) (define-object sphere-sample (sphere) :computed-slots ((radius 150) (number-of-vertical-sections 10) (number-of-horizontal-sections 10) (display-controls (list :color :green-forest-medium)))) (generate-sample-drawing :objects (make-object 'sphere-sample) :projection-direction :trimetric) Package Documentation Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/37/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 6,
      "chunk_count": 7
    },
    "id": "5b14fbe4b80683efbadf7ce0fac34a38"
  },
  {
    "text": "GendL Application - GLOBAL-FILLETED-POLYGON-PROJECTION Package Documentation Object: GLOBAL-FILLETED-POLYGON-PROJECTION (The :GEOM-BASE Package) Mixins: GLOBAL-POLYGON-PROJECTION Description Similar to a global-polygon-projection, but the polygon is filleted as with global-filleted-polygon. Input Slots (required) PROJECTION-DEPTH [ from GLOBAL-POLYGON-PROJECTION ] number The resultant distance from the two end faces of the extrusion. VERTEX-LIST [ from GLOBAL-POLYGON-PROJECTION ] list of 3d points The vertex list making up the polyline, same as the input for global-polyline. Input Slots (optional) DEFAULT-RADIUS number Specifies a radius to use for all vertices. Radius-list will take precedence over this. HIDDEN? [ from VANILLA-MIXIN* ] boolean Indicates whether the object should effectively be a hidden-object even if specified in :objects. Default is nil.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/19/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 0,
      "chunk_count": 7
    },
    "id": "8519f4f79f120ed3ab9b33cf0532eb76"
  },
  {
    "text": "ly be a hidden-object even if specified in :objects. Default is nil. IMAGE-FILE [ from BASE-OBJECT ] pathname or string Points to a pre-existing image file to be displayed instead of actual geometry for this object. Defaults to nil LOCAL-BOX [ from BASE-OBJECT ] list of two 3d points The left front bottom and right rear top corners, in global coordinates, of the rectangular volume bounding this geometric object. OBLIQUENESS [ from BASE-OBJECT ] 3x3 orthonormal matrix of double-float numbers This is synonymous with the orientation . OFFSET [ from GLOBAL-POLYGON-PROJECTION ] keyword symbol The direction of extrusion with respect to the vertices in vertex-list and the projection-vector: :up Indicates to start from current location of vertices and move in the direction of the projection-vector. :down Indicates to start from current location of vertices and move in the direction opposite the projection-vector.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/19/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 1,
      "chunk_count": 7
    },
    "id": "a2fae8d73bcbcf9c945a91dba4cdb7b0"
  },
  {
    "text": ". :down Indicates to start from current location of vertices and move in the direction opposite the projection-vector. :center Indicates to start from current location of vertices and move in the direction of the projection-vector and opposite the projection-vector, going half the projection-depth in each direction. ONCLICK-FUNCTION [ from BASE-OBJECT ] lambda function of zero arguments, or nil If non-nil, this function gets invoked when the user clicks the object in graphics front-ends which support this functionality, e.g. SVG/Raphael and X3DOM. PROJECTION-VECTOR [ from GLOBAL-POLYGON-PROJECTION ] 3d vector Indicates the straight path along which the extrusion should occur. RADIUS-LIST list of numbers Specifies the radius for each vertex (``corner'') of the filleted-polyline. ROOT [ from VANILLA-MIXIN* ] gdl instance The root-level node in this object's ``tree'' (instance hierarchy).",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/19/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 2,
      "chunk_count": 7
    },
    "id": "18cf828cb0bf1f25d218dcc7034cd2be"
  },
  {
    "text": "VANILLA-MIXIN* ] gdl instance The root-level node in this object's ``tree'' (instance hierarchy). SAFE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances All objects from the :objects specification, including elements of sequences as flat lists. Any children which throw errors come back as a plist with error information STRINGS-FOR-DISPLAY [ from VANILLA-MIXIN* ] string or list of strings Determines how the name of objects of this type will be printed in most places. This defaults to the name-for-display (generally the part's name as specified in its parent), followed by an index number if the part is an element of a sequence. VISIBLE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances Additional objects to display in Tatu tree. Typically this would be a subset of hidden-children. Defaults to NIL. Input Slots (optional, defaulting) CENTER [ from BASE-OBJECT ] 3d point Indicates in global coordinates where the center of the reference box of this object should be located.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/19/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 3,
      "chunk_count": 7
    },
    "id": "8c33d4ef5b835385bd6ddb841de4eb93"
  },
  {
    "text": "Defaults to NIL. Input Slots (optional, defaulting) CENTER [ from BASE-OBJECT ] 3d point Indicates in global coordinates where the center of the reference box of this object should be located. DISPLAY-CONTROLS [ from BASE-OBJECT ] plist May contain keywords and values indicating display characteristics for this object. The following keywords are recognized currently: :color color keyword from the *color-table* parameter, or an HTML-style hexidecimal RGB string value, e.g. \"#FFFFFF\" for pure white. Defaults to :black. :line-thickness an integer, defaulting to 1, indicating relative line thickness for wireframe representations of this object. :dash-pattern (currently PDF/PNG/JPEG only). This is a list of two or three numbers which indicate the length, in pixels, of the dashes and blank spaces in a dashed line. The optional third number indicates how far into the line or curve to start the dash pattern. HEIGHT [ from BASE-OBJECT ] number Z-axis dimension of the reference box.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/19/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 4,
      "chunk_count": 7
    },
    "id": "ab5288b80bc0c83bd1203e4a914e219a"
  },
  {
    "text": "s in a dashed line. The optional third number indicates how far into the line or curve to start the dash pattern. HEIGHT [ from BASE-OBJECT ] number Z-axis dimension of the reference box. Defaults to zero. LENGTH [ from BASE-OBJECT ] number Y-axis dimension of the reference box. Defaults to zero. ORIENTATION [ from BASE-OBJECT ] 3x3 matrix of double-float numbers Indicates the absolute Rotation Matrix used to create the coordinate system of this object. This matrix is given in absolute terms (i.e. with respect to the root's orientation), and is generally created with the alignment function. It should be an orthonormal matrix, meaning each row is a vector with a magnitude of one (1.0). WIDTH [ from BASE-OBJECT ] number X-axis dimension of the reference box. Defaults to zero.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/19/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 5,
      "chunk_count": 7
    },
    "id": "467b6dea03942557b68f2bb06f011923"
  },
  {
    "text": "Examples (in-package :gdl-user) (define-object global-filleted-polygon-projection-sample (global-filleted-polygon-projection) :computed-slots ((display-controls (list :color :blue-steel :transparency 0.3 :shininess 0.7 :spectral-color :white)) (default-radius 5) (projection-depth 5) (vertex-list (list (make-point 0 0 0) (make-point 10 10 0) (make-point 30 10 0) (make-point 40 0 0) (make-point 30 -10 0) (make-point 10 -10 0) (make-point 0 0 0))))) (generate-sample-drawing :objects (make-object 'global-filleted-polygon-projection-sample) :projection-direction :trimetric) Package Documentation Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/19/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 6,
      "chunk_count": 7
    },
    "id": "3e8faf61dc074d34c6ebd21aa22b1504"
  },
  {
    "text": "GendL Application - BOX Package Documentation Object: BOX (The :GEOM-BASE Package) Mixins: BASE-OBJECT Description This represents a ``visible'' base-object -- a six-sided box with all the same messages as base-object, which knows how to output itself in various formats. Input Slots (optional) BOUNDING-BOX [ from BASE-OBJECT ] list of two 3d points The left front bottom and right rear top corners, in global coordinates, of the rectangular volume bounding the tree of geometric objects rooted at this object. HIDDEN? [ from VANILLA-MIXIN* ] boolean Indicates whether the object should effectively be a hidden-object even if specified in :objects. Default is nil. IMAGE-FILE [ from BASE-OBJECT ] pathname or string Points to a pre-existing image file to be displayed instead of actual geometry for this object.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/8/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 0,
      "chunk_count": 6
    },
    "id": "4e73e0b5054a371b396c04ed7c716f74"
  },
  {
    "text": "this object. Defaults to nil LOCAL-BOX [ from BASE-OBJECT ] list of two 3d points The left front bottom and right rear top corners, in global coordinates, of the rectangular volume bounding this geometric object. OBLIQUENESS [ from BASE-OBJECT ] 3x3 orthonormal matrix of double-float numbers This is synonymous with the orientation . ONCLICK-FUNCTION [ from BASE-OBJECT ] lambda function of zero arguments, or nil If non-nil, this function gets invoked when the user clicks the object in graphics front-ends which support this functionality, e.g. SVG/Raphael and X3DOM. ROOT [ from VANILLA-MIXIN* ] gdl instance The root-level node in this object's ``tree'' (instance hierarchy). SAFE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances All objects from the :objects specification, including elements of sequences as flat lists.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/8/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 1,
      "chunk_count": 6
    },
    "id": "6796436cefb1b6811f089d7db8629113"
  },
  {
    "text": "ents of sequences as flat lists. Any children which throw errors come back as a plist with error information STRINGS-FOR-DISPLAY [ from VANILLA-MIXIN* ] string or list of strings Determines how the name of objects of this type will be printed in most places. This defaults to the name-for-display (generally the part's name as specified in its parent), followed by an index number if the part is an element of a sequence. VISIBLE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances Additional objects to display in Tatu tree. Typically this would be a subset of hidden-children. Defaults to NIL. Input Slots (optional, defaulting) CENTER [ from BASE-OBJECT ] 3d point Indicates in global coordinates where the center of the reference box of this object should be located. DISPLAY-CONTROLS [ from BASE-OBJECT ] plist May contain keywords and values indicating display characteristics for this object.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/8/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 2,
      "chunk_count": 6
    },
    "id": "c7700ec31e98bf57525d5d740e061977"
  },
  {
    "text": "ASE-OBJECT ] plist May contain keywords and values indicating display characteristics for this object. The following keywords are recognized currently: :color color keyword from the *color-table* parameter, or an HTML-style hexidecimal RGB string value, e.g. \"#FFFFFF\" for pure white. Defaults to :black. :line-thickness an integer, defaulting to 1, indicating relative line thickness for wireframe representations of this object. :dash-pattern (currently PDF/PNG/JPEG only). This is a list of two or three numbers which indicate the length, in pixels, of the dashes and blank spaces in a dashed line. The optional third number indicates how far into the line or curve to start the dash pattern. HEIGHT [ from BASE-OBJECT ] number Z-axis dimension of the reference box. Defaults to zero. LENGTH [ from BASE-OBJECT ] number Y-axis dimension of the reference box. Defaults to zero.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/8/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 3,
      "chunk_count": 6
    },
    "id": "920a8d3341b479b0f18b127be474930b"
  },
  {
    "text": "m BASE-OBJECT ] number Y-axis dimension of the reference box. Defaults to zero. ORIENTATION [ from BASE-OBJECT ] 3x3 matrix of double-float numbers Indicates the absolute Rotation Matrix used to create the coordinate system of this object. This matrix is given in absolute terms (i.e. with respect to the root's orientation), and is generally created with the alignment function. It should be an orthonormal matrix, meaning each row is a vector with a magnitude of one (1.0). WIDTH [ from BASE-OBJECT ] number X-axis dimension of the reference box. Defaults to zero. Computed Slots VOLUME number Total volume of the box. GDL Functions CLOSEST-VERTEX 3d-point .",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/8/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 4,
      "chunk_count": 6
    },
    "id": "4524c63cd090fac89e9c93754a90f25c"
  },
  {
    "text": "Examples (in-package :gdl-user) (define-object box-sample (box) :computed-slots ((display-controls (list :color :blue-neon)) (length 10) (width (* (the length) +phi+)) (height (* (the width) +phi+)))) (generate-sample-drawing :objects (make-object 'box-sample) :projection-direction (getf *standard-views* :trimetric)) Package Documentation Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/8/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 5,
      "chunk_count": 6
    },
    "id": "326ced6d7ad1b78f5edd49eed1e54ef3"
  },
  {
    "text": "GendL Application - GLOBAL-POLYLINE Package Documentation Object: GLOBAL-POLYLINE (The :GEOM-BASE Package) Mixins: GLOBAL-POLYLINE-MIXIN , VANILLA-MIXIN Description A sequence of points connected by straight line segments. Please see global-polyline-mixin for documentation on the messages. Input Slots (required) VERTEX-LIST [ from GLOBAL-POLYLINE-MIXIN ] list of 3d points The vertices (``corners'') of the polyline. Input Slots (optional) CLOSED? [ from GLOBAL-POLYLINE-MIXIN ] boolean Controls whether the filleted-polyline should automatically be closed. HIDDEN? [ from VANILLA-MIXIN* ] boolean Indicates whether the object should effectively be a hidden-object even if specified in :objects. Default is nil. IMAGE-FILE [ from BASE-OBJECT ] pathname or string Points to a pre-existing image file to be displayed instead of actual geometry for this object.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/23/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 0,
      "chunk_count": 6
    },
    "id": "20e887a6c49cfbf206ce18acb767e1c5"
  },
  {
    "text": "to be displayed instead of actual geometry for this object. Defaults to nil LOCAL-BOX [ from BASE-OBJECT ] list of two 3d points The left front bottom and right rear top corners, in global coordinates, of the rectangular volume bounding this geometric object. OBLIQUENESS [ from BASE-OBJECT ] 3x3 orthonormal matrix of double-float numbers This is synonymous with the orientation . ONCLICK-FUNCTION [ from BASE-OBJECT ] lambda function of zero arguments, or nil If non-nil, this function gets invoked when the user clicks the object in graphics front-ends which support this functionality, e.g. SVG/Raphael and X3DOM. ROOT [ from VANILLA-MIXIN* ] gdl instance The root-level node in this object's ``tree'' (instance hierarchy). SAFE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances All objects from the :objects specification, including elements of sequences as flat lists.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/23/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 1,
      "chunk_count": 6
    },
    "id": "845e1a49e333557a0518c1626bf4aff5"
  },
  {
    "text": "from the :objects specification, including elements of sequences as flat lists. Any children which throw errors come back as a plist with error information STRINGS-FOR-DISPLAY [ from VANILLA-MIXIN* ] string or list of strings Determines how the name of objects of this type will be printed in most places. This defaults to the name-for-display (generally the part's name as specified in its parent), followed by an index number if the part is an element of a sequence. VISIBLE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances Additional objects to display in Tatu tree. Typically this would be a subset of hidden-children. Defaults to NIL. Input Slots (optional, defaulting) CENTER [ from BASE-OBJECT ] 3d point Indicates in global coordinates where the center of the reference box of this object should be located. DISPLAY-CONTROLS [ from BASE-OBJECT ] plist May contain keywords and values indicating display characteristics for this object.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/23/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 2,
      "chunk_count": 6
    },
    "id": "cb30eb329aad4cf946304d1a9c18c32d"
  },
  {
    "text": "ect should be located. DISPLAY-CONTROLS [ from BASE-OBJECT ] plist May contain keywords and values indicating display characteristics for this object. The following keywords are recognized currently: :color color keyword from the *color-table* parameter, or an HTML-style hexidecimal RGB string value, e.g. \"#FFFFFF\" for pure white. Defaults to :black. :line-thickness an integer, defaulting to 1, indicating relative line thickness for wireframe representations of this object. :dash-pattern (currently PDF/PNG/JPEG only). This is a list of two or three numbers which indicate the length, in pixels, of the dashes and blank spaces in a dashed line. The optional third number indicates how far into the line or curve to start the dash pattern. HEIGHT [ from BASE-OBJECT ] number Z-axis dimension of the reference box. Defaults to zero. LENGTH [ from BASE-OBJECT ] number Y-axis dimension of the reference box. Defaults to zero.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/23/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 3,
      "chunk_count": 6
    },
    "id": "0e91783176d41c3e3b9c3effcd6c9306"
  },
  {
    "text": "he reference box. Defaults to zero. LENGTH [ from BASE-OBJECT ] number Y-axis dimension of the reference box. Defaults to zero. ORIENTATION [ from BASE-OBJECT ] 3x3 matrix of double-float numbers Indicates the absolute Rotation Matrix used to create the coordinate system of this object. This matrix is given in absolute terms (i.e. with respect to the root's orientation), and is generally created with the alignment function. It should be an orthonormal matrix, meaning each row is a vector with a magnitude of one (1.0). WIDTH [ from BASE-OBJECT ] number X-axis dimension of the reference box. Defaults to zero.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/23/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 4,
      "chunk_count": 6
    },
    "id": "cfb4ac05419456137077c8020c720112"
  },
  {
    "text": "Examples (in-package :gdl-user) (define-object global-polyline-sample (global-polyline) :computed-slots ((vertex-list (list (make-point 0 0 0) (make-point 10 10 0) (make-point 30 10 0) (make-point 40 0 0) (make-point 30 -10 0) (make-point 10 -10 0) (make-point 0 0 0))))) (generate-sample-drawing :objects (make-object 'global-polyline-sample)) Package Documentation Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/23/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 5,
      "chunk_count": 6
    },
    "id": "2c7f406017a075805473a93a1b656fb4"
  },
  {
    "text": "GendL Application - BASE-VIEW Package Documentation Object: BASE-VIEW (The :GEOM-BASE Package) Mixins: BASE-OBJECT Description Generic container object for displaying a scaled transformed view of geometric or text-based objects. Base-view can be used by itself or as a child of a base-drawing In a GWL application-mixin, you can include an object of this type in the ui-display-list-leaves. For the PDF output-format, you can also use the cad-output output-function to write the view as a PDF document. Since base-view is inherently a 2D object, only the top view (getf *standard-views* :top) makes sense for viewing it. Input Slots (optional) ANNOTATION-OBJECTS list of gdl objects These objects will be displayed in each view by default, with no scaling or transform (i.e. they are in Drawing space. BORDER-BOX? boolean Determines whether a rectangular border box is drawn around the view, with the view's length and width. Defaults to nil.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/6/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 0,
      "chunk_count": 10
    },
    "id": "7d096233b820b5b7f1ab98a8699e5e35"
  },
  {
    "text": ". BORDER-BOX? boolean Determines whether a rectangular border box is drawn around the view, with the view's length and width. Defaults to nil. BOUNDING-BOX [ from BASE-OBJECT ] list of two 3d points The left front bottom and right rear top corners, in global coordinates, of the rectangular volume bounding the tree of geometric objects rooted at this object. CENTER 3d-point Center of the view box. Specify this or corner, not both. note: that the center is no longer defaulting (so that it can self-compute properly when corner is specified), so it is necessary to explicitly give either start or center for base-view. CORNER 3d-point Top left (i.e. rear left from top view) of the view box. Specify this or center, not both. FRONT-MARGIN number in drawing scale (e g. points). Amount of margin on front and rear of page when view-scale is to be computed automatically. Defaults to 25.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/6/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 1,
      "chunk_count": 10
    },
    "id": "c1191a8eed0e66f121400eb78dbf7e12"
  },
  {
    "text": "front and rear of page when view-scale is to be computed automatically. Defaults to 25. HIDDEN? [ from VANILLA-MIXIN* ] boolean Indicates whether the object should effectively be a hidden-object even if specified in :objects. Default is nil. IMAGE-FILE [ from BASE-OBJECT ] pathname or string Points to a pre-existing image file to be displayed instead of actual geometry for this object. Defaults to nil IMMUNE-OBJECTS list of gdl objects These objects are immune from view scaling and transform computations and so can freely refer to the view-scale, view-center, and other view information for self-scaling views. Defaults to NIL. LEFT-MARGIN number in drawing scale (e g. points). Amount of margin on left and right of page when view-scale is to be computed automatically. Defaults to 25. LOCAL-BOX [ from BASE-OBJECT ] list of two 3d points The left front bottom and right rear top corners, in global coordinates, of the rectangular volume bounding this geometric object.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/6/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 2,
      "chunk_count": 10
    },
    "id": "84f25d460653780130d03c9801374c26"
  },
  {
    "text": "OX [ from BASE-OBJECT ] list of two 3d points The left front bottom and right rear top corners, in global coordinates, of the rectangular volume bounding this geometric object. OBJECT-ROOTS list of gdl objects The leaves from each of these objects will be displayed in each view by default. OBJECTS list of gdl objects These objects will be displayed in each view by default. OBLIQUENESS [ from BASE-OBJECT ] 3x3 orthonormal matrix of double-float numbers This is synonymous with the orientation . ONCLICK-FUNCTION [ from BASE-OBJECT ] lambda function of zero arguments, or nil If non-nil, this function gets invoked when the user clicks the object in graphics front-ends which support this functionality, e.g. SVG/Raphael and X3DOM. PROJECTION-VECTOR 3d unitized vector Direction of camera pointing to model (the object-roots and/or the objects) to create this view.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/6/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 3,
      "chunk_count": 10
    },
    "id": "b7bfcc96540e7f18fed7c7514b6b66ee"
  },
  {
    "text": "to model (the object-roots and/or the objects) to create this view. The view is automatically ``twisted''about this vector to result in ``up'' being as close as possible to the Z vector, unless this vector is parallel to the Z vector in which case ``up'' is taken to be the Y (rear) vector. This vector is normally taken from the *standard-views* built-in GDL parameter. Defaults to (getf *standard-views* :top) , which is the vector [0, 0, 1]. ROOT [ from VANILLA-MIXIN* ] gdl instance The root-level node in this object's ``tree'' (instance hierarchy). SAFE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances All objects from the :objects specification, including elements of sequences as flat lists. Any children which throw errors come back as a plist with error information SNAP-TO 3d vector For a top view, this vector specifies the direction that the rear of the box should be facing. Defaults to *nominal-y-vector* .",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/6/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 4,
      "chunk_count": 10
    },
    "id": "421a9a7a7f0864840880e2cac35ef979"
  },
  {
    "text": "For a top view, this vector specifies the direction that the rear of the box should be facing. Defaults to *nominal-y-vector* . STRINGS-FOR-DISPLAY [ from VANILLA-MIXIN* ] string or list of strings Determines how the name of objects of this type will be printed in most places. This defaults to the name-for-display (generally the part's name as specified in its parent), followed by an index number if the part is an element of a sequence. VIEW-CENTER 3d point in model space Point relative to each object's center to use as center of the view. VIEW-SCALE number Ratio of drawing scale (in points) to model scale for this view. Defaults to being auto-computed. VISIBLE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances Additional objects to display in Tatu tree. Typically this would be a subset of hidden-children. Defaults to NIL.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/6/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 5,
      "chunk_count": 10
    },
    "id": "4298f93a9e56a7b80733827b3e598ec9"
  },
  {
    "text": "et of hidden-children. Defaults to NIL. Input Slots (optional, defaulting) DISPLAY-CONTROLS [ from BASE-OBJECT ] plist May contain keywords and values indicating display characteristics for this object. The following keywords are recognized currently: :color color keyword from the *color-table* parameter, or an HTML-style hexidecimal RGB string value, e.g. \"#FFFFFF\" for pure white. Defaults to :black. :line-thickness an integer, defaulting to 1, indicating relative line thickness for wireframe representations of this object. :dash-pattern (currently PDF/PNG/JPEG only). This is a list of two or three numbers which indicate the length, in pixels, of the dashes and blank spaces in a dashed line. The optional third number indicates how far into the line or curve to start the dash pattern. HEIGHT [ from BASE-OBJECT ] number Z-axis dimension of the reference box. Defaults to zero. LENGTH [ from BASE-OBJECT ] number Y-axis dimension of the reference box. Defaults to zero.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/6/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 6,
      "chunk_count": 10
    },
    "id": "99043653319e0ecfc6eaaffb00d2dd6a"
  },
  {
    "text": "HT [ from BASE-OBJECT ] number Z-axis dimension of the reference box. Defaults to zero. LENGTH [ from BASE-OBJECT ] number Y-axis dimension of the reference box. Defaults to zero. ORIENTATION [ from BASE-OBJECT ] 3x3 matrix of double-float numbers Indicates the absolute Rotation Matrix used to create the coordinate system of this object. This matrix is given in absolute terms (i.e. with respect to the root's orientation), and is generally created with the alignment function. It should be an orthonormal matrix, meaning each row is a vector with a magnitude of one (1.0). WIDTH [ from BASE-OBJECT ] number X-axis dimension of the reference box. Defaults to zero. GDL Functions MODEL-POINT 3d point Takes point in view coordinates and returns corresponding point in model coordinates. arguments: view-point 3D Point Point in view coordinates VIEW-POINT 3d point Takes point in model coordinates and returns corresponding point in view coordinates.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/6/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 7,
      "chunk_count": 10
    },
    "id": "86dd205949d1c9197c4e299ef594924b"
  },
  {
    "text": "iew-point 3D Point Point in view coordinates VIEW-POINT 3d point Takes point in model coordinates and returns corresponding point in view coordinates. arguments: model-point 3D Point Point in model coordinates Examples (in-package :gdl-user) (define-object box-with-two-viewed-drawing (base-object) :objects ((drawing :type 'two-viewed-drawing :objects-to-draw (list (the box) (the length-dim))) (length-dim :type 'horizontal-dimension :hidden? t :start-point (the box (vertex :rear :top :left)) :end-point (the box (vertex :rear :top :right))) (box :type 'box :hidden? t :length 5 :width 10 :height 15))) (define-object two-viewed-drawing (base-drawing) :input-slots (objects-to-draw) :objects ((main-view :type 'base-view :projection-vector (getf *standard-views* :trimetric) :length (half (the length)) :center (translate (the center) :rear (half (the-child length))) :objects (the objects-to-draw)) (top-view :type 'base-view :projection-vector (getf *standard-views* :top) :length (* 0.30 (the",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/6/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 8,
      "chunk_count": 10
    },
    "id": "b00fc1ba697bcf641f335327a7a401a3"
  },
  {
    "text": "gth)) :center (translate (the center) :rear (half (the-child length))) :objects (the objects-to-draw)) (top-view :type 'base-view :projection-vector (getf *standard-views* :top) :length (* 0.30 (the length)) :objects (the objects-to-draw)))) (generate-sample-drawing :objects (the-object (make-object 'box-with-two-viewed-drawing) drawing top-view)) Package Documentation Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/6/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 9,
      "chunk_count": 10
    },
    "id": "c54e8992b49bdbd01870b4d76363c05f"
  },
  {
    "text": "GendL Application - PARALLEL-DIMENSION Package Documentation Object: PARALLEL-DIMENSION (The :GEOM-BASE Package) Mixins: LINEAR-DIMENSION Description Creates a dimension annotation along an axis from a start point to an end point. Input Slots (required) END-POINT [ from LINEAR-DIMENSION ] 3d point Actual point where the dimension will stop measuring START-POINT [ from LINEAR-DIMENSION ] 3d point Actual point where the dimension will start measuring Input Slots (optional) ARROWHEAD-LENGTH [ from LINEAR-DIMENSION ] length (from tip to tail) of arrowhead glyph Defaults to twice the arrowhead-width ARROWHEAD-STYLE [ from LINEAR-DIMENSION ] keyword symbol Style for arrowhead on end of leader-line . Currently supported values are :none , :wedge (the Default), and :double-wedge . ARROWHEAD-STYLE-2 [ from LINEAR-DIMENSION ] keyword symbol Style for arrowhead on end of leader-line . Currently supported values are :none (the Default), :wedge , and :double-wedge .",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/30/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 0,
      "chunk_count": 13
    },
    "id": "629f3979ac4894f78efaa108e31fa090"
  },
  {
    "text": "2 [ from LINEAR-DIMENSION ] keyword symbol Style for arrowhead on end of leader-line . Currently supported values are :none (the Default), :wedge , and :double-wedge . ARROWHEAD-WIDTH [ from LINEAR-DIMENSION ] width of arrowhead glyph Defaults to half the character-size. BOUNDING-BOX [ from BASE-OBJECT ] list of two 3d points The left front bottom and right rear top corners, in global coordinates, of the rectangular volume bounding the tree of geometric objects rooted at this object. CHARACTER-SIZE [ from LINEAR-DIMENSION ] number Size (glyph height) of the label text, in model units. Defaults to 1. DIM-TEXT [ from LINEAR-DIMENSION ] string Determines the text which shows up as the dimension label. Defaults to the dim-value, which is computed specially in each specific dimension type. DIM-TEXT-BIAS [ from LINEAR-DIMENSION ] keyword symbol, :start, :end, or :center Indicates where to position the text in the case when outside-leaders? is non-nil.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/30/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 1,
      "chunk_count": 13
    },
    "id": "0f2604187a429370e6b53a75bc8bc50d"
  },
  {
    "text": "TEXT-BIAS [ from LINEAR-DIMENSION ] keyword symbol, :start, :end, or :center Indicates where to position the text in the case when outside-leaders? is non-nil. Defaults to :center DIM-TEXT-START 3d point Determines where the text will start. Defaults to reasonable location for horizontal-dimension. DIM-TEXT-START-OFFSET [ from LINEAR-DIMENSION ] 3d vector (normally only 2d are used) . The dim-text-start is offset by this vector, in model space. Defaults to #(0.0 0.0 0.0) DIM-VALUE [ from LINEAR-DIMENSION ] number 2D distance relative to the base-plane-normal. Can be over-ridden in the subclass DXF-FONT [ from LINEAR-DIMENSION ] string This names the DXF font for this general-note. Defaults to (the font) . DXF-OFFSET [ from LINEAR-DIMENSION ] number The start of text will be offset by this amount for DXF output. Default is 2. DXF-SIZE-RATIO [ from LINEAR-DIMENSION ] number The scale factor for DXF character size vs PDF character size.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/30/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 2,
      "chunk_count": 13
    },
    "id": "e53df7d83ec09d87adb3f2ad09f76e84"
  },
  {
    "text": "amount for DXF output. Default is 2. DXF-SIZE-RATIO [ from LINEAR-DIMENSION ] number The scale factor for DXF character size vs PDF character size. Default is 0.8 DXF-TEXT-X-SCALE [ from LINEAR-DIMENSION ] number in percentage Adjusts the character width for DXF output. Defaults to the text-x-scale. FLIP-LEADERS? [ from LINEAR-DIMENSION ] boolean Indicates which direction the witness lines should take from the start and end points. The Default is NIL, which indicates :rear (i.e. ``up'') for horizontal-dimensions and :right for vertical-dimensions FONT [ from LINEAR-DIMENSION ] string naming a standard pdf font Font for the label text. Defaults to \"Helvetica\" FULL-LEADER-LINE-LENGTH [ from LINEAR-DIMENSION ] number Indicates the length of the full leader when outside-leaders? is nil. This defaults to nil, which indicates that the full-leader's length should be auto-computed based on the given start-point and end-point.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/30/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 3,
      "chunk_count": 13
    },
    "id": "0fc28926fe7a3609b17b9feac7f96ec5"
  },
  {
    "text": "efaults to nil, which indicates that the full-leader's length should be auto-computed based on the given start-point and end-point. HIDDEN? [ from VANILLA-MIXIN* ] boolean Indicates whether the object should effectively be a hidden-object even if specified in :objects. Default is nil. IMAGE-FILE [ from BASE-OBJECT ] pathname or string Points to a pre-existing image file to be displayed instead of actual geometry for this object. Defaults to nil JUSTIFICATION [ from LINEAR-DIMENSION ] keyword symbol, :left, :right, or :center . For multi-line dim-text, this justification is applied. LEADER-1? [ from LINEAR-DIMENSION ] boolean Indicates whether the first (or only) leader line should be displayed. The Default is T LEADER-2? [ from LINEAR-DIMENSION ] boolean Indicates whether the second leader line should be displayed.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/30/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 4,
      "chunk_count": 13
    },
    "id": "3f98bbe644cb0f128cac96496b8a90aa"
  },
  {
    "text": "line should be displayed. The Default is T LEADER-LINE-LENGTH [ from LINEAR-DIMENSION ] number Indicates the length of the first leader for the case when outside-leaders? is non-NIL LEADER-LINE-LENGTH-2 [ from LINEAR-DIMENSION ] number Indicates the length of the second leader for the case when outside-leaders? is non-NIL LEADER-TEXT-GAP [ from LINEAR-DIMENSION ] number Amount of gap between leader lines and dimension text, when the dimension text is within the leader. Defaults to half the character-size. OBLIQUENESS [ from BASE-OBJECT ] 3x3 orthonormal matrix of double-float numbers This is synonymous with the orientation . ONCLICK-FUNCTION [ from BASE-OBJECT ] lambda function of zero arguments, or nil If non-nil, this function gets invoked when the user clicks the object in graphics front-ends which support this functionality, e.g. SVG/Raphael and X3DOM.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/30/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 5,
      "chunk_count": 13
    },
    "id": "f528cb34ea90b9e0179d6878def0efcf"
  },
  {
    "text": "nt-ends which support this functionality, e.g. SVG/Raphael and X3DOM. ORIENTATION [ from BASE-OBJECT ] 3x3 matrix of double-float numbers Indicates the absolute Rotation Matrix used to create the coordinate system of this object. This matrix is given in absolute terms (i.e. with respect to the root's orientation), and is generally created with the alignment function. It should be an orthonormal matrix, meaning each row is a vector with a magnitude of one (1.0). OUTLINE-SHAPE-TYPE [ from LINEAR-DIMENSION ] keyword symbol Currently can be :bubble, :rectangle, or :none. Default is :none. OUTSIDE-LEADERS-LENGTH-FACTOR [ from LINEAR-DIMENSION ] number Indicates the default length of the outside-leaders as a multiple of arrowhead-length. Defaults to 3. OUTSIDE-LEADERS? [ from LINEAR-DIMENSION ] boolean Indicates whether the leader line(s) should be inside or outside the interval between the start and end points.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/30/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 6,
      "chunk_count": 13
    },
    "id": "a75615521449e35e0d74713e951efb26"
  },
  {
    "text": "boolean Indicates whether the leader line(s) should be inside or outside the interval between the start and end points. The default is NIL, which indicates that the leader line(s) should be inside the interval ROOT [ from VANILLA-MIXIN* ] gdl instance The root-level node in this object's ``tree'' (instance hierarchy). SAFE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances All objects from the :objects specification, including elements of sequences as flat lists. Any children which throw errors come back as a plist with error information STRINGS-FOR-DISPLAY [ from VANILLA-MIXIN* ] string or list of strings Determines how the name of objects of this type will be printed in most places. This defaults to the name-for-display (generally the part's name as specified in its parent), followed by an index number if the part is an element of a sequence.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/30/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 7,
      "chunk_count": 13
    },
    "id": "718f6b82fe0ade5dd064e22f46635c16"
  },
  {
    "text": "by an index number if the part is an element of a sequence. TEXT-ABOVE-LEADER? [ from LINEAR-DIMENSION ] boolean Indicates whether the text is to the right or above the leader line, rather than in-line with it. Default is T. TEXT-ALONG-AXIS? [ from LINEAR-DIMENSION ] boolean Where applicable, determines whether text direction follows leader-line direction TEXT-X-SCALE [ from LINEAR-DIMENSION ] number in percentage Adjusts the character width for the dimension-text and currently only applies only to PDF output UNDERLINE? [ from LINEAR-DIMENSION ] GDL VIEW-REFERENCE-OBJECT [ from LINEAR-DIMENSION ] gdl object or nil View object which will use this dimension. Defaults to NIL. VISIBLE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances Additional objects to display in Tatu tree. Typically this would be a subset of hidden-children. Defaults to NIL. WITNESS-LINE-2? [ from LINEAR-DIMENSION ] boolean Indicates whether to display a witness line coming off the end-point .",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/30/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 8,
      "chunk_count": 13
    },
    "id": "8223d6600be6b8907c306450bdfcf60b"
  },
  {
    "text": "this would be a subset of hidden-children. Defaults to NIL. WITNESS-LINE-2? [ from LINEAR-DIMENSION ] boolean Indicates whether to display a witness line coming off the end-point . Default is T WITNESS-LINE-EXT [ from LINEAR-DIMENSION ] number Distance the witness line(s) extend beyond the leader line. Default is 0.3 WITNESS-LINE-GAP [ from LINEAR-DIMENSION ] number Distance from the start-point and end-point to the start of each witness-line. Default is 0.1 WITNESS-LINE-LENGTH [ from LINEAR-DIMENSION ] number Length of the witness lines (or of the shorter witness line in case they are different lengths) WITNESS-LINE? [ from LINEAR-DIMENSION ] boolean Indicates whether to display a witness line coming off the start-point . Default is T Input Slots (optional, defaulting) CENTER [ from BASE-OBJECT ] 3d point Indicates in global coordinates where the center of the reference box of this object should be located.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/30/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 9,
      "chunk_count": 13
    },
    "id": "69e555cd3a5f865c9e8df27042ca4ef8"
  },
  {
    "text": "OBJECT ] 3d point Indicates in global coordinates where the center of the reference box of this object should be located. DISPLAY-CONTROLS [ from BASE-OBJECT ] plist May contain keywords and values indicating display characteristics for this object. The following keywords are recognized currently: :color color keyword from the *color-table* parameter, or an HTML-style hexidecimal RGB string value, e.g. \"#FFFFFF\" for pure white. Defaults to :black. :line-thickness an integer, defaulting to 1, indicating relative line thickness for wireframe representations of this object. :dash-pattern (currently PDF/PNG/JPEG only). This is a list of two or three numbers which indicate the length, in pixels, of the dashes and blank spaces in a dashed line. The optional third number indicates how far into the line or curve to start the dash pattern. HEIGHT [ from BASE-OBJECT ] number Z-axis dimension of the reference box. Defaults to zero.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/30/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 10,
      "chunk_count": 13
    },
    "id": "3037cb836780ce491e4d8ef4405f7003"
  },
  {
    "text": "e line or curve to start the dash pattern. HEIGHT [ from BASE-OBJECT ] number Z-axis dimension of the reference box. Defaults to zero. LENGTH [ from BASE-OBJECT ] number Y-axis dimension of the reference box. Defaults to zero. WIDTH [ from BASE-OBJECT ] number X-axis dimension of the reference box. Defaults to zero. Computed Slots BASE-PLANE-NORMAL [ from LINEAR-DIMENSION ] Must be specified in the subclass except for angular LEADER-DIRECTION-1-VECTOR [ from LINEAR-DIMENSION ] Must be specified in the subclass except for angular LEADER-DIRECTION-2-VECTOR [ from LINEAR-DIMENSION ] Must be specified in the subclass except for angular WITNESS-DIRECTION-VECTOR [ from LINEAR-DIMENSION ] Must be specified in the subclass except for angular Examples (in-package :gdl-user) (define-object parallel-dimension-sample (base-object) :objects ((box :type 'box :length 10 :width (* (the-child length) +phi+) :height (* (the-child :width) +phi+)) (length-dimension :type 'parallel-dimension",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/30/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 11,
      "chunk_count": 13
    },
    "id": "5b02b02f9990dd677a36e99a94f024f3"
  },
  {
    "text": "dimension-sample (base-object) :objects ((box :type 'box :length 10 :width (* (the-child length) +phi+) :height (* (the-child :width) +phi+)) (length-dimension :type 'parallel-dimension :character-size (/ (the box length) 20) :start-point (the box (vertex :top :left :front)) :end-point (the box (vertex :top :right :rear))))) (generate-sample-drawing :object-roots (make-object 'parallel-dimension-sample)) Package Documentation Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/30/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 12,
      "chunk_count": 13
    },
    "id": "bd6c6b54d864a280cabd1064d08bb952"
  },
  {
    "text": "GendL Application - BASE-DRAWING Package Documentation Object: BASE-DRAWING (The :GEOM-BASE Package) Mixins: BASE-OBJECT Description Generic container object for displaying one or more scaled transformed views of geometric or text-based entities. The contained views are generally of type base-view . In a GWL application-mixin, you can include one object of this type in the ui-display-list-leaves. For the PDF output-format, you can also use the cad-output output-function to write the drawing as a PDF document. Since base-drawing is inherently a 2D object, only the top view (getf *standard-views* :top) makes sense for viewing it. Input Slots (optional) BOUNDING-BOX [ from BASE-OBJECT ] list of two 3d points The left front bottom and right rear top corners, in global coordinates, of the rectangular volume bounding the tree of geometric objects rooted at this object. HEIGHT [ from BASE-OBJECT ] number Z-axis dimension of the reference box. Defaults to zero.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/4/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 0,
      "chunk_count": 7
    },
    "id": "e407a85a6e616b454e8263ccc960fecc"
  },
  {
    "text": "ngular volume bounding the tree of geometric objects rooted at this object. HEIGHT [ from BASE-OBJECT ] number Z-axis dimension of the reference box. Defaults to zero. HIDDEN? [ from VANILLA-MIXIN* ] boolean Indicates whether the object should effectively be a hidden-object even if specified in :objects. Default is nil. IMAGE-FILE [ from BASE-OBJECT ] pathname or string Points to a pre-existing image file to be displayed instead of actual geometry for this object. Defaults to nil LENGTH [ from BASE-OBJECT ] number Y-axis dimension of the reference box. Defaults to zero. LOCAL-BOX [ from BASE-OBJECT ] list of two 3d points The left front bottom and right rear top corners, in global coordinates, of the rectangular volume bounding this geometric object. OBLIQUENESS [ from BASE-OBJECT ] 3x3 orthonormal matrix of double-float numbers This is synonymous with the orientation .",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/4/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 1,
      "chunk_count": 7
    },
    "id": "ffd86288229fb063f5c0c59e2acca797"
  },
  {
    "text": "thonormal matrix of double-float numbers This is synonymous with the orientation . ONCLICK-FUNCTION [ from BASE-OBJECT ] lambda function of zero arguments, or nil If non-nil, this function gets invoked when the user clicks the object in graphics front-ends which support this functionality, e.g. SVG/Raphael and X3DOM. PAGE-LENGTH number in pdf points Front-to-back (or top-to-bottom) length of the paper being represented by this drawing. The default is (* 11 72) points, or 11 inches, corresponding to US standard letter-size paper. PAGE-WIDTH number in pdf points Left-to-right width of the paper being represented by this drawing. The default is (* 8.5 72) points, or 8.5 inches, corresponding to US standard letter-size paper. ROOT [ from VANILLA-MIXIN* ] gdl instance The root-level node in this object's ``tree'' (instance hierarchy). SAFE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances All objects from the :objects specification, including elements of sequences as flat lists.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/4/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 2,
      "chunk_count": 7
    },
    "id": "be212b3747be1aa38569801fc5df3c10"
  },
  {
    "text": "s object's ``tree'' (instance hierarchy). SAFE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances All objects from the :objects specification, including elements of sequences as flat lists. Any children which throw errors come back as a plist with error information STRINGS-FOR-DISPLAY [ from VANILLA-MIXIN* ] string or list of strings Determines how the name of objects of this type will be printed in most places. This defaults to the name-for-display (generally the part's name as specified in its parent), followed by an index number if the part is an element of a sequence. SVG-CLASS string with css classes These classes will be included in any svg tag outputted from this drawing. VISIBLE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances Additional objects to display in Tatu tree. Typically this would be a subset of hidden-children. Defaults to NIL. WIDTH [ from BASE-OBJECT ] number X-axis dimension of the reference box. Defaults to zero.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/4/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 3,
      "chunk_count": 7
    },
    "id": "5cd06614098d577dd2b3fcb6d857af72"
  },
  {
    "text": "ypically this would be a subset of hidden-children. Defaults to NIL. WIDTH [ from BASE-OBJECT ] number X-axis dimension of the reference box. Defaults to zero. Input Slots (optional, defaulting) CENTER [ from BASE-OBJECT ] 3d point Indicates in global coordinates where the center of the reference box of this object should be located. DISPLAY-CONTROLS [ from BASE-OBJECT ] plist May contain keywords and values indicating display characteristics for this object. The following keywords are recognized currently: :color color keyword from the *color-table* parameter, or an HTML-style hexidecimal RGB string value, e.g. \"#FFFFFF\" for pure white. Defaults to :black. :line-thickness an integer, defaulting to 1, indicating relative line thickness for wireframe representations of this object. :dash-pattern (currently PDF/PNG/JPEG only). This is a list of two or three numbers which indicate the length, in pixels, of the dashes and blank spaces in a dashed line.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/4/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 4,
      "chunk_count": 7
    },
    "id": "a77698ef6d1d684343d5295e44e28f40"
  },
  {
    "text": "ttern (currently PDF/PNG/JPEG only). This is a list of two or three numbers which indicate the length, in pixels, of the dashes and blank spaces in a dashed line. The optional third number indicates how far into the line or curve to start the dash pattern. ORIENTATION [ from BASE-OBJECT ] 3x3 matrix of double-float numbers Indicates the absolute Rotation Matrix used to create the coordinate system of this object. This matrix is given in absolute terms (i.e. with respect to the root's orientation), and is generally created with the alignment function. It should be an orthonormal matrix, meaning each row is a vector with a magnitude of one (1.0).",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/4/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 5,
      "chunk_count": 7
    },
    "id": "5f0104469803a63046da356c5ced7ff6"
  },
  {
    "text": "Examples (in-package :gdl-user) (define-object cylinder-sample (cylinder) :computed-slots ((display-controls (list :color :pink-spicy)) (length 10) (radius 3) (number-of-sections 25))) (define-object base-drawing-sample (base-drawing) :objects ((main-view :type 'base-view :projection-vector (getf *standard-views* :trimetric) :object-roots (list (the surf))) (surf :type 'cylinder-sample :hidden? t))) (generate-sample-drawing :objects (make-object 'base-drawing-sample)) Package Documentation Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/4/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 6,
      "chunk_count": 7
    },
    "id": "03e2d9346081b68f6b0eaeb6b8a677e9"
  },
  {
    "text": "GendL Application - CONSTRAINED-ARC Package Documentation Object: CONSTRAINED-ARC (The :GEOM-BASE Package) Mixins: ARC Description This object is intended to simplify the process of constructing lines using various constraints. Currently supported are 2 through-points or 1 through-point and at-angle. Note the line-constraints must be an evaluatable s-expression as this is not processed as a macro Input Slots (optional) BOUNDING-BOX [ from BASE-OBJECT ] list of two 3d points The left front bottom and right rear top corners, in global coordinates, of the rectangular volume bounding the tree of geometric objects rooted at this object. END-ANGLE [ from ARC ] angle in radians End angle of the arc. Defaults to twice pi. HIDDEN? [ from VANILLA-MIXIN* ] boolean Indicates whether the object should effectively be a hidden-object even if specified in :objects. Default is nil.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/13/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 0,
      "chunk_count": 5
    },
    "id": "cbb1b8563abb04d01e00325519f700f2"
  },
  {
    "text": "effectively be a hidden-object even if specified in :objects. Default is nil. IMAGE-FILE [ from BASE-OBJECT ] pathname or string Points to a pre-existing image file to be displayed instead of actual geometry for this object. Defaults to nil LOCAL-BOX [ from BASE-OBJECT ] list of two 3d points The left front bottom and right rear top corners, in global coordinates, of the rectangular volume bounding this geometric object. OBLIQUENESS [ from BASE-OBJECT ] 3x3 orthonormal matrix of double-float numbers This is synonymous with the orientation . ONCLICK-FUNCTION [ from BASE-OBJECT ] lambda function of zero arguments, or nil If non-nil, this function gets invoked when the user clicks the object in graphics front-ends which support this functionality, e.g. SVG/Raphael and X3DOM. ROOT [ from VANILLA-MIXIN* ] gdl instance The root-level node in this object's ``tree'' (instance hierarchy).",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/13/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 1,
      "chunk_count": 5
    },
    "id": "1aeb68c8664674e784eece471ba3228b"
  },
  {
    "text": "LA-MIXIN* ] gdl instance The root-level node in this object's ``tree'' (instance hierarchy). SAFE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances All objects from the :objects specification, including elements of sequences as flat lists. Any children which throw errors come back as a plist with error information START-ANGLE [ from ARC ] angle in radians Start angle of the arc. Defaults to zero. STRINGS-FOR-DISPLAY [ from VANILLA-MIXIN* ] string or list of strings Determines how the name of objects of this type will be printed in most places. This defaults to the name-for-display (generally the part's name as specified in its parent), followed by an index number if the part is an element of a sequence. VISIBLE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances Additional objects to display in Tatu tree. Typically this would be a subset of hidden-children. Defaults to NIL.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/13/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 2,
      "chunk_count": 5
    },
    "id": "d12bdfc2f623f805ddf091bc5a453300"
  },
  {
    "text": "to display in Tatu tree. Typically this would be a subset of hidden-children. Defaults to NIL. Input Slots (optional, defaulting) DISPLAY-CONTROLS [ from BASE-OBJECT ] plist May contain keywords and values indicating display characteristics for this object. The following keywords are recognized currently: :color color keyword from the *color-table* parameter, or an HTML-style hexidecimal RGB string value, e.g. \"#FFFFFF\" for pure white. Defaults to :black. :line-thickness an integer, defaulting to 1, indicating relative line thickness for wireframe representations of this object. :dash-pattern (currently PDF/PNG/JPEG only). This is a list of two or three numbers which indicate the length, in pixels, of the dashes and blank spaces in a dashed line. The optional third number indicates how far into the line or curve to start the dash pattern.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/13/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 3,
      "chunk_count": 5
    },
    "id": "f44e60b88fde2c98ae6b9ef1e4d6519d"
  },
  {
    "text": "into the line or curve to start the dash pattern. Computed Slots CENTER [ from BASE-OBJECT ] 3d point Indicates in global coordinates where the center of the reference box of this object should be located. ORIENTATION [ from BASE-OBJECT ] 3x3 matrix of double-float numbers Indicates the absolute Rotation Matrix used to create the coordinate system of this object. This matrix is given in absolute terms (i.e. with respect to the root's orientation), and is generally created with the alignment function. It should be an orthonormal matrix, meaning each row is a vector with a magnitude of one (1.0). RADIUS [ from ARC ] number Distance from center to any point on the arc. Package Documentation Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/13/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 4,
      "chunk_count": 5
    },
    "id": "017294eea52f6cc7f298d8808dec2ef0"
  },
  {
    "text": "GendL Application - C-CYLINDER Package Documentation Object: C-CYLINDER (The :GEOM-BASE Package) Mixins: CYLINDER Description Provides a simple way to create a cylinder, by specifying a start point and an end point. Input Slots (required) END 3d point Center of the end cap. RADIUS [ from CYLINDER ] number Radius of the circular cross section of the cylinder. START 3d point Center of the start cap. Input Slots (optional) BOTTOM-CAP? [ from CYLINDER ] boolean Determines whether to include bottom cap in shaded renderings. Defaults to T. BOUNDING-BOX [ from BASE-OBJECT ] list of two 3d points The left front bottom and right rear top corners, in global coordinates, of the rectangular volume bounding the tree of geometric objects rooted at this object. CLOSED? [ from CYLINDER ] boolean Indicates that a partial cylinder (or cone) should have a closed gap. END-ANGLE [ from ARCOID-MIXIN ] angle in radians End angle of the arc. Defaults to twice pi.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/9/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 0,
      "chunk_count": 6
    },
    "id": "451c7533cc1ad34997d87cf7d68bae5b"
  },
  {
    "text": "that a partial cylinder (or cone) should have a closed gap. END-ANGLE [ from ARCOID-MIXIN ] angle in radians End angle of the arc. Defaults to twice pi. HEIGHT [ from BASE-OBJECT ] number Z-axis dimension of the reference box. Defaults to zero. HIDDEN? [ from VANILLA-MIXIN* ] boolean Indicates whether the object should effectively be a hidden-object even if specified in :objects. Default is nil. IMAGE-FILE [ from BASE-OBJECT ] pathname or string Points to a pre-existing image file to be displayed instead of actual geometry for this object. Defaults to nil INNER-RADIUS [ from CYLINDER ] number Radius of the hollow inner portion for a hollow cylinder. LOCAL-BOX [ from BASE-OBJECT ] list of two 3d points The left front bottom and right rear top corners, in global coordinates, of the rectangular volume bounding this geometric object. NUMBER-OF-SECTIONS [ from CYLINDER ] integer Number of vertical sections to be drawn in wireframe rendering mode.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/9/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 1,
      "chunk_count": 6
    },
    "id": "489ce229606f3247c4220c4d6b20f0a1"
  },
  {
    "text": "lar volume bounding this geometric object. NUMBER-OF-SECTIONS [ from CYLINDER ] integer Number of vertical sections to be drawn in wireframe rendering mode. OBLIQUENESS [ from BASE-OBJECT ] 3x3 orthonormal matrix of double-float numbers This is synonymous with the orientation . ONCLICK-FUNCTION [ from BASE-OBJECT ] lambda function of zero arguments, or nil If non-nil, this function gets invoked when the user clicks the object in graphics front-ends which support this functionality, e.g. SVG/Raphael and X3DOM. ROOT [ from VANILLA-MIXIN* ] gdl instance The root-level node in this object's ``tree'' (instance hierarchy). SAFE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances All objects from the :objects specification, including elements of sequences as flat lists. Any children which throw errors come back as a plist with error information START-ANGLE [ from ARCOID-MIXIN ] angle in radians Start angle of the arc. Defaults to zero.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/9/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 2,
      "chunk_count": 6
    },
    "id": "cb34b20923c3ead87dd3b96123295839"
  },
  {
    "text": "w errors come back as a plist with error information START-ANGLE [ from ARCOID-MIXIN ] angle in radians Start angle of the arc. Defaults to zero. STRINGS-FOR-DISPLAY [ from VANILLA-MIXIN* ] string or list of strings Determines how the name of objects of this type will be printed in most places. This defaults to the name-for-display (generally the part's name as specified in its parent), followed by an index number if the part is an element of a sequence. TOP-CAP? [ from CYLINDER ] boolean Determines whether to include bottom cap in shaded renderings. Defaults to T. VISIBLE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances Additional objects to display in Tatu tree. Typically this would be a subset of hidden-children. Defaults to NIL. WIDTH [ from BASE-OBJECT ] number X-axis dimension of the reference box. Defaults to zero.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/9/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 3,
      "chunk_count": 6
    },
    "id": "00a0e75964cf340832c3e552f45d3f30"
  },
  {
    "text": "of the reference box. Defaults to zero. Input Slots (optional, defaulting) DISPLAY-CONTROLS [ from BASE-OBJECT ] plist May contain keywords and values indicating display characteristics for this object. The following keywords are recognized currently: :color color keyword from the *color-table* parameter, or an HTML-style hexidecimal RGB string value, e.g. \"#FFFFFF\" for pure white. Defaults to :black. :line-thickness an integer, defaulting to 1, indicating relative line thickness for wireframe representations of this object. :dash-pattern (currently PDF/PNG/JPEG only). This is a list of two or three numbers which indicate the length, in pixels, of the dashes and blank spaces in a dashed line. The optional third number indicates how far into the line or curve to start the dash pattern. Computed Slots CENTER 3d point Center point of the center-line. CENTER-LINE list of two 3d points Represents line segment connecting center of end cap to center of start cap.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/9/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 4,
      "chunk_count": 6
    },
    "id": "77e45d24ae82810ffdaba700d9ef727c"
  },
  {
    "text": "uted Slots CENTER 3d point Center point of the center-line. CENTER-LINE list of two 3d points Represents line segment connecting center of end cap to center of start cap. LENGTH number Distance between cap centers. ORIENTATION 3x3 orthonormal rotation matrix Resultant orientation given the specified start and end points. Examples (in-package :gdl-user) (define-object c-cylinder-sample (c-cylinder) :computed-slots ((display-controls (list :color :plum :transparency 0.2)) (start (make-point 0 0 0)) (end (make-point 0 0 10)) (number-of-sections 7) (radius 3))) (generate-sample-drawing :objects (make-object 'c-cylinder-sample) :projection-direction (getf *standard-views* :trimetric)) Package Documentation Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/9/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 5,
      "chunk_count": 6
    },
    "id": "b4f001b54329ad80a6b34700ebd117ac"
  },
  {
    "text": "GendL Application - RENDERER-MIXIN Package Documentation Object: RENDERER-MIXIN (The :GEOM-BASE Package) Mixins: VANILLA-MIXIN Description Object mixed into the base-view to compute required values to provide a rendered perspective view, as in VRML. Input Slots (required) OBJECT-ROOTS list of gdl objects Roots of the leaf objects to be displayed in this renderer view. OBJECTS list of gdl objects Leaves of the objects to be displayed in this renderer view. Input Slots (optional) 3D-BOX list of two 3d points The left-front-lower and right-rear-upper corners of the axis-aligned bounding box of the object-roots and objects . 3D-BOX-CENTER 3d point The effective view center for the scene contained in this view object. Defaults to the center of the bounding sphere of all the objects in the scene, consisting of the object-roots and the objects .",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/34/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 0,
      "chunk_count": 4
    },
    "id": "62c481948e07cd897501ce818893575c"
  },
  {
    "text": ", consisting of the object-roots and the objects . BOUNDING-SPHERE plist containing keys: :center and :radius This plist represents the tightest-fitting sphere around all the objects listed in the object-roots and the objects FIELD-OF-VIEW-DEFAULT number in angular degrees The maximum angle of the view frustrum for perspective views. Defaults to 0.1 (which results in a near parallel projection with virtually no perspective effect). HIDDEN? [ from VANILLA-MIXIN* ] boolean Indicates whether the object should effectively be a hidden-object even if specified in :objects. Default is nil. ROOT [ from VANILLA-MIXIN* ] gdl instance The root-level node in this object's ``tree'' (instance hierarchy). SAFE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances All objects from the :objects specification, including elements of sequences as flat lists.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/34/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 1,
      "chunk_count": 4
    },
    "id": "ca9dfeb89ee4939d24064e4e10b4c6a7"
  },
  {
    "text": "ion, including elements of sequences as flat lists. Any children which throw errors come back as a plist with error information STRINGS-FOR-DISPLAY [ from VANILLA-MIXIN* ] string or list of strings Determines how the name of objects of this type will be printed in most places. This defaults to the name-for-display (generally the part's name as specified in its parent), followed by an index number if the part is an element of a sequence. VIEW-VECTORS plist Keys indicate view vector names (e.g. :trimetric ), and values contain the 3D vectors. Defaults to the parameter *standard-views* , but with the key corresponding to current (the view) ordered first in the plist. This list of view-vectors is used to construct the default viewpoints . VIEWPOINTS list of plists Each plist contains, based on each entry in the view-vectors , keys: :point (camera location, defaults to the 3d-box-center translated along the corresponding element of view-vectors ) by the local camera distance.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/34/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 2,
      "chunk_count": 4
    },
    "id": "455306f7c3a955c2e054abc2fe19aaf7"
  },
  {
    "text": "each entry in the view-vectors , keys: :point (camera location, defaults to the 3d-box-center translated along the corresponding element of view-vectors ) by the local camera distance. The camera distance is computed based on the field-of-view angle and the bounding-sphere :orientation (3d matrix indicating camera orientation) field-of-view Angle in degrees of the view frustrum (i.e. lens angle of the virtual camera). VISIBLE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances Additional objects to display in Tatu tree. Typically this would be a subset of hidden-children. Defaults to NIL. Package Documentation Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/34/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 3,
      "chunk_count": 4
    },
    "id": "747b5a52e1f1ea00975d9b68541e8e22"
  },
  {
    "text": "GendL Application - CYLINDER Package Documentation Object: CYLINDER (The :GEOM-BASE Package) Mixins: IFS-OUTPUT-MIXIN, ARCOID-MIXIN , BASE-OBJECT Description An extrusion of circular cross section in which the centers of the circles all lie on a single line (i.e., a right circular cylinder). Partial cylinders and hollow cylinders are supported. Input Slots (required) LENGTH number Distance from center of start cap to center of end cap. RADIUS number Radius of the circular cross section of the cylinder. Input Slots (optional) BOTTOM-CAP? boolean Determines whether to include bottom cap in shaded renderings. Defaults to T. BOUNDING-BOX [ from BASE-OBJECT ] list of two 3d points The left front bottom and right rear top corners, in global coordinates, of the rectangular volume bounding the tree of geometric objects rooted at this object. CLOSED? boolean Indicates that a partial cylinder (or cone) should have a closed gap.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/16/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 0,
      "chunk_count": 7
    },
    "id": "ff3e76676da7b74d62f61960cdd971b2"
  },
  {
    "text": "e of geometric objects rooted at this object. CLOSED? boolean Indicates that a partial cylinder (or cone) should have a closed gap. END-ANGLE [ from ARCOID-MIXIN ] angle in radians End angle of the arc. Defaults to twice pi. HEIGHT [ from BASE-OBJECT ] number Z-axis dimension of the reference box. Defaults to zero. HIDDEN? [ from VANILLA-MIXIN* ] boolean Indicates whether the object should effectively be a hidden-object even if specified in :objects. Default is nil. IMAGE-FILE [ from BASE-OBJECT ] pathname or string Points to a pre-existing image file to be displayed instead of actual geometry for this object. Defaults to nil INNER-RADIUS number Radius of the hollow inner portion for a hollow cylinder. LOCAL-BOX [ from BASE-OBJECT ] list of two 3d points The left front bottom and right rear top corners, in global coordinates, of the rectangular volume bounding this geometric object. NUMBER-OF-SECTIONS integer Number of vertical sections to be drawn in wireframe rendering mode.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/16/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 1,
      "chunk_count": 7
    },
    "id": "3123ca7b8f193b16387961b39e11ad08"
  },
  {
    "text": "r top corners, in global coordinates, of the rectangular volume bounding this geometric object. NUMBER-OF-SECTIONS integer Number of vertical sections to be drawn in wireframe rendering mode. OBLIQUENESS [ from BASE-OBJECT ] 3x3 orthonormal matrix of double-float numbers This is synonymous with the orientation . ONCLICK-FUNCTION [ from BASE-OBJECT ] lambda function of zero arguments, or nil If non-nil, this function gets invoked when the user clicks the object in graphics front-ends which support this functionality, e.g. SVG/Raphael and X3DOM. ROOT [ from VANILLA-MIXIN* ] gdl instance The root-level node in this object's ``tree'' (instance hierarchy). SAFE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances All objects from the :objects specification, including elements of sequences as flat lists. Any children which throw errors come back as a plist with error information START-ANGLE [ from ARCOID-MIXIN ] angle in radians Start angle of the arc. Defaults to zero.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/16/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 2,
      "chunk_count": 7
    },
    "id": "cb9013d4471fb8811aaa5a117bc6b3e5"
  },
  {
    "text": "flat lists. Any children which throw errors come back as a plist with error information START-ANGLE [ from ARCOID-MIXIN ] angle in radians Start angle of the arc. Defaults to zero. STRINGS-FOR-DISPLAY [ from VANILLA-MIXIN* ] string or list of strings Determines how the name of objects of this type will be printed in most places. This defaults to the name-for-display (generally the part's name as specified in its parent), followed by an index number if the part is an element of a sequence. TOP-CAP? boolean Determines whether to include bottom cap in shaded renderings. Defaults to T. VISIBLE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances Additional objects to display in Tatu tree. Typically this would be a subset of hidden-children. Defaults to NIL. WIDTH [ from BASE-OBJECT ] number X-axis dimension of the reference box. Defaults to zero.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/16/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 3,
      "chunk_count": 7
    },
    "id": "fb0d160ec57d6dc73da0196b218fc76d"
  },
  {
    "text": "X-axis dimension of the reference box. Defaults to zero. Input Slots (optional, defaulting) CENTER [ from BASE-OBJECT ] 3d point Indicates in global coordinates where the center of the reference box of this object should be located. DISPLAY-CONTROLS [ from BASE-OBJECT ] plist May contain keywords and values indicating display characteristics for this object. The following keywords are recognized currently: :color color keyword from the *color-table* parameter, or an HTML-style hexidecimal RGB string value, e.g. \"#FFFFFF\" for pure white. Defaults to :black. :line-thickness an integer, defaulting to 1, indicating relative line thickness for wireframe representations of this object. :dash-pattern (currently PDF/PNG/JPEG only). This is a list of two or three numbers which indicate the length, in pixels, of the dashes and blank spaces in a dashed line. The optional third number indicates how far into the line or curve to start the dash pattern.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/16/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 4,
      "chunk_count": 7
    },
    "id": "9da25f4a1738e5800b9fe30e7969e240"
  },
  {
    "text": "in pixels, of the dashes and blank spaces in a dashed line. The optional third number indicates how far into the line or curve to start the dash pattern. ORIENTATION [ from BASE-OBJECT ] 3x3 matrix of double-float numbers Indicates the absolute Rotation Matrix used to create the coordinate system of this object. This matrix is given in absolute terms (i.e. with respect to the root's orientation), and is generally created with the alignment function. It should be an orthonormal matrix, meaning each row is a vector with a magnitude of one (1.0). Computed Slots DIRECTION-VECTOR 3d vector Points from the start to the end. END 3d point The center of the end cap. HOLLOW? boolean Indicates whether there is an inner-radius and thus the cylinder is hollow. START 3d point The center of the start cap.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/16/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 5,
      "chunk_count": 7
    },
    "id": "ec68caf45ae4e80a161f69da9140923a"
  },
  {
    "text": ". Examples (in-package :gdl-user) (define-object cylinder-sample (cylinder) :computed-slots ((display-controls (list :color :pink-spicy)) (length 10) (radius 3) (number-of-sections 25))) (generate-sample-drawing :objects (make-object 'cylinder-sample) :projection-direction (getf *standard-views* :trimetric)) Package Documentation Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/16/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 6,
      "chunk_count": 7
    },
    "id": "557fed229e6af383f325fcba76622410"
  },
  {
    "text": "GendL Application - CONSTRAINED-LINE Package Documentation Object: CONSTRAINED-LINE (The :GEOM-BASE Package) Mixins: LINE Description This object is intended to simplify the process of constructing lines using various constraints. Currently supported are 2 through-points or 1 through-point and at-angle. Note the line-constraints must be an evaluatable s-expression as this is not processed as a macro Input Slots (optional) HIDDEN? [ from VANILLA-MIXIN* ] boolean Indicates whether the object should effectively be a hidden-object even if specified in :objects. Default is nil. IMAGE-FILE [ from BASE-OBJECT ] pathname or string Points to a pre-existing image file to be displayed instead of actual geometry for this object. Defaults to nil LOCAL-BOX [ from BASE-OBJECT ] list of two 3d points The left front bottom and right rear top corners, in global coordinates, of the rectangular volume bounding this geometric object.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/15/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 0,
      "chunk_count": 5
    },
    "id": "af4f73215f33237006481aa032273d87"
  },
  {
    "text": "left front bottom and right rear top corners, in global coordinates, of the rectangular volume bounding this geometric object. OBLIQUENESS [ from BASE-OBJECT ] 3x3 orthonormal matrix of double-float numbers This is synonymous with the orientation . ONCLICK-FUNCTION [ from BASE-OBJECT ] lambda function of zero arguments, or nil If non-nil, this function gets invoked when the user clicks the object in graphics front-ends which support this functionality, e.g. SVG/Raphael and X3DOM. ROOT [ from VANILLA-MIXIN* ] gdl instance The root-level node in this object's ``tree'' (instance hierarchy). SAFE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances All objects from the :objects specification, including elements of sequences as flat lists. Any children which throw errors come back as a plist with error information STRINGS-FOR-DISPLAY [ from VANILLA-MIXIN* ] string or list of strings Determines how the name of objects of this type will be printed in most places.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/15/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 1,
      "chunk_count": 5
    },
    "id": "2428b0b45ab49b11220a1d6889520304"
  },
  {
    "text": "with error information STRINGS-FOR-DISPLAY [ from VANILLA-MIXIN* ] string or list of strings Determines how the name of objects of this type will be printed in most places. This defaults to the name-for-display (generally the part's name as specified in its parent), followed by an index number if the part is an element of a sequence. VISIBLE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances Additional objects to display in Tatu tree. Typically this would be a subset of hidden-children. Defaults to NIL. Input Slots (optional, defaulting) DISPLAY-CONTROLS [ from BASE-OBJECT ] plist May contain keywords and values indicating display characteristics for this object. The following keywords are recognized currently: :color color keyword from the *color-table* parameter, or an HTML-style hexidecimal RGB string value, e.g. \"#FFFFFF\" for pure white. Defaults to :black.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/15/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 2,
      "chunk_count": 5
    },
    "id": "ff8392e104e2f1ac9ef68742183248f2"
  },
  {
    "text": "idecimal RGB string value, e.g. \"#FFFFFF\" for pure white. Defaults to :black. :line-thickness an integer, defaulting to 1, indicating relative line thickness for wireframe representations of this object. :dash-pattern (currently PDF/PNG/JPEG only). This is a list of two or three numbers which indicate the length, in pixels, of the dashes and blank spaces in a dashed line. The optional third number indicates how far into the line or curve to start the dash pattern. HEIGHT [ from BASE-OBJECT ] number Z-axis dimension of the reference box. Defaults to zero. ORIENTATION [ from BASE-OBJECT ] 3x3 matrix of double-float numbers Indicates the absolute Rotation Matrix used to create the coordinate system of this object. This matrix is given in absolute terms (i.e. with respect to the root's orientation), and is generally created with the alignment function. It should be an orthonormal matrix, meaning each row is a vector with a magnitude of one (1.0).",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/15/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 3,
      "chunk_count": 5
    },
    "id": "6a9f3e3ce41af2644dc65caad81bfc8e"
  },
  {
    "text": "tion), and is generally created with the alignment function. It should be an orthonormal matrix, meaning each row is a vector with a magnitude of one (1.0). WIDTH [ from BASE-OBJECT ] number X-axis dimension of the reference box. Defaults to zero. Computed Slots END [ from LINE ] 3d point The end point of the line, in global coordinates. START [ from LINE ] 3d point The start point of the line, in global coordinates. GDL Functions TANGENT-POINT Icad Compat function Package Documentation Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/15/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 4,
      "chunk_count": 5
    },
    "id": "bb716cf1cf70225f74a85d946e7b3ac5"
  },
  {
    "text": "GendL Application - HORIZONTAL-DIMENSION Package Documentation Object: HORIZONTAL-DIMENSION (The :GEOM-BASE Package) Mixins: LINEAR-DIMENSION , VANILLA-MIXIN Description Creates a dimension annotation along the horizontal axis. Input Slots (required) END-POINT [ from LINEAR-DIMENSION ] 3d point Actual point where the dimension will stop measuring START-POINT [ from LINEAR-DIMENSION ] 3d point Actual point where the dimension will start measuring Input Slots (optional) ARROWHEAD-LENGTH [ from LINEAR-DIMENSION ] length (from tip to tail) of arrowhead glyph Defaults to twice the arrowhead-width ARROWHEAD-STYLE [ from LINEAR-DIMENSION ] keyword symbol Style for arrowhead on end of leader-line . Currently supported values are :none , :wedge (the Default), and :double-wedge . ARROWHEAD-STYLE-2 [ from LINEAR-DIMENSION ] keyword symbol Style for arrowhead on end of leader-line . Currently supported values are :none (the Default), :wedge , and :double-wedge .",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/25/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 0,
      "chunk_count": 13
    },
    "id": "e9c9ce2bdd32c80f260457ed12a3d903"
  },
  {
    "text": "from LINEAR-DIMENSION ] keyword symbol Style for arrowhead on end of leader-line . Currently supported values are :none (the Default), :wedge , and :double-wedge . ARROWHEAD-WIDTH [ from LINEAR-DIMENSION ] width of arrowhead glyph Defaults to half the character-size. BASE-PLANE-NORMAL [ from LINEAR-DIMENSION ] Must be specified in the subclass except for angular BOUNDING-BOX [ from BASE-OBJECT ] list of two 3d points The left front bottom and right rear top corners, in global coordinates, of the rectangular volume bounding the tree of geometric objects rooted at this object. CHARACTER-SIZE [ from LINEAR-DIMENSION ] number Size (glyph height) of the label text, in model units. Defaults to 1. DIM-TEXT [ from LINEAR-DIMENSION ] string Determines the text which shows up as the dimension label. Defaults to the dim-value, which is computed specially in each specific dimension type.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/25/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 1,
      "chunk_count": 13
    },
    "id": "0ed6a91ef7b09f7ee2248a38ce2f67a2"
  },
  {
    "text": ". Defaults to the dim-value, which is computed specially in each specific dimension type. DIM-TEXT-BIAS [ from LINEAR-DIMENSION ] keyword symbol, :start, :end, or :center Indicates where to position the text in the case when outside-leaders? is non-nil. Defaults to :center DIM-TEXT-START 3d point Determines where the text will start. Defaults to reasonable location for horizontal-dimension. DIM-TEXT-START-OFFSET [ from LINEAR-DIMENSION ] 3d vector (normally only 2d are used) . The dim-text-start is offset by this vector, in model space. Defaults to #(0.0 0.0 0.0) DIM-VALUE [ from LINEAR-DIMENSION ] number 2D distance relative to the base-plane-normal. Can be over-ridden in the subclass DXF-FONT [ from LINEAR-DIMENSION ] string This names the DXF font for this general-note. Defaults to (the font) . DXF-OFFSET [ from LINEAR-DIMENSION ] number The start of text will be offset by this amount for DXF output. Default is 2.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/25/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 2,
      "chunk_count": 13
    },
    "id": "1faa39ba7f2c749a7332c8144731c0f2"
  },
  {
    "text": "font) . DXF-OFFSET [ from LINEAR-DIMENSION ] number The start of text will be offset by this amount for DXF output. Default is 2. DXF-SIZE-RATIO [ from LINEAR-DIMENSION ] number The scale factor for DXF character size vs PDF character size. Default is 0.8 DXF-TEXT-X-SCALE [ from LINEAR-DIMENSION ] number in percentage Adjusts the character width for DXF output. Defaults to the text-x-scale. FLIP-LEADERS? [ from LINEAR-DIMENSION ] boolean Indicates which direction the witness lines should take from the start and end points. The Default is NIL, which indicates :rear (i.e. ``up'') for horizontal-dimensions and :right for vertical-dimensions FONT [ from LINEAR-DIMENSION ] string naming a standard pdf font Font for the label text. Defaults to \"Helvetica\" FULL-LEADER-LINE-LENGTH [ from LINEAR-DIMENSION ] number Indicates the length of the full leader when outside-leaders? is nil.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/25/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 3,
      "chunk_count": 13
    },
    "id": "8902f901ac690535edaffa33bb906789"
  },
  {
    "text": "IMENSION ] number Indicates the length of the full leader when outside-leaders? is nil. This defaults to nil, which indicates that the full-leader's length should be auto-computed based on the given start-point and end-point. HIDDEN? [ from VANILLA-MIXIN* ] boolean Indicates whether the object should effectively be a hidden-object even if specified in :objects. Default is nil. IMAGE-FILE [ from BASE-OBJECT ] pathname or string Points to a pre-existing image file to be displayed instead of actual geometry for this object. Defaults to nil JUSTIFICATION [ from LINEAR-DIMENSION ] keyword symbol, :left, :right, or :center . For multi-line dim-text, this justification is applied. LEADER-1? [ from LINEAR-DIMENSION ] boolean Indicates whether the first (or only) leader line should be displayed. The Default is T LEADER-2? [ from LINEAR-DIMENSION ] boolean Indicates whether the second leader line should be displayed.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/25/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 4,
      "chunk_count": 13
    },
    "id": "a0d0d6335a58df351f879b66e549bf84"
  },
  {
    "text": "e Default is T LEADER-2? [ from LINEAR-DIMENSION ] boolean Indicates whether the second leader line should be displayed. The Default is T LEADER-LINE-LENGTH [ from LINEAR-DIMENSION ] number Indicates the length of the first leader for the case when outside-leaders? is non-NIL LEADER-LINE-LENGTH-2 [ from LINEAR-DIMENSION ] number Indicates the length of the second leader for the case when outside-leaders? is non-NIL LEADER-TEXT-GAP [ from LINEAR-DIMENSION ] number Amount of gap between leader lines and dimension text, when the dimension text is within the leader. Defaults to half the character-size. OBLIQUENESS [ from BASE-OBJECT ] 3x3 orthonormal matrix of double-float numbers This is synonymous with the orientation . ONCLICK-FUNCTION [ from BASE-OBJECT ] lambda function of zero arguments, or nil If non-nil, this function gets invoked when the user clicks the object in graphics front-ends which support this functionality, e.g. SVG/Raphael and X3DOM.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/25/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 5,
      "chunk_count": 13
    },
    "id": "827fb1ebf1bc290642cc4981ee585113"
  },
  {
    "text": "or nil If non-nil, this function gets invoked when the user clicks the object in graphics front-ends which support this functionality, e.g. SVG/Raphael and X3DOM. ORIENTATION [ from BASE-OBJECT ] 3x3 matrix of double-float numbers Indicates the absolute Rotation Matrix used to create the coordinate system of this object. This matrix is given in absolute terms (i.e. with respect to the root's orientation), and is generally created with the alignment function. It should be an orthonormal matrix, meaning each row is a vector with a magnitude of one (1.0). OUTLINE-SHAPE-TYPE [ from LINEAR-DIMENSION ] keyword symbol Currently can be :bubble, :rectangle, or :none. Default is :none. OUTSIDE-LEADERS-LENGTH-FACTOR [ from LINEAR-DIMENSION ] number Indicates the default length of the outside-leaders as a multiple of arrowhead-length. Defaults to 3.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/25/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 6,
      "chunk_count": 13
    },
    "id": "21fe52c6101bdacd757d2b56097fb35b"
  },
  {
    "text": "as a multiple of arrowhead-length. Defaults to 3. OUTSIDE-LEADERS? [ from LINEAR-DIMENSION ] boolean Indicates whether the leader line(s) should be inside or outside the interval between the start and end points. The default is NIL, which indicates that the leader line(s) should be inside the interval ROOT [ from VANILLA-MIXIN* ] gdl instance The root-level node in this object's ``tree'' (instance hierarchy). SAFE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances All objects from the :objects specification, including elements of sequences as flat lists. Any children which throw errors come back as a plist with error information STRINGS-FOR-DISPLAY [ from VANILLA-MIXIN* ] string or list of strings Determines how the name of objects of this type will be printed in most places. This defaults to the name-for-display (generally the part's name as specified in its parent), followed by an index number if the part is an element of a sequence.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/25/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 7,
      "chunk_count": 13
    },
    "id": "230a5e3917e56e02873f728476a2874e"
  },
  {
    "text": "aults to the name-for-display (generally the part's name as specified in its parent), followed by an index number if the part is an element of a sequence. TEXT-ABOVE-LEADER? [ from LINEAR-DIMENSION ] boolean Indicates whether the text is to the right or above the leader line, rather than in-line with it. Default is T. TEXT-ALONG-AXIS? [ from LINEAR-DIMENSION ] boolean Where applicable, determines whether text direction follows leader-line direction TEXT-X-SCALE [ from LINEAR-DIMENSION ] number in percentage Adjusts the character width for the dimension-text and currently only applies only to PDF output UNDERLINE? [ from LINEAR-DIMENSION ] GDL VIEW-REFERENCE-OBJECT [ from LINEAR-DIMENSION ] gdl object or nil View object which will use this dimension. Defaults to NIL. VISIBLE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances Additional objects to display in Tatu tree. Typically this would be a subset of hidden-children. Defaults to NIL.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/25/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 8,
      "chunk_count": 13
    },
    "id": "4b635447654d79d792d94b15867b13ce"
  },
  {
    "text": "VANILLA-MIXIN* ] list of gdl instances Additional objects to display in Tatu tree. Typically this would be a subset of hidden-children. Defaults to NIL. WITNESS-LINE-2? [ from LINEAR-DIMENSION ] boolean Indicates whether to display a witness line coming off the end-point . Default is T WITNESS-LINE-EXT [ from LINEAR-DIMENSION ] number Distance the witness line(s) extend beyond the leader line. Default is 0.3 WITNESS-LINE-GAP [ from LINEAR-DIMENSION ] number Distance from the start-point and end-point to the start of each witness-line. Default is 0.1 WITNESS-LINE-LENGTH [ from LINEAR-DIMENSION ] number Length of the witness lines (or of the shorter witness line in case they are different lengths) WITNESS-LINE? [ from LINEAR-DIMENSION ] boolean Indicates whether to display a witness line coming off the start-point .",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/25/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 9,
      "chunk_count": 13
    },
    "id": "d91bf2a91bce9ea557c75e58005d0a03"
  },
  {
    "text": "ming off the start-point . Default is T Input Slots (optional, defaulting) CENTER [ from BASE-OBJECT ] 3d point Indicates in global coordinates where the center of the reference box of this object should be located. DISPLAY-CONTROLS [ from BASE-OBJECT ] plist May contain keywords and values indicating display characteristics for this object. The following keywords are recognized currently: :color color keyword from the *color-table* parameter, or an HTML-style hexidecimal RGB string value, e.g. \"#FFFFFF\" for pure white. Defaults to :black. :line-thickness an integer, defaulting to 1, indicating relative line thickness for wireframe representations of this object. :dash-pattern (currently PDF/PNG/JPEG only). This is a list of two or three numbers which indicate the length, in pixels, of the dashes and blank spaces in a dashed line. The optional third number indicates how far into the line or curve to start the dash pattern.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/25/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 10,
      "chunk_count": 13
    },
    "id": "79c005004449a6e60e7a0ceccbb3efdd"
  },
  {
    "text": "dashes and blank spaces in a dashed line. The optional third number indicates how far into the line or curve to start the dash pattern. HEIGHT [ from BASE-OBJECT ] number Z-axis dimension of the reference box. Defaults to zero. LENGTH [ from BASE-OBJECT ] number Y-axis dimension of the reference box. Defaults to zero. WIDTH [ from BASE-OBJECT ] number X-axis dimension of the reference box. Defaults to zero. Computed Slots LEADER-DIRECTION-1-VECTOR [ from LINEAR-DIMENSION ] Must be specified in the subclass except for angular LEADER-DIRECTION-2-VECTOR [ from LINEAR-DIMENSION ] Must be specified in the subclass except for angular WITNESS-DIRECTION-VECTOR [ from LINEAR-DIMENSION ] Must be specified in the subclass except for angular Examples (in-package :gdl-user) (define-object box-view (base-object) :objects ((box :type 'box :length 10 :width (* (the-child length) +phi+) :height (* (the-child :width) +phi+)) (width-dimension :type 'horizontal-dimension :character-size (/ (the box",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/25/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 11,
      "chunk_count": 13
    },
    "id": "ec6432cf9fcf03e8e164f74c4feef730"
  },
  {
    "text": "se-object) :objects ((box :type 'box :length 10 :width (* (the-child length) +phi+) :height (* (the-child :width) +phi+)) (width-dimension :type 'horizontal-dimension :character-size (/ (the box length) 20) :arrowhead-width (/ (the-child character-size) 3) :start-point (the box (vertex :top :left :rear)) :end-point (the box (vertex :top :right :rear))))) (generate-sample-drawing :object-roots (make-object 'box-view)) Package Documentation Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/25/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 12,
      "chunk_count": 13
    },
    "id": "87f8d00cd306ffb3cb62a7bf62f0d359"
  },
  {
    "text": "GendL Application - LABEL Package Documentation Object: LABEL (The :GEOM-BASE Package) Mixins: OUTLINE-SPECIALIZATION-MIXIN, BASE-OBJECT Description Produces a text label for graphical output Input Slots (required) LEADER-PATH list of 3d points List making up leader line, starting from where the arrowhead normally is. Input Slots (optional) ARROWHEAD-LENGTH length (from tip to tail) of arrowhead glyph Defaults to twice the arrowhead-width ARROWHEAD-STYLE keyword symbol Style for arrowhead at start of leader-path . Currently supported values are :none , :wedge (the Default), and :double-wedge . ARROWHEAD-STYLE-2 keyword symbol Style for arrowhead on end of leader-path . Currently supported values are :none (the Default), :wedge , and :double-wedge .",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/26/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 0,
      "chunk_count": 8
    },
    "id": "6e56ca60f6f7dc193d75e1dfe407aa34"
  },
  {
    "text": "ARROWHEAD-WIDTH width of arrowhead glyph Defaults to five times the line thickness (2.5) BOUNDING-BOX [ from BASE-OBJECT ] list of two 3d points The left front bottom and right rear top corners, in global coordinates, of the rectangular volume bounding the tree of geometric objects rooted at this object. CHARACTER-SIZE number Size (glyph height) of the label text, in model units. Defaults to 10. DXF-FONT string This names the DXF font for this general-note. Defaults to (the font) . DXF-OFFSET number The start of text will be offset by this amount for DXF output. Default is 2. DXF-SIZE-RATIO number The scale factor for DXF character size vs PDF character size. Default is 0.8 DXF-TEXT-X-SCALE number in percentage Adjusts the character width for DXF output. Defaults to the text-x-scale. FONT string naming a standard pdf font Font for the label text.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/26/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 1,
      "chunk_count": 8
    },
    "id": "f1cdf61cbd690a171f1cfc7ef5eb4d8e"
  },
  {
    "text": "string naming a standard pdf font Font for the label text. Defaults to \"Helvetica\" HIDDEN? [ from VANILLA-MIXIN* ] boolean Indicates whether the object should effectively be a hidden-object even if specified in :objects. Default is nil. IMAGE-FILE [ from BASE-OBJECT ] pathname or string Points to a pre-existing image file to be displayed instead of actual geometry for this object. Defaults to nil OBLIQUENESS [ from BASE-OBJECT ] 3x3 orthonormal matrix of double-float numbers This is synonymous with the orientation . ONCLICK-FUNCTION [ from BASE-OBJECT ] lambda function of zero arguments, or nil If non-nil, this function gets invoked when the user clicks the object in graphics front-ends which support this functionality, e.g. SVG/Raphael and X3DOM. OUTLINE-SHAPE-TYPE keyword symbol Indicates shape of outline enclosing the text. Currently :none , :bubble , :rectangle , and nil are supported.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/26/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 2,
      "chunk_count": 8
    },
    "id": "02f13442fae6d8d0a3a6cd3ce47ea725"
  },
  {
    "text": "es shape of outline enclosing the text. Currently :none , :bubble , :rectangle , and nil are supported. The default is nil ROOT [ from VANILLA-MIXIN* ] gdl instance The root-level node in this object's ``tree'' (instance hierarchy). SAFE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances All objects from the :objects specification, including elements of sequences as flat lists. Any children which throw errors come back as a plist with error information STRINGS list of strings Text lines to be displayed as the label. Specify this or text, not both. STRINGS-FOR-DISPLAY [ from VANILLA-MIXIN* ] string or list of strings Determines how the name of objects of this type will be printed in most places. This defaults to the name-for-display (generally the part's name as specified in its parent), followed by an index number if the part is an element of a sequence.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/26/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 3,
      "chunk_count": 8
    },
    "id": "5b40b9bb4f7ffef3717fbc53609b47f6"
  },
  {
    "text": ", followed by an index number if the part is an element of a sequence. TEXT string Text to be displayed as the label TEXT-GAP number Amount of space between last point in leader-path and beginning of the label text. Defaults to the width of the letter \"A\" in the specified font and character-size . TEXT-SIDE keyword symbol, either :left or :right Determines whether the label text sits to the right or the left of the last point in the leader-path . The default is computed based on the direction of the last segment of the leader-path. VIEW-REFERENCE-OBJECT gdl object or nil View object which will use this dimension. Defaults to NIL. VISIBLE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances Additional objects to display in Tatu tree. Typically this would be a subset of hidden-children. Defaults to NIL. Input Slots (optional, defaulting) CENTER [ from BASE-OBJECT ] 3d point Indicates in global coordinates where the center of the reference box of this object should be located.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/26/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 4,
      "chunk_count": 8
    },
    "id": "04123593d7d11688ab8f74cef23b8b90"
  },
  {
    "text": "faults to NIL. Input Slots (optional, defaulting) CENTER [ from BASE-OBJECT ] 3d point Indicates in global coordinates where the center of the reference box of this object should be located. DISPLAY-CONTROLS [ from BASE-OBJECT ] plist May contain keywords and values indicating display characteristics for this object. The following keywords are recognized currently: :color color keyword from the *color-table* parameter, or an HTML-style hexidecimal RGB string value, e.g. \"#FFFFFF\" for pure white. Defaults to :black. :line-thickness an integer, defaulting to 1, indicating relative line thickness for wireframe representations of this object. :dash-pattern (currently PDF/PNG/JPEG only). This is a list of two or three numbers which indicate the length, in pixels, of the dashes and blank spaces in a dashed line. The optional third number indicates how far into the line or curve to start the dash pattern. HEIGHT [ from BASE-OBJECT ] number Z-axis dimension of the reference box.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/26/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 5,
      "chunk_count": 8
    },
    "id": "ccd299ac1f43ee591f7fccf09a0e154d"
  },
  {
    "text": "in a dashed line. The optional third number indicates how far into the line or curve to start the dash pattern. HEIGHT [ from BASE-OBJECT ] number Z-axis dimension of the reference box. Defaults to zero. LENGTH [ from BASE-OBJECT ] number Y-axis dimension of the reference box. Defaults to zero. WIDTH [ from BASE-OBJECT ] number X-axis dimension of the reference box. Defaults to zero. Computed Slots ORIENTATION [ from BASE-OBJECT ] 3x3 matrix of double-float numbers Indicates the absolute Rotation Matrix used to create the coordinate system of this object. This matrix is given in absolute terms (i.e. with respect to the root's orientation), and is generally created with the alignment function. It should be an orthonormal matrix, meaning each row is a vector with a magnitude of one (1.0).",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/26/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 6,
      "chunk_count": 8
    },
    "id": "b8f0c9f81f25ebdf2345b49cf2244ade"
  },
  {
    "text": "Examples (in-package :gdl-user) (define-object label-sample (base-object) :objects ((box :type 'box :length 10 :width (* (the-child length) +phi+) :height (* (the-child :width) +phi+)) (corner-label :type 'label :leader-path (let ((start (the box (vertex :top :right :rear)))) (list start (translate start :right (/ (the box width) 10) :rear (/ (the box width) 10)) (translate start :right (/ (the box width) 7) :rear (/ (the box width) 10)))) :text \"The Corner\" :character-size (/ (the box width) 15)))) (generate-sample-drawing :object-roots (make-object 'label-sample)) Package Documentation Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/26/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 7,
      "chunk_count": 8
    },
    "id": "43b2781d23d3b8859b5aad9ef0929cd4"
  },
  {
    "text": "GendL Application - SAMPLE-DRAWING Package Documentation Object: SAMPLE-DRAWING (The :GEOM-BASE Package) Mixins: BASE-DRAWING , VANILLA-MIXIN Description Defines a simple drawing with a single view for displaying objects or object-roots. Input Slots (optional) BOUNDING-BOX [ from BASE-OBJECT ] list of two 3d points The left front bottom and right rear top corners, in global coordinates, of the rectangular volume bounding the tree of geometric objects rooted at this object. HEIGHT [ from BASE-OBJECT ] number Z-axis dimension of the reference box. Defaults to zero. HIDDEN? [ from VANILLA-MIXIN* ] boolean Indicates whether the object should effectively be a hidden-object even if specified in :objects. Default is nil. IMAGE-FILE [ from BASE-OBJECT ] pathname or string Points to a pre-existing image file to be displayed instead of actual geometry for this object. Defaults to nil LENGTH [ from BASE-OBJECT ] number Y-axis dimension of the reference box. Defaults to zero.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/36/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 0,
      "chunk_count": 6
    },
    "id": "98bec978241c60e8a18baa7ebc221120"
  },
  {
    "text": "image file to be displayed instead of actual geometry for this object. Defaults to nil LENGTH [ from BASE-OBJECT ] number Y-axis dimension of the reference box. Defaults to zero. LOCAL-BOX [ from BASE-OBJECT ] list of two 3d points The left front bottom and right rear top corners, in global coordinates, of the rectangular volume bounding this geometric object. OBLIQUENESS [ from BASE-OBJECT ] 3x3 orthonormal matrix of double-float numbers This is synonymous with the orientation . ONCLICK-FUNCTION [ from BASE-OBJECT ] lambda function of zero arguments, or nil If non-nil, this function gets invoked when the user clicks the object in graphics front-ends which support this functionality, e.g. SVG/Raphael and X3DOM. PAGE-LENGTH [ from BASE-DRAWING ] number in pdf points Front-to-back (or top-to-bottom) length of the paper being represented by this drawing. The default is (* 11 72) points, or 11 inches, corresponding to US standard letter-size paper.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/36/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 1,
      "chunk_count": 6
    },
    "id": "d1302ba218281789698dfeacec186d9e"
  },
  {
    "text": "-bottom) length of the paper being represented by this drawing. The default is (* 11 72) points, or 11 inches, corresponding to US standard letter-size paper. PAGE-WIDTH [ from BASE-DRAWING ] number in pdf points Left-to-right width of the paper being represented by this drawing. The default is (* 8.5 72) points, or 8.5 inches, corresponding to US standard letter-size paper. ROOT [ from VANILLA-MIXIN* ] gdl instance The root-level node in this object's ``tree'' (instance hierarchy). SAFE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances All objects from the :objects specification, including elements of sequences as flat lists. Any children which throw errors come back as a plist with error information STRINGS-FOR-DISPLAY [ from VANILLA-MIXIN* ] string or list of strings Determines how the name of objects of this type will be printed in most places.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/36/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 2,
      "chunk_count": 6
    },
    "id": "e6e17a311f36c31c6940c9e251d0a71d"
  },
  {
    "text": "the name of objects of this type will be printed in most places. This defaults to the name-for-display (generally the part's name as specified in its parent), followed by an index number if the part is an element of a sequence. SVG-CLASS [ from BASE-DRAWING ] string with css classes These classes will be included in any svg tag outputted from this drawing. VISIBLE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances Additional objects to display in Tatu tree. Typically this would be a subset of hidden-children. Defaults to NIL. WIDTH [ from BASE-OBJECT ] number X-axis dimension of the reference box. Defaults to zero. Input Slots (optional, defaulting) CENTER [ from BASE-OBJECT ] 3d point Indicates in global coordinates where the center of the reference box of this object should be located. DISPLAY-CONTROLS [ from BASE-OBJECT ] plist May contain keywords and values indicating display characteristics for this object.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/36/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 3,
      "chunk_count": 6
    },
    "id": "9c9f81370de80bcbb01c410f5eb40af8"
  },
  {
    "text": "ed. DISPLAY-CONTROLS [ from BASE-OBJECT ] plist May contain keywords and values indicating display characteristics for this object. The following keywords are recognized currently: :color color keyword from the *color-table* parameter, or an HTML-style hexidecimal RGB string value, e.g. \"#FFFFFF\" for pure white. Defaults to :black. :line-thickness an integer, defaulting to 1, indicating relative line thickness for wireframe representations of this object. :dash-pattern (currently PDF/PNG/JPEG only). This is a list of two or three numbers which indicate the length, in pixels, of the dashes and blank spaces in a dashed line. The optional third number indicates how far into the line or curve to start the dash pattern. ORIENTATION [ from BASE-OBJECT ] 3x3 matrix of double-float numbers Indicates the absolute Rotation Matrix used to create the coordinate system of this object. This matrix is given in absolute terms (i.e.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/36/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 4,
      "chunk_count": 6
    },
    "id": "ba07fb862537df2914830e2cc90f3f8e"
  },
  {
    "text": "es the absolute Rotation Matrix used to create the coordinate system of this object. This matrix is given in absolute terms (i.e. with respect to the root's orientation), and is generally created with the alignment function. It should be an orthonormal matrix, meaning each row is a vector with a magnitude of one (1.0). Package Documentation Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/36/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 5,
      "chunk_count": 6
    },
    "id": "39d3f99026339bb7599add4db5e73d02"
  },
  {
    "text": "GendL Application - CENTER-LINE Package Documentation Object: CENTER-LINE (The :GEOM-BASE Package) Mixins: OUTLINE-SPECIALIZATION-MIXIN, BASE-OBJECT Description Creates a dashed single centerline or crosshair centerline on a circle. Input Slots (required) SIZE number The length of the centerline. Input Slots (optional) BOUNDING-BOX [ from BASE-OBJECT ] list of two 3d points The left front bottom and right rear top corners, in global coordinates, of the rectangular volume bounding the tree of geometric objects rooted at this object. CIRCLE? boolean Determines whether this will be a circle crosshair. Defaults to nil. HIDDEN? [ from VANILLA-MIXIN* ] boolean Indicates whether the object should effectively be a hidden-object even if specified in :objects. Default is nil. IMAGE-FILE [ from BASE-OBJECT ] pathname or string Points to a pre-existing image file to be displayed instead of actual geometry for this object.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/10/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 0,
      "chunk_count": 6
    },
    "id": "333e652d6c22f8c22f1cd3f4d59e4ade"
  },
  {
    "text": "OBJECT ] pathname or string Points to a pre-existing image file to be displayed instead of actual geometry for this object. Defaults to nil OBLIQUENESS [ from BASE-OBJECT ] 3x3 orthonormal matrix of double-float numbers This is synonymous with the orientation . ONCLICK-FUNCTION [ from BASE-OBJECT ] lambda function of zero arguments, or nil If non-nil, this function gets invoked when the user clicks the object in graphics front-ends which support this functionality, e.g. SVG/Raphael and X3DOM. ROOT [ from VANILLA-MIXIN* ] gdl instance The root-level node in this object's ``tree'' (instance hierarchy). SAFE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances All objects from the :objects specification, including elements of sequences as flat lists. Any children which throw errors come back as a plist with error information STRINGS-FOR-DISPLAY [ from VANILLA-MIXIN* ] string or list of strings Determines how the name of objects of this type will be printed in most places.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/10/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 1,
      "chunk_count": 6
    },
    "id": "98118b6a85ab0e7a5370b09269d2e757"
  },
  {
    "text": "k as a plist with error information STRINGS-FOR-DISPLAY [ from VANILLA-MIXIN* ] string or list of strings Determines how the name of objects of this type will be printed in most places. This defaults to the name-for-display (generally the part's name as specified in its parent), followed by an index number if the part is an element of a sequence. VISIBLE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances Additional objects to display in Tatu tree. Typically this would be a subset of hidden-children. Defaults to NIL. Input Slots (optional, defaulting) CENTER [ from BASE-OBJECT ] 3d point Indicates in global coordinates where the center of the reference box of this object should be located. DISPLAY-CONTROLS [ from BASE-OBJECT ] plist May contain keywords and values indicating display characteristics for this object. The following keywords are recognized currently: :color color keyword from the *color-table* parameter, or an HTML-style hexidecimal RGB string value, e.g.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/10/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 2,
      "chunk_count": 6
    },
    "id": "257dd4e268bd2d64d08663bddc31721d"
  },
  {
    "text": "racteristics for this object. The following keywords are recognized currently: :color color keyword from the *color-table* parameter, or an HTML-style hexidecimal RGB string value, e.g. \"#FFFFFF\" for pure white. Defaults to :black. :line-thickness an integer, defaulting to 1, indicating relative line thickness for wireframe representations of this object. :dash-pattern (currently PDF/PNG/JPEG only). This is a list of two or three numbers which indicate the length, in pixels, of the dashes and blank spaces in a dashed line. The optional third number indicates how far into the line or curve to start the dash pattern. GAP-LENGTH number Distance between dashed line segments. Defaults to 0.1. LONG-SEGMENT-LENGTH number Length of longer dashed line segments. Defaults to 1.0. ORIENTATION [ from BASE-OBJECT ] 3x3 matrix of double-float numbers Indicates the absolute Rotation Matrix used to create the coordinate system of this object. This matrix is given in absolute terms (i.e.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/10/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 3,
      "chunk_count": 6
    },
    "id": "0b6ead2487033a8f4067dfa064e5a0b8"
  },
  {
    "text": "ASE-OBJECT ] 3x3 matrix of double-float numbers Indicates the absolute Rotation Matrix used to create the coordinate system of this object. This matrix is given in absolute terms (i.e. with respect to the root's orientation), and is generally created with the alignment function. It should be an orthonormal matrix, meaning each row is a vector with a magnitude of one (1.0). SHORT-SEGMENT-LENGTH number Length of shorter dashed line segments. Defaults to 0.25. Computed Slots HEIGHT [ from BASE-OBJECT ] number Z-axis dimension of the reference box. Defaults to zero. LENGTH [ from BASE-OBJECT ] number Y-axis dimension of the reference box. Defaults to zero. WIDTH [ from BASE-OBJECT ] number X-axis dimension of the reference box. Defaults to zero.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/10/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 4,
      "chunk_count": 6
    },
    "id": "c7ba5ec166826a905aa2eb8d7f15c631"
  },
  {
    "text": "Examples (in-package :gdl-user) (define-object center-line-test (base-object) :objects ((circle-sample :type 'circle :display-controls (list :color :green) :center (make-point 10 10 10 ) :radius 10) (center-line-sample :type 'center-line :circle? t :center (the circle-sample center) :size (* 2.1 (the circle-sample radius))))) (generate-sample-drawing :objects (list (the-object (make-object 'center-line-test) circle-sample) (the-object (make-object 'center-line-test) center-line-sample)) :projection-direction (getf *standard-views* :top)) Package Documentation Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/10/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 5,
      "chunk_count": 6
    },
    "id": "c9336264252f4f60bfaa394c0be3425b"
  },
  {
    "text": "GendL Application - TEXT-LINE Package Documentation Object: TEXT-LINE (The :GEOM-BASE Package) Mixins: BASE-OBJECT Description Outputs a single line of text for graphical display. Input Slots (optional) BOUNDING-BOX [ from BASE-OBJECT ] list of two 3d points The left front bottom and right rear top corners, in global coordinates, of the rectangular volume bounding the tree of geometric objects rooted at this object. CENTER 3d-point Center of the text. Specify this or start, not both. HIDDEN? [ from VANILLA-MIXIN* ] boolean Indicates whether the object should effectively be a hidden-object even if specified in :objects. Default is nil. IMAGE-FILE [ from BASE-OBJECT ] pathname or string Points to a pre-existing image file to be displayed instead of actual geometry for this object. Defaults to nil LOCAL-BOX [ from BASE-OBJECT ] list of two 3d points The left front bottom and right rear top corners, in global coordinates, of the rectangular volume bounding this geometric object.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/39/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 0,
      "chunk_count": 5
    },
    "id": "8c488e7e660ade606e707ffe6cfe7969"
  },
  {
    "text": "o nil LOCAL-BOX [ from BASE-OBJECT ] list of two 3d points The left front bottom and right rear top corners, in global coordinates, of the rectangular volume bounding this geometric object. OBLIQUENESS [ from BASE-OBJECT ] 3x3 orthonormal matrix of double-float numbers This is synonymous with the orientation . ONCLICK-FUNCTION [ from BASE-OBJECT ] lambda function of zero arguments, or nil If non-nil, this function gets invoked when the user clicks the object in graphics front-ends which support this functionality, e.g. SVG/Raphael and X3DOM. ROOT [ from VANILLA-MIXIN* ] gdl instance The root-level node in this object's ``tree'' (instance hierarchy). SAFE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances All objects from the :objects specification, including elements of sequences as flat lists. Any children which throw errors come back as a plist with error information START 3d-point Start of the text. Specify this or center, not both.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/39/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 1,
      "chunk_count": 5
    },
    "id": "ffe55ab77537e452c2598334e3cd767d"
  },
  {
    "text": "at lists. Any children which throw errors come back as a plist with error information START 3d-point Start of the text. Specify this or center, not both. STRINGS-FOR-DISPLAY [ from VANILLA-MIXIN* ] string or list of strings Determines how the name of objects of this type will be printed in most places. This defaults to the name-for-display (generally the part's name as specified in its parent), followed by an index number if the part is an element of a sequence. VISIBLE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances Additional objects to display in Tatu tree. Typically this would be a subset of hidden-children. Defaults to NIL. WIDTH [ from BASE-OBJECT ] number X-axis dimension of the reference box. Defaults to zero. Input Slots (optional, defaulting) DISPLAY-CONTROLS [ from BASE-OBJECT ] plist May contain keywords and values indicating display characteristics for this object.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/39/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 2,
      "chunk_count": 5
    },
    "id": "32c40758669d636395d48c250317192a"
  },
  {
    "text": "BJECT ] plist May contain keywords and values indicating display characteristics for this object. The following keywords are recognized currently: :color color keyword from the *color-table* parameter, or an HTML-style hexidecimal RGB string value, e.g. \"#FFFFFF\" for pure white. Defaults to :black. :line-thickness an integer, defaulting to 1, indicating relative line thickness for wireframe representations of this object. :dash-pattern (currently PDF/PNG/JPEG only). This is a list of two or three numbers which indicate the length, in pixels, of the dashes and blank spaces in a dashed line. The optional third number indicates how far into the line or curve to start the dash pattern. HEIGHT [ from BASE-OBJECT ] number Z-axis dimension of the reference box. Defaults to zero. ORIENTATION [ from BASE-OBJECT ] 3x3 matrix of double-float numbers Indicates the absolute Rotation Matrix used to create the coordinate system of this object. This matrix is given in absolute terms (i.e.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/39/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 3,
      "chunk_count": 5
    },
    "id": "c225debc40e3d5d438ff946db10c0654"
  },
  {
    "text": "m BASE-OBJECT ] 3x3 matrix of double-float numbers Indicates the absolute Rotation Matrix used to create the coordinate system of this object. This matrix is given in absolute terms (i.e. with respect to the root's orientation), and is generally created with the alignment function. It should be an orthonormal matrix, meaning each row is a vector with a magnitude of one (1.0). Computed Slots LENGTH [ from BASE-OBJECT ] number Y-axis dimension of the reference box. Defaults to zero. Package Documentation Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/39/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 4,
      "chunk_count": 5
    },
    "id": "537ed617d5bcf596eb8324e057722516"
  },
  {
    "text": "GendL Application - TORUS Package Documentation Object: TORUS (The :GEOM-BASE Package) Mixins: IFS-OUTPUT-MIXIN, ARCOID-MIXIN , BASE-OBJECT Description A single-holed ``ring'' torus, also known as an ``anchor ring.'' This is basically a circular cylinder ``bent'' into a donut shape. Partial donuts (``elbows'') are supported. Partial ``bent'' cylinders are not currently supported. Input Slots (required) MAJOR-RADIUS number Distance from center of donut hole to centerline of the torus. MINOR-RADIUS number Radius of the bent cylinder making up the torus. RADIUS [ from ARCOID-MIXIN ] number Distance from center to any point on the arc. Input Slots (optional) BOUNDING-BOX [ from BASE-OBJECT ] list of two 3d points The left front bottom and right rear top corners, in global coordinates, of the rectangular volume bounding the tree of geometric objects rooted at this object.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/40/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 0,
      "chunk_count": 8
    },
    "id": "5a9dc7c983de80e17e408502a5eac46a"
  },
  {
    "text": "ectangular volume bounding the tree of geometric objects rooted at this object. DRAW-CENTERLINE-ARC? boolean Indicates whether the bent cylinder's centerline arc should be rendered in some renderings. END-ANGLE [ from ARCOID-MIXIN ] angle in radians End angle of the arc. Defaults to twice pi. END-CAPS? boolean Indicates whether to include end caps for a partial torus in some renderings. Defaults to T. HIDDEN? [ from VANILLA-MIXIN* ] boolean Indicates whether the object should effectively be a hidden-object even if specified in :objects. Default is nil. IMAGE-FILE [ from BASE-OBJECT ] pathname or string Points to a pre-existing image file to be displayed instead of actual geometry for this object. Defaults to nil INNER-MINOR-RADIUS number Radius of the inner hollow part of the bent cylinder for a hollow torus.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/40/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 1,
      "chunk_count": 8
    },
    "id": "d6987a1b8dd1177b02a08486aca015c7"
  },
  {
    "text": "for a hollow torus. Defaults to NIL for a solid cylinder LOCAL-BOX [ from BASE-OBJECT ] list of two 3d points The left front bottom and right rear top corners, in global coordinates, of the rectangular volume bounding this geometric object. NUMBER-OF-LONGITUDINAL-SECTIONS integer Indicates the number of arcs to be drawn on along ``surface'' of the torus in some wireframe renderings. NUMBER-OF-TRANSVERSE-SECTIONS integer Indicates the number of circular cross-sections of the bent cylinder to show in some wireframe renderings. OBLIQUENESS [ from BASE-OBJECT ] 3x3 orthonormal matrix of double-float numbers This is synonymous with the orientation . ONCLICK-FUNCTION [ from BASE-OBJECT ] lambda function of zero arguments, or nil If non-nil, this function gets invoked when the user clicks the object in graphics front-ends which support this functionality, e.g. SVG/Raphael and X3DOM. ROOT [ from VANILLA-MIXIN* ] gdl instance The root-level node in this object's ``tree'' (instance hierarchy).",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/40/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 2,
      "chunk_count": 8
    },
    "id": "aa20e71f5922d10f26c85cab1620f55a"
  },
  {
    "text": "ject in graphics front-ends which support this functionality, e.g. SVG/Raphael and X3DOM. ROOT [ from VANILLA-MIXIN* ] gdl instance The root-level node in this object's ``tree'' (instance hierarchy). SAFE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances All objects from the :objects specification, including elements of sequences as flat lists. Any children which throw errors come back as a plist with error information START-ANGLE [ from ARCOID-MIXIN ] angle in radians Start angle of the arc. Defaults to zero. STRINGS-FOR-DISPLAY [ from VANILLA-MIXIN* ] string or list of strings Determines how the name of objects of this type will be printed in most places. This defaults to the name-for-display (generally the part's name as specified in its parent), followed by an index number if the part is an element of a sequence. VISIBLE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances Additional objects to display in Tatu tree. Typically this would be a subset of hidden-children.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/40/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 3,
      "chunk_count": 8
    },
    "id": "91650fcbcd722be4c435586c737539a0"
  },
  {
    "text": "part is an element of a sequence. VISIBLE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances Additional objects to display in Tatu tree. Typically this would be a subset of hidden-children. Defaults to NIL. Input Slots (optional, defaulting) ARC angle in radians Indicates the end angle for the donut. Defaults to twice pi for a full-circle donut. CENTER [ from BASE-OBJECT ] 3d point Indicates in global coordinates where the center of the reference box of this object should be located. DISPLAY-CONTROLS [ from BASE-OBJECT ] plist May contain keywords and values indicating display characteristics for this object. The following keywords are recognized currently: :color color keyword from the *color-table* parameter, or an HTML-style hexidecimal RGB string value, e.g. \"#FFFFFF\" for pure white. Defaults to :black. :line-thickness an integer, defaulting to 1, indicating relative line thickness for wireframe representations of this object. :dash-pattern (currently PDF/PNG/JPEG only).",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/40/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 4,
      "chunk_count": 8
    },
    "id": "8ce123f53b2ce6459f8fc53b9f43b1b8"
  },
  {
    "text": "e. Defaults to :black. :line-thickness an integer, defaulting to 1, indicating relative line thickness for wireframe representations of this object. :dash-pattern (currently PDF/PNG/JPEG only). This is a list of two or three numbers which indicate the length, in pixels, of the dashes and blank spaces in a dashed line. The optional third number indicates how far into the line or curve to start the dash pattern. ORIENTATION [ from BASE-OBJECT ] 3x3 matrix of double-float numbers Indicates the absolute Rotation Matrix used to create the coordinate system of this object. This matrix is given in absolute terms (i.e. with respect to the root's orientation), and is generally created with the alignment function. It should be an orthonormal matrix, meaning each row is a vector with a magnitude of one (1.0). Computed Slots HEIGHT [ from BASE-OBJECT ] number Z-axis dimension of the reference box. Defaults to zero. LENGTH [ from BASE-OBJECT ] number Y-axis dimension of the reference box.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/40/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 5,
      "chunk_count": 8
    },
    "id": "51d9ccae8203e2fe969c73b143f49a8b"
  },
  {
    "text": "ne (1.0). Computed Slots HEIGHT [ from BASE-OBJECT ] number Z-axis dimension of the reference box. Defaults to zero. LENGTH [ from BASE-OBJECT ] number Y-axis dimension of the reference box. Defaults to zero. WIDTH [ from BASE-OBJECT ] number X-axis dimension of the reference box. Defaults to zero. Examples (in-package :gdl-user) (define-object torus-sample (torus) :computed-slots ((major-radius 150) (minor-radius 42) (draw-centerline-arc? t) (number-of-longitudinal-sections 10) (number-of-transverse-sections 10) (display-controls (list :color :green-forest-medium))) :hidden-objects ((view :type 'base-view :projection-vector (getf *standard-views* :trimetric) :page-width (* 5 72) :page-length (* 5 72) :objects (list self)))) (generate-sample-drawing :objects (make-object 'torus-sample) :projection-direction :trimetric) Package Documentation Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/40/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 6,
      "chunk_count": 8
    },
    "id": "61b5dc6bfc061614fbbfa3a0dcf892cd"
  },
  {
    "text": "ojection-direction :trimetric) Package Documentation Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/object-docs/dokumentation/40/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_objects",
      "chunk_id": 7,
      "chunk_count": 8
    },
    "id": "01b8ad76bafd11475b5ac91f5c08e7ad"
  },
  {
    "text": "Function: TRANSLATE-ALONG-VECTOR <-Back Function: Translate-Along-Vector TRANSLATE-ALONG-VECTOR 3d point Returns a new point which is point translated along vector by distance arguments: point 3D Point vector 3D Vector distance Number <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/function-docs/dokumentation/70/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "f5610fe6a2fb1d45c89d8c0255c7e1a7"
  },
  {
    "text": "Function: GET-W <-Back Function: Get-W GET-W double-float number Returns W component of point or vector arguments: quaternion 4D point, Quaternion, or Axis-Angle style rotation spec <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/function-docs/dokumentation/27/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "bd73edc23e73ce2501e325cfec5a6e90"
  },
  {
    "text": "Function: EQUI-SPACE-POINTS <-Back Function: Equi-Space-Points EQUI-SPACE-POINTS list of points Returns a list of equally spaced points between start and end. <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/function-docs/dokumentation/24/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "4dbddbb446ae21509ec8105dfa5e3c5e"
  },
  {
    "text": "Function: UNITIZE-VECTOR <-Back Function: Unitize-Vector UNITIZE-VECTOR unit vector Returns the normalized unit-length vector corresponding to vector . arguments: vector 3D Vector keyword arguments: espsilon Number , Default Value: *ZERO-EPSILON* How close vector should be to 1.0 to be considered unit-length <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/function-docs/dokumentation/72/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "d0db14e4438c713ab663f6222572e5e3"
  },
  {
    "text": "Function: ZERO-VECTOR? <-Back Function: Zero-Vector? ZERO-VECTOR? boolean Returns non-NIL iff the vector has zero length according to Common Lisp zerop function. arguments: vector 3D Vector <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/function-docs/dokumentation/73/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "061e5ffa758acb0ec9f3fd5ef0692120"
  },
  {
    "text": "Function: 3D-POINT-P <-Back Function: 3d-Point-P 3D-POINT-P boolean . function: 3d-point-p - predicate function to check if a make-point is 3D. That is, the point has 3 dimensions, representing a 3-dimensional point. usage: 3d-point-p point description: A predicate function to check if a point is 3-dimensional. The function may also be accessed by calling the function 3d-point?. examples: (3d-point-p (make-point 1 2 3)) --> t (3d-point-p (make-point 1 2 3 4)) --> nil <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/function-docs/dokumentation/1/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "89e800f839379eac4a83464af6c6a999"
  },
  {
    "text": "Function: 3D-DISTANCE <-Back Function: 3d-Distance 3D-DISTANCE number The three-dimensional distance from point-1 to point-2. arguments: point-1 3D point point-1 3D point <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/function-docs/dokumentation/0/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "5c7952f69fa9ae840021c7d208e7dd40"
  },
  {
    "text": "Function: 3D-VECTOR-P <-Back Function: 3d-Vector-P 3D-VECTOR-P boolean . function: 3d-vector-p - predicate function to check if a vector is 3D. That is, the vector has 3 dimensions, representing a 3-dimensional vector. usage: 3d-vector-p vector description: A predicate function to check if a vector is 3-dimensional. The function may also be accessed by calling the function 3d-vector?. examples: (3d-vector-p (make-vector 1 2 3)) --> t (3d-vector-p (make-vector 1 2 3 4)) --> nil <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/function-docs/dokumentation/3/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "9bf22676934b5473a17260937d4bfff7"
  },
  {
    "text": "Function: DEGREE <-Back Function: Degree DEGREE number Converts angle in degrees, minutes, and seconds into radians. arguments: degrees Number optional arguments: minutes Number , Default Value: 0 <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/function-docs/dokumentation/20/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "72643ce3e3cfbdf02ad2ef2df40a59d4"
  },
  {
    "text": "Function: INTER-LINE-SPHERE <-Back Function: Inter-Line-Sphere INTER-LINE-SPHERE 3d point or nil Returns one point of intersection between line described by point p-line and direction-vector u-line , and sphere described by center and radius . Iff the line and sphere do not intersect at all, NIL is returned. arguments: p-line 3D Point Any point on the line u-line 3D Vector Direction of the line center 3D Point Center of the sphere radius Number The radius of the sphere side-vector 3D Vector Controls which of two possible intersection points is returned <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/function-docs/dokumentation/33/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "3f47919c4d68c666a7ad020ba7f58fad"
  },
  {
    "text": "Function: GET-X <-Back Function: Get-X GET-X double-float number Returns X component of point or vector arguments: point 2D, 3D, or 4D point <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/function-docs/dokumentation/28/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "670201b291c711a545327da1c3eabc08"
  },
  {
    "text": "Function: GEOM-BASE::ADD-MATRICES <-Back Function: Geom-Base::Add-Matrices ADD-MATRICES lisp array Adds two matrices element-by-element. rest: (matrics \"Lisp Arrays of same dimensions\") <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/function-docs/dokumentation/7/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "e6753f4aeef953eb65ef0aa88e2ba2b4"
  },
  {
    "text": "Function: ROTATE-VECTOR-D <-Back Function: Rotate-Vector-D ROTATE-VECTOR-D number Rotates vector around normal by an amount of rotation specified by degrees . arguments: vector 3D Vector degrees Number normal 3D Vector <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/function-docs/dokumentation/60/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "110a46f548d0944d14c8e143d1907417"
  },
  {
    "text": "Function: 3D-POINT? <-Back Function: 3d-Point? 3D-POINT? boolean A predicate function to check if a point is 3-dimensional. <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/function-docs/dokumentation/2/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "93426e9acd50dde219aaaca83deaf1e9"
  },
  {
    "text": "Macro: TRANSLATE <-Back Macro: Translate TRANSLATE [macro] 3d point Within the context of a GDL object definition (i.e. a define-object ), translate origin by any number of offsets . arguments: origin 3D Point rest arguments: offsets Plist consisting of direction keywords and numbers A direction keyword can be one of: :top (or :up ) :bottom (or :down ) :left :right :front :rear (or :back ) <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/function-docs/dokumentation/69/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "069a6d7facd71b0a48dd5b3421cc1823"
  },
  {
    "text": "Function: QUATERNION-TO-MATRIX <-Back Function: Quaternion-To-Matrix QUATERNION-TO-MATRIX 3x3 orthonormal rotation matrix Transforms quaternion into a 3x3 rotation matrix. arguments: quaternion Quaternion, represented as a 4D Vector <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/function-docs/dokumentation/51/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "677c5d03c3bcc22341d630c5c28184cf"
  },
  {
    "text": "Function: MATRIX*VECTOR <-Back Function: Matrix*Vector MATRIX*VECTOR lisp array Multiplies matrix by column vector of compatible dimension. arguments: matrix Lisp Array of Numbers vector Vector <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/function-docs/dokumentation/38/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "74d0d1d6743c299a0ed36a274d2f8790"
  },
  {
    "text": "Function: TRANSFORM-AND-TRANSLATE-POINT <-Back Function: Transform-And-Translate-Point TRANSFORM-AND-TRANSLATE-POINT 3d-point Returns the product of vector and transform , translated by (i.e. added to) trans-vector . arguments: vector 3D Vector transform 3x3 Rotation Matrix trans-vector 3D Vector examples: (let ((transform (make-transform '((0.0 0.0 1.0) (0.0 1.0 0.0) (1.0 0.0 0.0)))) (v (make-vector 1.0 2.0 3.0)) (t-v (make-vector 3.0 0.0 0.0))) (transform-and-translate-point v transform t-v)) ---> #(6.0 2.0 1.0) <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/function-docs/dokumentation/67/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "025dc248bd53d9781b8145e767f31901"
  },
  {
    "text": "Function: INTER-LINE-PLANE <-Back Function: Inter-Line-Plane INTER-LINE-PLANE 3d point or nil Returns one point of intersection between line described by point p-line and direction-vector u-line , and plane described by p-plane and u-plane . Iff the line and plane do not intersect at all (i.e. they are parallel), NIL is returned. arguments: p-line 3D Point Any point on the line u-line 3D Vector Direction of the line p-plane 3D Point Any point on the plane u-plane 3D Vector Normal of the plane <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/function-docs/dokumentation/32/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "3faa3208fe41fa681079b3be99adb3e0"
  },
  {
    "text": "Function: DISTANCE-TO-LINE <-Back Function: Distance-To-Line DISTANCE-TO-LINE number Returns shortest distance from point to line. <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/function-docs/dokumentation/22/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "83dad45124115b5d6486e3a886e32375"
  },
  {
    "text": "Macro: MAKE-POINT <-Back Macro: Make-Point MAKE-POINT 3d point (Internally this is the same as a 3D Vector) Returns a vector of double-floats from up to 4 numbers. <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/function-docs/dokumentation/35/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "47e1f01ecc9450a143e4bd2a5006f3f7"
  },
  {
    "text": "Function: DEGREES-TO-RADIANS <-Back Function: Degrees-To-Radians DEGREES-TO-RADIANS number Converts degrees to radians. arguments: degrees Number <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/function-docs/dokumentation/21/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "4d290dd938be91d6c8fa0c3b3261ab6d"
  },
  {
    "text": "Function: COINCIDENT-POINT? <-Back Function: Coincident-Point? COINCIDENT-POINT? boolean Returns non-NIL iff the distance between point-1 and point-2 is less than tolerance . arguments: point-1 3D Point point-2 3D Point keyword arguments: tolerance Number , Default Value: *ZERO-EPSILON* <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/function-docs/dokumentation/17/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "6ae961acd966c9b76cb1a87ee06f718e"
  },
  {
    "text": "Function: GET-Y <-Back Function: Get-Y GET-Y double-float number Returns Y component of point or vector arguments: point 2D, 3D, or 4D point <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/function-docs/dokumentation/29/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "5b536977577aea026d7ec5d6dc3c1265"
  },
  {
    "text": "Function: ORTHOGONAL-COMPONENT <-Back Function: Orthogonal-Component ORTHOGONAL-COMPONENT 3d unit vector Returns the unit vector orthogonal to reference-vector which is as close as possible to vector . arguments: vector 3D Vector reference-vector 3D Vector <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/function-docs/dokumentation/43/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "75cb399576f03bd88bdc2cb1fb4d8b07"
  },
  {
    "text": "Function: 3D-VECTOR? <-Back Function: 3d-Vector? 3D-VECTOR? boolean A predicate function to check if a vector is 3-dimensional. <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/function-docs/dokumentation/5/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "ad1e7f042bfed1b9fe95fe7e2439fd0d"
  },
  {
    "text": "Function: SUBTRACT-VECTORS <-Back Function: Subtract-Vectors SUBTRACT-VECTORS vector Return a new vector, the result of affine vector subtraction. arguments: v1 2D, 3D, or 4D Vector v2 2D, 3D, or 4D Vector <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/function-docs/dokumentation/66/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "22aa91593303001d4d84afdfb188b708"
  },
  {
    "text": "Function: CREATE-OBLIQUENESS <-Back Function: Create-Obliqueness CREATE-OBLIQUENESS 3x3 orthonormal rotation matrix Gives the transform required to be applied to the parent's orientation to achieve alignment indicated by the arguments. The direction keywords are the same as those used with the GDL alignment function. arguments: vector-1 3D Vector direction-1 Direction Keyword vector-2 3D Vector direction-2 Direction Keyword self GDL object inheriting from base-object <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/function-docs/dokumentation/18/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "52a4db1991c696d8cbcc4ecc7c13972e"
  },
  {
    "text": "Function: APPLY-MAKE-POINT <-Back Function: Apply-Make-Point APPLY-MAKE-POINT 2d, 3d, or 4d point This function takes a list of two, three, or four numbers rather than multiple arguments as with the make-point and make-vector macro. This is equivalent to calling the make-point or make-vector macro on the elements of this list. arguments: list List of 2, 3, or 4 numbers The coordinates for the point <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/function-docs/dokumentation/12/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "24fd2a30e5afb6296c7735fb51f0caa5"
  },
  {
    "text": "Function: PYTHAGORIZE <-Back Function: Pythagorize PYTHAGORIZE number Returns the square root of the sum of the squares of numbers . rest arguments: numbers List of Numbers <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/function-docs/dokumentation/50/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "3ba1e8ef93d3611e955ccb27ec333e59"
  },
  {
    "text": "Function: ROTATE-POINT-D <-Back Function: Rotate-Point-D ROTATE-POINT-D 3d point Returns the 3D Point resulting from rotating point about center in the plane defined by normal . The rotation can specified either by an arc length ( arc-length ) or an angle in degrees ( angle ). A second value is returned, which is the resulting angle of rotation in degrees (this is of possible use if arc-length is used to specify the rotation). arguments: point 3D Point center 3D Point normal 3D Vector keyword arguments: arc-length Number , Default Value: NIL angle Number , Default Value: NIL <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/function-docs/dokumentation/58/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "a7490f54e60717af4ed69d20ad703bbb"
  },
  {
    "text": "Function: ARRAY-TO-LIST <-Back Function: Array-To-List ARRAY-TO-LIST list Converts array to a list. arguments: array Lisp Array of Numbers optional arguments: decimal-places Integer , Default Value: 2 Numbers will be rounded to this many decimal places <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/function-docs/dokumentation/14/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "25b44cb75144f2ac413236d0ec49f9fa"
  },
  {
    "text": "Function: SCALAR*VECTOR <-Back Function: Scalar*Vector SCALAR*VECTOR vector Returns result of multiplying the scalar number by the vector arguments: scalar Number vector 2D, 3D, or 4D Vector <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/function-docs/dokumentation/64/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "454a9a236271b0238791392246f1826f"
  },
  {
    "text": "Function: MULTIPLY-MATRICES <-Back Function: Multiply-Matrices MULTIPLY-MATRICES lisp array Multiplies compatible-size matrices according to normal matrix math. arguments: matrix-1 Lisp Array of Numbers matrix-2 Lisp Array of Numbers <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/function-docs/dokumentation/42/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "4c63564337290bdbcefea13276fd1286"
  },
  {
    "text": "Function: PROJ-POINT-ON-LINE <-Back Function: Proj-Point-On-Line PROJ-POINT-ON-LINE 3d-point Drops 3d-point onto line containing line-point and whose direction-vector is vector . arguments: 3d-point 3D Point line-point 3D Point vector 3D Unit Vector <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/function-docs/dokumentation/48/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "dbd35498aa58b501ee29b311a584197d"
  },
  {
    "text": "Macro: ROLL <-Back Macro: Roll ROLL [macro] transformation matrix In the context of a GDL object definition (i.e. in a define-object ), returns a transformation matrix based on rotation about axis by some angle . Axis is a keyword symbol, one of: :lateral :longitudinal :vertical Angle is specified in radians. Any number of axis-angle pairs can be specified. arguments: axis Keyword Symbol angle Number rest arguments: other-axes-and-angles Plist made from axis keyword symbols and numbers <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/function-docs/dokumentation/56/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "0ca048333edf84020ce5e9d936c8df40"
  },
  {
    "text": "Function: PARALLEL-VECTORS? <-Back Function: Parallel-Vectors? PARALLEL-VECTORS? boolean Returns non-nil iff vector-1 and vector-2 are pointing in the same direction or opposite directions. arguments: vector-1 3D Vector vector-2 3D Vector keyword arguments: tolerance Number , Default Value: *ZERO-EPSILON* directed? Boolean , Default Value: NIL If :directed? is t, the function returns t if the vectors are both parallel and point in the same direction. The default is nil, meaning that the function will return t regardless of which way the vectors point, as long as they are parallel <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/function-docs/dokumentation/44/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "27a689ec7c6d71dcc7086065358c75ca"
  },
  {
    "text": "Function: INTER-CIRCLE-SPHERE <-Back Function: Inter-Circle-Sphere INTER-CIRCLE-SPHERE 3d point or nil Returns point of intersection between the circle described by circle-center , circle-radius , and circle-plane-normal , and the sphere described by sphere-center and sphere-radius . Iff the circle and sphere do not intersect at all, NIL is returned. arguments: circle-center 3D Point circle-radius Number circle-plane-normal 3D Vector sphere-center 3D Point sphere-radius Number positive-angle? Boolean Controls which of two intersection points is returned keyword arguments: tolerance Controls how close the entities must come to touching to be considered as intersecting , Default Value: *ZERO-EPSILON* <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/function-docs/dokumentation/31/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "8b26250ec6a8a6e7252ba3ec951d008a"
  },
  {
    "text": "Function: TRANSPOSE-MATRIX <-Back Function: Transpose-Matrix TRANSPOSE-MATRIX lisp array Transposes rows and columns of matrix . arguments: matrix Lisp Array <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/function-docs/dokumentation/71/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "f6de9607e1cd24a73993389b6ccf4167"
  },
  {
    "text": "Function: ANGLE-BETWEEN-VECTORS-D <-Back Function: Angle-Between-Vectors-D ANGLE-BETWEEN-VECTORS-D number This function is identical to angle-between-vectors, but returns the angle in degrees. Refer to angle-between-vectors for more information. Technical note: the more argument has been introduced to support both angle-between-vectors call conventions and the legacy signature: (vector-1 vector-2 &optional reference-vector negative?) Optionally, a deprecation warning is printed when code invokes this legacy pattern.. <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/function-docs/dokumentation/11/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "ee60d3a00492910aade511a8d2625ba0"
  },
  {
    "text": "Function: MIDPOINT <-Back Function: Midpoint MIDPOINT 3d point Returns the barycentric average (i.e. midpoint) of point1 and point2 . arguments: point1 3D Point point2 3D Point <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/function-docs/dokumentation/41/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "46492963a7fda95b330ee66c5eccd39e"
  },
  {
    "text": "Macro: MAKE-VECTOR <-Back Macro: Make-Vector MAKE-VECTOR 0d, 1d, 2d, 3d, or 4d vector (Internally this is the same as a Point) Returns a vector of double-floats from up to 4 numbers. <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/function-docs/dokumentation/37/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "23bf80b8221514a2117ecb632156b240"
  },
  {
    "text": "Function: CROSS-VECTORS <-Back Function: Cross-Vectors CROSS-VECTORS 3d vector Returns the cross product of vector-1 and vector-2. According to the definition of cross product, this resultant vector should be orthogonal to both vector-1 and vector-2 . arguments: vector-1 3D Vector vector-2 3D Vector <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/function-docs/dokumentation/19/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "b623757295cc47f32d80ebec419e0c9d"
  },
  {
    "text": "Function: ROTATE-VECTOR <-Back Function: Rotate-Vector ROTATE-VECTOR number Rotates vector around normal by an amount of rotation specified by angle , which is an angle measured in radians. arguments: vector 3D Vector angle Number normal 3D Vector <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/function-docs/dokumentation/59/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "9823644695972da631955a80758f7782"
  },
  {
    "text": "Function: TRANSFORM-NUMERIC-POINT <-Back Function: Transform-Numeric-Point TRANSFORM-NUMERIC-POINT 3d-point Returns the product of vector and transform . arguments: vector 3D Vector transform 3x3 Rotation Matrix examples: (let ((transform (make-transform '((0.0 0.0 1.0) (1.0 0.0 0.0) (0.0 1.0 0.0)))) (v (make-vector 1.0 2.0 3.0))) (transform-numeric-point v transform)) ---> #(2.0 3.0 1.0) <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/function-docs/dokumentation/68/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "c73c7e58ccbef486b9c385c33d8a599e"
  },
  {
    "text": "Function: ADD-VECTORS <-Back Function: Add-Vectors ADD-VECTORS vector Return a new vector, the result of affine vector addition. arguments: v1 2D, 3D, or 4D Vector v2 2D, 3D, or 4D Vector <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/function-docs/dokumentation/8/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "392de3952994d181ea376a9a467880b5"
  },
  {
    "text": "Function: GEOM-BASE::PRINT-CHARACTERS <-Back Function: Geom-Base::Print-Characters PRINT-CHARACTERS Print each character of the given string starting with finding character `start-char` and continuing for `search-length`. <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/function-docs/dokumentation/47/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "de21b9373c30b0e92efc351ec93b9960"
  },
  {
    "text": "Function: POINT-ON-PLANE? <-Back Function: Point-On-Plane? POINT-ON-PLANE? boolean Determines whether or not the 3d-point lies on the plane specified by plane-point and plane-normal , within tolerance . arguments: 3d-point Point in question plane-point point on the known plane plane-normal normal to the known plane keyword arguments: tolerance Tolerance for points to be considered coincident , Default Value: *ZERO-EPSILON* <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/function-docs/dokumentation/45/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "8d07142964c3e4016a451010776116fa"
  },
  {
    "text": "Function: PROJECTED-VECTOR <-Back Function: Projected-Vector PROJECTED-VECTOR 3d vector Returns result of projecting vector onto the plane whose normal is plane-normal . arguments: vector 3D Vector plane-normal 3D Vector <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/function-docs/dokumentation/49/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "b2753db7db604232a8dba97774057bd3"
  },
  {
    "text": "Function: SORT-POINTS-ALONG-VECTOR <-Back Function: Sort-Points-Along-Vector SORT-POINTS-ALONG-VECTOR list of points Returns points in order along given vector. <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/function-docs/dokumentation/65/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "c5ca215e25780d8e8a431538e6be31ab"
  },
  {
    "text": "Function: QUATERNION-TO-ROTATION <-Back Function: Quaternion-To-Rotation QUATERNION-TO-ROTATION euler rotation represented as a 4d vector Transforms quaternion into a Euler angle rotation consisting of an arbitrary axis and an angle of rotation about that axis. arguments: quaternion Quaternion, represented as a 4D Vector <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/function-docs/dokumentation/52/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "26ae4c40f3fab7aa29993da29d479216"
  },
  {
    "text": "Function: DOT-VECTORS <-Back Function: Dot-Vectors DOT-VECTORS number Returns the dot product of vector-1 and vector-2. arguments: vector-1 2D, 3D, or 4D Vector vector-2 2D, 3D, or 4D Vector <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/function-docs/dokumentation/23/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "b01882982db6965abc0aaf9ac8f1113d"
  },
  {
    "text": "Function: ACOSD <-Back Function: Acosd ACOSD number Returns the arc cosine of theta , converted into degrees. arguments: theta Number An angle in radians <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/function-docs/dokumentation/6/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "b7f70689cd9a82151fa57f1c9dc84995"
  },
  {
    "text": "Function: GET-Z <-Back Function: Get-Z GET-Z double-float number Returns Z component of point or vector arguments: point 3D or 4D point <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/function-docs/dokumentation/30/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "9264c2e800ed3e99ff9248e0c8555537"
  },
  {
    "text": "Function: GEOM-BASE::3D-VECTOR-TO-ARRAY <-Back Function: Geom-Base::3d-Vector-To-Array 3D-VECTOR-TO-ARRAY 3-by-1 lisp array of double-floats Returns a 3-by-1 Lisp array of double-float numbers built from a 3D-Vector of double-floats. This can be useful for example for multiplying a GDL 3d-point (which is a 1-d vector) by a 3x3 matrix represented as a 2D Lisp array. arguments: vector 3D-Vector of double-floats (e g. created with make-vector macro) <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/function-docs/dokumentation/4/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "d1aea6bea9d54c1d6785dda9613d5507"
  },
  {
    "text": "Function: GEOM-BASE::ARRAY-TO-3D-VECTOR <-Back Function: Geom-Base::Array-To-3d-Vector ARRAY-TO-3D-VECTOR 3d vector Returns a 3D-Vector of double-floats built from a 3-by-1 Lisp array of numbers. arguments: array 3-by-1 Lisp array of numbers <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/function-docs/dokumentation/13/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "c1509af30c2e3bd78a2199fccb02b153"
  },
  {
    "text": "Function: RADIANS-TO-DEGREES <-Back Function: Radians-To-Degrees RADIANS-TO-DEGREES number Converts angle in radians to degrees. arguments: radians Number <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/function-docs/dokumentation/53/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "3823eb025b233d2d422f4f06b920a558"
  },
  {
    "text": "Function: POINT-ON-VECTOR? <-Back Function: Point-On-Vector? POINT-ON-VECTOR? boolean Determines whether or not the unknown-point lies on the ray specified by the vector pointing from first-point to second-point , within tolerance . arguments: first-point first point of vector second-point second point of vector unknown-point point in question keyword arguments: tolerance Tolerance for vectors to be considered same-direction , Default Value: *ZERO-EPSILON* <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/function-docs/dokumentation/46/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "f27f60206835a1a46527b5265614186f"
  },
  {
    "text": "Function: ALIGNMENT <-Back Function: Alignment ALIGNMENT 3x3 orthonormal rotation matrix Constructs a rotation matrix from the given axes and vectors. Up to three pairs of axis and vector can be given. If only one pair is given, then the orthogonal component of its vector with respect to the other two global axes is used. If a second pair is given, then the orthogonal component of its vector with respect to the first vector is used. A third pair is only required if a left-handed coordinate system is desired (right-handed is the default). The third vector will always be converted to the cross of the first two, unless it is given as the reverse of this, which will force a left-handed coordinate system. Axes are direction keywords which can be one of: :right :left :rear :front :top :bottom The second axis keyword, if given, must be orthogonal to the first, and the third, if given, must be orthogonal to the first two.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/function-docs/dokumentation/9/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_functions",
      "chunk_id": 0,
      "chunk_count": 2
    },
    "id": "14309583f1b142f375bd0fbef6530217"
  },
  {
    "text": "e second axis keyword, if given, must be orthogonal to the first, and the third, if given, must be orthogonal to the first two. arguments: axis-1 Direction Keyword vector1 3D Vector optional arguments: axis-2 Direction Keyword , Default Value: NIL vector2 3D Vector , Default Value: NIL axis-3 Direction Keyword , Default Value: NIL vector3 3D Vector , Default Value: NIL <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/function-docs/dokumentation/9/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_functions",
      "chunk_id": 1,
      "chunk_count": 2
    },
    "id": "b0034457143ae7f2894cb933905b378b"
  },
  {
    "text": "Function: REVERSE-VECTOR <-Back Function: Reverse-Vector REVERSE-VECTOR vector Return the vector pointing in the opposite direction. arguments: vector 2D, 3D, or 4D Vector <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/function-docs/dokumentation/55/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "cdedcdb15bb50fdebae34fc8df20483f"
  },
  {
    "text": "Function: LENGTH-VECTOR <-Back Function: Length-Vector LENGTH-VECTOR number Return the vector's magnitude arguments: vector 3D Vector <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/function-docs/dokumentation/34/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "84a151af896073e53d06afdcd4f6164e"
  },
  {
    "text": "Function: SAME-DIRECTION-VECTORS? <-Back Function: Same-Direction-Vectors? SAME-DIRECTION-VECTORS? boolean Returns non-NIL iff vector-1 and vector-2 are pointing in the same direction. arguments: vector-1 3D Vector vector-2 3D Vector keyword arguments: tolerance Number , Default Value: *ZERO-EPSILON* <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/function-docs/dokumentation/62/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "018fc264f67e6b801aa9ea0785c67374"
  },
  {
    "text": "Function: ATAND <-Back Function: Atand ATAND number Returns the arc tangent of theta , converted into degrees. arguments: theta Number An angle in radians <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/function-docs/dokumentation/16/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "42479ab8047c83fb2f76178a789ebe9a"
  },
  {
    "text": "Function: ASIND <-Back Function: Asind ASIND number Returns the arc sine of theta , converted into degrees. arguments: theta Number An angle in radians <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/function-docs/dokumentation/15/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "049cee90c166f87a60c1d4ea44d9a7b3"
  },
  {
    "text": "Function: GET-U <-Back Function: Get-U GET-U double-float number Returns U component of 2D parameter value. arguments: point 2D point <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/function-docs/dokumentation/25/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "42f75a41564d467e807de7e1c0d6f854"
  },
  {
    "text": "Function: RADIANS-TO-GRADS <-Back Function: Radians-To-Grads RADIANS-TO-GRADS number Converts angle in radians to grads. arguments: radians Number <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/function-docs/dokumentation/54/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "217ddebcdfe41f0a297c21bea8284843"
  },
  {
    "text": "Function: GET-V <-Back Function: Get-V GET-V double-float number Returns V component of 2D parameter value. n:arguments (point \"2D point\") <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/function-docs/dokumentation/26/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "fa29b1c95a4f9934a258a2cb6227eaf9"
  },
  {
    "text": "Function: ROTATION <-Back Function: Rotation ROTATION 3x3 orthonormal rotation matrix (as a lisp array of numbers) . Returns a transformation matrix based on a rotation by angle , specified in radians, about an arbitrary vector . arguments: vector 3D Vector angle Number <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/function-docs/dokumentation/61/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "1eb0bd451c3136fc4b39092d36cc8ec8"
  },
  {
    "text": "Function: GEOM-BASE::SCALAR*MATRIX <-Back Function: Geom-Base::Scalar*Matrix SCALAR*MATRIX lisp array Returns result of multiplying the scalar number by the matrix. arguments: scalar Number matrix Lisp Array of Numbers <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/function-docs/dokumentation/63/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "4f150a9b55fcb24fd557ce2e6f8d99da"
  },
  {
    "text": "Function: MAKE-TRANSFORM <-Back Function: Make-Transform MAKE-TRANSFORM lisp array Builds a matrix from list-of lists . arguments: list-of-lists List of lists of numbers <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/function-docs/dokumentation/36/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "77769e412c8eadc21867188d1f6d42da"
  },
  {
    "text": "Function: ROTATE-POINT <-Back Function: Rotate-Point ROTATE-POINT 3d point Returns the 3D Point resulting from rotating point about center in the plane defined by normal . The rotation can specified either by an arc length ( arc-length ) or an angle in radians ( angle ). A second value is returned, which is the resulting angle of rotation in radians (this is of possible use if arc-length is used to specify the rotation). arguments: point 3D Point center 3D Point normal 3D Vector keyword arguments: arc-length Number , Default Value: NIL angle Number , Default Value: NIL <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/function-docs/dokumentation/57/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "6198cf5ab1e34ea940567dba654210ab"
  },
  {
    "text": "Function: ANGLE-BETWEEN-VECTORS <-Back Function: Angle-Between-Vectors ANGLE-BETWEEN-VECTORS number Returns the angle in radians between vector-1 and vector-2 . If no reference-vector given, the smallest possible angle is returned. If a reference-vector is given, computes according to the right-hand rule. If -ve is given, returns a negative number for angle if it really is negative according to the right-hand rule. arguments: vector-1 3D Vector vector-2 3D Vector optional arguments: reference-vector 3D Vector , Default Value: NIL keyword arguments: epsilon Number , Default Value: *ZERO-EPSILON* Determines how small of an angle is considered to be zero -ve Boolean , Default Value: NIL <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/function-docs/dokumentation/10/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "171f064f8449c9cadba37aef17514481"
  },
  {
    "text": "Function: MATRIX-TO-QUATERNION <-Back Function: Matrix-To-Quaternion MATRIX-TO-QUATERNION quaternion represented as a 4d vector Transforms rotation matrix into the corresponding quaternion. arguments: matrix 3x3 Orthonormal Rotation Matrix (as a Lisp Array of Numbers) <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/function-docs/dokumentation/39/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "8a512a5781d2d45d8016d570f7823183"
  },
  {
    "text": "Macro: MERGE-DISPLAY-CONTROLS <-Back Macro: Merge-Display-Controls MERGE-DISPLAY-CONTROLS plist of display controls This macro \"merges\" the given display controls list with that coming as a trickle-down slot from the parent. It will replace any common keys and add any new keys. arguments: display-controls Plist The new display controls to be merged with the defaults from the parent <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/5/function-docs/dokumentation/40/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_5_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "84923069844cea30e7d8e94023ed7359"
  },
  {
    "text": "The YADD (Yet Another Definition Documenter (yadd)) Package Documentation Home The YADD (Yet Another Definition Documenter (yadd)) Package Object Definitions assembly base-yadd-sheet master-index package-dokumentation package-form Documentation Home Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/14/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_14",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "caf912d3541a841e26563b2ecfc92722"
  },
  {
    "text": "GendL Application - BASE-YADD-SHEET Package Documentation Object: BASE-YADD-SHEET (The :YADD Package) Mixins: BASE-AJAX-SHEET Author Dave Cooper (Genworks) Description Base mixin for a yadd sheet Input Slots (optional) AFTER-PRESENT! [ from BASE-HTML-SHEET ] void This is an empty function by default, but can be overridden in the respondent of a form, to do some processing after the respondent's write-html-sheet function runs to present the object. AFTER-SET! [ from BASE-HTML-SHEET ] void This is an empty function by default, but can be overridden in the requestor of a form, to do some processing after the requestor's form values are set into the specified bashee. BASHEE [ from SKELETON-UI-ELEMENT ] gdl object Object to have its settable computed-slots and/or query-plist set from the fields on the form upon submission. Defaults to self.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/14/object-docs/dokumentation/1/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_14_objects",
      "chunk_id": 0,
      "chunk_count": 14
    },
    "id": "90cb2e95c67b8a8c9c70c8b8501d44cf"
  },
  {
    "text": "on the form upon submission. Defaults to self. BEFORE-PRESENT! [ from BASE-HTML-SHEET ] void This is an empty function by default, but can be overridden in the respondent of a form, to do some processing before the respondent's write-html-sheet function runs to present the object. This can be useful especially for objects which are subclasses of higher-level mixins such as application-mixin and node-mixin , where you do not have direct access to the write-html-sheet function and typically only define the model-inputs function. It is not always reliable to do processing in the model-inputs function, since some slots which depend on your intended modifications may already have been evaluated by the time the model-inputs function runs.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/14/object-docs/dokumentation/1/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_14_objects",
      "chunk_id": 1,
      "chunk_count": 14
    },
    "id": "6df7336d665699bd4049016f06d2b655"
  },
  {
    "text": "BEFORE-RESPONSE! [ from BASE-HTML-SHEET ] void This is an empty function by default, but can be overridden in a user specialization of base-html-sheet, to do some processing before the header-plist is evaluated and before the HTTP response is actually initiated. BEFORE-SET! [ from BASE-HTML-SHEET ] void This is an empty function by default, but can be overridden in the requestor of a form, to do some processing before the requestor's form values are set into the specified bashee. BODY-CLASS [ from BASE-AJAX-SHEET ] string or nil Names the value of class attribute for the body tag. Default is nil. BODY-ONLOAD [ from BASE-AJAX-SHEET ] string of javascript or nil This Javascript will go into the :onload event of the body. Default is nil. BODY-ONPAGESHOW [ from BASE-AJAX-SHEET ] string of javascript or nil This Javascript will go into the :onpageshow event of the body. Default is nil.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/14/object-docs/dokumentation/1/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_14_objects",
      "chunk_id": 2,
      "chunk_count": 14
    },
    "id": "a9a75531e4038a2fc299a886fb0b6a09"
  },
  {
    "text": "ascript or nil This Javascript will go into the :onpageshow event of the body. Default is nil. BODY-ONRESIZE [ from BASE-AJAX-SHEET ] string of javascript or nil This Javascript will go into the :onresize event of the body. Default is nil. CHECK-SANITY? [ from BASE-HTML-SHEET ] boolean Determines whether a a sanity check is done (with the check-sanity function) before presenting the response page if this page is a respondent. Default is NIL. DOCTYPE-STRING [ from BASE-AJAX-SHEET ] string or nil Contains the string for the doctype at the top of the document. Default is the standard doctype for HTML5 and later. DOM-ID [ from SKELETON-UI-ELEMENT ] string This is the auto-computed dom-id which should be used for rendering this section. If you use the main-div HTML string for rendering this object as a page section, then you do not have to generate the :div tag yourself - the main-div will be a string of HTML which is wrapped in the correct :div tag already.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/14/object-docs/dokumentation/1/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_14_objects",
      "chunk_id": 3,
      "chunk_count": 14
    },
    "id": "1068602d0225de3899ec01537d09a57c"
  },
  {
    "text": "ect as a page section, then you do not have to generate the :div tag yourself - the main-div will be a string of HTML which is wrapped in the correct :div tag already. FORCE-VALIDATION-FOR [ from SKELETON-UI-ELEMENT ] list of gdl objects of type form-control The validation-function will be forced on these objects when a form is submitted, even if the object's html form-control does not happen to be included in the values submitted with the form. Defaults to nil. HEAD-CLASS [ from BASE-AJAX-SHEET ] string or nil Names the value of class attribute for the head tag. Default is nil. HIDDEN? [ from VANILLA-MIXIN* ] boolean Indicates whether the object should effectively be a hidden-object even if specified in :objects. Default is nil. HTML-CLASS [ from BASE-AJAX-SHEET ] string or nil Names the value of class attribute for the html tag. Default is nil. HTML-SECTIONS [ from SKELETON-UI-ELEMENT ] List of HTML sections to be scanned and possibly replaced in response to GDL Ajax calls.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/14/object-docs/dokumentation/1/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_14_objects",
      "chunk_id": 4,
      "chunk_count": 14
    },
    "id": "bd0a0dc7eefef12046c904d48665da19"
  },
  {
    "text": "value of class attribute for the html tag. Default is nil. HTML-SECTIONS [ from SKELETON-UI-ELEMENT ] List of HTML sections to be scanned and possibly replaced in response to GDL Ajax calls. Override this slot at your own risk. The default is all sections who are most recently laid out on the respondent sheet, and this is set programmatically every time the sheet section's main-div is demanded. HTML-SECTIONS-VALID [ from SKELETON-UI-ELEMENT ] List of valid HTML sections to be scanned and possibly replaced in response to GDL Ajax calls. Override this slot at your own risk. The default is all sections who are most recently laid out on the respondent sheet, and this is set programmatically every time the sheet section's main-div is demanded.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/14/object-docs/dokumentation/1/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_14_objects",
      "chunk_id": 5,
      "chunk_count": 14
    },
    "id": "979286ee9625a1eec7ee179b204300cd"
  },
  {
    "text": "INNER-HTML [ from SKELETON-UI-ELEMENT ] string This can be used with (str .) [in cl-who] or (:princ .) [in htmlGen] to output this section of the page, without the wrapping :div tag [so if you use this, your code would be responsible for wrapping the :div tag with :id (the dom-id).] JS-TO-EVAL [ from SKELETON-UI-ELEMENT ] string of valid javascript This Javascript will be send with the Ajax response, and evaluated after the innerHTML for this section has been replaced. MAIN-SHEET-BODY [ from BASE-AJAX-SHEET ] string of html The main body of the page. This can be specified as input or overridden in subclass, otherwise it defaults to the content produced by the :output-function of the same name in the applicable lens for html-format. ORDERED-FORM-CONTROLS [ from SKELETON-UI-ELEMENT ] list of gdl objects, which should be of type 'base-form-control .",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/14/object-docs/dokumentation/1/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_14_objects",
      "chunk_id": 6,
      "chunk_count": 14
    },
    "id": "9c2dedbecaa56ddcef3fada3b4523be8"
  },
  {
    "text": "f gdl objects, which should be of type 'base-form-control . [Note -- this slot is not really necessary for protecting out-of-bounds sequence references anymore, the form-control processor protects against this by itself now]. These objects are validated and bashed first, in the order given. If the cardinality of one form-control depends on another as in the example below, then you should list those dependent objects first. Default is nil. examples: ... :computed-slots ((number-of-nozzles (the number-of-nozzles-form value)) (ordered-form-controls (append (list-elements (the inner-flange-form)) (list (the number-of-nozzles-form))))) :objects ((inner-flange-form :type 'menu-form-control :choice-plist (list :hey \"hey\" :now \"now\") :default :hey :sequence (:size (the number-of-nozzles))) (number-of-nozzles-form :type 'text-form-control :prompt \"Number of Shell Nozzles Required: \" :domain :number :default 0) POSSIBLE-NILS [ from SKELETON-UI-ELEMENT ] list of keyword symbols Messages",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/14/object-docs/dokumentation/1/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_14_objects",
      "chunk_id": 7,
      "chunk_count": 14
    },
    "id": "28e508bf3d13ac77967b03b80ec1d1f6"
  },
  {
    "text": "-of-nozzles-form :type 'text-form-control :prompt \"Number of Shell Nozzles Required: \" :domain :number :default 0) POSSIBLE-NILS [ from SKELETON-UI-ELEMENT ] list of keyword symbols Messages corresponding to form fields which could be missing from form submission (e.g. checkbox fields). Defaults to the names of any children or hidden-children of type menu-form-control or checkbox-form-control. PRESET-ALL? [ from SKELETON-UI-ELEMENT ] boolean This switch determines whether all form-controls should be preset before the final setting, in order to allow any interdependencies to be detected for validation or detecting changed values. If this is specified as a non-nil value, then any nil values of (the preset?) on individual form controls will be ignored. If this is specified as nil, then (the preset?) of individual form-controls (default of these is also nil) will be respected. Default is nil.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/14/object-docs/dokumentation/1/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_14_objects",
      "chunk_id": 8,
      "chunk_count": 14
    },
    "id": "989f759d4f8804db0ce71f3936dd34f6"
  },
  {
    "text": "reset?) of individual form-controls (default of these is also nil) will be respected. Default is nil. PROCESS-COOKIES! [ from BASE-HTML-SHEET ] void This is an empty function by default, but can be overridden in a user specialization of base-html-sheet, to do some processing before the header-plist is evaluated and before the HTTP response is actually initiated, but after the cookies-received have been set. RESPONDENT [ from SKELETON-UI-ELEMENT ] gdl object Object to respond to the form submission. Defaults to self. RETURN-OBJECT [ from BASE-HTML-SHEET ] gdl object Default object to which control will return with the write-back-link method ROOT [ from VANILLA-MIXIN* ] gdl instance The root-level node in this object's ``tree'' (instance hierarchy). SAFE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances All objects from the :objects specification, including elements of sequences as flat lists.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/14/object-docs/dokumentation/1/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_14_objects",
      "chunk_id": 9,
      "chunk_count": 14
    },
    "id": "710d0ae15061c83733202534866c1e50"
  },
  {
    "text": "of gdl instances All objects from the :objects specification, including elements of sequences as flat lists. Any children which throw errors come back as a plist with error information STRINGS-FOR-DISPLAY [ from VANILLA-MIXIN* ] string or list of strings Determines how the name of objects of this type will be printed in most places. This defaults to the name-for-display (generally the part's name as specified in its parent), followed by an index number if the part is an element of a sequence. TARGET [ from BASE-HTML-SHEET ] string Name of a browser frame or window to display this page. Default of NIL indicates to use the same window. TITLE [ from BASE-AJAX-SHEET ] string The title of the web page. Defaults to \"GendL Application -\" .followed by the strings-for-display. TRANSITORY-SLOTS [ from BASE-HTML-SHEET ] list of keyword symbols Messages corresponding to form fields which should not be retained against Updates to the model (e.g.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/14/object-docs/dokumentation/1/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_14_objects",
      "chunk_id": 10,
      "chunk_count": 14
    },
    "id": "e9cb7a1e8009a070e53822e14f1a4917"
  },
  {
    "text": "rom BASE-HTML-SHEET ] list of keyword symbols Messages corresponding to form fields which should not be retained against Updates to the model (e.g. calls to the update! function or hitting the Update button or link in the browser in development mode). Defaults to NIL (the empty list). VISIBLE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances Additional objects to display in Tatu tree. Typically this would be a subset of hidden-children. Defaults to NIL. Input Slots (optional, settable) ADDITIONAL-HEADER-JS-CONTENT [ from BASE-AJAX-SHEET ] valid javascript This javascript is added to the head of the page, just before the body. UI-SPECIFIC-LAYOUT-JS [ from BASE-AJAX-SHEET ] absolute uri in the browser . This is additional JavaScript that needs to be loaded in order to initiate the layout of a user interface. Defaults to nil. USE-JQUERY? [ from BASE-AJAX-SHEET ] boolean Include jquery javascript libraries in the page header? Default nil.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/14/object-docs/dokumentation/1/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_14_objects",
      "chunk_id": 11,
      "chunk_count": 14
    },
    "id": "c8315488fafdd1980e26627a4f77b708"
  },
  {
    "text": "t of a user interface. Defaults to nil. USE-JQUERY? [ from BASE-AJAX-SHEET ] boolean Include jquery javascript libraries in the page header? Default nil. Computed Slots ADDITIONAL-HEADER-CONTENT [ from BASE-AJAX-SHEET ] string of valid html Additional tag content to go into the page header, if you use the default main-sheet message and just fill in your own main-sheet-body, as is the intended use of the base-ajax-sheet primitive. ADDITIONAL-HEADER-JS string of valid html Contains standard jQuery files to include in the header for additional search funcionality. This computed-slot contains javascript files, found in the *gdl-install-dir* and used throughout the yadd pages for the generation of automatic search forms (like the master-index). The javascript loaded is jquery. DEFAULT-HEADER-CONTENT string of valid html Contains default header contents for yadd html files. This computed-slot is available in all children of this object.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/14/object-docs/dokumentation/1/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_14_objects",
      "chunk_id": 12,
      "chunk_count": 14
    },
    "id": "48ba09df65aa8062449ed539d91f1778"
  },
  {
    "text": "NTENT string of valid html Contains default header contents for yadd html files. This computed-slot is available in all children of this object. It contains links to default header content of a HTML generated yadd page. This contains a link to the favicon.ico and a link to a default CSS sheet. All these elements can be found in the *gdl-install-dir*/static/gwl/ directories. Package Documentation Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/14/object-docs/dokumentation/1/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_14_objects",
      "chunk_id": 13,
      "chunk_count": 14
    },
    "id": "8d15d0a33ea5021bf5d2fe1a51e634b5"
  },
  {
    "text": "GendL Application - ASSEMBLY Package Documentation Object: ASSEMBLY (The :YADD Package) Mixins: BASE-YADD-SHEET Author Dave Cooper (Genworks) Description ``Yet Another Definition Documenter.'' Generates documentation for all the relevant packages in the current Lisp session. Presents a standard :write-html-sheet method which can also be crawled with a call to (gwl:crawl \"yadd:assembly\") The packages to be documented, and whether the green/red supported messages flags show up, can be controlled with optional-inputs. Input Slots (optional) AFTER-PRESENT! [ from BASE-HTML-SHEET ] void This is an empty function by default, but can be overridden in the respondent of a form, to do some processing after the respondent's write-html-sheet function runs to present the object. AFTER-SET! [ from BASE-HTML-SHEET ] void This is an empty function by default, but can be overridden in the requestor of a form, to do some processing after the requestor's form values are set into the specified bashee.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/14/object-docs/dokumentation/0/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_14_objects",
      "chunk_id": 0,
      "chunk_count": 14
    },
    "id": "cda2d7728e8adad821dea61db9db566e"
  },
  {
    "text": "HTML-SHEET ] void This is an empty function by default, but can be overridden in the requestor of a form, to do some processing after the requestor's form values are set into the specified bashee. BASHEE [ from SKELETON-UI-ELEMENT ] gdl object Object to have its settable computed-slots and/or query-plist set from the fields on the form upon submission. Defaults to self. BEFORE-PRESENT! [ from BASE-HTML-SHEET ] void This is an empty function by default, but can be overridden in the respondent of a form, to do some processing before the respondent's write-html-sheet function runs to present the object. This can be useful especially for objects which are subclasses of higher-level mixins such as application-mixin and node-mixin , where you do not have direct access to the write-html-sheet function and typically only define the model-inputs function.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/14/object-docs/dokumentation/0/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_14_objects",
      "chunk_id": 1,
      "chunk_count": 14
    },
    "id": "b54b166eeeb42b45484fb87300984495"
  },
  {
    "text": "ction and typically only define the model-inputs function. It is not always reliable to do processing in the model-inputs function, since some slots which depend on your intended modifications may already have been evaluated by the time the model-inputs function runs. BEFORE-RESPONSE! [ from BASE-HTML-SHEET ] void This is an empty function by default, but can be overridden in a user specialization of base-html-sheet, to do some processing before the header-plist is evaluated and before the HTTP response is actually initiated. BEFORE-SET! [ from BASE-HTML-SHEET ] void This is an empty function by default, but can be overridden in the requestor of a form, to do some processing before the requestor's form values are set into the specified bashee. BODY-CLASS [ from BASE-AJAX-SHEET ] string or nil Names the value of class attribute for the body tag. Default is nil. BODY-ONLOAD [ from BASE-AJAX-SHEET ] string of javascript or nil This Javascript will go into the :onload event of the body.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/14/object-docs/dokumentation/0/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_14_objects",
      "chunk_id": 2,
      "chunk_count": 14
    },
    "id": "5015e2b1a6db03e5147fce99ce02dec2"
  },
  {
    "text": "nil Names the value of class attribute for the body tag. Default is nil. BODY-ONLOAD [ from BASE-AJAX-SHEET ] string of javascript or nil This Javascript will go into the :onload event of the body. Default is nil. BODY-ONPAGESHOW [ from BASE-AJAX-SHEET ] string of javascript or nil This Javascript will go into the :onpageshow event of the body. Default is nil. BODY-ONRESIZE [ from BASE-AJAX-SHEET ] string of javascript or nil This Javascript will go into the :onresize event of the body. Default is nil. CHECK-SANITY? [ from BASE-HTML-SHEET ] boolean Determines whether a a sanity check is done (with the check-sanity function) before presenting the response page if this page is a respondent. Default is NIL. DOCTYPE-STRING [ from BASE-AJAX-SHEET ] string or nil Contains the string for the doctype at the top of the document. Default is the standard doctype for HTML5 and later.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/14/object-docs/dokumentation/0/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_14_objects",
      "chunk_id": 3,
      "chunk_count": 14
    },
    "id": "bfba99a9b13b6ca53672ade9abbaccc6"
  },
  {
    "text": "ype at the top of the document. Default is the standard doctype for HTML5 and later. DOM-ID [ from SKELETON-UI-ELEMENT ] string This is the auto-computed dom-id which should be used for rendering this section. If you use the main-div HTML string for rendering this object as a page section, then you do not have to generate the :div tag yourself - the main-div will be a string of HTML which is wrapped in the correct :div tag already. EXTERNAL-ONLY? boolean This defaults to nil, if it is set to t, only exported symbols will be considered for documentation. FORCE-VALIDATION-FOR [ from SKELETON-UI-ELEMENT ] list of gdl objects of type form-control The validation-function will be forced on these objects when a form is submitted, even if the object's html form-control does not happen to be included in the values submitted with the form. Defaults to nil. HEAD-CLASS [ from BASE-AJAX-SHEET ] string or nil Names the value of class attribute for the head tag. Default is nil.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/14/object-docs/dokumentation/0/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_14_objects",
      "chunk_id": 4,
      "chunk_count": 14
    },
    "id": "877623d2c39c244b50b983dc3c72fb55"
  },
  {
    "text": "ed in the values submitted with the form. Defaults to nil. HEAD-CLASS [ from BASE-AJAX-SHEET ] string or nil Names the value of class attribute for the head tag. Default is nil. HIDDEN? [ from VANILLA-MIXIN* ] boolean Indicates whether the object should effectively be a hidden-object even if specified in :objects. Default is nil. HTML-CLASS [ from BASE-AJAX-SHEET ] string or nil Names the value of class attribute for the html tag. Default is nil. HTML-SECTIONS [ from SKELETON-UI-ELEMENT ] List of HTML sections to be scanned and possibly replaced in response to GDL Ajax calls. Override this slot at your own risk. The default is all sections who are most recently laid out on the respondent sheet, and this is set programmatically every time the sheet section's main-div is demanded. HTML-SECTIONS-VALID [ from SKELETON-UI-ELEMENT ] List of valid HTML sections to be scanned and possibly replaced in response to GDL Ajax calls. Override this slot at your own risk.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/14/object-docs/dokumentation/0/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_14_objects",
      "chunk_id": 5,
      "chunk_count": 14
    },
    "id": "10dff2678322dbf469b81a1b82d9571a"
  },
  {
    "text": "ONS-VALID [ from SKELETON-UI-ELEMENT ] List of valid HTML sections to be scanned and possibly replaced in response to GDL Ajax calls. Override this slot at your own risk. The default is all sections who are most recently laid out on the respondent sheet, and this is set programmatically every time the sheet section's main-div is demanded. INNER-HTML [ from SKELETON-UI-ELEMENT ] string This can be used with (str .) [in cl-who] or (:princ .) [in htmlGen] to output this section of the page, without the wrapping :div tag [so if you use this, your code would be responsible for wrapping the :div tag with :id (the dom-id).] JS-TO-EVAL [ from SKELETON-UI-ELEMENT ] string of valid javascript This Javascript will be send with the Ajax response, and evaluated after the innerHTML for this section has been replaced. ORDERED-FORM-CONTROLS [ from SKELETON-UI-ELEMENT ] list of gdl objects, which should be of type 'base-form-control .",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/14/object-docs/dokumentation/0/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_14_objects",
      "chunk_id": 6,
      "chunk_count": 14
    },
    "id": "9e89a6b26d3c8f77bd8a6e77089b792f"
  },
  {
    "text": "been replaced. ORDERED-FORM-CONTROLS [ from SKELETON-UI-ELEMENT ] list of gdl objects, which should be of type 'base-form-control . [Note -- this slot is not really necessary for protecting out-of-bounds sequence references anymore, the form-control processor protects against this by itself now]. These objects are validated and bashed first, in the order given. If the cardinality of one form-control depends on another as in the example below, then you should list those dependent objects first. Default is nil. examples: ...",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/14/object-docs/dokumentation/0/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_14_objects",
      "chunk_id": 7,
      "chunk_count": 14
    },
    "id": "41b453eb9fba7b225c5282eb405c7e84"
  },
  {
    "text": ":computed-slots ((number-of-nozzles (the number-of-nozzles-form value)) (ordered-form-controls (append (list-elements (the inner-flange-form)) (list (the number-of-nozzles-form))))) :objects ((inner-flange-form :type 'menu-form-control :choice-plist (list :hey \"hey\" :now \"now\") :default :hey :sequence (:size (the number-of-nozzles))) (number-of-nozzles-form :type 'text-form-control :prompt \"Number of Shell Nozzles Required: \" :domain :number :default 0) PACKAGES-TO-IGNORE list of keyword symbols These packages will be ignored. This list defaults to standard internal and test packages POSSIBLE-NILS [ from SKELETON-UI-ELEMENT ] list of keyword symbols Messages corresponding to form fields which could be missing from form submission (e.g. checkbox fields). Defaults to the names of any children or hidden-children of type menu-form-control or checkbox-form-control.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/14/object-docs/dokumentation/0/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_14_objects",
      "chunk_id": 8,
      "chunk_count": 14
    },
    "id": "2da8e2b3afbe90412d2eea9b94994063"
  },
  {
    "text": "en or hidden-children of type menu-form-control or checkbox-form-control. PRESET-ALL? [ from SKELETON-UI-ELEMENT ] boolean This switch determines whether all form-controls should be preset before the final setting, in order to allow any interdependencies to be detected for validation or detecting changed values. If this is specified as a non-nil value, then any nil values of (the preset?) on individual form controls will be ignored. If this is specified as nil, then (the preset?) of individual form-controls (default of these is also nil) will be respected. Default is nil. PROCESS-COOKIES! [ from BASE-HTML-SHEET ] void This is an empty function by default, but can be overridden in a user specialization of base-html-sheet, to do some processing before the header-plist is evaluated and before the HTTP response is actually initiated, but after the cookies-received have been set. RESPONDENT [ from SKELETON-UI-ELEMENT ] gdl object Object to respond to the form submission. Defaults to self.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/14/object-docs/dokumentation/0/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_14_objects",
      "chunk_id": 9,
      "chunk_count": 14
    },
    "id": "50d7200e3eb453e8552870a798744119"
  },
  {
    "text": "the HTTP response is actually initiated, but after the cookies-received have been set. RESPONDENT [ from SKELETON-UI-ELEMENT ] gdl object Object to respond to the form submission. Defaults to self. RETURN-OBJECT [ from BASE-HTML-SHEET ] gdl object Default object to which control will return with the write-back-link method ROOT [ from VANILLA-MIXIN* ] gdl instance The root-level node in this object's ``tree'' (instance hierarchy). SAFE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances All objects from the :objects specification, including elements of sequences as flat lists. Any children which throw errors come back as a plist with error information STRINGS-FOR-DISPLAY [ from VANILLA-MIXIN* ] string or list of strings Determines how the name of objects of this type will be printed in most places. This defaults to the name-for-display (generally the part's name as specified in its parent), followed by an index number if the part is an element of a sequence.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/14/object-docs/dokumentation/0/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_14_objects",
      "chunk_id": 10,
      "chunk_count": 14
    },
    "id": "6ead2977bcec40274cead64aa15654d2"
  },
  {
    "text": "most places. This defaults to the name-for-display (generally the part's name as specified in its parent), followed by an index number if the part is an element of a sequence. TARGET [ from BASE-HTML-SHEET ] string Name of a browser frame or window to display this page. Default of NIL indicates to use the same window. TRANSITORY-SLOTS [ from BASE-HTML-SHEET ] list of keyword symbols Messages corresponding to form fields which should not be retained against Updates to the model (e.g. calls to the update! function or hitting the Update button or link in the browser in development mode). Defaults to NIL (the empty list). VISIBLE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances Additional objects to display in Tatu tree. Typically this would be a subset of hidden-children. Defaults to NIL. Input Slots (optional, settable) ADDITIONAL-HEADER-JS-CONTENT [ from BASE-AJAX-SHEET ] valid javascript This javascript is added to the head of the page, just before the body.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/14/object-docs/dokumentation/0/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_14_objects",
      "chunk_id": 11,
      "chunk_count": 14
    },
    "id": "aa52b3b913ebfc392e41b781cdff7046"
  },
  {
    "text": "L. Input Slots (optional, settable) ADDITIONAL-HEADER-JS-CONTENT [ from BASE-AJAX-SHEET ] valid javascript This javascript is added to the head of the page, just before the body. UI-SPECIFIC-LAYOUT-JS [ from BASE-AJAX-SHEET ] absolute uri in the browser . This is additional JavaScript that needs to be loaded in order to initiate the layout of a user interface. Defaults to nil. USE-JQUERY? [ from BASE-AJAX-SHEET ] boolean Include jquery javascript libraries in the page header? Default nil. Computed Slots TITLE [ from BASE-AJAX-SHEET ] string The title of the web page. Defaults to \"GendL Application -\" .followed by the strings-for-display. Objects MASTER-INDEX index Master index of all symbols (objects, functions, parameters, variables, constants) Objects (sequence) PACKAGE-DOKUMENTATIONS package-dokumentation Quantified, one for each :package-to-document GDL Functions MAIN-SHEET-BODY [ from BASE-AJAX-SHEET ] string of html The main body of the page.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/14/object-docs/dokumentation/0/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_14_objects",
      "chunk_id": 12,
      "chunk_count": 14
    },
    "id": "c57f177e211cbef1c037e738ef48fd5e"
  },
  {
    "text": "ckage-dokumentation Quantified, one for each :package-to-document GDL Functions MAIN-SHEET-BODY [ from BASE-AJAX-SHEET ] string of html The main body of the page. This can be specified as input or overridden in subclass, otherwise it defaults to the content produced by the :output-function of the same name in the applicable lens for html-format. Package Documentation Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/14/object-docs/dokumentation/0/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_14_objects",
      "chunk_id": 13,
      "chunk_count": 14
    },
    "id": "9bbbb385220002f4674d84509affd7aa"
  },
  {
    "text": "GendL Application - PACKAGE-DOKUMENTATION Package Documentation Object: PACKAGE-DOKUMENTATION (The :YADD Package) Mixins: BASE-YADD-SHEET Author Dave Cooper Description Prepares documentation for all relevant symbols in a given Lisp package. Input Slots (optional) AFTER-PRESENT! [ from BASE-HTML-SHEET ] void This is an empty function by default, but can be overridden in the respondent of a form, to do some processing after the respondent's write-html-sheet function runs to present the object. AFTER-SET! [ from BASE-HTML-SHEET ] void This is an empty function by default, but can be overridden in the requestor of a form, to do some processing after the requestor's form values are set into the specified bashee. BASHEE [ from SKELETON-UI-ELEMENT ] gdl object Object to have its settable computed-slots and/or query-plist set from the fields on the form upon submission. Defaults to self.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/14/object-docs/dokumentation/3/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_14_objects",
      "chunk_id": 0,
      "chunk_count": 14
    },
    "id": "d2d9299ec41d8ac6b80f93d0ceb4c2fb"
  },
  {
    "text": "d-slots and/or query-plist set from the fields on the form upon submission. Defaults to self. BEFORE-PRESENT! [ from BASE-HTML-SHEET ] void This is an empty function by default, but can be overridden in the respondent of a form, to do some processing before the respondent's write-html-sheet function runs to present the object. This can be useful especially for objects which are subclasses of higher-level mixins such as application-mixin and node-mixin , where you do not have direct access to the write-html-sheet function and typically only define the model-inputs function. It is not always reliable to do processing in the model-inputs function, since some slots which depend on your intended modifications may already have been evaluated by the time the model-inputs function runs.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/14/object-docs/dokumentation/3/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_14_objects",
      "chunk_id": 1,
      "chunk_count": 14
    },
    "id": "4cdce0aa2c0e5db67cd78d79920f77a1"
  },
  {
    "text": "BEFORE-RESPONSE! [ from BASE-HTML-SHEET ] void This is an empty function by default, but can be overridden in a user specialization of base-html-sheet, to do some processing before the header-plist is evaluated and before the HTTP response is actually initiated. BEFORE-SET! [ from BASE-HTML-SHEET ] void This is an empty function by default, but can be overridden in the requestor of a form, to do some processing before the requestor's form values are set into the specified bashee. BODY-CLASS [ from BASE-AJAX-SHEET ] string or nil Names the value of class attribute for the body tag. Default is nil. BODY-ONLOAD [ from BASE-AJAX-SHEET ] string of javascript or nil This Javascript will go into the :onload event of the body. Default is nil. BODY-ONPAGESHOW [ from BASE-AJAX-SHEET ] string of javascript or nil This Javascript will go into the :onpageshow event of the body. Default is nil.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/14/object-docs/dokumentation/3/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_14_objects",
      "chunk_id": 2,
      "chunk_count": 14
    },
    "id": "4811dbd5961cb273e8fe824a7a19b4ef"
  },
  {
    "text": "ascript or nil This Javascript will go into the :onpageshow event of the body. Default is nil. BODY-ONRESIZE [ from BASE-AJAX-SHEET ] string of javascript or nil This Javascript will go into the :onresize event of the body. Default is nil. CHECK-SANITY? [ from BASE-HTML-SHEET ] boolean Determines whether a a sanity check is done (with the check-sanity function) before presenting the response page if this page is a respondent. Default is NIL. DOCTYPE-STRING [ from BASE-AJAX-SHEET ] string or nil Contains the string for the doctype at the top of the document. Default is the standard doctype for HTML5 and later. DOM-ID [ from SKELETON-UI-ELEMENT ] string This is the auto-computed dom-id which should be used for rendering this section. If you use the main-div HTML string for rendering this object as a page section, then you do not have to generate the :div tag yourself - the main-div will be a string of HTML which is wrapped in the correct :div tag already.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/14/object-docs/dokumentation/3/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_14_objects",
      "chunk_id": 3,
      "chunk_count": 14
    },
    "id": "c7806269cc1654af11107e147a6251f4"
  },
  {
    "text": "ect as a page section, then you do not have to generate the :div tag yourself - the main-div will be a string of HTML which is wrapped in the correct :div tag already. EXTERNAL-ONLY? boolean Determines whether to consider all symbols in the package or just the exported ones. FORCE-VALIDATION-FOR [ from SKELETON-UI-ELEMENT ] list of gdl objects of type form-control The validation-function will be forced on these objects when a form is submitted, even if the object's html form-control does not happen to be included in the values submitted with the form. Defaults to nil. HEAD-CLASS [ from BASE-AJAX-SHEET ] string or nil Names the value of class attribute for the head tag. Default is nil. HIDDEN? [ from VANILLA-MIXIN* ] boolean Indicates whether the object should effectively be a hidden-object even if specified in :objects. Default is nil. HTML-CLASS [ from BASE-AJAX-SHEET ] string or nil Names the value of class attribute for the html tag. Default is nil.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/14/object-docs/dokumentation/3/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_14_objects",
      "chunk_id": 4,
      "chunk_count": 14
    },
    "id": "2089c623d82fbb1c2cd51b76cd320897"
  },
  {
    "text": "even if specified in :objects. Default is nil. HTML-CLASS [ from BASE-AJAX-SHEET ] string or nil Names the value of class attribute for the html tag. Default is nil. HTML-SECTIONS [ from SKELETON-UI-ELEMENT ] List of HTML sections to be scanned and possibly replaced in response to GDL Ajax calls. Override this slot at your own risk. The default is all sections who are most recently laid out on the respondent sheet, and this is set programmatically every time the sheet section's main-div is demanded. HTML-SECTIONS-VALID [ from SKELETON-UI-ELEMENT ] List of valid HTML sections to be scanned and possibly replaced in response to GDL Ajax calls. Override this slot at your own risk. The default is all sections who are most recently laid out on the respondent sheet, and this is set programmatically every time the sheet section's main-div is demanded.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/14/object-docs/dokumentation/3/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_14_objects",
      "chunk_id": 5,
      "chunk_count": 14
    },
    "id": "313df3c397b66d72e4b19f2e5aed3a12"
  },
  {
    "text": "lly every time the sheet section's main-div is demanded. INNER-HTML [ from SKELETON-UI-ELEMENT ] string This can be used with (str .) [in cl-who] or (:princ .) [in htmlGen] to output this section of the page, without the wrapping :div tag [so if you use this, your code would be responsible for wrapping the :div tag with :id (the dom-id).] JS-TO-EVAL [ from SKELETON-UI-ELEMENT ] string of valid javascript This Javascript will be send with the Ajax response, and evaluated after the innerHTML for this section has been replaced. MAIN-SHEET-BODY [ from BASE-AJAX-SHEET ] string of html The main body of the page. This can be specified as input or overridden in subclass, otherwise it defaults to the content produced by the :output-function of the same name in the applicable lens for html-format. ORDERED-FORM-CONTROLS [ from SKELETON-UI-ELEMENT ] list of gdl objects, which should be of type 'base-form-control .",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/14/object-docs/dokumentation/3/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_14_objects",
      "chunk_id": 6,
      "chunk_count": 14
    },
    "id": "e35fe7798ce4e077ed821657add1f66c"
  },
  {
    "text": "RDERED-FORM-CONTROLS [ from SKELETON-UI-ELEMENT ] list of gdl objects, which should be of type 'base-form-control . [Note -- this slot is not really necessary for protecting out-of-bounds sequence references anymore, the form-control processor protects against this by itself now]. These objects are validated and bashed first, in the order given. If the cardinality of one form-control depends on another as in the example below, then you should list those dependent objects first. Default is nil. examples: ...",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/14/object-docs/dokumentation/3/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_14_objects",
      "chunk_id": 7,
      "chunk_count": 14
    },
    "id": "2f605bd41302af2d1d387de023e2e542"
  },
  {
    "text": ":computed-slots ((number-of-nozzles (the number-of-nozzles-form value)) (ordered-form-controls (append (list-elements (the inner-flange-form)) (list (the number-of-nozzles-form))))) :objects ((inner-flange-form :type 'menu-form-control :choice-plist (list :hey \"hey\" :now \"now\") :default :hey :sequence (:size (the number-of-nozzles))) (number-of-nozzles-form :type 'text-form-control :prompt \"Number of Shell Nozzles Required: \" :domain :number :default 0) PACKAGE string or keyword symbol Names the package, or a nickname of the package, to be documented. POSSIBLE-NILS [ from SKELETON-UI-ELEMENT ] list of keyword symbols Messages corresponding to form fields which could be missing from form submission (e.g. checkbox fields). Defaults to the names of any children or hidden-children of type menu-form-control or checkbox-form-control.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/14/object-docs/dokumentation/3/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_14_objects",
      "chunk_id": 8,
      "chunk_count": 14
    },
    "id": "9b2b256de43dcafd4cd048bc051b8b41"
  },
  {
    "text": "u-form-control or checkbox-form-control. PRESET-ALL? [ from SKELETON-UI-ELEMENT ] boolean This switch determines whether all form-controls should be preset before the final setting, in order to allow any interdependencies to be detected for validation or detecting changed values. If this is specified as a non-nil value, then any nil values of (the preset?) on individual form controls will be ignored. If this is specified as nil, then (the preset?) of individual form-controls (default of these is also nil) will be respected. Default is nil. PROCESS-COOKIES! [ from BASE-HTML-SHEET ] void This is an empty function by default, but can be overridden in a user specialization of base-html-sheet, to do some processing before the header-plist is evaluated and before the HTTP response is actually initiated, but after the cookies-received have been set. RESPONDENT [ from SKELETON-UI-ELEMENT ] gdl object Object to respond to the form submission. Defaults to self.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/14/object-docs/dokumentation/3/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_14_objects",
      "chunk_id": 9,
      "chunk_count": 14
    },
    "id": "f330b0b604fe57f0ef76cf9beed37f13"
  },
  {
    "text": "itiated, but after the cookies-received have been set. RESPONDENT [ from SKELETON-UI-ELEMENT ] gdl object Object to respond to the form submission. Defaults to self. RETURN-OBJECT [ from BASE-HTML-SHEET ] gdl object Default object to which control will return with the write-back-link method ROOT [ from VANILLA-MIXIN* ] gdl instance The root-level node in this object's ``tree'' (instance hierarchy). SAFE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances All objects from the :objects specification, including elements of sequences as flat lists. Any children which throw errors come back as a plist with error information SHOW-SUPPORTED-FLAG boolean Determines whether to show red/green flag on each message indicating whether it is a supported message. TARGET [ from BASE-HTML-SHEET ] string Name of a browser frame or window to display this page. Default of NIL indicates to use the same window.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/14/object-docs/dokumentation/3/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_14_objects",
      "chunk_id": 10,
      "chunk_count": 14
    },
    "id": "19fde8c9305179a201df718ad02ecdf2"
  },
  {
    "text": "Name of a browser frame or window to display this page. Default of NIL indicates to use the same window. TRANSITORY-SLOTS [ from BASE-HTML-SHEET ] list of keyword symbols Messages corresponding to form fields which should not be retained against Updates to the model (e.g. calls to the update! function or hitting the Update button or link in the browser in development mode). Defaults to NIL (the empty list). VISIBLE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances Additional objects to display in Tatu tree. Typically this would be a subset of hidden-children. Defaults to NIL. Input Slots (optional, settable) ADDITIONAL-HEADER-JS-CONTENT [ from BASE-AJAX-SHEET ] valid javascript This javascript is added to the head of the page, just before the body. UI-SPECIFIC-LAYOUT-JS [ from BASE-AJAX-SHEET ] absolute uri in the browser . This is additional JavaScript that needs to be loaded in order to initiate the layout of a user interface. Defaults to nil.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/14/object-docs/dokumentation/3/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_14_objects",
      "chunk_id": 11,
      "chunk_count": 14
    },
    "id": "948bd431feba964038a4169223f96c12"
  },
  {
    "text": "JAX-SHEET ] absolute uri in the browser . This is additional JavaScript that needs to be loaded in order to initiate the layout of a user interface. Defaults to nil. USE-JQUERY? [ from BASE-AJAX-SHEET ] boolean Include jquery javascript libraries in the page header? Default nil. Computed Slots STRINGS-FOR-DISPLAY [ from VANILLA-MIXIN* ] string or list of strings Determines how the name of objects of this type will be printed in most places. This defaults to the name-for-display (generally the part's name as specified in its parent), followed by an index number if the part is an element of a sequence. TITLE [ from BASE-AJAX-SHEET ] string The title of the web page. Defaults to \"GendL Application -\" .followed by the strings-for-display. Objects FUNCTION-DOCS function-doc Container for set of all Function documentation sheets. OBJECT-DOCS object-doc Container for set of all Object documentation sheets.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/14/object-docs/dokumentation/3/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_14_objects",
      "chunk_id": 12,
      "chunk_count": 14
    },
    "id": "23845fd90771fc5b0e36253cee2d7f63"
  },
  {
    "text": "all Function documentation sheets. OBJECT-DOCS object-doc Container for set of all Object documentation sheets. VARIABLE-DOCS variable-doc Container for set of all Parameter/Variable/Constant documentation sheets. Hidden Objects PACKAGE-FORM package-form Allows user to modify toplevel optional-inputs. GDL Functions DOM-SECTION list in gdl dom authoring format Suitable for filling in a section of output document. WRITE-HTML-SHEET void Prints to *html-stream* a bulleted list for each of the three categories of docs in the package. Package Documentation Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/14/object-docs/dokumentation/3/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_14_objects",
      "chunk_id": 13,
      "chunk_count": 14
    },
    "id": "4bb26527f433fdbcaff649f5edc49b66"
  },
  {
    "text": "GendL Application - MASTER-INDEX Package Documentation Object: MASTER-INDEX (The :YADD Package) Mixins: BASE-YADD-SHEET Author Dave Cooper (Genworks) Description Prints bullet list of symbols as links to their documentation pages. Input Slots (required) SYMBOLS-FOR-INDEX list of lists Each list contains the page object for the symbol's documentation and the symbol's print-name. The list should be sorted based on the symbols' print-names. Input Slots (optional) AFTER-PRESENT! [ from BASE-HTML-SHEET ] void This is an empty function by default, but can be overridden in the respondent of a form, to do some processing after the respondent's write-html-sheet function runs to present the object. AFTER-SET! [ from BASE-HTML-SHEET ] void This is an empty function by default, but can be overridden in the requestor of a form, to do some processing after the requestor's form values are set into the specified bashee.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/14/object-docs/dokumentation/2/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_14_objects",
      "chunk_id": 0,
      "chunk_count": 13
    },
    "id": "133a1546973173daeaee90f97f5d6d48"
  },
  {
    "text": "n the requestor of a form, to do some processing after the requestor's form values are set into the specified bashee. BASHEE [ from SKELETON-UI-ELEMENT ] gdl object Object to have its settable computed-slots and/or query-plist set from the fields on the form upon submission. Defaults to self. BEFORE-PRESENT! [ from BASE-HTML-SHEET ] void This is an empty function by default, but can be overridden in the respondent of a form, to do some processing before the respondent's write-html-sheet function runs to present the object. This can be useful especially for objects which are subclasses of higher-level mixins such as application-mixin and node-mixin , where you do not have direct access to the write-html-sheet function and typically only define the model-inputs function. It is not always reliable to do processing in the model-inputs function, since some slots which depend on your intended modifications may already have been evaluated by the time the model-inputs function runs.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/14/object-docs/dokumentation/2/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_14_objects",
      "chunk_id": 1,
      "chunk_count": 13
    },
    "id": "86d0ffd1654cd2eb6c3441d20d4e8338"
  },
  {
    "text": "iable to do processing in the model-inputs function, since some slots which depend on your intended modifications may already have been evaluated by the time the model-inputs function runs. BEFORE-RESPONSE! [ from BASE-HTML-SHEET ] void This is an empty function by default, but can be overridden in a user specialization of base-html-sheet, to do some processing before the header-plist is evaluated and before the HTTP response is actually initiated. BEFORE-SET! [ from BASE-HTML-SHEET ] void This is an empty function by default, but can be overridden in the requestor of a form, to do some processing before the requestor's form values are set into the specified bashee. BODY-CLASS [ from BASE-AJAX-SHEET ] string or nil Names the value of class attribute for the body tag. Default is nil. BODY-ONLOAD [ from BASE-AJAX-SHEET ] string of javascript or nil This Javascript will go into the :onload event of the body. Default is nil.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/14/object-docs/dokumentation/2/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_14_objects",
      "chunk_id": 2,
      "chunk_count": 13
    },
    "id": "dea30067eb124a3d3ade26ea12041df3"
  },
  {
    "text": "NLOAD [ from BASE-AJAX-SHEET ] string of javascript or nil This Javascript will go into the :onload event of the body. Default is nil. BODY-ONPAGESHOW [ from BASE-AJAX-SHEET ] string of javascript or nil This Javascript will go into the :onpageshow event of the body. Default is nil. BODY-ONRESIZE [ from BASE-AJAX-SHEET ] string of javascript or nil This Javascript will go into the :onresize event of the body. Default is nil. CHECK-SANITY? [ from BASE-HTML-SHEET ] boolean Determines whether a a sanity check is done (with the check-sanity function) before presenting the response page if this page is a respondent. Default is NIL. DOCTYPE-STRING [ from BASE-AJAX-SHEET ] string or nil Contains the string for the doctype at the top of the document. Default is the standard doctype for HTML5 and later. DOM-ID [ from SKELETON-UI-ELEMENT ] string This is the auto-computed dom-id which should be used for rendering this section.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/14/object-docs/dokumentation/2/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_14_objects",
      "chunk_id": 3,
      "chunk_count": 13
    },
    "id": "5e53b21e263e5faa7dcfc99daa7a380d"
  },
  {
    "text": "ater. DOM-ID [ from SKELETON-UI-ELEMENT ] string This is the auto-computed dom-id which should be used for rendering this section. If you use the main-div HTML string for rendering this object as a page section, then you do not have to generate the :div tag yourself - the main-div will be a string of HTML which is wrapped in the correct :div tag already. FORCE-VALIDATION-FOR [ from SKELETON-UI-ELEMENT ] list of gdl objects of type form-control The validation-function will be forced on these objects when a form is submitted, even if the object's html form-control does not happen to be included in the values submitted with the form. Defaults to nil. HEAD-CLASS [ from BASE-AJAX-SHEET ] string or nil Names the value of class attribute for the head tag. Default is nil. HIDDEN? [ from VANILLA-MIXIN* ] boolean Indicates whether the object should effectively be a hidden-object even if specified in :objects. Default is nil.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/14/object-docs/dokumentation/2/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_14_objects",
      "chunk_id": 4,
      "chunk_count": 13
    },
    "id": "fe368678809f912fd5d1385158c73341"
  },
  {
    "text": "XIN* ] boolean Indicates whether the object should effectively be a hidden-object even if specified in :objects. Default is nil. HTML-CLASS [ from BASE-AJAX-SHEET ] string or nil Names the value of class attribute for the html tag. Default is nil. HTML-SECTIONS [ from SKELETON-UI-ELEMENT ] List of HTML sections to be scanned and possibly replaced in response to GDL Ajax calls. Override this slot at your own risk. The default is all sections who are most recently laid out on the respondent sheet, and this is set programmatically every time the sheet section's main-div is demanded. HTML-SECTIONS-VALID [ from SKELETON-UI-ELEMENT ] List of valid HTML sections to be scanned and possibly replaced in response to GDL Ajax calls. Override this slot at your own risk. The default is all sections who are most recently laid out on the respondent sheet, and this is set programmatically every time the sheet section's main-div is demanded.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/14/object-docs/dokumentation/2/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_14_objects",
      "chunk_id": 5,
      "chunk_count": 13
    },
    "id": "e18f121ce4c32be323a60473d7e43e9b"
  },
  {
    "text": "are most recently laid out on the respondent sheet, and this is set programmatically every time the sheet section's main-div is demanded. INNER-HTML [ from SKELETON-UI-ELEMENT ] string This can be used with (str .) [in cl-who] or (:princ .) [in htmlGen] to output this section of the page, without the wrapping :div tag [so if you use this, your code would be responsible for wrapping the :div tag with :id (the dom-id).] JS-TO-EVAL [ from SKELETON-UI-ELEMENT ] string of valid javascript This Javascript will be send with the Ajax response, and evaluated after the innerHTML for this section has been replaced. ORDERED-FORM-CONTROLS [ from SKELETON-UI-ELEMENT ] list of gdl objects, which should be of type 'base-form-control . [Note -- this slot is not really necessary for protecting out-of-bounds sequence references anymore, the form-control processor protects against this by itself now]. These objects are validated and bashed first, in the order given.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/14/object-docs/dokumentation/2/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_14_objects",
      "chunk_id": 6,
      "chunk_count": 13
    },
    "id": "b462378bec433674a373248db64054d9"
  },
  {
    "text": "sequence references anymore, the form-control processor protects against this by itself now]. These objects are validated and bashed first, in the order given. If the cardinality of one form-control depends on another as in the example below, then you should list those dependent objects first. Default is nil. examples: ... :computed-slots ((number-of-nozzles (the number-of-nozzles-form value)) (ordered-form-controls (append (list-elements (the inner-flange-form)) (list (the number-of-nozzles-form))))) :objects ((inner-flange-form :type 'menu-form-control :choice-plist (list :hey \"hey\" :now \"now\") :default :hey :sequence (:size (the number-of-nozzles))) (number-of-nozzles-form :type 'text-form-control :prompt \"Number of Shell Nozzles Required: \" :domain :number :default 0) POSSIBLE-NILS [ from SKELETON-UI-ELEMENT ] list of keyword symbols Messages corresponding to form fields which could be missing from form submission (e.g. checkbox fields).",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/14/object-docs/dokumentation/2/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_14_objects",
      "chunk_id": 7,
      "chunk_count": 13
    },
    "id": "a6290cd6e1ebed1ae612155dbf501d1d"
  },
  {
    "text": "from SKELETON-UI-ELEMENT ] list of keyword symbols Messages corresponding to form fields which could be missing from form submission (e.g. checkbox fields). Defaults to the names of any children or hidden-children of type menu-form-control or checkbox-form-control. PRESET-ALL? [ from SKELETON-UI-ELEMENT ] boolean This switch determines whether all form-controls should be preset before the final setting, in order to allow any interdependencies to be detected for validation or detecting changed values. If this is specified as a non-nil value, then any nil values of (the preset?) on individual form controls will be ignored. If this is specified as nil, then (the preset?) of individual form-controls (default of these is also nil) will be respected. Default is nil.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/14/object-docs/dokumentation/2/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_14_objects",
      "chunk_id": 8,
      "chunk_count": 13
    },
    "id": "befab57863ed55d88870e5da551cad69"
  },
  {
    "text": "PROCESS-COOKIES! [ from BASE-HTML-SHEET ] void This is an empty function by default, but can be overridden in a user specialization of base-html-sheet, to do some processing before the header-plist is evaluated and before the HTTP response is actually initiated, but after the cookies-received have been set. RESPONDENT [ from SKELETON-UI-ELEMENT ] gdl object Object to respond to the form submission. Defaults to self. RETURN-OBJECT [ from BASE-HTML-SHEET ] gdl object Default object to which control will return with the write-back-link method ROOT [ from VANILLA-MIXIN* ] gdl instance The root-level node in this object's ``tree'' (instance hierarchy). SAFE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances All objects from the :objects specification, including elements of sequences as flat lists.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/14/object-docs/dokumentation/2/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_14_objects",
      "chunk_id": 9,
      "chunk_count": 13
    },
    "id": "5a019ad124ea2ef3df23380ed1327cb1"
  },
  {
    "text": "t lists. Any children which throw errors come back as a plist with error information STRINGS-FOR-DISPLAY [ from VANILLA-MIXIN* ] string or list of strings Determines how the name of objects of this type will be printed in most places. This defaults to the name-for-display (generally the part's name as specified in its parent), followed by an index number if the part is an element of a sequence. TARGET [ from BASE-HTML-SHEET ] string Name of a browser frame or window to display this page. Default of NIL indicates to use the same window. TITLE [ from BASE-AJAX-SHEET ] string The title of the web page. Defaults to \"GendL Application -\" .followed by the strings-for-display. TRANSITORY-SLOTS [ from BASE-HTML-SHEET ] list of keyword symbols Messages corresponding to form fields which should not be retained against Updates to the model (e.g. calls to the update! function or hitting the Update button or link in the browser in development mode). Defaults to NIL (the empty list).",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/14/object-docs/dokumentation/2/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_14_objects",
      "chunk_id": 10,
      "chunk_count": 13
    },
    "id": "670a4ae419a6d297509c942cdbd67c30"
  },
  {
    "text": "be retained against Updates to the model (e.g. calls to the update! function or hitting the Update button or link in the browser in development mode). Defaults to NIL (the empty list). VISIBLE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances Additional objects to display in Tatu tree. Typically this would be a subset of hidden-children. Defaults to NIL. Input Slots (optional, settable) UI-SPECIFIC-LAYOUT-JS [ from BASE-AJAX-SHEET ] absolute uri in the browser . This is additional JavaScript that needs to be loaded in order to initiate the layout of a user interface. Defaults to nil. Computed Slots ADDITIONAL-HEADER-JS-CONTENT [ from BASE-AJAX-SHEET ] valid javascript This javascript is added to the head of the page, just before the body. MAIN-SHEET-BODY [ from BASE-AJAX-SHEET ] string of html The main body of the page.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/14/object-docs/dokumentation/2/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_14_objects",
      "chunk_id": 11,
      "chunk_count": 13
    },
    "id": "1f1cfe02ec7b7daa87b1054ed168c5be"
  },
  {
    "text": "g of html The main body of the page. This can be specified as input or overridden in subclass, otherwise it defaults to the content produced by the :output-function of the same name in the applicable lens for html-format. USE-JQUERY? [ from BASE-AJAX-SHEET ] boolean Include jquery javascript libraries in the page header? Default nil. Package Documentation Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/14/object-docs/dokumentation/2/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_14_objects",
      "chunk_id": 12,
      "chunk_count": 13
    },
    "id": "e4ec3d65500dfe7fbe6832e126875b23"
  },
  {
    "text": "GendL Application - PACKAGE-FORM Package Documentation Object: PACKAGE-FORM (The :YADD Package) Mixins: BASE-YADD-SHEET Author Dave Cooper (Genworks) Description Presents a form to the user to be able to modify the Package, supported-flag, and external flag. Input Slots (optional) AFTER-PRESENT! [ from BASE-HTML-SHEET ] void This is an empty function by default, but can be overridden in the respondent of a form, to do some processing after the respondent's write-html-sheet function runs to present the object. AFTER-SET! [ from BASE-HTML-SHEET ] void This is an empty function by default, but can be overridden in the requestor of a form, to do some processing after the requestor's form values are set into the specified bashee. BASHEE [ from SKELETON-UI-ELEMENT ] gdl object Object to have its settable computed-slots and/or query-plist set from the fields on the form upon submission. Defaults to self.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/14/object-docs/dokumentation/4/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_14_objects",
      "chunk_id": 0,
      "chunk_count": 14
    },
    "id": "c8d6d0150c87486e5e193b06e4802b48"
  },
  {
    "text": "settable computed-slots and/or query-plist set from the fields on the form upon submission. Defaults to self. BEFORE-PRESENT! [ from BASE-HTML-SHEET ] void This is an empty function by default, but can be overridden in the respondent of a form, to do some processing before the respondent's write-html-sheet function runs to present the object. This can be useful especially for objects which are subclasses of higher-level mixins such as application-mixin and node-mixin , where you do not have direct access to the write-html-sheet function and typically only define the model-inputs function. It is not always reliable to do processing in the model-inputs function, since some slots which depend on your intended modifications may already have been evaluated by the time the model-inputs function runs.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/14/object-docs/dokumentation/4/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_14_objects",
      "chunk_id": 1,
      "chunk_count": 14
    },
    "id": "6b26a7751b06f666a30428b4f6373048"
  },
  {
    "text": "runs. BEFORE-RESPONSE! [ from BASE-HTML-SHEET ] void This is an empty function by default, but can be overridden in a user specialization of base-html-sheet, to do some processing before the header-plist is evaluated and before the HTTP response is actually initiated. BEFORE-SET! [ from BASE-HTML-SHEET ] void This is an empty function by default, but can be overridden in the requestor of a form, to do some processing before the requestor's form values are set into the specified bashee. BODY-CLASS [ from BASE-AJAX-SHEET ] string or nil Names the value of class attribute for the body tag. Default is nil. BODY-ONLOAD [ from BASE-AJAX-SHEET ] string of javascript or nil This Javascript will go into the :onload event of the body. Default is nil. BODY-ONPAGESHOW [ from BASE-AJAX-SHEET ] string of javascript or nil This Javascript will go into the :onpageshow event of the body. Default is nil.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/14/object-docs/dokumentation/4/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_14_objects",
      "chunk_id": 2,
      "chunk_count": 14
    },
    "id": "192ac504524419912a0d74499cb7250c"
  },
  {
    "text": "of javascript or nil This Javascript will go into the :onpageshow event of the body. Default is nil. BODY-ONRESIZE [ from BASE-AJAX-SHEET ] string of javascript or nil This Javascript will go into the :onresize event of the body. Default is nil. CHECK-SANITY? [ from BASE-HTML-SHEET ] boolean Determines whether a a sanity check is done (with the check-sanity function) before presenting the response page if this page is a respondent. Default is NIL. DOCTYPE-STRING [ from BASE-AJAX-SHEET ] string or nil Contains the string for the doctype at the top of the document. Default is the standard doctype for HTML5 and later. DOM-ID [ from SKELETON-UI-ELEMENT ] string This is the auto-computed dom-id which should be used for rendering this section. If you use the main-div HTML string for rendering this object as a page section, then you do not have to generate the :div tag yourself - the main-div will be a string of HTML which is wrapped in the correct :div tag already.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/14/object-docs/dokumentation/4/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_14_objects",
      "chunk_id": 3,
      "chunk_count": 14
    },
    "id": "1ca1b0b08935c34f28dc7c42b1d43ccf"
  },
  {
    "text": "is object as a page section, then you do not have to generate the :div tag yourself - the main-div will be a string of HTML which is wrapped in the correct :div tag already. FORCE-VALIDATION-FOR [ from SKELETON-UI-ELEMENT ] list of gdl objects of type form-control The validation-function will be forced on these objects when a form is submitted, even if the object's html form-control does not happen to be included in the values submitted with the form. Defaults to nil. HEAD-CLASS [ from BASE-AJAX-SHEET ] string or nil Names the value of class attribute for the head tag. Default is nil. HIDDEN? [ from VANILLA-MIXIN* ] boolean Indicates whether the object should effectively be a hidden-object even if specified in :objects. Default is nil. HTML-CLASS [ from BASE-AJAX-SHEET ] string or nil Names the value of class attribute for the html tag. Default is nil. HTML-SECTIONS [ from SKELETON-UI-ELEMENT ] List of HTML sections to be scanned and possibly replaced in response to GDL Ajax calls.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/14/object-docs/dokumentation/4/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_14_objects",
      "chunk_id": 4,
      "chunk_count": 14
    },
    "id": "52902aa4a80a91d0f9cfd525b8d53b36"
  },
  {
    "text": "s the value of class attribute for the html tag. Default is nil. HTML-SECTIONS [ from SKELETON-UI-ELEMENT ] List of HTML sections to be scanned and possibly replaced in response to GDL Ajax calls. Override this slot at your own risk. The default is all sections who are most recently laid out on the respondent sheet, and this is set programmatically every time the sheet section's main-div is demanded. HTML-SECTIONS-VALID [ from SKELETON-UI-ELEMENT ] List of valid HTML sections to be scanned and possibly replaced in response to GDL Ajax calls. Override this slot at your own risk. The default is all sections who are most recently laid out on the respondent sheet, and this is set programmatically every time the sheet section's main-div is demanded.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/14/object-docs/dokumentation/4/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_14_objects",
      "chunk_id": 5,
      "chunk_count": 14
    },
    "id": "681b7953f55cdf7d1671c1536b2c4d81"
  },
  {
    "text": "INNER-HTML [ from SKELETON-UI-ELEMENT ] string This can be used with (str .) [in cl-who] or (:princ .) [in htmlGen] to output this section of the page, without the wrapping :div tag [so if you use this, your code would be responsible for wrapping the :div tag with :id (the dom-id).] JS-TO-EVAL [ from SKELETON-UI-ELEMENT ] string of valid javascript This Javascript will be send with the Ajax response, and evaluated after the innerHTML for this section has been replaced. MAIN-SHEET-BODY [ from BASE-AJAX-SHEET ] string of html The main body of the page. This can be specified as input or overridden in subclass, otherwise it defaults to the content produced by the :output-function of the same name in the applicable lens for html-format. ORDERED-FORM-CONTROLS [ from SKELETON-UI-ELEMENT ] list of gdl objects, which should be of type 'base-form-control .",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/14/object-docs/dokumentation/4/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_14_objects",
      "chunk_id": 6,
      "chunk_count": 14
    },
    "id": "574d651e48887295873f300224f09141"
  },
  {
    "text": "f gdl objects, which should be of type 'base-form-control . [Note -- this slot is not really necessary for protecting out-of-bounds sequence references anymore, the form-control processor protects against this by itself now]. These objects are validated and bashed first, in the order given. If the cardinality of one form-control depends on another as in the example below, then you should list those dependent objects first. Default is nil. examples: ... :computed-slots ((number-of-nozzles (the number-of-nozzles-form value)) (ordered-form-controls (append (list-elements (the inner-flange-form)) (list (the number-of-nozzles-form))))) :objects ((inner-flange-form :type 'menu-form-control :choice-plist (list :hey \"hey\" :now \"now\") :default :hey :sequence (:size (the number-of-nozzles))) (number-of-nozzles-form :type 'text-form-control :prompt \"Number of Shell Nozzles Required: \" :domain :number :default 0) POSSIBLE-NILS [ from SKELETON-UI-ELEMENT ] list of keyword symbols Messages",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/14/object-docs/dokumentation/4/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_14_objects",
      "chunk_id": 7,
      "chunk_count": 14
    },
    "id": "c5affd9b0760387ab062acba144dec95"
  },
  {
    "text": "-of-nozzles-form :type 'text-form-control :prompt \"Number of Shell Nozzles Required: \" :domain :number :default 0) POSSIBLE-NILS [ from SKELETON-UI-ELEMENT ] list of keyword symbols Messages corresponding to form fields which could be missing from form submission (e.g. checkbox fields). Defaults to the names of any children or hidden-children of type menu-form-control or checkbox-form-control. PRESET-ALL? [ from SKELETON-UI-ELEMENT ] boolean This switch determines whether all form-controls should be preset before the final setting, in order to allow any interdependencies to be detected for validation or detecting changed values. If this is specified as a non-nil value, then any nil values of (the preset?) on individual form controls will be ignored. If this is specified as nil, then (the preset?) of individual form-controls (default of these is also nil) will be respected. Default is nil.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/14/object-docs/dokumentation/4/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_14_objects",
      "chunk_id": 8,
      "chunk_count": 14
    },
    "id": "cce326c050f8b6e458d24f9e6fc5cd90"
  },
  {
    "text": "reset?) of individual form-controls (default of these is also nil) will be respected. Default is nil. PROCESS-COOKIES! [ from BASE-HTML-SHEET ] void This is an empty function by default, but can be overridden in a user specialization of base-html-sheet, to do some processing before the header-plist is evaluated and before the HTTP response is actually initiated, but after the cookies-received have been set. RESPONDENT [ from SKELETON-UI-ELEMENT ] gdl object Object to respond to the form submission. Defaults to self. RETURN-OBJECT [ from BASE-HTML-SHEET ] gdl object Default object to which control will return with the write-back-link method ROOT [ from VANILLA-MIXIN* ] gdl instance The root-level node in this object's ``tree'' (instance hierarchy). SAFE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances All objects from the :objects specification, including elements of sequences as flat lists.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/14/object-docs/dokumentation/4/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_14_objects",
      "chunk_id": 9,
      "chunk_count": 14
    },
    "id": "dd9eceb71ab3d4ec42ae265362c58621"
  },
  {
    "text": "of gdl instances All objects from the :objects specification, including elements of sequences as flat lists. Any children which throw errors come back as a plist with error information STRINGS-FOR-DISPLAY [ from VANILLA-MIXIN* ] string or list of strings Determines how the name of objects of this type will be printed in most places. This defaults to the name-for-display (generally the part's name as specified in its parent), followed by an index number if the part is an element of a sequence. TARGET [ from BASE-HTML-SHEET ] string Name of a browser frame or window to display this page. Default of NIL indicates to use the same window. TITLE [ from BASE-AJAX-SHEET ] string The title of the web page. Defaults to \"GendL Application -\" .followed by the strings-for-display. TRANSITORY-SLOTS [ from BASE-HTML-SHEET ] list of keyword symbols Messages corresponding to form fields which should not be retained against Updates to the model (e.g.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/14/object-docs/dokumentation/4/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_14_objects",
      "chunk_id": 10,
      "chunk_count": 14
    },
    "id": "66915bd346c059f7904e2b768c9d056e"
  },
  {
    "text": "rom BASE-HTML-SHEET ] list of keyword symbols Messages corresponding to form fields which should not be retained against Updates to the model (e.g. calls to the update! function or hitting the Update button or link in the browser in development mode). Defaults to NIL (the empty list). VISIBLE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances Additional objects to display in Tatu tree. Typically this would be a subset of hidden-children. Defaults to NIL. Input Slots (optional, settable) ADDITIONAL-HEADER-JS-CONTENT [ from BASE-AJAX-SHEET ] valid javascript This javascript is added to the head of the page, just before the body. UI-SPECIFIC-LAYOUT-JS [ from BASE-AJAX-SHEET ] absolute uri in the browser . This is additional JavaScript that needs to be loaded in order to initiate the layout of a user interface. Defaults to nil. USE-JQUERY? [ from BASE-AJAX-SHEET ] boolean Include jquery javascript libraries in the page header? Default nil.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/14/object-docs/dokumentation/4/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_14_objects",
      "chunk_id": 11,
      "chunk_count": 14
    },
    "id": "a7f358b29c775b1b18e951220aac6307"
  },
  {
    "text": "t of a user interface. Defaults to nil. USE-JQUERY? [ from BASE-AJAX-SHEET ] boolean Include jquery javascript libraries in the page header? Default nil. GDL Functions WRITE-HTML-SHEET [ from BASE-HTML-SHEET ] void This GDL function should be redefined to generate the HTML page corresponding to this object. It can be specified here, or as the main-sheet output-function in an html-format lens for this object's type. This write-html-sheet function, if defined, will override any main-sheet function defined in the lens. Typically a write-html-sheet function would look as follows: example: (write-html-sheet () (html (:html (:head (:title (:princ (the :page-title)))) (:body ;;; fill in your body here )))) Package Documentation Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/14/object-docs/dokumentation/4/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_14_objects",
      "chunk_id": 12,
      "chunk_count": 14
    },
    "id": "33b232783eb886069bee5dc961b6a47e"
  },
  {
    "text": "orks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/14/object-docs/dokumentation/4/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_14_objects",
      "chunk_id": 13,
      "chunk_count": 14
    },
    "id": "524b47f042f367eb85d59dcceffe8519"
  },
  {
    "text": "The GWL (Generative Web Language (GWL)) Package Documentation Home The GWL (Generative Web Language (GWL)) Package Object Definitions application-mixin base-ajax-graphics-sheet base-ajax-sheet base-form-control base-html-graphics-sheet base-html-sheet checkbox-form-control color-map geometry-view-mixin grid-form-control gwl-rule-object layout-mixin menu-form-control node-mixin radio-form-control session-control-mixin sheet-section skeleton-form-control skeleton-ui-element text-form-control web-drawing Function and Macro Definitions base64-decode-list base64-decode-safe base64-encode-list base64-encode-safe clear-all-instances clear-instance clear-old-timers crawl gwl-make-object publish-gwl-app publish-shared publish-string-content relativize-pathname session-control-auto-refresh session-report with-cl-who [Macro] with-cl-who-string [Macro] with-html-form [Macro] Variables and Constants *break-on-set-self?* *bypass-security-check?* *developing?* *ent* *failed-request-url*",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8",
      "chunk_id": 0,
      "chunk_count": 2
    },
    "id": "edd3379fcca9b4567b77a93c88d50af1"
  },
  {
    "text": "eport with-cl-who [Macro] with-cl-who-string [Macro] with-html-form [Macro] Variables and Constants *break-on-set-self?* *bypass-security-check?* *developing?* *ent* *failed-request-url* *instance-finalizers* *instance-hash-table* *jump-to-toplevel-on-set-self?* *max-id-value* *publishers* *query* *reap-expired-sessions?* *recovery-url-default* *req* Documentation Home Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8",
      "chunk_id": 1,
      "chunk_count": 2
    },
    "id": "33babd2117c6e32e2828e37b5857eb71"
  },
  {
    "text": "Documentation for GWL:*BYPASS-SECURITY-CHECK?* <-Back Parameter: Gwl:*Bypass-Security-Check?* *BYPASS-SECURITY-CHECK?* boolean Indicates whether security check for same IP address is bypassed. Defaults to nil. <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/variable-docs/dokumentation/1/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_variables",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "faed9e95470ead772d37a0200b98268b"
  },
  {
    "text": "Documentation for GWL:*BREAK-ON-SET-SELF?* <-Back Parameter: Gwl:*Break-On-Set-Self?* *BREAK-ON-SET-SELF?* boolean Set this to non-nil if you want a break and *background-interaction* in emacs when the setSelf link is pressed. Defaults to nil. <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/variable-docs/dokumentation/0/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_variables",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "529b34ce12106dcf7e561e92d5db6d44"
  },
  {
    "text": "Documentation for GWL:*ENT* <-Back Parameter: Gwl:*Ent* *ENT* allegroserve entity object Dynamically bound to the current entity object within a write-html-sheet or main-sheet function. <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/variable-docs/dokumentation/3/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_variables",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "15a7e747ad625a56aadbb044d16f889b"
  },
  {
    "text": "Documentation for GWL:*JUMP-TO-TOPLEVEL-ON-SET-SELF?* <-Back Parameter: Gwl:*Jump-To-Toplevel-On-Set-Self?* *JUMP-TO-TOPLEVEL-ON-SET-SELF?* boolean Set this to non-nil if you want to jump to the toplevel interaction buffer in emacs when setSelf link is pressed and *break-on-set-self?* is nil. Defaults to t. <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/variable-docs/dokumentation/7/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_variables",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "ead0a04cc8d8fb4cb54b8f62616932c1"
  },
  {
    "text": "Documentation for GWL:*DEVELOPING?* <-Back Parameter: Gwl:*Developing?* *DEVELOPING?* boolean Used in some parts like application-mixin and node-mixin, to decide whether to display developer links. Can also be used by user application code. <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/variable-docs/dokumentation/2/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_variables",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "9d216a4b5463ec3d595b8af597fbdb5a"
  },
  {
    "text": "Documentation for GWL:*INSTANCE-FINALIZERS* <-Back Parameter: Gwl:*Instance-Finalizers* *INSTANCE-FINALIZERS* cl function of one argument The argument is a keyword representing a GWL Instance ID. This is an application-specific function (either a symbol naming a function, or a lambda expression) which will be run after an instance is cleared with the standard clear-instance function. The default is nil which indicates that no finalizer function will be run. <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/variable-docs/dokumentation/5/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_variables",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "004016870e8e9112af5328796da9acd6"
  },
  {
    "text": "Documentation for GWL::*RECOVERY-URL-DEFAULT* <-Back Parameter: Gwl::*Recovery-Url-Default* *RECOVERY-URL-DEFAULT* The url that the session-control-mixin will use for the recovery url <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/variable-docs/dokumentation/12/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_variables",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "c7d0d5d2c108758b7f998620ec2d9859"
  },
  {
    "text": "Documentation for GWL::*REAP-EXPIRED-SESSIONS?* <-Back Parameter: Gwl::*Reap-Expired-Sessions?* *REAP-EXPIRED-SESSIONS?* Allows one to turn on and off the expired session reaper without starting and stopping the reaper thread <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/variable-docs/dokumentation/11/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_variables",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "cbfad5cc24615af20701c1d6bd9e9f35"
  },
  {
    "text": "Documentation for GWL:*MAX-ID-VALUE* <-Back Parameter: Gwl:*Max-Id-Value* *MAX-ID-VALUE* integer The maximum number to use for the randomly-generated instance ids for URI identifiers. Defaults to 999. <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/variable-docs/dokumentation/8/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_variables",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "1a806ad374c812dcaf200a784937682d"
  },
  {
    "text": "Documentation for GWL:*INSTANCE-HASH-TABLE* <-Back Parameter: Gwl:*Instance-Hash-Table* *INSTANCE-HASH-TABLE* hash table Keys are session ids and values are lists with GWL root objects and a dummy (for now) version. <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/variable-docs/dokumentation/6/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_variables",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "7fe2bf4a6d5de115e937752945a4aca2"
  },
  {
    "text": "Documentation for GWL::*FAILED-REQUEST-URL* <-Back Parameter: Gwl::*Failed-Request-Url* *FAILED-REQUEST-URL* The redirection url that will be returned for a failed-request <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/variable-docs/dokumentation/4/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_variables",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "d99153aa027c073bf74c459e35f9b6f6"
  },
  {
    "text": "Documentation for GWL:*REQ* <-Back Parameter: Gwl:*Req* *REQ* allegroserve request object Dynamically bound to the current request object within a write-html-sheet or main-sheet function. <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/variable-docs/dokumentation/13/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_variables",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "d5badf2d5304abf2515fbc9bdb1420d3"
  },
  {
    "text": "Documentation for GWL:*PUBLISHERS* <-Back Parameter: Gwl:*Publishers* *PUBLISHERS* list of functions which accept server argument to do any aserve publishings . <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/variable-docs/dokumentation/9/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_variables",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "84d27b7c2e855b8cb9c1753df8d7603e"
  },
  {
    "text": "Documentation for GWL::*QUERY* <-Back Parameter: Gwl::*Query* *QUERY* association list Dynamically bound to the current query list within any of the form response methods. <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/variable-docs/dokumentation/10/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_variables",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "af6f1eec083fa2129307f209fa52ed86"
  },
  {
    "text": "GendL Application - BASE-AJAX-GRAPHICS-SHEET Package Documentation Object: BASE-AJAX-GRAPHICS-SHEET (The :GWL Package) Mixins: BASE-AJAX-SHEET , BASE-HTML-GRAPHICS-SHEET Description This mixes together base-ajax-sheet with base-html-graphics-sheet, and adds html-format output-functions for several of the new formats such as ajax-enabled png/jpeg and Raphael vector graphics. Input Slots (optional) AFTER-PRESENT! [ from BASE-HTML-SHEET ] void This is an empty function by default, but can be overridden in the respondent of a form, to do some processing after the respondent's write-html-sheet function runs to present the object. AFTER-SET! [ from BASE-HTML-SHEET ] void This is an empty function by default, but can be overridden in the requestor of a form, to do some processing after the requestor's form values are set into the specified bashee. BACKGROUND-COLOR array of three numbers between 0 and 1 RGB Color in decimal format. Color to be used for the background of the viewport.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/1/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 0,
      "chunk_count": 23
    },
    "id": "06bb40795b3f3209f4aeda511e7ce38a"
  },
  {
    "text": "tor's form values are set into the specified bashee. BACKGROUND-COLOR array of three numbers between 0 and 1 RGB Color in decimal format. Color to be used for the background of the viewport. Defaults to the :background from the global *colors-default* parameter. BASHEE [ from SKELETON-UI-ELEMENT ] gdl object Object to have its settable computed-slots and/or query-plist set from the fields on the form upon submission. Defaults to self. BEFORE-PRESENT! [ from BASE-HTML-SHEET ] void This is an empty function by default, but can be overridden in the respondent of a form, to do some processing before the respondent's write-html-sheet function runs to present the object. This can be useful especially for objects which are subclasses of higher-level mixins such as application-mixin and node-mixin , where you do not have direct access to the write-html-sheet function and typically only define the model-inputs function.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/1/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 1,
      "chunk_count": 23
    },
    "id": "2a5a406f0b9465ff7efd82809eab8ac9"
  },
  {
    "text": ", where you do not have direct access to the write-html-sheet function and typically only define the model-inputs function. It is not always reliable to do processing in the model-inputs function, since some slots which depend on your intended modifications may already have been evaluated by the time the model-inputs function runs. BEFORE-RESPONSE! [ from BASE-HTML-SHEET ] void This is an empty function by default, but can be overridden in a user specialization of base-html-sheet, to do some processing before the header-plist is evaluated and before the HTTP response is actually initiated. BEFORE-SET! [ from BASE-HTML-SHEET ] void This is an empty function by default, but can be overridden in the requestor of a form, to do some processing before the requestor's form values are set into the specified bashee. BODY-CLASS [ from BASE-AJAX-SHEET ] string or nil Names the value of class attribute for the body tag. Default is nil.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/1/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 2,
      "chunk_count": 23
    },
    "id": "50f46c63119c5e606c8a8fd9713a725e"
  },
  {
    "text": "e specified bashee. BODY-CLASS [ from BASE-AJAX-SHEET ] string or nil Names the value of class attribute for the body tag. Default is nil. BODY-ONLOAD [ from BASE-AJAX-SHEET ] string of javascript or nil This Javascript will go into the :onload event of the body. Default is nil. BODY-ONPAGESHOW [ from BASE-AJAX-SHEET ] string of javascript or nil This Javascript will go into the :onpageshow event of the body. Default is nil. BODY-ONRESIZE [ from BASE-AJAX-SHEET ] string of javascript or nil This Javascript will go into the :onresize event of the body. Default is nil. BOUNDING-BOX [ from BASE-OBJECT ] list of two 3d points The left front bottom and right rear top corners, in global coordinates, of the rectangular volume bounding the tree of geometric objects rooted at this object. CENTER [ from BASE-OBJECT ] 3d point Indicates in global coordinates where the center of the reference box of this object should be located.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/1/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 3,
      "chunk_count": 23
    },
    "id": "6d3fb4fdc85e0a83694220ef07a1be2e"
  },
  {
    "text": "from BASE-OBJECT ] 3d point Indicates in global coordinates where the center of the reference box of this object should be located. CHECK-SANITY? [ from BASE-HTML-SHEET ] boolean Determines whether a a sanity check is done (with the check-sanity function) before presenting the response page if this page is a respondent. Default is NIL. DISPLAY-LIST-OBJECT-ROOTS list of gdl objects The leaves of each of these objects will be included in the geometry display. Defaults to nil. DISPLAY-LIST-OBJECTS list of gdl objects containing geometry These are the actual objects themselves, not nodes which have children or other descendants that you want to display. If you want to display the leaves of certain nodes, include the objects for those nodes in the display-list-object-roots, not here. Defaults to nil. DOCTYPE-STRING [ from BASE-AJAX-SHEET ] string or nil Contains the string for the doctype at the top of the document. Default is the standard doctype for HTML5 and later.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/1/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 4,
      "chunk_count": 23
    },
    "id": "d1f6865ed1dc1e53209f7efbc0f0c561"
  },
  {
    "text": "o nil. DOCTYPE-STRING [ from BASE-AJAX-SHEET ] string or nil Contains the string for the doctype at the top of the document. Default is the standard doctype for HTML5 and later. DOM-ID [ from SKELETON-UI-ELEMENT ] string This is the auto-computed dom-id which should be used for rendering this section. If you use the main-div HTML string for rendering this object as a page section, then you do not have to generate the :div tag yourself - the main-div will be a string of HTML which is wrapped in the correct :div tag already. FIELD-OF-VIEW-DEFAULT number in angular degrees The maximum angle of the view frustrum for perspective views. Defaults to 45 which is natural human eye field of view. FORCE-VALIDATION-FOR [ from SKELETON-UI-ELEMENT ] list of gdl objects of type form-control The validation-function will be forced on these objects when a form is submitted, even if the object's html form-control does not happen to be included in the values submitted with the form. Defaults to nil.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/1/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 5,
      "chunk_count": 23
    },
    "id": "5b4b3a6a6497a7c95c5332734644411b"
  },
  {
    "text": "n-function will be forced on these objects when a form is submitted, even if the object's html form-control does not happen to be included in the values submitted with the form. Defaults to nil. HEAD-CLASS [ from BASE-AJAX-SHEET ] string or nil Names the value of class attribute for the head tag. Default is nil. HIDDEN? [ from VANILLA-MIXIN* ] boolean Indicates whether the object should effectively be a hidden-object even if specified in :objects. Default is nil. HTML-CLASS [ from BASE-AJAX-SHEET ] string or nil Names the value of class attribute for the html tag. Default is nil. HTML-SECTIONS [ from SKELETON-UI-ELEMENT ] List of HTML sections to be scanned and possibly replaced in response to GDL Ajax calls. Override this slot at your own risk. The default is all sections who are most recently laid out on the respondent sheet, and this is set programmatically every time the sheet section's main-div is demanded.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/1/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 6,
      "chunk_count": 23
    },
    "id": "3adc27245ba9465d872c9998cde3acb6"
  },
  {
    "text": "ently laid out on the respondent sheet, and this is set programmatically every time the sheet section's main-div is demanded. HTML-SECTIONS-VALID [ from SKELETON-UI-ELEMENT ] List of valid HTML sections to be scanned and possibly replaced in response to GDL Ajax calls. Override this slot at your own risk. The default is all sections who are most recently laid out on the respondent sheet, and this is set programmatically every time the sheet section's main-div is demanded. IMAGE-FILE [ from BASE-OBJECT ] pathname or string Points to a pre-existing image file to be displayed instead of actual geometry for this object. Defaults to nil IMAGE-FORMAT keyword symbol Determines the default image format. Defaults to the currently selected value of the image-format-selector, which itself defaults to :raphael. IMAGE-FORMAT-DEFAULT keyword symbol, one of the keys from (the image-format-plist) . Default for the image-format-selector. Defaults to :png.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/1/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 7,
      "chunk_count": 23
    },
    "id": "dd68294f13f7032d93a4da31bc0689c0"
  },
  {
    "text": ":raphael. IMAGE-FORMAT-DEFAULT keyword symbol, one of the keys from (the image-format-plist) . Default for the image-format-selector. Defaults to :png. IMAGE-FORMAT-PLIST plist of keys and strings The default formats for graphics display. Defaults to: (list :png \"PNG image\" :jpeg \"jpeg image\" :raphael \"SVG/VML\") IMMUNE-OBJECTS list of gdl objects These objects are not used in computing the scale or centering for the display list. Defaults to nil. INCLUDE-VIEW-CONTROLS? boolean Indicates whether standard view-controls panel should be included with the graphics. INNER-HTML [ from SKELETON-UI-ELEMENT ] string This can be used with (str .) [in cl-who] or (:princ .) [in htmlGen] to output this section of the page, without the wrapping :div tag [so if you use this, your code would be responsible for wrapping the :div tag with :id (the dom-id).] LENGTH [ from GEOMETRY-VIEW-MIXIN ] number Length (\"height\" of screen window) of the graphics viewport. Default is 300.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/1/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 8,
      "chunk_count": 23
    },
    "id": "e55737eb9e7a38429bf24bf7d39d676e"
  },
  {
    "text": "e for wrapping the :div tag with :id (the dom-id).] LENGTH [ from GEOMETRY-VIEW-MIXIN ] number Length (\"height\" of screen window) of the graphics viewport. Default is 300. LOCAL-BOX [ from BASE-OBJECT ] list of two 3d points The left front bottom and right rear top corners, in global coordinates, of the rectangular volume bounding this geometric object. MAIN-SHEET-BODY [ from BASE-AJAX-SHEET ] string of html The main body of the page. This can be specified as input or overridden in subclass, otherwise it defaults to the content produced by the :output-function of the same name in the applicable lens for html-format. OBLIQUENESS [ from BASE-OBJECT ] 3x3 orthonormal matrix of double-float numbers This is synonymous with the orientation . ONCLICK-FUNCTION [ from BASE-OBJECT ] lambda function of zero arguments, or nil If non-nil, this function gets invoked when the user clicks the object in graphics front-ends which support this functionality, e.g. SVG/Raphael and X3DOM.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/1/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 9,
      "chunk_count": 23
    },
    "id": "366d1a6e01b7ce8476fa0c330c4bba18"
  },
  {
    "text": "of zero arguments, or nil If non-nil, this function gets invoked when the user clicks the object in graphics front-ends which support this functionality, e.g. SVG/Raphael and X3DOM. ORDERED-FORM-CONTROLS [ from SKELETON-UI-ELEMENT ] list of gdl objects, which should be of type 'base-form-control . [Note -- this slot is not really necessary for protecting out-of-bounds sequence references anymore, the form-control processor protects against this by itself now]. These objects are validated and bashed first, in the order given. If the cardinality of one form-control depends on another as in the example below, then you should list those dependent objects first. Default is nil. examples: ...",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/1/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 10,
      "chunk_count": 23
    },
    "id": "4a21c83dc12a5af771c2bb11b8dff69d"
  },
  {
    "text": ":computed-slots ((number-of-nozzles (the number-of-nozzles-form value)) (ordered-form-controls (append (list-elements (the inner-flange-form)) (list (the number-of-nozzles-form))))) :objects ((inner-flange-form :type 'menu-form-control :choice-plist (list :hey \"hey\" :now \"now\") :default :hey :sequence (:size (the number-of-nozzles))) (number-of-nozzles-form :type 'text-form-control :prompt \"Number of Shell Nozzles Required: \" :domain :number :default 0) ORIENTATION [ from BASE-OBJECT ] 3x3 matrix of double-float numbers Indicates the absolute Rotation Matrix used to create the coordinate system of this object. This matrix is given in absolute terms (i.e. with respect to the root's orientation), and is generally created with the alignment function. It should be an orthonormal matrix, meaning each row is a vector with a magnitude of one (1.0).",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/1/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 11,
      "chunk_count": 23
    },
    "id": "e92df90546cdbc94fe0203a512bb4339"
  },
  {
    "text": "ng each row is a vector with a magnitude of one (1.0). POSSIBLE-NILS [ from SKELETON-UI-ELEMENT ] list of keyword symbols Messages corresponding to form fields which could be missing from form submission (e.g. checkbox fields). Defaults to the names of any children or hidden-children of type menu-form-control or checkbox-form-control. PRESET-ALL? [ from SKELETON-UI-ELEMENT ] boolean This switch determines whether all form-controls should be preset before the final setting, in order to allow any interdependencies to be detected for validation or detecting changed values. If this is specified as a non-nil value, then any nil values of (the preset?) on individual form controls will be ignored. If this is specified as nil, then (the preset?) of individual form-controls (default of these is also nil) will be respected. Default is nil.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/1/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 12,
      "chunk_count": 23
    },
    "id": "8db9cae7bc450de67bf88483e59dcd96"
  },
  {
    "text": "o nil) will be respected. Default is nil. PROCESS-COOKIES! [ from BASE-HTML-SHEET ] void This is an empty function by default, but can be overridden in a user specialization of base-html-sheet, to do some processing before the header-plist is evaluated and before the HTTP response is actually initiated, but after the cookies-received have been set. PROJECTION-VECTOR 3d vector This is the normal vector of the view plane onto which to project the 3D objects. Defaults to (getf *standard-views* (the view-selector value)), and (the view-selector value) defaults to :top. RETURN-OBJECT [ from BASE-HTML-SHEET ] gdl object Default object to which control will return with the write-back-link method ROOT [ from VANILLA-MIXIN* ] gdl instance The root-level node in this object's ``tree'' (instance hierarchy). SAFE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances All objects from the :objects specification, including elements of sequences as flat lists.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/1/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 13,
      "chunk_count": 23
    },
    "id": "5457d427a5a0878496e3d9f21e660544"
  },
  {
    "text": "archy). SAFE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances All objects from the :objects specification, including elements of sequences as flat lists. Any children which throw errors come back as a plist with error information STANDARD-VIEWS [ from BASE-HTML-GRAPHICS-SHEET ] plist of keywords and 3d vectors . Indicates the views to show in the graphics controls. STRINGS-FOR-DISPLAY [ from VANILLA-MIXIN* ] string or list of strings Determines how the name of objects of this type will be printed in most places. This defaults to the name-for-display (generally the part's name as specified in its parent), followed by an index number if the part is an element of a sequence. SVG-CLASS string with css classes These classes will be included in any svg tag outputted from this drawing. TARGET [ from BASE-HTML-SHEET ] string Name of a browser frame or window to display this page. Default of NIL indicates to use the same window.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/1/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 14,
      "chunk_count": 23
    },
    "id": "9bb17018e9885f7291d140317c737b0d"
  },
  {
    "text": "ET [ from BASE-HTML-SHEET ] string Name of a browser frame or window to display this page. Default of NIL indicates to use the same window. TITLE [ from BASE-AJAX-SHEET ] string The title of the web page. Defaults to \"GendL Application -\" .followed by the strings-for-display. TRANSITORY-SLOTS [ from BASE-HTML-SHEET ] list of keyword symbols Messages corresponding to form fields which should not be retained against Updates to the model (e.g. calls to the update! function or hitting the Update button or link in the browser in development mode). Defaults to NIL (the empty list). USE-BSPLINES? [ from BASE-HTML-GRAPHICS-SHEET ] boolean Determines whether to use native bspline data in the vrml USE-RAPHAEL-GRAF? boolean Include raphael graphing library in the page header? Default nil. USE-RAPHAEL? boolean Include raphael javascript library in the page header? Default nil. VIEW-DIRECTION-DEFAULT Default view initially in the view-selector which is automatically included in the view-controls.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/1/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 15,
      "chunk_count": 23
    },
    "id": "226a251cca717733cae61e2d9486e77d"
  },
  {
    "text": "? boolean Include raphael javascript library in the page header? Default nil. VIEW-DIRECTION-DEFAULT Default view initially in the view-selector which is automatically included in the view-controls. VIEWPORT-BORDER-DEFAULT number Thickness of default border around graphics viewport. Default is 1. VISIBLE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances Additional objects to display in Tatu tree. Typically this would be a subset of hidden-children. Defaults to NIL. WIDTH [ from GEOMETRY-VIEW-MIXIN ] number Width of the graphics viewport. Default is 300. Input Slots (optional, settable) ADDITIONAL-HEADER-CONTENT [ from BASE-AJAX-SHEET ] string of valid html Additional tag content to go into the page header, if you use the default main-sheet message and just fill in your own main-sheet-body, as is the intended use of the base-ajax-sheet primitive.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/1/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 16,
      "chunk_count": 23
    },
    "id": "ec302b15b4e7181295b7e7eb2660cd05"
  },
  {
    "text": "body, as is the intended use of the base-ajax-sheet primitive. ADDITIONAL-HEADER-JS-CONTENT [ from BASE-AJAX-SHEET ] valid javascript This javascript is added to the head of the page, just before the body. DIGITATION-MODE [ from BASE-HTML-GRAPHICS-SHEET ] keyword symbol, one of :zoom-and-center , :report-point , or :measure-distance . If :zoom-and-center , sets the user-center and user-scale accordingly when graphics area is clicked. If :report-point , the slot digitized-point is set with the x y value. If measure-distance , the slot :digitized-distance is set with the resultant distance. Default is :zoom-and-center UI-SPECIFIC-LAYOUT-JS [ from BASE-AJAX-SHEET ] absolute uri in the browser . This is additional JavaScript that needs to be loaded in order to initiate the layout of a user interface. Defaults to nil. USE-JQUERY? [ from BASE-AJAX-SHEET ] boolean Include jquery javascript libraries in the page header? Default nil.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/1/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 17,
      "chunk_count": 23
    },
    "id": "d6f4dea8991bf7e2af910a75c8305c7a"
  },
  {
    "text": "erface. Defaults to nil. USE-JQUERY? [ from BASE-AJAX-SHEET ] boolean Include jquery javascript libraries in the page header? Default nil. VIEW [ from BASE-HTML-GRAPHICS-SHEET ] keyword symbol Determines the default view from the standard-views . Defaults to :trimetric. ZOOM-FACTOR [ from BASE-HTML-GRAPHICS-SHEET ] number The factor used for zooming in or out. ZOOM-MODE [ from BASE-HTML-GRAPHICS-SHEET ] keyword symbol, one of :in, :out, or :none, or nil If :in, then clicks in the graphics area will increase the zoom factor by (the zoom-factor). If :out, then clicks will decrease the factor by that amount. If :none or nil, then clicks will have no effect. Input Slots (optional, defaulting) DISPLAY-CONTROLS [ from BASE-OBJECT ] plist May contain keywords and values indicating display characteristics for this object. The following keywords are recognized currently: :color color keyword from the *color-table* parameter, or an HTML-style hexidecimal RGB string value, e.g.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/1/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 18,
      "chunk_count": 23
    },
    "id": "e78ad706f6837817de6a6610c0dcf1ae"
  },
  {
    "text": "eristics for this object. The following keywords are recognized currently: :color color keyword from the *color-table* parameter, or an HTML-style hexidecimal RGB string value, e.g. \"#FFFFFF\" for pure white. Defaults to :black. :line-thickness an integer, defaulting to 1, indicating relative line thickness for wireframe representations of this object. :dash-pattern (currently PDF/PNG/JPEG only). This is a list of two or three numbers which indicate the length, in pixels, of the dashes and blank spaces in a dashed line. The optional third number indicates how far into the line or curve to start the dash pattern. HEIGHT [ from BASE-OBJECT ] number Z-axis dimension of the reference box. Defaults to zero. RESPONDENT [ from SKELETON-UI-ELEMENT ] gdl object Object to respond to the form submission. Defaults to self. Computed Slots (settable) DROPPED-HEIGHT-WIDTH plist with :width and :height The dimensions of the bounding-box of the dragged and/or dropped element.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/1/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 19,
      "chunk_count": 23
    },
    "id": "960bc3ee611f0aea00796e7cb3031f84"
  },
  {
    "text": "on. Defaults to self. Computed Slots (settable) DROPPED-HEIGHT-WIDTH plist with :width and :height The dimensions of the bounding-box of the dragged and/or dropped element. DROPPED-OBJECT list representing gdl root-path This is the root path of the dragged and/or dropped object. This is not tested to see if it is part of the same object tree as current self. DROPPED-X-Y 3d point This is the upper-right corner of the bounding box of the dragged and/or dropped element. JS-TO-EVAL [ from SKELETON-UI-ELEMENT ] string of valid javascript This Javascript will be send with the Ajax response, and evaluated after the innerHTML for this section has been replaced. Computed Slots GRAPHICS string of valid html This can be used to include the geometry, in the format currently selected by the image-format-selector. If the include-view-controls? is non-nil, the view-controls will be appended at the bottom of the graphics inside a table.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/1/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 20,
      "chunk_count": 23
    },
    "id": "6cf5d950c97a18ed5c7b381743c09127"
  },
  {
    "text": "t-selector. If the include-view-controls? is non-nil, the view-controls will be appended at the bottom of the graphics inside a table. RASTER-GRAPHICS string of valid html This can be used to include the PNG or JPG raster-graphics of the geometry. VECTOR-GRAPHICS string of valid html This can be used to include the SVG or VML vector-graphics of the geometry. VIEW-CONTROLS string of valid html This includes the image-format-selector, the reset-zoom-button, and the view-selector, in a simple table layout. You can override this to make the view-controls appear any way you want and include different and/or additional form-controls. X3DOM-GRAPHICS string of valid html This can be used to include the x3dom tag content for the geometry. Hidden Objects IMAGE-FORMAT-SELECTOR object of type menu-form-control Its value slot can be used to determine the format of image displayed. VIEW-OBJECT [ from GEOMETRY-VIEW-MIXIN ] gdl web-drawing object This must be overridden in the specialized class.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/1/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 21,
      "chunk_count": 23
    },
    "id": "8e7bfca0bb08a1f96ac645177bd87d23"
  },
  {
    "text": "m-control Its value slot can be used to determine the format of image displayed. VIEW-OBJECT [ from GEOMETRY-VIEW-MIXIN ] gdl web-drawing object This must be overridden in the specialized class. GDL Functions WRITE-EMBEDDED-X3DOM-WORLD void Writes an embedded X3D tag with content for the view-object child of this object. The view-object child should exist and be of type web-drawing . Examples FLAG -- Fill in!!! Package Documentation Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/1/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 22,
      "chunk_count": 23
    },
    "id": "354b6c0716a93682962285ee385d2abc"
  },
  {
    "text": "GendL Application - APPLICATION-MIXIN Package Documentation Object: APPLICATION-MIXIN (The :GWL Package) Mixins: LAYOUT-MIXIN , VANILLA-MIXIN Description This mixin generates a default GWL user interface, similar to node-mixin , but you should use application-mixin if this is a leaf-level application (i.e. has no children of type node-mixin or application-mixin Input Slots (optional) AFTER-PRESENT! [ from BASE-HTML-SHEET ] void This is an empty function by default, but can be overridden in the respondent of a form, to do some processing after the respondent's write-html-sheet function runs to present the object. AFTER-SET! [ from BASE-HTML-SHEET ] void This is an empty function by default, but can be overridden in the requestor of a form, to do some processing after the requestor's form values are set into the specified bashee. AVAILABLE-IMAGE-FORMATS [ from LAYOUT-MIXIN ] list of keyword symbols Determines which formats are available in the Preferences.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/0/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 0,
      "chunk_count": 20
    },
    "id": "5c2d2665407dd929694ddf9c2a94b491"
  },
  {
    "text": "lues are set into the specified bashee. AVAILABLE-IMAGE-FORMATS [ from LAYOUT-MIXIN ] list of keyword symbols Determines which formats are available in the Preferences. Defaults to :png, :jpeg, and :vrml. BASHEE [ from SKELETON-UI-ELEMENT ] gdl object Object to have its settable computed-slots and/or query-plist set from the fields on the form upon submission. Defaults to self. BEFORE-PRESENT! [ from BASE-HTML-SHEET ] void This is an empty function by default, but can be overridden in the respondent of a form, to do some processing before the respondent's write-html-sheet function runs to present the object. This can be useful especially for objects which are subclasses of higher-level mixins such as application-mixin and node-mixin , where you do not have direct access to the write-html-sheet function and typically only define the model-inputs function.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/0/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 1,
      "chunk_count": 20
    },
    "id": "a51c4e490d5811855699c4f75deea3d7"
  },
  {
    "text": "heet function and typically only define the model-inputs function. It is not always reliable to do processing in the model-inputs function, since some slots which depend on your intended modifications may already have been evaluated by the time the model-inputs function runs. BEFORE-RESPONSE! [ from BASE-HTML-SHEET ] void This is an empty function by default, but can be overridden in a user specialization of base-html-sheet, to do some processing before the header-plist is evaluated and before the HTTP response is actually initiated. BEFORE-SET! [ from BASE-HTML-SHEET ] void This is an empty function by default, but can be overridden in the requestor of a form, to do some processing before the requestor's form values are set into the specified bashee. BODY-BGCOLOR [ from LAYOUT-MIXIN ] keyword symbol Color keyword from *color-table* for the body background. Defaults to :blue-sky .",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/0/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 2,
      "chunk_count": 20
    },
    "id": "7ccf009ca35adbb92d9eccc10c6c5ed1"
  },
  {
    "text": "word symbol Color keyword from *color-table* for the body background. Defaults to :blue-sky . BOUNDING-BOX [ from BASE-OBJECT ] list of two 3d points The left front bottom and right rear top corners, in global coordinates, of the rectangular volume bounding the tree of geometric objects rooted at this object. CENTER [ from BASE-OBJECT ] 3d point Indicates in global coordinates where the center of the reference box of this object should be located. CHECK-SANITY? [ from BASE-HTML-SHEET ] boolean Determines whether a a sanity check is done (with the check-sanity function) before presenting the response page if this page is a respondent. Default is NIL. DOM-ID [ from SKELETON-UI-ELEMENT ] string This is the auto-computed dom-id which should be used for rendering this section.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/0/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 3,
      "chunk_count": 20
    },
    "id": "264d78f1f4de35b2fcebb72284aa22e0"
  },
  {
    "text": "If you use the main-div HTML string for rendering this object as a page section, then you do not have to generate the :div tag yourself - the main-div will be a string of HTML which is wrapped in the correct :div tag already. FORCE-VALIDATION-FOR [ from SKELETON-UI-ELEMENT ] list of gdl objects of type form-control The validation-function will be forced on these objects when a form is submitted, even if the object's html form-control does not happen to be included in the values submitted with the form. Defaults to nil. HEIGHT [ from BASE-OBJECT ] number Z-axis dimension of the reference box. Defaults to zero. HIDDEN? [ from VANILLA-MIXIN* ] boolean Indicates whether the object should effectively be a hidden-object even if specified in :objects. Default is nil. HTML-SECTIONS [ from SKELETON-UI-ELEMENT ] List of HTML sections to be scanned and possibly replaced in response to GDL Ajax calls. Override this slot at your own risk.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/0/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 4,
      "chunk_count": 20
    },
    "id": "3087a163f0d3c5c8b48b96bb59a4bbe6"
  },
  {
    "text": "N-UI-ELEMENT ] List of HTML sections to be scanned and possibly replaced in response to GDL Ajax calls. Override this slot at your own risk. The default is all sections who are most recently laid out on the respondent sheet, and this is set programmatically every time the sheet section's main-div is demanded. HTML-SECTIONS-VALID [ from SKELETON-UI-ELEMENT ] List of valid HTML sections to be scanned and possibly replaced in response to GDL Ajax calls. Override this slot at your own risk. The default is all sections who are most recently laid out on the respondent sheet, and this is set programmatically every time the sheet section's main-div is demanded. IMAGE-FILE [ from BASE-OBJECT ] pathname or string Points to a pre-existing image file to be displayed instead of actual geometry for this object. Defaults to nil IMAGE-FORMAT [ from BASE-HTML-GRAPHICS-SHEET ] keyword symbol Determines the default image format.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/0/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 5,
      "chunk_count": 20
    },
    "id": "294e9c51ebe3f3a3231ce14250efb7d6"
  },
  {
    "text": "object. Defaults to nil IMAGE-FORMAT [ from BASE-HTML-GRAPHICS-SHEET ] keyword symbol Determines the default image format. Defaults to :png INNER-HTML [ from SKELETON-UI-ELEMENT ] string This can be used with (str .) [in cl-who] or (:princ .) [in htmlGen] to output this section of the page, without the wrapping :div tag [so if you use this, your code would be responsible for wrapping the :div tag with :id (the dom-id).] INPUTS-BGCOLOR [ from LAYOUT-MIXIN ] keyword symbol Color keyword from *color-table* for the model-inputs area background. Defaults to :aquamarine . INPUTS-TITLE [ from LAYOUT-MIXIN ] string Title for the model-inputs section. Defaults to \"Model Inputs\". JS-TO-EVAL [ from SKELETON-UI-ELEMENT ] string of valid javascript This Javascript will be send with the Ajax response, and evaluated after the innerHTML for this section has been replaced. LENGTH [ from GEOMETRY-VIEW-MIXIN ] number Length (\"height\" of screen window) of the graphics viewport. Default is 300.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/0/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 6,
      "chunk_count": 20
    },
    "id": "e6932c15e12689f60bb334aa2c5632cf"
  },
  {
    "text": "and evaluated after the innerHTML for this section has been replaced. LENGTH [ from GEOMETRY-VIEW-MIXIN ] number Length (\"height\" of screen window) of the graphics viewport. Default is 300. LOCAL-BOX [ from BASE-OBJECT ] list of two 3d points The left front bottom and right rear top corners, in global coordinates, of the rectangular volume bounding this geometric object. MULTIPART-FORM? [ from LAYOUT-MIXIN ] boolean Determines whether the embedded form will support multipart MIME parts. Defaults to NIL. OBLIQUENESS [ from BASE-OBJECT ] 3x3 orthonormal matrix of double-float numbers This is synonymous with the orientation . ONCLICK-FUNCTION [ from BASE-OBJECT ] lambda function of zero arguments, or nil If non-nil, this function gets invoked when the user clicks the object in graphics front-ends which support this functionality, e.g. SVG/Raphael and X3DOM. ORDERED-FORM-CONTROLS [ from SKELETON-UI-ELEMENT ] list of gdl objects, which should be of type 'base-form-control .",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/0/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 7,
      "chunk_count": 20
    },
    "id": "3a53862a99f3529c9192bd1fc11bb0c7"
  },
  {
    "text": "ends which support this functionality, e.g. SVG/Raphael and X3DOM. ORDERED-FORM-CONTROLS [ from SKELETON-UI-ELEMENT ] list of gdl objects, which should be of type 'base-form-control . [Note -- this slot is not really necessary for protecting out-of-bounds sequence references anymore, the form-control processor protects against this by itself now]. These objects are validated and bashed first, in the order given. If the cardinality of one form-control depends on another as in the example below, then you should list those dependent objects first. Default is nil. examples: ...",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/0/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 8,
      "chunk_count": 20
    },
    "id": "fac4eb17ff13cd2be8d1fbbe963dd033"
  },
  {
    "text": ":computed-slots ((number-of-nozzles (the number-of-nozzles-form value)) (ordered-form-controls (append (list-elements (the inner-flange-form)) (list (the number-of-nozzles-form))))) :objects ((inner-flange-form :type 'menu-form-control :choice-plist (list :hey \"hey\" :now \"now\") :default :hey :sequence (:size (the number-of-nozzles))) (number-of-nozzles-form :type 'text-form-control :prompt \"Number of Shell Nozzles Required: \" :domain :number :default 0) ORIENTATION [ from BASE-OBJECT ] 3x3 matrix of double-float numbers Indicates the absolute Rotation Matrix used to create the coordinate system of this object. This matrix is given in absolute terms (i.e. with respect to the root's orientation), and is generally created with the alignment function. It should be an orthonormal matrix, meaning each row is a vector with a magnitude of one (1.0). OTHER-RULES [ from LAYOUT-MIXIN ] list of gdl objects of type base-rule-object or (preferably) gwl-base-rule-object .",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/0/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 9,
      "chunk_count": 20
    },
    "id": "3d727f9c014729b1d2edad09b4dff950"
  },
  {
    "text": "ng each row is a vector with a magnitude of one (1.0). OTHER-RULES [ from LAYOUT-MIXIN ] list of gdl objects of type base-rule-object or (preferably) gwl-base-rule-object . Links to these will be displayed in the other-rules section. Default to the collection of all objects of type base-rule-object from this node in the tree down to the leaves, whose violated? message evaluates to NIL. OTHER-RULES-BGCOLOR [ from LAYOUT-MIXIN ] keyword symbol Color keyword from *color-table* for the other-rules area background. Defaults to :aquamarine . OTHER-RULES-TITLE [ from LAYOUT-MIXIN ] string Title for the other-rules section. Defaults to \"Other Rules\". PAGE-TITLE [ from LAYOUT-MIXIN ] string The title to display on the page and in the tree. Defaults to (the strings-for-display) . POSSIBLE-NILS [ from SKELETON-UI-ELEMENT ] list of keyword symbols Messages corresponding to form fields which could be missing from form submission (e.g. checkbox fields).",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/0/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 10,
      "chunk_count": 20
    },
    "id": "89a8117f40aafe1e75c2af4e485bcc9c"
  },
  {
    "text": "m SKELETON-UI-ELEMENT ] list of keyword symbols Messages corresponding to form fields which could be missing from form submission (e.g. checkbox fields). Defaults to the names of any children or hidden-children of type menu-form-control or checkbox-form-control. PRESET-ALL? [ from SKELETON-UI-ELEMENT ] boolean This switch determines whether all form-controls should be preset before the final setting, in order to allow any interdependencies to be detected for validation or detecting changed values. If this is specified as a non-nil value, then any nil values of (the preset?) on individual form controls will be ignored. If this is specified as nil, then (the preset?) of individual form-controls (default of these is also nil) will be respected. Default is nil.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/0/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 11,
      "chunk_count": 20
    },
    "id": "2c2fa3f6114d27f168e50c2c7d9c6eb0"
  },
  {
    "text": "PROCESS-COOKIES! [ from BASE-HTML-SHEET ] void This is an empty function by default, but can be overridden in a user specialization of base-html-sheet, to do some processing before the header-plist is evaluated and before the HTTP response is actually initiated, but after the cookies-received have been set. RETURN-OBJECT [ from BASE-HTML-SHEET ] gdl object Default object to which control will return with the write-back-link method ROOT [ from VANILLA-MIXIN* ] gdl instance The root-level node in this object's ``tree'' (instance hierarchy). SAFE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances All objects from the :objects specification, including elements of sequences as flat lists. Any children which throw errors come back as a plist with error information SHOW-TITLE? [ from LAYOUT-MIXIN ] boolean Indicates whether to display the title at the top of the page. Defaults to T. STANDARD-VIEWS [ from BASE-HTML-GRAPHICS-SHEET ] plist of keywords and 3d vectors .",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/0/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 12,
      "chunk_count": 20
    },
    "id": "ea30f86534cd8387dec1dec9cfa6b1db"
  },
  {
    "text": "MIXIN ] boolean Indicates whether to display the title at the top of the page. Defaults to T. STANDARD-VIEWS [ from BASE-HTML-GRAPHICS-SHEET ] plist of keywords and 3d vectors . Indicates the views to show in the graphics controls. STRINGS-FOR-DISPLAY [ from VANILLA-MIXIN* ] string or list of strings Determines how the name of objects of this type will be printed in most places. This defaults to the name-for-display (generally the part's name as specified in its parent), followed by an index number if the part is an element of a sequence. TARGET [ from BASE-HTML-SHEET ] string Name of a browser frame or window to display this page. Default of NIL indicates to use the same window. TRANSITORY-SLOTS [ from BASE-HTML-SHEET ] list of keyword symbols Messages corresponding to form fields which should not be retained against Updates to the model (e.g. calls to the update! function or hitting the Update button or link in the browser in development mode). Defaults to NIL (the empty list).",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/0/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 13,
      "chunk_count": 20
    },
    "id": "759f64a6c5c9dc1b4de3a0742d24df49"
  },
  {
    "text": "hould not be retained against Updates to the model (e.g. calls to the update! function or hitting the Update button or link in the browser in development mode). Defaults to NIL (the empty list). TREE-BGCOLOR [ from LAYOUT-MIXIN ] keyword symbol Color keyword from *color-table* for the tree area background. Defaults to :aquamarine . TREE-TITLE [ from LAYOUT-MIXIN ] string Title for the Tree section. Defaults to \"Assembly Tree\" if the tree-root is only a subclass of application-mixin , and \"Assembly Tree\" if the tree-root is an actual node with child applications. UI-DISPLAY-LIST-LEAVES [ from LAYOUT-MIXIN ] list of gdl objects This should be overridden with a list of objects of your choice. These objects (not their leaves, but these actual nodes) will be scaled to fit and displayed in the graphics area. Defaults to NIL. UI-DISPLAY-LIST-OBJECTS [ from LAYOUT-MIXIN ] list of gdl objects This should be overridden with a list of objects of your choice.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/0/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 14,
      "chunk_count": 20
    },
    "id": "89db2c29489838b2c68e5ece7372458a"
  },
  {
    "text": "raphics area. Defaults to NIL. UI-DISPLAY-LIST-OBJECTS [ from LAYOUT-MIXIN ] list of gdl objects This should be overridden with a list of objects of your choice. The leaves of these objects will be scaled to fit and displayed in the graphics area. Defaults to NIL. USE-BSPLINES? [ from BASE-HTML-GRAPHICS-SHEET ] boolean Determines whether to use native bspline data in the vrml VIOLATED-RULES [ from LAYOUT-MIXIN ] list of gdl objects of type base-rule-object or (preferably) gwl-base-rule-object . Links to these will be displayed in the other-rules section. Default to the collection of all objects of type base-rule-object from this node in the tree down to the leaves, whose violated? message evaluates to non-NIL. VIOLATED-RULES-BGCOLOR [ from LAYOUT-MIXIN ] keyword symbol Color keyword from *color-table* for the violated-rules area background. Defaults to :aquamarine . VIOLATED-RULES-TITLE [ from LAYOUT-MIXIN ] string Title for the violated-rules section. Defaults to \"Violated Rules\".",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/0/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 15,
      "chunk_count": 20
    },
    "id": "4520f7000b1e7115bb047c1b9fd360de"
  },
  {
    "text": "color-table* for the violated-rules area background. Defaults to :aquamarine . VIOLATED-RULES-TITLE [ from LAYOUT-MIXIN ] string Title for the violated-rules section. Defaults to \"Violated Rules\". VISIBLE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances Additional objects to display in Tatu tree. Typically this would be a subset of hidden-children. Defaults to NIL. WIDTH [ from GEOMETRY-VIEW-MIXIN ] number Width of the graphics viewport. Default is 300. Input Slots (optional, settable) DIGITATION-MODE [ from BASE-HTML-GRAPHICS-SHEET ] keyword symbol, one of :zoom-and-center , :report-point , or :measure-distance . If :zoom-and-center , sets the user-center and user-scale accordingly when graphics area is clicked. If :report-point , the slot digitized-point is set with the x y value. If measure-distance , the slot :digitized-distance is set with the resultant distance.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/0/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 16,
      "chunk_count": 20
    },
    "id": "146e1feeee03e73ca92b19cc08b0454c"
  },
  {
    "text": "If measure-distance , the slot :digitized-distance is set with the resultant distance. Default is :zoom-and-center VIEW [ from BASE-HTML-GRAPHICS-SHEET ] keyword symbol Determines the default view from the standard-views . Defaults to :trimetric. ZOOM-FACTOR [ from BASE-HTML-GRAPHICS-SHEET ] number The factor used for zooming in or out. ZOOM-MODE [ from BASE-HTML-GRAPHICS-SHEET ] keyword symbol, one of :in, :out, or :none, or nil If :in, then clicks in the graphics area will increase the zoom factor by (the zoom-factor). If :out, then clicks will decrease the factor by that amount. If :none or nil, then clicks will have no effect. Input Slots (optional, defaulting) DISPLAY-CONTROLS [ from BASE-OBJECT ] plist May contain keywords and values indicating display characteristics for this object. The following keywords are recognized currently: :color color keyword from the *color-table* parameter, or an HTML-style hexidecimal RGB string value, e.g. \"#FFFFFF\" for pure white.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/0/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 17,
      "chunk_count": 20
    },
    "id": "adf222a8563588791faf41d5526ac054"
  },
  {
    "text": ". The following keywords are recognized currently: :color color keyword from the *color-table* parameter, or an HTML-style hexidecimal RGB string value, e.g. \"#FFFFFF\" for pure white. Defaults to :black. :line-thickness an integer, defaulting to 1, indicating relative line thickness for wireframe representations of this object. :dash-pattern (currently PDF/PNG/JPEG only). This is a list of two or three numbers which indicate the length, in pixels, of the dashes and blank spaces in a dashed line. The optional third number indicates how far into the line or curve to start the dash pattern. DISPLAY-RULES? [ from LAYOUT-MIXIN ] boolean Indicates whether the Rules panel should be displayed. Defaults to T. DISPLAY-TREE? [ from LAYOUT-MIXIN ] boolean Indicates whether the Tree area should be displayed. Defaults to T. GRAPHICS-HEIGHT [ from LAYOUT-MIXIN ] integer Height (top to bottom on screen) in pixels of the graphics area. Defaults to 500.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/0/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 18,
      "chunk_count": 20
    },
    "id": "198696bcdf8f76790dd1072a3fb05f66"
  },
  {
    "text": "layed. Defaults to T. GRAPHICS-HEIGHT [ from LAYOUT-MIXIN ] integer Height (top to bottom on screen) in pixels of the graphics area. Defaults to 500. GRAPHICS-WIDTH [ from LAYOUT-MIXIN ] integer Height (left to right on screen) in pixels of the graphics area. Defaults to 500. RESPONDENT [ from SKELETON-UI-ELEMENT ] gdl object Object to respond to the form submission. Defaults to self. USE-STANDARD-SAVED-SLOTS? [ from LAYOUT-MIXIN ] boolean Determines whether the standard-saved-slots are automatically used by default for the saved-slots. This is a trickle-down slot so its value will be passed to descendent objects automatically. The default value is NIL. Package Documentation Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/0/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 19,
      "chunk_count": 20
    },
    "id": "b904ab2166d1b196006e3a38cd23f2e4"
  },
  {
    "text": "GendL Application - BASE-FORM-CONTROL Package Documentation Object: BASE-FORM-CONTROL (The :GWL Package) Mixins: SKELETON-FORM-CONTROL , VANILLA-MIXIN Author Dave Cooper, Genworks Description This object can be used to represent a single HTML form control. It captures the initial default value, some display information such as the label, and all the standard HTML tag attributes for the tag e.g. INPUT, SELECT, TEXTAREA. GWL will process the data types according to specific rules, and validate the typed value according to other default rules. A custom validation-function can also be provided by user code. Sequences of these objects (with :size, :indices, :matrix, and :radial) are supported. This facility and its documentation is expected to undergo significant and frequent upgrades in the remainder of GDL 1573 and upcoming 1575. Current to-do list: Currently this works with normal HTTP form submission and full page reloading.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/3/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 0,
      "chunk_count": 22
    },
    "id": "fa30916dc9b74268606f34fb8612f52a"
  },
  {
    "text": "mainder of GDL 1573 and upcoming 1575. Current to-do list: Currently this works with normal HTTP form submission and full page reloading. We intend to make it work with AJAX and surgical page update as well. We intend to provide inputs for all the standard tag attributes for the accompanying LABEL tag for the form control. Additional form control elements to be included, to cover all types of form elements specified in current HTML standard from http://www.w3.org/TR/html401/interact/forms.html#h-17.2.1 button-form-control: submit buttons, reset buttons, push buttons. checkbox-form-control: checkboxes, radio buttons (multiple of these must be able to have same name) menu-form-control: select, along with optgroup and option. text-form-control: single-line text input (including masked passwords) and multi-line (TEXTAREA) text input. file-form-control: file select for submittal with a form. hidden-form-control: input of type hidden.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/3/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 1,
      "chunk_count": 22
    },
    "id": "41cfcaa2b9bfc77184ba06e9fafe6b24"
  },
  {
    "text": "ds) and multi-line (TEXTAREA) text input. file-form-control: file select for submittal with a form. hidden-form-control: input of type hidden. object-form-control: (not sure how this is supposed to work yet). Also, we have to study and clarify the issue of under what conditions values can possibly take on nil values, and what constitutes a required field as opposed to a non-validated field, and whether a blank string on a text input should be represented as a nil value or as an empty string. Note that checkbox-form-control and menu-form-control currently get automatically included in the possible-nils. Input Slots (optional) ACCEPT string or nil Maps to HTML form control attribute of the same name. Default is nil. ACCESSKEY string or nil Maps to HTML form control attribute of the same name. Default is nil. AJAX-SUBMIT-ON-CHANGE? boolean If set to non-nil, this field's value will be sent to server upon change. Default is nil.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/3/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 2,
      "chunk_count": 22
    },
    "id": "5f3c2b74942c83d5f9182cd4086a6318"
  },
  {
    "text": ". Default is nil. AJAX-SUBMIT-ON-CHANGE? boolean If set to non-nil, this field's value will be sent to server upon change. Default is nil. AJAX-SUBMIT-ON-ENTER? boolean If set to non-nil, this field's value will be sent to server upon enter. Default is nil. ALIGN string or nil Maps to HTML form control attribute of the same name. Default is nil. ALLOW-INVALID-TYPE? boolean If non-nil, then values which fail the type test will still be allowed to be the value. Default is nil. ALLOW-INVALID? boolean If non-nil, then values which fail the type or validation test will still be allowed to be the value. Default is t. ALLOW-NIL? boolean Regardless of :domain, if this is non-nil, nil values will be accepted. Defaults to t if (the default) is nil, otherwise defaults to nil. ALT string or nil Maps to HTML form control attribute of the same name. Default is nil.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/3/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 3,
      "chunk_count": 22
    },
    "id": "b7c60756e486653008096ca58eed6638"
  },
  {
    "text": "o HTML form control attribute of the same name. Default is nil. APPEND-ERROR-STRING? boolean Determines whether a default error string is appended to string ouput-function for html-format (and therefore html-string computed-slot as well). Defaults to t. BASHEE [ from SKELETON-UI-ELEMENT ] gdl object Object to have its settable computed-slots and/or query-plist set from the fields on the form upon submission. Defaults to self. CLASS [ from SKELETON-FORM-CONTROL ] string You can use this to specify a user-defined class for the form-control. Defaults to nil, which means no class attribute will be generated. DEFAULT lisp value of a type compatible with (the domain) This is the initial default value for the control. This must be specified by user code, or an error will result. DISABLED? boolean Maps to HTML form control attribute of the same name. Default is nil. DOM-ID [ from SKELETON-UI-ELEMENT ] string This is the auto-computed dom-id which should be used for rendering this section.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/3/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 4,
      "chunk_count": 22
    },
    "id": "84e6299cecc1546dcf3bd80b48009e69"
  },
  {
    "text": "Maps to HTML form control attribute of the same name. Default is nil. DOM-ID [ from SKELETON-UI-ELEMENT ] string This is the auto-computed dom-id which should be used for rendering this section. If you use the main-div HTML string for rendering this object as a page section, then you do not have to generate the :div tag yourself - the main-div will be a string of HTML which is wrapped in the correct :div tag already. DOMAIN keyword symbol, one of :number, :keyword, :list-of-strings, :list-of-anything, or :string . This specifies the expected and acceptable type for the submitted form value. If possible, the submitted value will be coerced into the specified type. The default is based upon the Lisp type of (the default) provided as input to this object. If the default is nil, the domain will default to :string FIELD-NAME [ from SKELETON-FORM-CONTROL ] keyword symbol The name of this field. Computed from the object name within the tree.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/3/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 5,
      "chunk_count": 22
    },
    "id": "4b469f2988314c9c14d9584d59b47c73"
  },
  {
    "text": "ll default to :string FIELD-NAME [ from SKELETON-FORM-CONTROL ] keyword symbol The name of this field. Computed from the object name within the tree. FORCE-VALIDATION-FOR [ from SKELETON-UI-ELEMENT ] list of gdl objects of type form-control The validation-function will be forced on these objects when a form is submitted, even if the object's html form-control does not happen to be included in the values submitted with the form. Defaults to nil. HIDDEN? [ from VANILLA-MIXIN* ] boolean Indicates whether the object should effectively be a hidden-object even if specified in :objects. Default is nil. HTML-SECTIONS [ from SKELETON-UI-ELEMENT ] List of HTML sections to be scanned and possibly replaced in response to GDL Ajax calls. Override this slot at your own risk. The default is all sections who are most recently laid out on the respondent sheet, and this is set programmatically every time the sheet section's main-div is demanded.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/3/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 6,
      "chunk_count": 22
    },
    "id": "a6c06dc6c3a9fe58f77457e3e264bbac"
  },
  {
    "text": "who are most recently laid out on the respondent sheet, and this is set programmatically every time the sheet section's main-div is demanded. HTML-SECTIONS-VALID [ from SKELETON-UI-ELEMENT ] List of valid HTML sections to be scanned and possibly replaced in response to GDL Ajax calls. Override this slot at your own risk. The default is all sections who are most recently laid out on the respondent sheet, and this is set programmatically every time the sheet section's main-div is demanded. ID [ from SKELETON-FORM-CONTROL ] keyword symbol The ID attribute for this tag. Defaults to (the field-name). INNER-HTML [ from SKELETON-UI-ELEMENT ] string This can be used with (str .) [in cl-who] or (:princ .) [in htmlGen] to output this section of the page, without the wrapping :div tag [so if you use this, your code would be responsible for wrapping the :div tag with :id (the dom-id).] ISMAP? boolean Maps to HTML form control attribute of the same name. Default is nil.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/3/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 7,
      "chunk_count": 22
    },
    "id": "6617f4c21da1a3a60edeb5331486d6a4"
  },
  {
    "text": "this, your code would be responsible for wrapping the :div tag with :id (the dom-id).] ISMAP? boolean Maps to HTML form control attribute of the same name. Default is nil. JS-TO-EVAL [ from SKELETON-UI-ELEMENT ] string of valid javascript This Javascript will be send with the Ajax response, and evaluated after the innerHTML for this section has been replaced. LABEL-POSITION keyword symbol or nil Specifies where the label tag goes, if any. Can be :table-td (label goes in a td before the form control), :table-td-append (label goes in a td after the form control), prepend: (label tag wraps around form control and label text comes before form control), append: (label tag wraps around form control and label text comes after form control), table-with-class: (like :table-td, but adds a class \"form-control\" to the table), or as-div: (puts label and control inside a div of class \"form-control\"). Default is :as-div LANG string or nil Maps to HTML form control attribute of the same name.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/3/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 8,
      "chunk_count": 22
    },
    "id": "c1da52a7839c2dcbac6ab868b82c40bc"
  },
  {
    "text": "m-control\" to the table), or as-div: (puts label and control inside a div of class \"form-control\"). Default is :as-div LANG string or nil Maps to HTML form control attribute of the same name. Default is nil. MAXLENGTH number or nil Maps to HTML form control attribute of the same name. Default is nil. NULLIFY-EMPTY-STRING? boolean Regardless of :domain, if this is non-nil, empty strings will convert to nil. Defaults to (the allow-nil?) ONBLUR string or nil Maps to HTML form control attribute of the same name. Default is nil. ONCHANGE string or nil Maps to HTML form control attribute of the same name. Default is nil, unless ajax-submit-on-change? is non-nil, in which case it calls ajax to set current form value. ONCLICK string or nil Maps to HTML form control attribute of the same name. Default is nil. ONDBLCLICK string or nil Maps to HTML form control attribute of the same name. Default is nil. ONENTER string or nil Maps to HTML form control attribute of the same name.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/3/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 9,
      "chunk_count": 22
    },
    "id": "2dd667d5b5c5d98f35400171c9cf8a03"
  },
  {
    "text": "ult is nil. ONDBLCLICK string or nil Maps to HTML form control attribute of the same name. Default is nil. ONENTER string or nil Maps to HTML form control attribute of the same name. Default is nil, unless ajax-submit-on-enter? is non-nil, in which case it calls ajax to set current form value. ONFOCUS string or nil Maps to HTML form control attribute of the same name. Default is nil. ONKEYDOWN string or nil Maps to HTML form control attribute of the same name. Default is nil. ONKEYPRESS string or nil Maps to HTML form control attribute of the same name. Default is nil. ONKEYUP string or nil Maps to HTML form control attribute of the same name. Default is nil. ONMOUSEDOWN string or nil Maps to HTML form control attribute of the same name. Default is nil. ONMOUSEMOVE string or nil Maps to HTML form control attribute of the same name. Default is nil. ONMOUSEOUT string or nil Maps to HTML form control attribute of the same name. Default is nil.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/3/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 10,
      "chunk_count": 22
    },
    "id": "d09e1de92b772a344665e801e0484d2a"
  },
  {
    "text": "ML form control attribute of the same name. Default is nil. ONMOUSEOUT string or nil Maps to HTML form control attribute of the same name. Default is nil. ONMOUSEOVER string or nil Maps to HTML form control attribute of the same name. Default is nil. ONMOUSEUP string or nil Maps to HTML form control attribute of the same name. Default is nil. ONSELECT string or nil Maps to HTML form control attribute of the same name. Default is nil. ORDERED-FORM-CONTROLS [ from SKELETON-UI-ELEMENT ] list of gdl objects, which should be of type 'base-form-control . [Note -- this slot is not really necessary for protecting out-of-bounds sequence references anymore, the form-control processor protects against this by itself now]. These objects are validated and bashed first, in the order given. If the cardinality of one form-control depends on another as in the example below, then you should list those dependent objects first. Default is nil. examples: ...",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/3/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 11,
      "chunk_count": 22
    },
    "id": "e7e33c99425dec52262b31668d431b09"
  },
  {
    "text": "ality of one form-control depends on another as in the example below, then you should list those dependent objects first. Default is nil. examples: ... :computed-slots ((number-of-nozzles (the number-of-nozzles-form value)) (ordered-form-controls (append (list-elements (the inner-flange-form)) (list (the number-of-nozzles-form))))) :objects ((inner-flange-form :type 'menu-form-control :choice-plist (list :hey \"hey\" :now \"now\") :default :hey :sequence (:size (the number-of-nozzles))) (number-of-nozzles-form :type 'text-form-control :prompt \"Number of Shell Nozzles Required: \" :domain :number :default 0) PLACEHOLDER string Text to place in the field by default, overwritten as soon as the field is selected. Works only in HTML5. Default is nil. POSSIBLE-NILS [ from SKELETON-UI-ELEMENT ] list of keyword symbols Messages corresponding to form fields which could be missing from form submission (e.g. checkbox fields).",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/3/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 12,
      "chunk_count": 22
    },
    "id": "e9bb89319ea23898d35525c4c0e8ab64"
  },
  {
    "text": "f keyword symbols Messages corresponding to form fields which could be missing from form submission (e.g. checkbox fields). Defaults to the names of any children or hidden-children of type menu-form-control or checkbox-form-control. PRESET-ALL? [ from SKELETON-UI-ELEMENT ] boolean This switch determines whether all form-controls should be preset before the final setting, in order to allow any interdependencies to be detected for validation or detecting changed values. If this is specified as a non-nil value, then any nil values of (the preset?) on individual form controls will be ignored. If this is specified as nil, then (the preset?) of individual form-controls (default of these is also nil) will be respected. Default is nil. PRESET? boolean This switch determines whether this form-control should be preset before the final setting, in order to allow any interdependencies to be detected for validation or detecting changed values. Default is nil.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/3/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 13,
      "chunk_count": 22
    },
    "id": "2209350e8faefe7e4a27f71dd0904a2d"
  },
  {
    "text": "ol should be preset before the final setting, in order to allow any interdependencies to be detected for validation or detecting changed values. Default is nil. PRIMARY? [ from SKELETON-FORM-CONTROL ] boolean Set this to t if the form-control should always occur first in an outputted snapshot file. Defaults to nil. PROMPT string The prompt used in the label. READONLY? boolean Maps to HTML form control attribute of the same name. Default is nil. ROOT [ from VANILLA-MIXIN* ] gdl instance The root-level node in this object's ``tree'' (instance hierarchy). SAFE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances All objects from the :objects specification, including elements of sequences as flat lists. Any children which throw errors come back as a plist with error information SIZE number or nil Maps to HTML form control attribute of the same name. Default is nil. SRC string or nil Maps to HTML form control attribute of the same name. Default is nil.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/3/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 14,
      "chunk_count": 22
    },
    "id": "1f4b07bfd1f33a1c20b35e3d5ede432b"
  },
  {
    "text": "r nil Maps to HTML form control attribute of the same name. Default is nil. SRC string or nil Maps to HTML form control attribute of the same name. Default is nil. STRINGS-FOR-DISPLAY [ from VANILLA-MIXIN* ] string or list of strings Determines how the name of objects of this type will be printed in most places. This defaults to the name-for-display (generally the part's name as specified in its parent), followed by an index number if the part is an element of a sequence. STYLE string or nil Maps to HTML form control attribute of the same name. Default is nil. TABINDEX integer or nil Maps to HTML form control attribute of the same name. Default is nil. TITLE string or nil Maps to HTML form control attribute of the same name. Default is nil. USEMAP string or nil Maps to HTML form control attribute of the same name. Default is nil. VALIDATION-FUNCTION function of one argument The argument will be the submitted form value converted to the proper type.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/3/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 15,
      "chunk_count": 22
    },
    "id": "e34a4640e3aec129ec65eb494cf9df6b"
  },
  {
    "text": "tribute of the same name. Default is nil. VALIDATION-FUNCTION function of one argument The argument will be the submitted form value converted to the proper type. The return value from this function can be nil, any non-nil value, or a plist with keys :validated-value and :error. The following behavior applies: If the function returns nil, error is set to :unspecified-validation-fail. If the function returns a plist with keys :validated-value and :error, and if :error is non-nil, it means the value is not acceptable, the form-controls error message is set to this error (usually a keyword symbol), and the error string will be appended to the html-string by default. If the function returns any other value, then the properly typed submitted form value is considered valid and is used. In the case of an error, the form-control's failed-value message is set to the properly typed submitted form value.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/3/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 16,
      "chunk_count": 22
    },
    "id": "4cd9247920b5a0a5f2a01a070a3e6713"
  },
  {
    "text": "se of an error, the form-control's failed-value message is set to the properly typed submitted form value. If allow-invalid? is non-nil, then the form-control's value message is also set to this value (i.e. the invalid value is still accepted, even though a non-nil error is present). Default is (list :validated-value value :error nil). VISIBLE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances Additional objects to display in Tatu tree. Typically this would be a subset of hidden-children. Defaults to NIL. Input Slots (optional, defaulting) RESPONDENT [ from SKELETON-UI-ELEMENT ] gdl object Object to respond to the form submission. Defaults to self. Computed Slots (settable) ERROR string or error object This will be set to a validation error if any, and cleared when the error is gone. FAILED-VALUE lisp value The value which was attempted to be set but failed validation. VALUE lisp value The current value of this form control.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/3/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 17,
      "chunk_count": 22
    },
    "id": "06fc8618e0125a059bc4669b62e62992"
  },
  {
    "text": "AILED-VALUE lisp value The value which was attempted to be set but failed validation. VALUE lisp value The current value of this form control. GDL Functions RESTORE-DEFAULTS! void Restores the default for the value, the failed-value, and the error. Examples (in-package :gwl-user) (define-object test-form (base-html-sheet) :objects ((username :type 'text-form-control :size 35 :maxlength 30 :allow-nil? t :default \"Ron Paul\") (age :type 'text-form-control :size 5 :validation-function #'(lambda(input) (or (null input) (> 80 input 70))) :domain :number ;;:default 72 :default nil ) (bio :type 'text-form-control :rows 8 :size 120 :default \" Congressman Ron Paul is the leading advocate for freedom in our nation's capital. As a member of the U.S. House of Representatives, Dr. Paul tirelessly works for limited constitutional government, low taxes, free markets, and a return to sound monetary policies.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/3/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 18,
      "chunk_count": 22
    },
    "id": "fd0b84f50a972b555b9532abd647da11"
  },
  {
    "text": "for limited constitutional government, low taxes, free markets, and a return to sound monetary policies. He is known among his congressional colleagues and his constituents for his consistent voting record. Dr. Paul never votes for legislation unless the proposed measure is expressly authorized by the Constitution. In the words of former Treasury Secretary William Simon, Dr. Paul is the one exception to the Gang of 535 on Capitol Hill.\") (issues :type 'menu-form-control :choice-list (list \"Taxes\" \"Health Care\" \"Foreign Policy\") :default \"Taxes\" :multiple? t) (color :type 'menu-form-control :size 7 :choice-plist (list :red \"red\" :green \"green\" :blue \"blue\" :magenta \"magenta\" :cyan \"cyan\" :yellow \"yellow\" :orange \"orange\") :validation-function #'(lambda(color) (if (intersection (ensure-list color) (list :yellow :magenta)) (list :error :disallowed-color-choice) t)) ;;:append-error-string? nil :multiple? t :default :red ;;:onchange \"alert('hey now');\" ) (early-riser? :type",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/3/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 19,
      "chunk_count": 22
    },
    "id": "71928c3d6956433156c31a32d3cea7ae"
  },
  {
    "text": "color) (list :yellow :magenta)) (list :error :disallowed-color-choice) t)) ;;:append-error-string? nil :multiple? t :default :red ;;:onchange \"alert('hey now');\" ) (early-riser? :type 'checkbox-form-control :default nil) (favorite-links :type 'text-form-control :sequence (:size 3) :size 70 :default \"http://\"))) (define-lens (html-format test-form)() :output-functions ((main-sheet () (with-html-output (*html-stream* nil :indent t) (:html (:head (:title \"Test Form\")) (:body (:h2 (:center \"Test Form\")) (the write-development-links) (with-html-form (:cl-who? t) (:p (str (the username html-string))) (:p \"(internal value is: \" (fmt \"~s\" (the username value)) \")\") (:p (str (the age html-string))) (:p \"(internal value is: \" (fmt \"~s\" (the age value)) \")\") (:p (str (the bio html-string))) (:p (:table (:tr (:td (str (the issues html-string)))) (:tr (:td (str (the color html-string)))))) (:p (str (the early-riser? html-string))) (dolist (link (list-elements (the favorite-links))) (htm (str",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/3/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 20,
      "chunk_count": 22
    },
    "id": "d9122aebe6960cf4f4bbf13c7fa97368"
  },
  {
    "text": "le (:tr (:td (str (the issues html-string)))) (:tr (:td (str (the color html-string)))))) (:p (str (the early-riser? html-string))) (dolist (link (list-elements (the favorite-links))) (htm (str (the-object link html-string)))) (:p ((:input :type :submit :value \" OK \")))))))))) (publish :path \"/fe\" :function #'(lambda(req ent) (gwl-make-object req ent \"gwl-user::test-form\"))) Package Documentation Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/3/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 21,
      "chunk_count": 22
    },
    "id": "4983a04699aaec738f7f5eabfbff9edb"
  },
  {
    "text": "GendL Application - WEB-DRAWING Package Documentation Object: WEB-DRAWING (The :GWL Package) Mixins: RENDERER-MIXIN , BASE-DRAWING Description Container object for displaying a view of geometric or text-based entities in a web application. This is supposed to be the type of the view-object hidden-child of base-html-graphics-sheet. Also, in a GWL application using application-mixin, you can include one object of this type in the ui-display-list-leaves. Input Slots (optional) 3D-BOX [ from RENDERER-MIXIN ] list of two 3d points The left-front-lower and right-rear-upper corners of the axis-aligned bounding box of the object-roots and objects . 3D-BOX-CENTER [ from RENDERER-MIXIN ] 3d point The effective view center for the scene contained in this view object. Defaults to the center of the bounding sphere of all the objects in the scene, consisting of the object-roots and the objects .",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/20/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 0,
      "chunk_count": 13
    },
    "id": "b6e3936a34ea025bc5d5dfc769cfa9f5"
  },
  {
    "text": "nding sphere of all the objects in the scene, consisting of the object-roots and the objects . BOUNDING-BOX [ from BASE-OBJECT ] list of two 3d points The left front bottom and right rear top corners, in global coordinates, of the rectangular volume bounding the tree of geometric objects rooted at this object. BOUNDING-SPHERE [ from RENDERER-MIXIN ] plist containing keys: :center and :radius This plist represents the tightest-fitting sphere around all the objects listed in the object-roots and the objects FIELD-OF-VIEW-DEFAULT [ from RENDERER-MIXIN ] number in angular degrees The maximum angle of the view frustrum for perspective views. Defaults to 0.1 (which results in a near parallel projection with virtually no perspective effect). HEIGHT [ from BASE-OBJECT ] number Z-axis dimension of the reference box. Defaults to zero. HIDDEN? [ from VANILLA-MIXIN* ] boolean Indicates whether the object should effectively be a hidden-object even if specified in :objects. Default is nil.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/20/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 1,
      "chunk_count": 13
    },
    "id": "d400ad5703883c04a5708eead1459b6a"
  },
  {
    "text": "the reference box. Defaults to zero. HIDDEN? [ from VANILLA-MIXIN* ] boolean Indicates whether the object should effectively be a hidden-object even if specified in :objects. Default is nil. IMMUNE-OBJECTS list of gdl objects These objects are not used in computing the scale or centering for the display list. Defaults to nil. LENGTH [ from BASE-OBJECT ] number Y-axis dimension of the reference box. Defaults to zero. LOCAL-BOX [ from BASE-OBJECT ] list of two 3d points The left front bottom and right rear top corners, in global coordinates, of the rectangular volume bounding this geometric object. OBJECT-ROOTS list of gdl objects The leaves of each of these objects will be included in the geometry display. Defaults to nil. OBJECTS list of gdl objects These nodes (not their leaves but the actual objects) will be included in the geometry display. Defaults to nil. OBLIQUENESS [ from BASE-OBJECT ] 3x3 orthonormal matrix of double-float numbers This is synonymous with the orientation .",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/20/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 2,
      "chunk_count": 13
    },
    "id": "f5ae35efd671d019d35bd54ba1347425"
  },
  {
    "text": "tual objects) will be included in the geometry display. Defaults to nil. OBLIQUENESS [ from BASE-OBJECT ] 3x3 orthonormal matrix of double-float numbers This is synonymous with the orientation . ONCLICK-FUNCTION [ from BASE-OBJECT ] lambda function of zero arguments, or nil If non-nil, this function gets invoked when the user clicks the object in graphics front-ends which support this functionality, e.g. SVG/Raphael and X3DOM. PAGE-LENGTH [ from BASE-DRAWING ] number in pdf points Front-to-back (or top-to-bottom) length of the paper being represented by this drawing. The default is (* 11 72) points, or 11 inches, corresponding to US standard letter-size paper. PAGE-WIDTH [ from BASE-DRAWING ] number in pdf points Left-to-right width of the paper being represented by this drawing. The default is (* 8.5 72) points, or 8.5 inches, corresponding to US standard letter-size paper. PROJECTION-VECTOR 3d vector This is the normal vector of the view plane onto which to project the 3D objects.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/20/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 3,
      "chunk_count": 13
    },
    "id": "091d87ce13c906fb9ceec5ca392e78c8"
  },
  {
    "text": "lt is (* 8.5 72) points, or 8.5 inches, corresponding to US standard letter-size paper. PROJECTION-VECTOR 3d vector This is the normal vector of the view plane onto which to project the 3D objects. Defaults to (getf *standard-views* :top). RAPHAEL-CANVAS-ID string Unique ID on the page for the raphael canvas div. By default this is passed in from the base-ajax-graphics-sheet and based on its root-path, but can be specified manually if you are making a web-drawing on your own. Defaults (in the standalone case) to \"RaphaelCanvas\" ROOT [ from VANILLA-MIXIN* ] gdl instance The root-level node in this object's ``tree'' (instance hierarchy). SAFE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances All objects from the :objects specification, including elements of sequences as flat lists.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/20/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 4,
      "chunk_count": 13
    },
    "id": "61a7ff45afcbb1c369e3b2511f20ffb3"
  },
  {
    "text": "Any children which throw errors come back as a plist with error information STRINGS-FOR-DISPLAY [ from VANILLA-MIXIN* ] string or list of strings Determines how the name of objects of this type will be printed in most places. This defaults to the name-for-display (generally the part's name as specified in its parent), followed by an index number if the part is an element of a sequence. SVG-CLASS [ from BASE-DRAWING ] string with css classes These classes will be included in any svg tag outputted from this drawing. VIEW-VECTORS [ from RENDERER-MIXIN ] plist Keys indicate view vector names (e.g. :trimetric ), and values contain the 3D vectors. Defaults to the parameter *standard-views* , but with the key corresponding to current (the view) ordered first in the plist. This list of view-vectors is used to construct the default viewpoints .",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/20/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 5,
      "chunk_count": 13
    },
    "id": "3fa4c6a73dec1634a7641f3b94fe652b"
  },
  {
    "text": "rs is used to construct the default viewpoints . VIEWPOINTS [ from RENDERER-MIXIN ] list of plists Each plist contains, based on each entry in the view-vectors , keys: :point (camera location, defaults to the 3d-box-center translated along the corresponding element of view-vectors ) by the local camera distance. The camera distance is computed based on the field-of-view angle and the bounding-sphere :orientation (3d matrix indicating camera orientation) field-of-view Angle in degrees of the view frustrum (i.e. lens angle of the virtual camera). VISIBLE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances Additional objects to display in Tatu tree. Typically this would be a subset of hidden-children. Defaults to NIL. WIDTH [ from BASE-OBJECT ] number X-axis dimension of the reference box. Defaults to zero. Input Slots (optional, defaulting) DISPLAY-CONTROLS [ from BASE-OBJECT ] plist May contain keywords and values indicating display characteristics for this object.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/20/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 6,
      "chunk_count": 13
    },
    "id": "45ab9d17b22947005f360cd5e39700d1"
  },
  {
    "text": "Defaults to zero. Input Slots (optional, defaulting) DISPLAY-CONTROLS [ from BASE-OBJECT ] plist May contain keywords and values indicating display characteristics for this object. The following keywords are recognized currently: :color color keyword from the *color-table* parameter, or an HTML-style hexidecimal RGB string value, e.g. \"#FFFFFF\" for pure white. Defaults to :black. :line-thickness an integer, defaulting to 1, indicating relative line thickness for wireframe representations of this object. :dash-pattern (currently PDF/PNG/JPEG only). This is a list of two or three numbers which indicate the length, in pixels, of the dashes and blank spaces in a dashed line. The optional third number indicates how far into the line or curve to start the dash pattern. ORIENTATION [ from BASE-OBJECT ] 3x3 matrix of double-float numbers Indicates the absolute Rotation Matrix used to create the coordinate system of this object. This matrix is given in absolute terms (i.e.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/20/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 7,
      "chunk_count": 13
    },
    "id": "c5f115d55c59b149f1ff4614a977a9c0"
  },
  {
    "text": "BJECT ] 3x3 matrix of double-float numbers Indicates the absolute Rotation Matrix used to create the coordinate system of this object. This matrix is given in absolute terms (i.e. with respect to the root's orientation), and is generally created with the alignment function. It should be an orthonormal matrix, meaning each row is a vector with a magnitude of one (1.0). Computed Slots CENTER [ from BASE-OBJECT ] 3d point Indicates in global coordinates where the center of the reference box of this object should be located. IMAGE-FILE [ from BASE-OBJECT ] pathname or string Points to a pre-existing image file to be displayed instead of actual geometry for this object. Defaults to nil Objects MAIN-VIEW gdl object of type geom-base:base-view This is the actual drawing view which is used to present the geometry. Defaults to an internally-computed object, this should not be overridden in user code.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/20/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 8,
      "chunk_count": 13
    },
    "id": "0912cc1733238ad458616188127ad352"
  },
  {
    "text": "ent the geometry. Defaults to an internally-computed object, this should not be overridden in user code. Examples (in-package :gwl-user) (define-object test-html-graphics-sheet (base-html-graphics-sheet) :objects ((b-splines :type 'test-b-spline-curves) (boxed-spline :type 'surf:boxed-curve :curve-in (the b-splines (curves 0)) :orientation (alignment :top (the (face-normal-vector :rear))) :show-box? t) (view-object :type 'web-drawing :page-length (the graphics-height value) :page-width (the graphics-width value) :projection-vector (getf *standard-views* (the view)) :object-roots (the ui-display-roots)) (graphics-height :type 'text-form-control :default 350) (graphics-width :type 'text-form-control :default 500) (bg-color :type 'text-form-control :default :black) (fg-color :type 'text-form-control :default :white)) :computed-slots ((background-color (lookup-color (the :bg-color value) :format :decimal)) (foreground-color (lookup-color (the :fg-color value) :format :decimal)) (view",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/20/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 9,
      "chunk_count": 13
    },
    "id": "cd7c0c27cd5f183a5fc5ea1f8cc5179d"
  },
  {
    "text": "control :default :white)) :computed-slots ((background-color (lookup-color (the :bg-color value) :format :decimal)) (foreground-color (lookup-color (the :fg-color value) :format :decimal)) (view :trimetric :settable) (\"list of gdl objects. Objects to be displayed in the graphics window.\" ui-display-roots (list (the b-splines) (the boxed-spline))))) (define-lens (html-format test-html-graphics-sheet)() :output-functions ((main-sheet () (with-html-output (*html-stream* nil :indent t) (:html (:head (:title \"Test HTML Graphics Sheet\")) (:body (when gwl:*developing?* (the write-development-links)) (:h2 (:center \"Test HTML Graphics Sheet\")) (with-html-form (:cl-who? t) (:table (:tr (:td (:ul (:li (str (the graphics-height html-string))) (:li (str (the graphics-width html-string))) (:li (str (the bg-color html-string))) (:li (str (the fg-color html-string)))) (:p (:input :type :submit :value \" OK \"))) (:td (write-the geometry))))))))))) (publish :path \"/t-h-g-s\" :function #'(lambda(req ent)",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/20/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 10,
      "chunk_count": 13
    },
    "id": "aa48273e46960fa76f22d758455b598c"
  },
  {
    "text": "bg-color html-string))) (:li (str (the fg-color html-string)))) (:p (:input :type :submit :value \" OK \"))) (:td (write-the geometry))))))))))) (publish :path \"/t-h-g-s\" :function #'(lambda(req ent) (gwl-make-object req ent \"gwl-user::test-html-graphics-sheet\"))) (define-object test-b-spline-curves (base-object) :input-slots ((control-points (list (make-point 0 0 0) (make-point 2 3.0 0.0) (make-point 4 2.0 0.0) (make-point 5 0.0 0.0) (make-point 4 -2.0 0.0) (make-point 2 -3.0 0.0) (make-point 0 0 0)))) :objects ((curves :type 'surf:b-spline-curve :sequence (:size 6) :control-points (the control-points) :degree (1+ (the-child :index)) :display-controls (list :line-thickness (* 0.3 (the-child index)) :color (ecase (the-child index) (0 :red) (1 :orange) (2 :yellow) (3 :green) (4 :blue) (5 :red-violet)))) (points :type 'point :sequence (:size (length (rest (the control-points)))) :center (nth (the-child index) (rest (the control-points))) :display-controls (list :color :green)))) Package",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/20/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 11,
      "chunk_count": 13
    },
    "id": "5c225c9f2aacc58bd7446f6e65c67dcb"
  },
  {
    "text": "d-violet)))) (points :type 'point :sequence (:size (length (rest (the control-points)))) :center (nth (the-child index) (rest (the control-points))) :display-controls (list :color :green)))) Package Documentation Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/20/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 12,
      "chunk_count": 13
    },
    "id": "9a38f8853ac18324f92f774ba0a4f4ec"
  },
  {
    "text": "GendL Application - COLOR-MAP Package Documentation Object: COLOR-MAP (The :GWL Package) Mixins: BASE-HTML-SHEET Description Shows a list of the default colors. This is published as the URI \"/color-map\" of the running GWL webserver. Input Slots (optional) AFTER-PRESENT! [ from BASE-HTML-SHEET ] void This is an empty function by default, but can be overridden in the respondent of a form, to do some processing after the respondent's write-html-sheet function runs to present the object. AFTER-SET! [ from BASE-HTML-SHEET ] void This is an empty function by default, but can be overridden in the requestor of a form, to do some processing after the requestor's form values are set into the specified bashee. BASHEE [ from SKELETON-UI-ELEMENT ] gdl object Object to have its settable computed-slots and/or query-plist set from the fields on the form upon submission. Defaults to self.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/7/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 0,
      "chunk_count": 11
    },
    "id": "c84e6945b4c7ced2dc8d4a3d37b4a8bd"
  },
  {
    "text": "nd/or query-plist set from the fields on the form upon submission. Defaults to self. BEFORE-PRESENT! [ from BASE-HTML-SHEET ] void This is an empty function by default, but can be overridden in the respondent of a form, to do some processing before the respondent's write-html-sheet function runs to present the object. This can be useful especially for objects which are subclasses of higher-level mixins such as application-mixin and node-mixin , where you do not have direct access to the write-html-sheet function and typically only define the model-inputs function. It is not always reliable to do processing in the model-inputs function, since some slots which depend on your intended modifications may already have been evaluated by the time the model-inputs function runs.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/7/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 1,
      "chunk_count": 11
    },
    "id": "5e8687677bbcc02a2b6ed23aebd187fc"
  },
  {
    "text": "BEFORE-RESPONSE! [ from BASE-HTML-SHEET ] void This is an empty function by default, but can be overridden in a user specialization of base-html-sheet, to do some processing before the header-plist is evaluated and before the HTTP response is actually initiated. BEFORE-SET! [ from BASE-HTML-SHEET ] void This is an empty function by default, but can be overridden in the requestor of a form, to do some processing before the requestor's form values are set into the specified bashee. CHECK-SANITY? [ from BASE-HTML-SHEET ] boolean Determines whether a a sanity check is done (with the check-sanity function) before presenting the response page if this page is a respondent. Default is NIL. DOM-ID [ from SKELETON-UI-ELEMENT ] string This is the auto-computed dom-id which should be used for rendering this section.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/7/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 2,
      "chunk_count": 11
    },
    "id": "0f8a413630563f56e35c687548e935ac"
  },
  {
    "text": "ng this section. If you use the main-div HTML string for rendering this object as a page section, then you do not have to generate the :div tag yourself - the main-div will be a string of HTML which is wrapped in the correct :div tag already. FORCE-VALIDATION-FOR [ from SKELETON-UI-ELEMENT ] list of gdl objects of type form-control The validation-function will be forced on these objects when a form is submitted, even if the object's html form-control does not happen to be included in the values submitted with the form. Defaults to nil. HIDDEN? [ from VANILLA-MIXIN* ] boolean Indicates whether the object should effectively be a hidden-object even if specified in :objects. Default is nil. HTML-SECTIONS [ from SKELETON-UI-ELEMENT ] List of HTML sections to be scanned and possibly replaced in response to GDL Ajax calls. Override this slot at your own risk.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/7/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 3,
      "chunk_count": 11
    },
    "id": "6f71b9229cf76399132d6fe71677278b"
  },
  {
    "text": "response to GDL Ajax calls. Override this slot at your own risk. The default is all sections who are most recently laid out on the respondent sheet, and this is set programmatically every time the sheet section's main-div is demanded. HTML-SECTIONS-VALID [ from SKELETON-UI-ELEMENT ] List of valid HTML sections to be scanned and possibly replaced in response to GDL Ajax calls. Override this slot at your own risk. The default is all sections who are most recently laid out on the respondent sheet, and this is set programmatically every time the sheet section's main-div is demanded.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/7/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 4,
      "chunk_count": 11
    },
    "id": "a57c9c6f108681cfc68f4c14219fe740"
  },
  {
    "text": "INNER-HTML [ from SKELETON-UI-ELEMENT ] string This can be used with (str .) [in cl-who] or (:princ .) [in htmlGen] to output this section of the page, without the wrapping :div tag [so if you use this, your code would be responsible for wrapping the :div tag with :id (the dom-id).] JS-TO-EVAL [ from SKELETON-UI-ELEMENT ] string of valid javascript This Javascript will be send with the Ajax response, and evaluated after the innerHTML for this section has been replaced. ORDERED-FORM-CONTROLS [ from SKELETON-UI-ELEMENT ] list of gdl objects, which should be of type 'base-form-control . [Note -- this slot is not really necessary for protecting out-of-bounds sequence references anymore, the form-control processor protects against this by itself now]. These objects are validated and bashed first, in the order given. If the cardinality of one form-control depends on another as in the example below, then you should list those dependent objects first. Default is nil. examples: ...",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/7/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 5,
      "chunk_count": 11
    },
    "id": "3b04ab3c8c6193fa68881c4977f882ff"
  },
  {
    "text": "st, in the order given. If the cardinality of one form-control depends on another as in the example below, then you should list those dependent objects first. Default is nil. examples: ... :computed-slots ((number-of-nozzles (the number-of-nozzles-form value)) (ordered-form-controls (append (list-elements (the inner-flange-form)) (list (the number-of-nozzles-form))))) :objects ((inner-flange-form :type 'menu-form-control :choice-plist (list :hey \"hey\" :now \"now\") :default :hey :sequence (:size (the number-of-nozzles))) (number-of-nozzles-form :type 'text-form-control :prompt \"Number of Shell Nozzles Required: \" :domain :number :default 0) POSSIBLE-NILS [ from SKELETON-UI-ELEMENT ] list of keyword symbols Messages corresponding to form fields which could be missing from form submission (e.g. checkbox fields). Defaults to the names of any children or hidden-children of type menu-form-control or checkbox-form-control.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/7/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 6,
      "chunk_count": 11
    },
    "id": "7e41be1dab50c2f02bd1e86db2f9d194"
  },
  {
    "text": ". checkbox fields). Defaults to the names of any children or hidden-children of type menu-form-control or checkbox-form-control. PRESET-ALL? [ from SKELETON-UI-ELEMENT ] boolean This switch determines whether all form-controls should be preset before the final setting, in order to allow any interdependencies to be detected for validation or detecting changed values. If this is specified as a non-nil value, then any nil values of (the preset?) on individual form controls will be ignored. If this is specified as nil, then (the preset?) of individual form-controls (default of these is also nil) will be respected. Default is nil. PROCESS-COOKIES! [ from BASE-HTML-SHEET ] void This is an empty function by default, but can be overridden in a user specialization of base-html-sheet, to do some processing before the header-plist is evaluated and before the HTTP response is actually initiated, but after the cookies-received have been set.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/7/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 7,
      "chunk_count": 11
    },
    "id": "c345897bf97d1c77562acff1678abae1"
  },
  {
    "text": "cessing before the header-plist is evaluated and before the HTTP response is actually initiated, but after the cookies-received have been set. RETURN-OBJECT [ from BASE-HTML-SHEET ] gdl object Default object to which control will return with the write-back-link method ROOT [ from VANILLA-MIXIN* ] gdl instance The root-level node in this object's ``tree'' (instance hierarchy). SAFE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances All objects from the :objects specification, including elements of sequences as flat lists. Any children which throw errors come back as a plist with error information STRINGS-FOR-DISPLAY [ from VANILLA-MIXIN* ] string or list of strings Determines how the name of objects of this type will be printed in most places. This defaults to the name-for-display (generally the part's name as specified in its parent), followed by an index number if the part is an element of a sequence.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/7/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 8,
      "chunk_count": 11
    },
    "id": "eb47d75d4be32ebbc925fa22dd1f5aa5"
  },
  {
    "text": "rally the part's name as specified in its parent), followed by an index number if the part is an element of a sequence. TARGET [ from BASE-HTML-SHEET ] string Name of a browser frame or window to display this page. Default of NIL indicates to use the same window. TRANSITORY-SLOTS [ from BASE-HTML-SHEET ] list of keyword symbols Messages corresponding to form fields which should not be retained against Updates to the model (e.g. calls to the update! function or hitting the Update button or link in the browser in development mode). Defaults to NIL (the empty list). VISIBLE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances Additional objects to display in Tatu tree. Typically this would be a subset of hidden-children. Defaults to NIL. Input Slots (optional, defaulting) RESPONDENT [ from SKELETON-UI-ELEMENT ] gdl object Object to respond to the form submission. Defaults to self.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/7/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 9,
      "chunk_count": 11
    },
    "id": "72d4cae7965d1b08c6c85e333e866a9a"
  },
  {
    "text": "SKELETON-UI-ELEMENT ] gdl object Object to respond to the form submission. Defaults to self. GDL Functions WRITE-HTML-SHEET [ from BASE-HTML-SHEET ] void This GDL function should be redefined to generate the HTML page corresponding to this object. It can be specified here, or as the main-sheet output-function in an html-format lens for this object's type. This write-html-sheet function, if defined, will override any main-sheet function defined in the lens. Typically a write-html-sheet function would look as follows: example: (write-html-sheet () (html (:html (:head (:title (:princ (the :page-title)))) (:body ;;; fill in your body here )))) Package Documentation Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/7/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 10,
      "chunk_count": 11
    },
    "id": "e2bc10f85d3c491cb57c7e248fd1cde7"
  },
  {
    "text": "GendL Application - BASE-AJAX-SHEET Package Documentation Object: BASE-AJAX-SHEET (The :GWL Package) Mixins: BASE-HTML-SHEET Description (Note: this documentation will be moved to the specific docs for the html-format/base-ajax-sheet lens, when we have lens documentation working properly) Produces a standard main-sheet for html-format which includes the standard GDL Javascript to enable code produced with gdl-ajax-call to work, and optionally to include the standard JQuery library. If you want to define your own main-sheet, then there is no use for base-ajax-sheet, you can just use base-html-sheet. But then you have to include any needed Javascript yourself, e.g. for gdl-ajax-call support or jQuery. The html-format lens for base-ajax-sheet also defines a user hook function, main-sheet-body, which produces a \"No Body has been defined\" message by default, but which you can fill in your own specific lens to do something useful for the body.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/2/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 0,
      "chunk_count": 18
    },
    "id": "ab39d29c691216c782a6e02e697906c8"
  },
  {
    "text": ", which produces a \"No Body has been defined\" message by default, but which you can fill in your own specific lens to do something useful for the body. Input Slots (optional) AFTER-PRESENT! [ from BASE-HTML-SHEET ] void This is an empty function by default, but can be overridden in the respondent of a form, to do some processing after the respondent's write-html-sheet function runs to present the object. AFTER-SET! [ from BASE-HTML-SHEET ] void This is an empty function by default, but can be overridden in the requestor of a form, to do some processing after the requestor's form values are set into the specified bashee. BASHEE [ from SKELETON-UI-ELEMENT ] gdl object Object to have its settable computed-slots and/or query-plist set from the fields on the form upon submission. Defaults to self.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/2/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 1,
      "chunk_count": 18
    },
    "id": "02c6dfe2317093e51690d1d17bc04531"
  },
  {
    "text": "lf. BEFORE-PRESENT! [ from BASE-HTML-SHEET ] void This is an empty function by default, but can be overridden in the respondent of a form, to do some processing before the respondent's write-html-sheet function runs to present the object. This can be useful especially for objects which are subclasses of higher-level mixins such as application-mixin and node-mixin , where you do not have direct access to the write-html-sheet function and typically only define the model-inputs function. It is not always reliable to do processing in the model-inputs function, since some slots which depend on your intended modifications may already have been evaluated by the time the model-inputs function runs. BEFORE-RESPONSE! [ from BASE-HTML-SHEET ] void This is an empty function by default, but can be overridden in a user specialization of base-html-sheet, to do some processing before the header-plist is evaluated and before the HTTP response is actually initiated.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/2/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 2,
      "chunk_count": 18
    },
    "id": "8966857a746caf8abdff73f68077b5cd"
  },
  {
    "text": "ridden in a user specialization of base-html-sheet, to do some processing before the header-plist is evaluated and before the HTTP response is actually initiated. BEFORE-SET! [ from BASE-HTML-SHEET ] void This is an empty function by default, but can be overridden in the requestor of a form, to do some processing before the requestor's form values are set into the specified bashee. BODY-CLASS string or nil Names the value of class attribute for the body tag. Default is nil. BODY-ONLOAD string of javascript or nil This Javascript will go into the :onload event of the body. Default is nil. BODY-ONPAGESHOW string of javascript or nil This Javascript will go into the :onpageshow event of the body. Default is nil. BODY-ONRESIZE string of javascript or nil This Javascript will go into the :onresize event of the body. Default is nil.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/2/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 3,
      "chunk_count": 18
    },
    "id": "5103fea95101d74b84a02cbc8a19de5f"
  },
  {
    "text": "ize event of the body. Default is nil. CHECK-SANITY? [ from BASE-HTML-SHEET ] boolean Determines whether a a sanity check is done (with the check-sanity function) before presenting the response page if this page is a respondent. Default is NIL. DOCTYPE-STRING string or nil Contains the string for the doctype at the top of the document. Default is the standard doctype for HTML5 and later. DOM-ID [ from SKELETON-UI-ELEMENT ] string This is the auto-computed dom-id which should be used for rendering this section. If you use the main-div HTML string for rendering this object as a page section, then you do not have to generate the :div tag yourself - the main-div will be a string of HTML which is wrapped in the correct :div tag already.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/2/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 4,
      "chunk_count": 18
    },
    "id": "1285554dee231dceb2ef212bde96b6c7"
  },
  {
    "text": "FORCE-VALIDATION-FOR [ from SKELETON-UI-ELEMENT ] list of gdl objects of type form-control The validation-function will be forced on these objects when a form is submitted, even if the object's html form-control does not happen to be included in the values submitted with the form. Defaults to nil. HEAD-CLASS string or nil Names the value of class attribute for the head tag. Default is nil. HIDDEN? [ from VANILLA-MIXIN* ] boolean Indicates whether the object should effectively be a hidden-object even if specified in :objects. Default is nil. HTML-CLASS string or nil Names the value of class attribute for the html tag. Default is nil. HTML-SECTIONS [ from SKELETON-UI-ELEMENT ] List of HTML sections to be scanned and possibly replaced in response to GDL Ajax calls. Override this slot at your own risk. The default is all sections who are most recently laid out on the respondent sheet, and this is set programmatically every time the sheet section's main-div is demanded.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/2/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 5,
      "chunk_count": 18
    },
    "id": "0bbb968ce70d639439feb992fcd08128"
  },
  {
    "text": "own risk. The default is all sections who are most recently laid out on the respondent sheet, and this is set programmatically every time the sheet section's main-div is demanded. HTML-SECTIONS-VALID [ from SKELETON-UI-ELEMENT ] List of valid HTML sections to be scanned and possibly replaced in response to GDL Ajax calls. Override this slot at your own risk. The default is all sections who are most recently laid out on the respondent sheet, and this is set programmatically every time the sheet section's main-div is demanded.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/2/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 6,
      "chunk_count": 18
    },
    "id": "9b46c43a44df423f941edee61eb92fa6"
  },
  {
    "text": "INNER-HTML [ from SKELETON-UI-ELEMENT ] string This can be used with (str .) [in cl-who] or (:princ .) [in htmlGen] to output this section of the page, without the wrapping :div tag [so if you use this, your code would be responsible for wrapping the :div tag with :id (the dom-id).] JS-TO-EVAL [ from SKELETON-UI-ELEMENT ] string of valid javascript This Javascript will be send with the Ajax response, and evaluated after the innerHTML for this section has been replaced. MAIN-SHEET-BODY string of html The main body of the page. This can be specified as input or overridden in subclass, otherwise it defaults to the content produced by the :output-function of the same name in the applicable lens for html-format. ORDERED-FORM-CONTROLS [ from SKELETON-UI-ELEMENT ] list of gdl objects, which should be of type 'base-form-control .",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/2/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 7,
      "chunk_count": 18
    },
    "id": "df648c3e8198569bd11df5c4384abc77"
  },
  {
    "text": "ld be of type 'base-form-control . [Note -- this slot is not really necessary for protecting out-of-bounds sequence references anymore, the form-control processor protects against this by itself now]. These objects are validated and bashed first, in the order given. If the cardinality of one form-control depends on another as in the example below, then you should list those dependent objects first. Default is nil. examples: ... :computed-slots ((number-of-nozzles (the number-of-nozzles-form value)) (ordered-form-controls (append (list-elements (the inner-flange-form)) (list (the number-of-nozzles-form))))) :objects ((inner-flange-form :type 'menu-form-control :choice-plist (list :hey \"hey\" :now \"now\") :default :hey :sequence (:size (the number-of-nozzles))) (number-of-nozzles-form :type 'text-form-control :prompt \"Number of Shell Nozzles Required: \" :domain :number :default 0) POSSIBLE-NILS [ from SKELETON-UI-ELEMENT ] list of keyword symbols Messages corresponding to form fields",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/2/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 8,
      "chunk_count": 18
    },
    "id": "a1fede29aeee47f69805bc4c8397c91e"
  },
  {
    "text": "ext-form-control :prompt \"Number of Shell Nozzles Required: \" :domain :number :default 0) POSSIBLE-NILS [ from SKELETON-UI-ELEMENT ] list of keyword symbols Messages corresponding to form fields which could be missing from form submission (e.g. checkbox fields). Defaults to the names of any children or hidden-children of type menu-form-control or checkbox-form-control. PRESET-ALL? [ from SKELETON-UI-ELEMENT ] boolean This switch determines whether all form-controls should be preset before the final setting, in order to allow any interdependencies to be detected for validation or detecting changed values. If this is specified as a non-nil value, then any nil values of (the preset?) on individual form controls will be ignored. If this is specified as nil, then (the preset?) of individual form-controls (default of these is also nil) will be respected. Default is nil.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/2/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 9,
      "chunk_count": 18
    },
    "id": "09982014cbcb853a82f635c99934f97b"
  },
  {
    "text": "m-controls (default of these is also nil) will be respected. Default is nil. PROCESS-COOKIES! [ from BASE-HTML-SHEET ] void This is an empty function by default, but can be overridden in a user specialization of base-html-sheet, to do some processing before the header-plist is evaluated and before the HTTP response is actually initiated, but after the cookies-received have been set. RESPONDENT [ from SKELETON-UI-ELEMENT ] gdl object Object to respond to the form submission. Defaults to self. RETURN-OBJECT [ from BASE-HTML-SHEET ] gdl object Default object to which control will return with the write-back-link method ROOT [ from VANILLA-MIXIN* ] gdl instance The root-level node in this object's ``tree'' (instance hierarchy). SAFE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances All objects from the :objects specification, including elements of sequences as flat lists.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/2/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 10,
      "chunk_count": 18
    },
    "id": "10ae1f99f71b9ee5fade8261bfab72ff"
  },
  {
    "text": "ects from the :objects specification, including elements of sequences as flat lists. Any children which throw errors come back as a plist with error information STRINGS-FOR-DISPLAY [ from VANILLA-MIXIN* ] string or list of strings Determines how the name of objects of this type will be printed in most places. This defaults to the name-for-display (generally the part's name as specified in its parent), followed by an index number if the part is an element of a sequence. TARGET [ from BASE-HTML-SHEET ] string Name of a browser frame or window to display this page. Default of NIL indicates to use the same window. TITLE string The title of the web page. Defaults to \"GendL Application -\" .followed by the strings-for-display. TRANSITORY-SLOTS [ from BASE-HTML-SHEET ] list of keyword symbols Messages corresponding to form fields which should not be retained against Updates to the model (e.g.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/2/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 11,
      "chunk_count": 18
    },
    "id": "b1807126976e390234e76149b2fa146e"
  },
  {
    "text": "ages corresponding to form fields which should not be retained against Updates to the model (e.g. calls to the update! function or hitting the Update button or link in the browser in development mode). Defaults to NIL (the empty list). VISIBLE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances Additional objects to display in Tatu tree. Typically this would be a subset of hidden-children. Defaults to NIL. Input Slots (optional, settable) ADDITIONAL-HEADER-CONTENT string of valid html Additional tag content to go into the page header, if you use the default main-sheet message and just fill in your own main-sheet-body, as is the intended use of the base-ajax-sheet primitive. ADDITIONAL-HEADER-JS-CONTENT valid javascript This javascript is added to the head of the page, just before the body. UI-SPECIFIC-LAYOUT-JS absolute uri in the browser . This is additional JavaScript that needs to be loaded in order to initiate the layout of a user interface. Defaults to nil.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/2/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 12,
      "chunk_count": 18
    },
    "id": "3d097184d3598efc7d46e7f19bc2088e"
  },
  {
    "text": "dy. UI-SPECIFIC-LAYOUT-JS absolute uri in the browser . This is additional JavaScript that needs to be loaded in order to initiate the layout of a user interface. Defaults to nil. USE-JQUERY? boolean Include jquery javascript libraries in the page header? Default nil. Computed Slots DEVELOPMENT-LINKS string of html Provides the developer control links for current sheet. GDL Functions CUSTOM-SNAP-RESTORE! void This is a hook function which applications can use to restore automatically from a saved snapshot file.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/2/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 13,
      "chunk_count": 18
    },
    "id": "d74da443eb4a5ce787be944831c9e6fb"
  },
  {
    "text": "Examples (in-package :gdl-user) (gwl:define-package :ajax-test (:export #:assembly)) (in-package :ajax-test) (define-object assembly (base-ajax-sheet) :objects ((inputs-section :type 'inputs-section) (outputs-section :type 'outputs-section :box (the viewport box) :color (the inputs-section color)) (viewport :type 'viewport :box-color (the inputs-section color)))) (define-lens (html-format assembly)() :output-functions ((main-sheet-body () (with-cl-who () (:table (:tr (:td (str (the inputs-section main-div))) (:td (str (the outputs-section main-div))) (:td (str (the viewport main-div))))))))) (define-object inputs-section (sheet-section) :computed-slots ((color (the menu-control value))) :objects ((menu-control :type 'menu-form-control :choice-list (list :red :green :blue) :default :red :onchange (the (gdl-ajax-call :form-controls (list (the-child))))) (little-grid :type 'grid-form-control :form-control-types '(text-form-control text-form-control button-form-control)",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/2/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 14,
      "chunk_count": 18
    },
    "id": "b38873d14f4d452365f39525f5ee4a3b"
  },
  {
    "text": "nchange (the (gdl-ajax-call :form-controls (list (the-child))))) (little-grid :type 'grid-form-control :form-control-types '(text-form-control text-form-control button-form-control) :form-control-attributes '((:ajax-submit-on-change? t) (:ajax-submit-on-change? t)) :form-control-inputs (mapcar #'(lambda(row) (list nil nil (list :onclick (the (gdl-ajax-call :function-key :do-something! :arguments (list (the-object row index))))))) (list-elements (the-child rows))) :default '((:color :number :press-me) (:red 42 \"OK\") (:blue 50 \"OK\")))) :computed-slots ((inner-html (with-cl-who-string () (str (the little-grid form-control-string)) (str (the menu-control html-string))))) :functions ((do-something! (index) (format t \"Processing row ~a...~%\" index)))) (define-object outputs-section (sheet-section) :input-slots (color box) :computed-slots ((inner-html (with-cl-who-string () (:p \"The box volume is: \" (fmt \"~a\" (the box volume))) (:p \"The box color is: \" ((:span :style (format nil \"color: ~a\"",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/2/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 15,
      "chunk_count": 18
    },
    "id": "9787d6426df3bbcd25b58ed64a75acd2"
  },
  {
    "text": "n) :input-slots (color box) :computed-slots ((inner-html (with-cl-who-string () (:p \"The box volume is: \" (fmt \"~a\" (the box volume))) (:p \"The box color is: \" ((:span :style (format nil \"color: ~a\" (the color))) (str (the color)))))))) (define-object viewport (base-ajax-graphics-sheet) :input-slots (box-color) :computed-slots ((length 300) (width 300) (display-list-objects (list (the box))) (projection-vector (getf *standard-views* (the view-selector value))) (inner-html (with-cl-who-string () (str (the view-selector html-string)) (str (the reset-zoom-button form-control-string)) (str (the raster-graphics))))) :objects ((box :type 'box :length 20 :width 25 :height 30 :display-controls (list :color (the box-color))))) (publish-gwl-app \"/ajax-test\" \"ajax-test:assembly\") Package Documentation Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/2/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 16,
      "chunk_count": 18
    },
    "id": "3fa143cac063b2791f2628d6c266ba7f"
  },
  {
    "text": "n Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/2/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 17,
      "chunk_count": 18
    },
    "id": "3342c17faa167f629fcd0f1583625312"
  },
  {
    "text": "GendL Application - SKELETON-FORM-CONTROL Package Documentation Object: SKELETON-FORM-CONTROL (The :GWL Package) Mixins: SKELETON-UI-ELEMENT , VANILLA-MIXIN Author Dave Cooper, Genworks Description Computes standard values for base-form-control and similar container objects, e.g. grid-form-control. Does not perform the actual bashing and computation of result value, should be mixed in to something which does this. Input Slots (optional) BASHEE [ from SKELETON-UI-ELEMENT ] gdl object Object to have its settable computed-slots and/or query-plist set from the fields on the form upon submission. Defaults to self. CLASS string You can use this to specify a user-defined class for the form-control. Defaults to nil, which means no class attribute will be generated. DOM-ID [ from SKELETON-UI-ELEMENT ] string This is the auto-computed dom-id which should be used for rendering this section.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/17/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 0,
      "chunk_count": 9
    },
    "id": "7bfc0138aea0690916fadaabdfbf897a"
  },
  {
    "text": "T ] string This is the auto-computed dom-id which should be used for rendering this section. If you use the main-div HTML string for rendering this object as a page section, then you do not have to generate the :div tag yourself - the main-div will be a string of HTML which is wrapped in the correct :div tag already. FIELD-NAME keyword symbol The name of this field. Computed from the object name within the tree. FORCE-VALIDATION-FOR [ from SKELETON-UI-ELEMENT ] list of gdl objects of type form-control The validation-function will be forced on these objects when a form is submitted, even if the object's html form-control does not happen to be included in the values submitted with the form. Defaults to nil. HIDDEN? [ from VANILLA-MIXIN* ] boolean Indicates whether the object should effectively be a hidden-object even if specified in :objects. Default is nil.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/17/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 1,
      "chunk_count": 9
    },
    "id": "216f27c1647b3a2edc897ae46e700f09"
  },
  {
    "text": "ly be a hidden-object even if specified in :objects. Default is nil. HTML-SECTIONS [ from SKELETON-UI-ELEMENT ] List of HTML sections to be scanned and possibly replaced in response to GDL Ajax calls. Override this slot at your own risk. The default is all sections who are most recently laid out on the respondent sheet, and this is set programmatically every time the sheet section's main-div is demanded. HTML-SECTIONS-VALID [ from SKELETON-UI-ELEMENT ] List of valid HTML sections to be scanned and possibly replaced in response to GDL Ajax calls. Override this slot at your own risk. The default is all sections who are most recently laid out on the respondent sheet, and this is set programmatically every time the sheet section's main-div is demanded. ID keyword symbol The ID attribute for this tag. Defaults to (the field-name).",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/17/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 2,
      "chunk_count": 9
    },
    "id": "92a42bb17d20295b1ee06762ecc390b4"
  },
  {
    "text": "is tag. Defaults to (the field-name). INNER-HTML [ from SKELETON-UI-ELEMENT ] string This can be used with (str .) [in cl-who] or (:princ .) [in htmlGen] to output this section of the page, without the wrapping :div tag [so if you use this, your code would be responsible for wrapping the :div tag with :id (the dom-id).] JS-TO-EVAL [ from SKELETON-UI-ELEMENT ] string of valid javascript This Javascript will be send with the Ajax response, and evaluated after the innerHTML for this section has been replaced. ORDERED-FORM-CONTROLS [ from SKELETON-UI-ELEMENT ] list of gdl objects, which should be of type 'base-form-control . [Note -- this slot is not really necessary for protecting out-of-bounds sequence references anymore, the form-control processor protects against this by itself now]. These objects are validated and bashed first, in the order given. If the cardinality of one form-control depends on another as in the example below, then you should list those dependent objects first.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/17/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 3,
      "chunk_count": 9
    },
    "id": "b5d321174dea75a138c89e19858bed94"
  },
  {
    "text": "objects are validated and bashed first, in the order given. If the cardinality of one form-control depends on another as in the example below, then you should list those dependent objects first. Default is nil. examples: ... :computed-slots ((number-of-nozzles (the number-of-nozzles-form value)) (ordered-form-controls (append (list-elements (the inner-flange-form)) (list (the number-of-nozzles-form))))) :objects ((inner-flange-form :type 'menu-form-control :choice-plist (list :hey \"hey\" :now \"now\") :default :hey :sequence (:size (the number-of-nozzles))) (number-of-nozzles-form :type 'text-form-control :prompt \"Number of Shell Nozzles Required: \" :domain :number :default 0) POSSIBLE-NILS [ from SKELETON-UI-ELEMENT ] list of keyword symbols Messages corresponding to form fields which could be missing from form submission (e.g. checkbox fields). Defaults to the names of any children or hidden-children of type menu-form-control or checkbox-form-control.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/17/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 4,
      "chunk_count": 9
    },
    "id": "8414a26ba2103e1b71cd267a188bc39b"
  },
  {
    "text": "be missing from form submission (e.g. checkbox fields). Defaults to the names of any children or hidden-children of type menu-form-control or checkbox-form-control. PRESET-ALL? [ from SKELETON-UI-ELEMENT ] boolean This switch determines whether all form-controls should be preset before the final setting, in order to allow any interdependencies to be detected for validation or detecting changed values. If this is specified as a non-nil value, then any nil values of (the preset?) on individual form controls will be ignored. If this is specified as nil, then (the preset?) of individual form-controls (default of these is also nil) will be respected. Default is nil. PRIMARY? boolean Set this to t if the form-control should always occur first in an outputted snapshot file. Defaults to nil. ROOT [ from VANILLA-MIXIN* ] gdl instance The root-level node in this object's ``tree'' (instance hierarchy).",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/17/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 5,
      "chunk_count": 9
    },
    "id": "bb0405841eab21b1888ec4e9c887abcf"
  },
  {
    "text": "[ from VANILLA-MIXIN* ] gdl instance The root-level node in this object's ``tree'' (instance hierarchy). SAFE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances All objects from the :objects specification, including elements of sequences as flat lists. Any children which throw errors come back as a plist with error information STRINGS-FOR-DISPLAY [ from VANILLA-MIXIN* ] string or list of strings Determines how the name of objects of this type will be printed in most places. This defaults to the name-for-display (generally the part's name as specified in its parent), followed by an index number if the part is an element of a sequence. VISIBLE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances Additional objects to display in Tatu tree. Typically this would be a subset of hidden-children. Defaults to NIL. Input Slots (optional, defaulting) RESPONDENT [ from SKELETON-UI-ELEMENT ] gdl object Object to respond to the form submission. Defaults to self.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/17/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 6,
      "chunk_count": 9
    },
    "id": "549e287f29f2da4f28f068202ff76fd6"
  },
  {
    "text": "ldren. Defaults to NIL. Input Slots (optional, defaulting) RESPONDENT [ from SKELETON-UI-ELEMENT ] gdl object Object to respond to the form submission. Defaults to self. Computed Slots FORM-CONTROL string of valid html This is the default HTML which can be included in a form in a web page to display this form control. Previously known as form-control-string. Default is the form-control-string. FORM-CONTROL-STRING string of valid html Also known as simply form-control. This is the default HTML which can be included in a form in a web page to display this form control. Default is the output from form-control method of the lens for html-format and the specific type of this object, returned as a string. FORM-CONTROLS [ from SKELETON-UI-ELEMENT ] list of gdl objects All the children or hidden-children of type base-form-control.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/17/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 7,
      "chunk_count": 9
    },
    "id": "c96199653523111f9c69a332fe7f43b7"
  },
  {
    "text": "hildren of type base-form-control. HTML-STRING string of valid html This is the default HTML which can be included in a form in a web page to display this form control, wrapped with labels and table cells. Package Documentation Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/17/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 8,
      "chunk_count": 9
    },
    "id": "f12a81c9649499e1203975d8d6dfa81a"
  },
  {
    "text": "GendL Application - BASE-HTML-SHEET Package Documentation Object: BASE-HTML-SHEET (The :GWL Package) Mixins: SHEET-SECTION , VANILLA-MIXIN Description This mixin allows a part to be displayed as a web page in GWL. The main output can be specified either in a write-html-sheet function in the object which mixes this in, or in a main-sheet output-function in an html-format view of the object. Input Slots (optional) AFTER-PRESENT! void This is an empty function by default, but can be overridden in the respondent of a form, to do some processing after the respondent's write-html-sheet function runs to present the object. AFTER-SET! void This is an empty function by default, but can be overridden in the requestor of a form, to do some processing after the requestor's form values are set into the specified bashee. BASHEE [ from SKELETON-UI-ELEMENT ] gdl object Object to have its settable computed-slots and/or query-plist set from the fields on the form upon submission. Defaults to self.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/5/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 0,
      "chunk_count": 16
    },
    "id": "d06686fd1e837e5b4dbbb78b15b9ff0e"
  },
  {
    "text": "specified bashee. BASHEE [ from SKELETON-UI-ELEMENT ] gdl object Object to have its settable computed-slots and/or query-plist set from the fields on the form upon submission. Defaults to self. BEFORE-PRESENT! void This is an empty function by default, but can be overridden in the respondent of a form, to do some processing before the respondent's write-html-sheet function runs to present the object. This can be useful especially for objects which are subclasses of higher-level mixins such as application-mixin and node-mixin , where you do not have direct access to the write-html-sheet function and typically only define the model-inputs function. It is not always reliable to do processing in the model-inputs function, since some slots which depend on your intended modifications may already have been evaluated by the time the model-inputs function runs.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/5/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 1,
      "chunk_count": 16
    },
    "id": "0dbcfd4c0c5570a39d7069685fad15e7"
  },
  {
    "text": "y have been evaluated by the time the model-inputs function runs. BEFORE-RESPONSE! void This is an empty function by default, but can be overridden in a user specialization of base-html-sheet, to do some processing before the header-plist is evaluated and before the HTTP response is actually initiated. BEFORE-SET! void This is an empty function by default, but can be overridden in the requestor of a form, to do some processing before the requestor's form values are set into the specified bashee. CHECK-SANITY? boolean Determines whether a a sanity check is done (with the check-sanity function) before presenting the response page if this page is a respondent. Default is NIL. DOM-ID [ from SKELETON-UI-ELEMENT ] string This is the auto-computed dom-id which should be used for rendering this section.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/5/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 2,
      "chunk_count": 16
    },
    "id": "45a625d2ec0a32de0bebd9504cd1d090"
  },
  {
    "text": "ction. If you use the main-div HTML string for rendering this object as a page section, then you do not have to generate the :div tag yourself - the main-div will be a string of HTML which is wrapped in the correct :div tag already. FORCE-VALIDATION-FOR [ from SKELETON-UI-ELEMENT ] list of gdl objects of type form-control The validation-function will be forced on these objects when a form is submitted, even if the object's html form-control does not happen to be included in the values submitted with the form. Defaults to nil. HIDDEN? [ from VANILLA-MIXIN* ] boolean Indicates whether the object should effectively be a hidden-object even if specified in :objects. Default is nil. HTML-SECTIONS [ from SKELETON-UI-ELEMENT ] List of HTML sections to be scanned and possibly replaced in response to GDL Ajax calls. Override this slot at your own risk.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/5/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 3,
      "chunk_count": 16
    },
    "id": "b34e516f748869e7615cc87d6254897d"
  },
  {
    "text": "o GDL Ajax calls. Override this slot at your own risk. The default is all sections who are most recently laid out on the respondent sheet, and this is set programmatically every time the sheet section's main-div is demanded. HTML-SECTIONS-VALID [ from SKELETON-UI-ELEMENT ] List of valid HTML sections to be scanned and possibly replaced in response to GDL Ajax calls. Override this slot at your own risk. The default is all sections who are most recently laid out on the respondent sheet, and this is set programmatically every time the sheet section's main-div is demanded.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/5/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 4,
      "chunk_count": 16
    },
    "id": "e7815f03dbdbf275fe721fe0ca9bedd1"
  },
  {
    "text": "INNER-HTML [ from SKELETON-UI-ELEMENT ] string This can be used with (str .) [in cl-who] or (:princ .) [in htmlGen] to output this section of the page, without the wrapping :div tag [so if you use this, your code would be responsible for wrapping the :div tag with :id (the dom-id).] JS-TO-EVAL [ from SKELETON-UI-ELEMENT ] string of valid javascript This Javascript will be send with the Ajax response, and evaluated after the innerHTML for this section has been replaced. ORDERED-FORM-CONTROLS [ from SKELETON-UI-ELEMENT ] list of gdl objects, which should be of type 'base-form-control . [Note -- this slot is not really necessary for protecting out-of-bounds sequence references anymore, the form-control processor protects against this by itself now]. These objects are validated and bashed first, in the order given. If the cardinality of one form-control depends on another as in the example below, then you should list those dependent objects first. Default is nil. examples: ...",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/5/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 5,
      "chunk_count": 16
    },
    "id": "72c42e9c54d860d6857fb4ba981e9d72"
  },
  {
    "text": "st, in the order given. If the cardinality of one form-control depends on another as in the example below, then you should list those dependent objects first. Default is nil. examples: ... :computed-slots ((number-of-nozzles (the number-of-nozzles-form value)) (ordered-form-controls (append (list-elements (the inner-flange-form)) (list (the number-of-nozzles-form))))) :objects ((inner-flange-form :type 'menu-form-control :choice-plist (list :hey \"hey\" :now \"now\") :default :hey :sequence (:size (the number-of-nozzles))) (number-of-nozzles-form :type 'text-form-control :prompt \"Number of Shell Nozzles Required: \" :domain :number :default 0) POSSIBLE-NILS [ from SKELETON-UI-ELEMENT ] list of keyword symbols Messages corresponding to form fields which could be missing from form submission (e.g. checkbox fields). Defaults to the names of any children or hidden-children of type menu-form-control or checkbox-form-control.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/5/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 6,
      "chunk_count": 16
    },
    "id": "2b73af9320f9fb1954a8bea725bef5f4"
  },
  {
    "text": ". checkbox fields). Defaults to the names of any children or hidden-children of type menu-form-control or checkbox-form-control. PRESET-ALL? [ from SKELETON-UI-ELEMENT ] boolean This switch determines whether all form-controls should be preset before the final setting, in order to allow any interdependencies to be detected for validation or detecting changed values. If this is specified as a non-nil value, then any nil values of (the preset?) on individual form controls will be ignored. If this is specified as nil, then (the preset?) of individual form-controls (default of these is also nil) will be respected. Default is nil. PROCESS-COOKIES! void This is an empty function by default, but can be overridden in a user specialization of base-html-sheet, to do some processing before the header-plist is evaluated and before the HTTP response is actually initiated, but after the cookies-received have been set.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/5/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 7,
      "chunk_count": 16
    },
    "id": "b251ae2dec8377241dcb5bf130df13a1"
  },
  {
    "text": "-plist is evaluated and before the HTTP response is actually initiated, but after the cookies-received have been set. RETURN-OBJECT gdl object Default object to which control will return with the write-back-link method ROOT [ from VANILLA-MIXIN* ] gdl instance The root-level node in this object's ``tree'' (instance hierarchy). SAFE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances All objects from the :objects specification, including elements of sequences as flat lists. Any children which throw errors come back as a plist with error information STRINGS-FOR-DISPLAY [ from VANILLA-MIXIN* ] string or list of strings Determines how the name of objects of this type will be printed in most places. This defaults to the name-for-display (generally the part's name as specified in its parent), followed by an index number if the part is an element of a sequence. TARGET string Name of a browser frame or window to display this page. Default of NIL indicates to use the same window.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/5/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 8,
      "chunk_count": 16
    },
    "id": "84a97d37f2f33f32319e43ca18aa464c"
  },
  {
    "text": "followed by an index number if the part is an element of a sequence. TARGET string Name of a browser frame or window to display this page. Default of NIL indicates to use the same window. TRANSITORY-SLOTS list of keyword symbols Messages corresponding to form fields which should not be retained against Updates to the model (e.g. calls to the update! function or hitting the Update button or link in the browser in development mode). Defaults to NIL (the empty list). VISIBLE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances Additional objects to display in Tatu tree. Typically this would be a subset of hidden-children. Defaults to NIL. Input Slots (optional, defaulting) RESPONDENT [ from SKELETON-UI-ELEMENT ] gdl object Object to respond to the form submission. Defaults to self. Computed Slots (settable) QUERY-PLIST plist Contains submitted form field names and values for which no corresponding settable computed-slots exist.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/5/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 9,
      "chunk_count": 16
    },
    "id": "59d767964aca5e600eb17bd4c7e45fba"
  },
  {
    "text": "d Slots (settable) QUERY-PLIST plist Contains submitted form field names and values for which no corresponding settable computed-slots exist. Where corresponding settable computed-slots exist, their values are set from the submitted form fields automatically. Computed Slots HEADER-PLIST plist Extra http headers to be published with the URI for this page. URL string The canonical web address in the current session which points at this page. Also see `full-url`. Published on demand. GDL Functions CHECK-SANITY nil or error object This function checks the \"sanity\" of this object. By default, it checks that following the object's root-path from the root resolves to this object. If the act of following the root-path throws an error, this error will be returned. Otherwise, if the result of following the root-path does not match the identity of this object, an error is thrown indicating this. Otherwise, NIL is returned and no error is thrown.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/5/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 10,
      "chunk_count": 16
    },
    "id": "2854c97e3bd1ed44a98a61e9ec4ada63"
  },
  {
    "text": "ing the root-path does not match the identity of this object, an error is thrown indicating this. Otherwise, NIL is returned and no error is thrown. You can override this function to do what you wish. It should return NIL if the object is found to be \"sane\" and an throw an error otherwise. If check-sanity? is set to T in this object, this function will be invoked automatically within an ignore-errors by the function handling the GWL \"/answer\" form action URI when this object is a respondent, before the main-sheet is presented. RESTORE-FORM-CONTROLS! void Calls restore-defaults! on all the form-controls in this sheet. SANITY-ERROR void Emits a page explaining the sanity error. This will be invoked instead of the write-main-sheet if check-sanity? is set to T and the check-sanity throws an error. You may override this function to do what you wish. By default a minimal error message is displayed and a link to the root object is presented.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/5/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 11,
      "chunk_count": 16
    },
    "id": "db65c52e16a19c8343746d000e96ace8"
  },
  {
    "text": "ror. You may override this function to do what you wish. By default a minimal error message is displayed and a link to the root object is presented. arguments: error an error object, presumably from the check-sanity function SELECT-CHOICES void Writes an HTML Select field with Options. keyword arguments: size Integer , Default Value: 1 determines size of selection list. Default of 1 is a pulldown menu name Keyword symbol or string , Default Value: NIL Determines the name of the field, which should probably match a settable computed-slot keys List of strings, numbers, or symbols , Default Value: NIL Values, the selected one of which will be returned as the value of the field values List of strings , Default Value: KEYS Keys to display in the selection-list tabindex Integer , Default Value: NIL If given, this will generate the tabindex tag for this HTML input field WRITE-CHILD-LINKS void Creates a default unordered list with links to each child part of self.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/5/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 12,
      "chunk_count": 16
    },
    "id": "b07702c3b7825bd8894cc1197d4e49ae"
  },
  {
    "text": "NIL If given, this will generate the tabindex tag for this HTML input field WRITE-CHILD-LINKS void Creates a default unordered list with links to each child part of self. The text of the links will come from each child's strings-for-display. WRITE-DEVELOPMENT-LINKS void Writes links for access to the standard developer views of the object, currently consisting of an update (Refresh!) link, a Break link, and a ta2 link. WRITE-HTML-SHEET void This GDL function should be redefined to generate the HTML page corresponding to this object. It can be specified here, or as the main-sheet output-function in an html-format lens for this object's type. This write-html-sheet function, if defined, will override any main-sheet function defined in the lens. Typically a write-html-sheet function would look as follows: example: (write-html-sheet () (html (:html (:head (:title (:princ (the :page-title)))) (:body ;;; fill in your body here )))) WRITE-SELF-LINK void Emits a hyperlink pointing to self.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/5/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 13,
      "chunk_count": 16
    },
    "id": "69c7d361a2a6008d6645b6c28361d91e"
  },
  {
    "text": "as follows: example: (write-html-sheet () (html (:html (:head (:title (:princ (the :page-title)))) (:body ;;; fill in your body here )))) WRITE-SELF-LINK void Emits a hyperlink pointing to self. Note that if you need extra customization on the display-string (e.g. to include an image tag or other arbitrary markup), use with-output-to-string in conjunction with the html-stream macro. keyword arguments: display-string String , Default Value: (THE :STRINGS-FOR-DISPLAY) String to be displayed display-color Keyword symbol or HTML color string , Default Value: NIL Determines the color of the displayed link text.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/5/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 14,
      "chunk_count": 16
    },
    "id": "26e8d0cd3e5001864cafd50c98449a3c"
  },
  {
    "text": "Default of NIL indicates web browser default (usually blue) target String , Default Value: (THE :TARGET) Names a frame or window to open the link when clicked class String , Default Value: NIL Names a stylesheet class id String , Default Value: NIL Names a stylesheet id on-mouse-over String , Default Value: NIL Javascript code to run on mouse over on-mouse-out String , Default Value: NIL Javascript code to run on mouse out WRITE-STANDARD-FOOTER void Writes some standard footer information. Defaults to writing Genworks and Franz copyright and product links. Note that VAR agreements often require that you include a ``powered by'' link to the vendor on public web pages. Package Documentation Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/5/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 15,
      "chunk_count": 16
    },
    "id": "4bb2a1243e3b4df534d3aa52facd5605"
  },
  {
    "text": "GendL Application - SKELETON-UI-ELEMENT Package Documentation Object: SKELETON-UI-ELEMENT (The :GWL Package) Mixins: VANILLA-MIXIN Description Basic mixin to support constructing a gdl ajax call relative to this node. Note that in order for a node to represent a section of a web page, you should use sheet-section (which mixes this in), rather than this raw primitive. This is a mixin into base-html-sheet, and some of the previous base-html-sheet functionality has been factored out into this mixin. Of special note in this object is the function gdl-ajax-call which generates Javascript appropriate for attaching with a UI event, e.g. onclick, onchange, onblur, etc. In this Javascript you can specify a GDL function (on this object, self) to be run, and/or specify a list of form-control objects which are rendered on the current page, whose values should be submitted and processed (\"bashed\") into the server.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/18/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 0,
      "chunk_count": 10
    },
    "id": "527a30ae4d18c632922e5ee791e1b55b"
  },
  {
    "text": "which are rendered on the current page, whose values should be submitted and processed (\"bashed\") into the server. Input Slots (optional) BASHEE gdl object Object to have its settable computed-slots and/or query-plist set from the fields on the form upon submission. Defaults to self. DOM-ID string This is the auto-computed dom-id which should be used for rendering this section. If you use the main-div HTML string for rendering this object as a page section, then you do not have to generate the :div tag yourself - the main-div will be a string of HTML which is wrapped in the correct :div tag already. FORCE-VALIDATION-FOR list of gdl objects of type form-control The validation-function will be forced on these objects when a form is submitted, even if the object's html form-control does not happen to be included in the values submitted with the form. Defaults to nil.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/18/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 1,
      "chunk_count": 10
    },
    "id": "37618cf5335cbc95883f812522279106"
  },
  {
    "text": "appen to be included in the values submitted with the form. Defaults to nil. HIDDEN? [ from VANILLA-MIXIN* ] boolean Indicates whether the object should effectively be a hidden-object even if specified in :objects. Default is nil. HTML-SECTIONS List of HTML sections to be scanned and possibly replaced in response to GDL Ajax calls. Override this slot at your own risk. The default is all sections who are most recently laid out on the respondent sheet, and this is set programmatically every time the sheet section's main-div is demanded. HTML-SECTIONS-VALID List of valid HTML sections to be scanned and possibly replaced in response to GDL Ajax calls. Override this slot at your own risk. The default is all sections who are most recently laid out on the respondent sheet, and this is set programmatically every time the sheet section's main-div is demanded.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/18/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 2,
      "chunk_count": 10
    },
    "id": "afbe37722cd78b94650efa4fe60ca0b0"
  },
  {
    "text": "matically every time the sheet section's main-div is demanded. INNER-HTML string This can be used with (str .) [in cl-who] or (:princ .) [in htmlGen] to output this section of the page, without the wrapping :div tag [so if you use this, your code would be responsible for wrapping the :div tag with :id (the dom-id).] JS-TO-EVAL string of valid javascript This Javascript will be send with the Ajax response, and evaluated after the innerHTML for this section has been replaced. ORDERED-FORM-CONTROLS list of gdl objects, which should be of type 'base-form-control . [Note -- this slot is not really necessary for protecting out-of-bounds sequence references anymore, the form-control processor protects against this by itself now]. These objects are validated and bashed first, in the order given. If the cardinality of one form-control depends on another as in the example below, then you should list those dependent objects first. Default is nil. examples: ...",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/18/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 3,
      "chunk_count": 10
    },
    "id": "a305ef7be0387ca2dfe03836058dbc87"
  },
  {
    "text": "f the cardinality of one form-control depends on another as in the example below, then you should list those dependent objects first. Default is nil. examples: ... :computed-slots ((number-of-nozzles (the number-of-nozzles-form value)) (ordered-form-controls (append (list-elements (the inner-flange-form)) (list (the number-of-nozzles-form))))) :objects ((inner-flange-form :type 'menu-form-control :choice-plist (list :hey \"hey\" :now \"now\") :default :hey :sequence (:size (the number-of-nozzles))) (number-of-nozzles-form :type 'text-form-control :prompt \"Number of Shell Nozzles Required: \" :domain :number :default 0) POSSIBLE-NILS list of keyword symbols Messages corresponding to form fields which could be missing from form submission (e.g. checkbox fields). Defaults to the names of any children or hidden-children of type menu-form-control or checkbox-form-control.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/18/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 4,
      "chunk_count": 10
    },
    "id": "be6dfbb186f8d71841b4c990b13720a6"
  },
  {
    "text": "ren or hidden-children of type menu-form-control or checkbox-form-control. PRESET-ALL? boolean This switch determines whether all form-controls should be preset before the final setting, in order to allow any interdependencies to be detected for validation or detecting changed values. If this is specified as a non-nil value, then any nil values of (the preset?) on individual form controls will be ignored. If this is specified as nil, then (the preset?) of individual form-controls (default of these is also nil) will be respected. Default is nil. ROOT [ from VANILLA-MIXIN* ] gdl instance The root-level node in this object's ``tree'' (instance hierarchy). SAFE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances All objects from the :objects specification, including elements of sequences as flat lists.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/18/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 5,
      "chunk_count": 10
    },
    "id": "bc632e4b42bd5be364a86f91096c8229"
  },
  {
    "text": "flat lists. Any children which throw errors come back as a plist with error information STRINGS-FOR-DISPLAY [ from VANILLA-MIXIN* ] string or list of strings Determines how the name of objects of this type will be printed in most places. This defaults to the name-for-display (generally the part's name as specified in its parent), followed by an index number if the part is an element of a sequence. VISIBLE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances Additional objects to display in Tatu tree. Typically this would be a subset of hidden-children. Defaults to NIL. Input Slots (optional, defaulting) RESPONDENT gdl object Object to respond to the form submission. Defaults to self. Computed Slots FAILED-FORM-CONTROLS list of gdl objects All the form-controls which do not pass validation. FORM-CONTROLS list of gdl objects All the children or hidden-children of type base-form-control.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/18/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 6,
      "chunk_count": 10
    },
    "id": "ec0723c7da452d1c1266a3dd22b8ae3a"
  },
  {
    "text": "on. FORM-CONTROLS list of gdl objects All the children or hidden-children of type base-form-control. MAIN-DIV% string This should be used with (str .) [in cl-who] or (:princ .) [in htmlGen] to output this section of the page, including the wrapping :div tag. GDL Functions GDL-AJAX-CALL string . This function returns a string of Javascript, appropriate to use for events such as :onclick, :onchange, etc, which will invoke an Ajax request to the server, which will respond by replacing the innerHTML of affected :div's, and running the Javascript interpreter to evaluate (the js-to-eval), if any.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/18/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 7,
      "chunk_count": 10
    },
    "id": "c641469a6f99be386c2d2a8e639073d9"
  },
  {
    "text": "examples: \" FLAG -- Fill in!!! \" keyword arguments: bashee GDL Object , Default Value: (THE BASHEE) This object will have the function-key called on it, if any respondent GDL Object , Default Value: (THE RESPONDENT) This must be the object which represents the actual web page being used function-key Keyword symbol , Default Value: NIL This keyword symbol must name a GDL function or method which is to be invoked with the Ajax call arguments List of values , Default Value: NIL This is the argument list on which the function named by function-key will be applied form-controls List of GDL objects of type base-form-control , Default Value: NIL Each of the objects in this list will have its current value (as entered by the user) scraped from the web page and its value in the model bashed to reflect what has been entered on the page , Default Value: NIL Examples FLAG -- Fill in!!! Package Documentation Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/18/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 8,
      "chunk_count": 10
    },
    "id": "05172635da0e55484c6967f8978bebf3"
  },
  {
    "text": "lect what has been entered on the page , Default Value: NIL Examples FLAG -- Fill in!!! Package Documentation Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/18/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 9,
      "chunk_count": 10
    },
    "id": "0ca71ca6c7bccedb84b699ffb36ba4dc"
  },
  {
    "text": "GendL Application - MENU-FORM-CONTROL Package Documentation Object: MENU-FORM-CONTROL (The :GWL Package) Mixins: BASE-FORM-CONTROL , VANILLA-MIXIN Author Dave Cooper, Genworks Description This represents a SELECT form control tag wrapping some OPTION tags. OPTIONGROUP is not yet implemented, but will be. Input Slots (optional) ACCEPT [ from BASE-FORM-CONTROL ] string or nil Maps to HTML form control attribute of the same name. Default is nil. ACCESSKEY [ from BASE-FORM-CONTROL ] string or nil Maps to HTML form control attribute of the same name. Default is nil. AJAX-SUBMIT-ON-CHANGE? [ from BASE-FORM-CONTROL ] boolean If set to non-nil, this field's value will be sent to server upon change. Default is nil. AJAX-SUBMIT-ON-ENTER? [ from BASE-FORM-CONTROL ] boolean If set to non-nil, this field's value will be sent to server upon enter. Default is nil. ALIGN [ from BASE-FORM-CONTROL ] string or nil Maps to HTML form control attribute of the same name. Default is nil.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/12/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 0,
      "chunk_count": 19
    },
    "id": "1548bfd7b5c844e642a9da072f878073"
  },
  {
    "text": "ld's value will be sent to server upon enter. Default is nil. ALIGN [ from BASE-FORM-CONTROL ] string or nil Maps to HTML form control attribute of the same name. Default is nil. ALLOW-INVALID-TYPE? [ from BASE-FORM-CONTROL ] boolean If non-nil, then values which fail the type test will still be allowed to be the value. Default is nil. ALLOW-INVALID? [ from BASE-FORM-CONTROL ] boolean If non-nil, then values which fail the type or validation test will still be allowed to be the value. Default is t. ALLOW-NIL? [ from BASE-FORM-CONTROL ] boolean Regardless of :domain, if this is non-nil, nil values will be accepted. Defaults to t if (the default) is nil, otherwise defaults to nil. ALT [ from BASE-FORM-CONTROL ] string or nil Maps to HTML form control attribute of the same name. Default is nil.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/12/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 1,
      "chunk_count": 19
    },
    "id": "12d9e8cc95ea5fc18931e99daf243ba0"
  },
  {
    "text": "l. APPEND-ERROR-STRING? [ from BASE-FORM-CONTROL ] boolean Determines whether a default error string is appended to string ouput-function for html-format (and therefore html-string computed-slot as well). Defaults to t. BASHEE [ from SKELETON-UI-ELEMENT ] gdl object Object to have its settable computed-slots and/or query-plist set from the fields on the form upon submission. Defaults to self. CHOICE-LIST list Display values, also used as return values, for selection list. Specify this or choice-plist, not both. CHOICE-PLIST plist Keywords and display values for the selection list. Specify this or choice-list, not both. CHOICE-STYLES plist Keywords and CSS style for display of each choice. The keys should correspond to the keys in choice-plist, or the items in choice-list if no choice-plist is given. CLASS [ from SKELETON-FORM-CONTROL ] string You can use this to specify a user-defined class for the form-control. Defaults to nil, which means no class attribute will be generated.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/12/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 2,
      "chunk_count": 19
    },
    "id": "3d90d52cdf62fd122799a8c3a9ddd874"
  },
  {
    "text": "is given. CLASS [ from SKELETON-FORM-CONTROL ] string You can use this to specify a user-defined class for the form-control. Defaults to nil, which means no class attribute will be generated. DEFAULT [ from BASE-FORM-CONTROL ] lisp value of a type compatible with (the domain) This is the initial default value for the control. This must be specified by user code, or an error will result. DISABLED-KEYS list of keyword symbols Each of these should match a key in the choice-plist, and where there is a match, that key will be disabled in the rendering. DISABLED? [ from BASE-FORM-CONTROL ] boolean Maps to HTML form control attribute of the same name. Default is nil. DOM-ID [ from SKELETON-UI-ELEMENT ] string This is the auto-computed dom-id which should be used for rendering this section.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/12/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 3,
      "chunk_count": 19
    },
    "id": "a197b95ad5068efbe78be63f660e4126"
  },
  {
    "text": "If you use the main-div HTML string for rendering this object as a page section, then you do not have to generate the :div tag yourself - the main-div will be a string of HTML which is wrapped in the correct :div tag already. DOMAIN [ from BASE-FORM-CONTROL ] keyword symbol, one of :number, :keyword, :list-of-strings, :list-of-anything, or :string . This specifies the expected and acceptable type for the submitted form value. If possible, the submitted value will be coerced into the specified type. The default is based upon the Lisp type of (the default) provided as input to this object. If the default is nil, the domain will default to :string FIELD-NAME [ from SKELETON-FORM-CONTROL ] keyword symbol The name of this field. Computed from the object name within the tree.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/12/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 4,
      "chunk_count": 19
    },
    "id": "0510e22d1a567c8437a5a8a8f38df5c7"
  },
  {
    "text": "FORCE-VALIDATION-FOR [ from SKELETON-UI-ELEMENT ] list of gdl objects of type form-control The validation-function will be forced on these objects when a form is submitted, even if the object's html form-control does not happen to be included in the values submitted with the form. Defaults to nil. HIDDEN? [ from VANILLA-MIXIN* ] boolean Indicates whether the object should effectively be a hidden-object even if specified in :objects. Default is nil. HTML-SECTIONS [ from SKELETON-UI-ELEMENT ] List of HTML sections to be scanned and possibly replaced in response to GDL Ajax calls. Override this slot at your own risk. The default is all sections who are most recently laid out on the respondent sheet, and this is set programmatically every time the sheet section's main-div is demanded. HTML-SECTIONS-VALID [ from SKELETON-UI-ELEMENT ] List of valid HTML sections to be scanned and possibly replaced in response to GDL Ajax calls. Override this slot at your own risk.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/12/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 5,
      "chunk_count": 19
    },
    "id": "356789c0c24f5f2fc03de26b2669605e"
  },
  {
    "text": "CTIONS-VALID [ from SKELETON-UI-ELEMENT ] List of valid HTML sections to be scanned and possibly replaced in response to GDL Ajax calls. Override this slot at your own risk. The default is all sections who are most recently laid out on the respondent sheet, and this is set programmatically every time the sheet section's main-div is demanded. ID [ from SKELETON-FORM-CONTROL ] keyword symbol The ID attribute for this tag. Defaults to (the field-name). INNER-HTML [ from SKELETON-UI-ELEMENT ] string This can be used with (str .) [in cl-who] or (:princ .) [in htmlGen] to output this section of the page, without the wrapping :div tag [so if you use this, your code would be responsible for wrapping the :div tag with :id (the dom-id).] ISMAP? [ from BASE-FORM-CONTROL ] boolean Maps to HTML form control attribute of the same name. Default is nil.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/12/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 6,
      "chunk_count": 19
    },
    "id": "5ee5086278f063721f9acfde0e7807f9"
  },
  {
    "text": "ntrol attribute of the same name. Default is nil. JS-TO-EVAL [ from SKELETON-UI-ELEMENT ] string of valid javascript This Javascript will be send with the Ajax response, and evaluated after the innerHTML for this section has been replaced. LABEL-POSITION [ from BASE-FORM-CONTROL ] keyword symbol or nil Specifies where the label tag goes, if any. Can be :table-td (label goes in a td before the form control), :table-td-append (label goes in a td after the form control), prepend: (label tag wraps around form control and label text comes before form control), append: (label tag wraps around form control and label text comes after form control), table-with-class: (like :table-td, but adds a class \"form-control\" to the table), or as-div: (puts label and control inside a div of class \"form-control\"). Default is :as-div LANG [ from BASE-FORM-CONTROL ] string or nil Maps to HTML form control attribute of the same name. Default is nil.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/12/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 7,
      "chunk_count": 19
    },
    "id": "b911953b4e6c5f6ab8ff8a2abb2e2192"
  },
  {
    "text": "l\"). Default is :as-div LANG [ from BASE-FORM-CONTROL ] string or nil Maps to HTML form control attribute of the same name. Default is nil. MAXLENGTH [ from BASE-FORM-CONTROL ] number or nil Maps to HTML form control attribute of the same name. Default is nil. MULTIPLE? boolean Are multiple selections allowed? Default is nil. NULLIFY-EMPTY-STRING? [ from BASE-FORM-CONTROL ] boolean Regardless of :domain, if this is non-nil, empty strings will convert to nil. Defaults to (the allow-nil?) ONBLUR [ from BASE-FORM-CONTROL ] string or nil Maps to HTML form control attribute of the same name. Default is nil. ONCHANGE [ from BASE-FORM-CONTROL ] string or nil Maps to HTML form control attribute of the same name. Default is nil, unless ajax-submit-on-change? is non-nil, in which case it calls ajax to set current form value. ONCLICK [ from BASE-FORM-CONTROL ] string or nil Maps to HTML form control attribute of the same name. Default is nil.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/12/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 8,
      "chunk_count": 19
    },
    "id": "3547ac3bd79ff1ee923b803f3e585412"
  },
  {
    "text": "to set current form value. ONCLICK [ from BASE-FORM-CONTROL ] string or nil Maps to HTML form control attribute of the same name. Default is nil. ONDBLCLICK [ from BASE-FORM-CONTROL ] string or nil Maps to HTML form control attribute of the same name. Default is nil. ONENTER [ from BASE-FORM-CONTROL ] string or nil Maps to HTML form control attribute of the same name. Default is nil, unless ajax-submit-on-enter? is non-nil, in which case it calls ajax to set current form value. ONFOCUS [ from BASE-FORM-CONTROL ] string or nil Maps to HTML form control attribute of the same name. Default is nil. ONKEYDOWN [ from BASE-FORM-CONTROL ] string or nil Maps to HTML form control attribute of the same name. Default is nil. ONKEYPRESS [ from BASE-FORM-CONTROL ] string or nil Maps to HTML form control attribute of the same name. Default is nil. ONKEYUP [ from BASE-FORM-CONTROL ] string or nil Maps to HTML form control attribute of the same name. Default is nil.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/12/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 9,
      "chunk_count": 19
    },
    "id": "ac5e8f9ae200d08f3dcf511a8ab3aad7"
  },
  {
    "text": "attribute of the same name. Default is nil. ONKEYUP [ from BASE-FORM-CONTROL ] string or nil Maps to HTML form control attribute of the same name. Default is nil. ONMOUSEDOWN [ from BASE-FORM-CONTROL ] string or nil Maps to HTML form control attribute of the same name. Default is nil. ONMOUSEMOVE [ from BASE-FORM-CONTROL ] string or nil Maps to HTML form control attribute of the same name. Default is nil. ONMOUSEOUT [ from BASE-FORM-CONTROL ] string or nil Maps to HTML form control attribute of the same name. Default is nil. ONMOUSEOVER [ from BASE-FORM-CONTROL ] string or nil Maps to HTML form control attribute of the same name. Default is nil. ONMOUSEUP [ from BASE-FORM-CONTROL ] string or nil Maps to HTML form control attribute of the same name. Default is nil. ONSELECT [ from BASE-FORM-CONTROL ] string or nil Maps to HTML form control attribute of the same name. Default is nil.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/12/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 10,
      "chunk_count": 19
    },
    "id": "bc904e29bf65fc55dd74ed7cfb53dfd7"
  },
  {
    "text": "M-CONTROL ] string or nil Maps to HTML form control attribute of the same name. Default is nil. ORDERED-FORM-CONTROLS [ from SKELETON-UI-ELEMENT ] list of gdl objects, which should be of type 'base-form-control . [Note -- this slot is not really necessary for protecting out-of-bounds sequence references anymore, the form-control processor protects against this by itself now]. These objects are validated and bashed first, in the order given. If the cardinality of one form-control depends on another as in the example below, then you should list those dependent objects first. Default is nil. examples: ...",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/12/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 11,
      "chunk_count": 19
    },
    "id": "43b2fce419c8c084f13f35b556b63e7f"
  },
  {
    "text": ":computed-slots ((number-of-nozzles (the number-of-nozzles-form value)) (ordered-form-controls (append (list-elements (the inner-flange-form)) (list (the number-of-nozzles-form))))) :objects ((inner-flange-form :type 'menu-form-control :choice-plist (list :hey \"hey\" :now \"now\") :default :hey :sequence (:size (the number-of-nozzles))) (number-of-nozzles-form :type 'text-form-control :prompt \"Number of Shell Nozzles Required: \" :domain :number :default 0) PLACEHOLDER [ from BASE-FORM-CONTROL ] string Text to place in the field by default, overwritten as soon as the field is selected. Works only in HTML5. Default is nil. POSSIBLE-NIL? boolean Indicates whether this should be included in possible-nils. Defaults to (the multiple?) POSSIBLE-NILS [ from SKELETON-UI-ELEMENT ] list of keyword symbols Messages corresponding to form fields which could be missing from form submission (e.g. checkbox fields).",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/12/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 12,
      "chunk_count": 19
    },
    "id": "ec9592ce5ceaed1811c314e0055d1390"
  },
  {
    "text": "ols Messages corresponding to form fields which could be missing from form submission (e.g. checkbox fields). Defaults to the names of any children or hidden-children of type menu-form-control or checkbox-form-control. PRESET-ALL? [ from SKELETON-UI-ELEMENT ] boolean This switch determines whether all form-controls should be preset before the final setting, in order to allow any interdependencies to be detected for validation or detecting changed values. If this is specified as a non-nil value, then any nil values of (the preset?) on individual form controls will be ignored. If this is specified as nil, then (the preset?) of individual form-controls (default of these is also nil) will be respected. Default is nil. PRESET? [ from BASE-FORM-CONTROL ] boolean This switch determines whether this form-control should be preset before the final setting, in order to allow any interdependencies to be detected for validation or detecting changed values. Default is nil.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/12/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 13,
      "chunk_count": 19
    },
    "id": "f462eaf98335c360c2f4469c27ae4567"
  },
  {
    "text": "is form-control should be preset before the final setting, in order to allow any interdependencies to be detected for validation or detecting changed values. Default is nil. PRIMARY? [ from SKELETON-FORM-CONTROL ] boolean Set this to t if the form-control should always occur first in an outputted snapshot file. Defaults to nil. PROMPT [ from BASE-FORM-CONTROL ] string The prompt used in the label. READONLY? [ from BASE-FORM-CONTROL ] boolean Maps to HTML form control attribute of the same name. Default is nil. ROOT [ from VANILLA-MIXIN* ] gdl instance The root-level node in this object's ``tree'' (instance hierarchy). SAFE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances All objects from the :objects specification, including elements of sequences as flat lists. Any children which throw errors come back as a plist with error information SIZE number How many choices to display SRC [ from BASE-FORM-CONTROL ] string or nil Maps to HTML form control attribute of the same name.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/12/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 14,
      "chunk_count": 19
    },
    "id": "d879185a821f936eaf821538a3e09a42"
  },
  {
    "text": "ow errors come back as a plist with error information SIZE number How many choices to display SRC [ from BASE-FORM-CONTROL ] string or nil Maps to HTML form control attribute of the same name. Default is nil. STRINGS-FOR-DISPLAY [ from VANILLA-MIXIN* ] string or list of strings Determines how the name of objects of this type will be printed in most places. This defaults to the name-for-display (generally the part's name as specified in its parent), followed by an index number if the part is an element of a sequence. STYLE [ from BASE-FORM-CONTROL ] string or nil Maps to HTML form control attribute of the same name. Default is nil. TABINDEX [ from BASE-FORM-CONTROL ] integer or nil Maps to HTML form control attribute of the same name. Default is nil. TEST predicate function of two arguments Defaults based on type of first in choice-plist: eql for keywords, string-equal for strings, and equalp otherwise.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/12/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 15,
      "chunk_count": 19
    },
    "id": "f7caa13d14ff14676e4a8512b9f57964"
  },
  {
    "text": "Defaults based on type of first in choice-plist: eql for keywords, string-equal for strings, and equalp otherwise. TITLE [ from BASE-FORM-CONTROL ] string or nil Maps to HTML form control attribute of the same name. Default is nil. USEMAP [ from BASE-FORM-CONTROL ] string or nil Maps to HTML form control attribute of the same name. Default is nil. VALIDATION-FUNCTION [ from BASE-FORM-CONTROL ] function of one argument The argument will be the submitted form value converted to the proper type. The return value from this function can be nil, any non-nil value, or a plist with keys :validated-value and :error. The following behavior applies: If the function returns nil, error is set to :unspecified-validation-fail.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/12/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 16,
      "chunk_count": 19
    },
    "id": "e4192da714bf7365937154943842dc25"
  },
  {
    "text": "If the function returns a plist with keys :validated-value and :error, and if :error is non-nil, it means the value is not acceptable, the form-controls error message is set to this error (usually a keyword symbol), and the error string will be appended to the html-string by default. If the function returns any other value, then the properly typed submitted form value is considered valid and is used. In the case of an error, the form-control's failed-value message is set to the properly typed submitted form value. If allow-invalid? is non-nil, then the form-control's value message is also set to this value (i.e. the invalid value is still accepted, even though a non-nil error is present). Default is (list :validated-value value :error nil). VISIBLE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances Additional objects to display in Tatu tree. Typically this would be a subset of hidden-children. Defaults to NIL.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/12/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 17,
      "chunk_count": 19
    },
    "id": "71d9b94d174280a0fc55ad209f7e1ed6"
  },
  {
    "text": "gdl instances Additional objects to display in Tatu tree. Typically this would be a subset of hidden-children. Defaults to NIL. Input Slots (optional, defaulting) RESPONDENT [ from SKELETON-UI-ELEMENT ] gdl object Object to respond to the form submission. Defaults to self. Examples ... :objects ((menu-1 :type 'menu-form-control :choice-plist (list 1 \"one\" 2 \"two\"))) ... Please see base-form-control for a broader example which uses more form-control primitives together. Package Documentation Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/12/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 18,
      "chunk_count": 19
    },
    "id": "4b5605a168bfc0bb0c1e0d20179dd463"
  },
  {
    "text": "GendL Application - RADIO-FORM-CONTROL Package Documentation Object: RADIO-FORM-CONTROL (The :GWL Package) Mixins: MENU-FORM-CONTROL , VANILLA-MIXIN Description Produces a standard radio-button form control. Input Slots (optional) ACCEPT [ from BASE-FORM-CONTROL ] string or nil Maps to HTML form control attribute of the same name. Default is nil. ACCESSKEY [ from BASE-FORM-CONTROL ] string or nil Maps to HTML form control attribute of the same name. Default is nil. AJAX-SUBMIT-ON-CHANGE? [ from BASE-FORM-CONTROL ] boolean If set to non-nil, this field's value will be sent to server upon change. Default is nil. AJAX-SUBMIT-ON-ENTER? [ from BASE-FORM-CONTROL ] boolean If set to non-nil, this field's value will be sent to server upon enter. Default is nil. ALIGN [ from BASE-FORM-CONTROL ] string or nil Maps to HTML form control attribute of the same name. Default is nil.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/14/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 0,
      "chunk_count": 20
    },
    "id": "a4f7f554a643f33ba5663d1c90529f7b"
  },
  {
    "text": "ing or nil Maps to HTML form control attribute of the same name. Default is nil. ALLOW-INVALID-TYPE? [ from BASE-FORM-CONTROL ] boolean If non-nil, then values which fail the type test will still be allowed to be the value. Default is nil. ALLOW-INVALID? [ from BASE-FORM-CONTROL ] boolean If non-nil, then values which fail the type or validation test will still be allowed to be the value. Default is t. ALLOW-NIL? [ from BASE-FORM-CONTROL ] boolean Regardless of :domain, if this is non-nil, nil values will be accepted. Defaults to t if (the default) is nil, otherwise defaults to nil. ALT [ from BASE-FORM-CONTROL ] string or nil Maps to HTML form control attribute of the same name. Default is nil. APPEND-ERROR-STRING? [ from BASE-FORM-CONTROL ] boolean Determines whether a default error string is appended to string ouput-function for html-format (and therefore html-string computed-slot as well). Defaults to t.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/14/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 1,
      "chunk_count": 20
    },
    "id": "cbad4480488f59538101904e2f89caee"
  },
  {
    "text": "ng is appended to string ouput-function for html-format (and therefore html-string computed-slot as well). Defaults to t. BASHEE [ from SKELETON-UI-ELEMENT ] gdl object Object to have its settable computed-slots and/or query-plist set from the fields on the form upon submission. Defaults to self. CHOICE-LIST [ from MENU-FORM-CONTROL ] list Display values, also used as return values, for selection list. Specify this or choice-plist, not both. CHOICE-PLIST [ from MENU-FORM-CONTROL ] plist Keywords and display values for the selection list. Specify this or choice-list, not both. CHOICE-STYLES [ from MENU-FORM-CONTROL ] plist Keywords and CSS style for display of each choice. The keys should correspond to the keys in choice-plist, or the items in choice-list if no choice-plist is given. CLASS [ from SKELETON-FORM-CONTROL ] string You can use this to specify a user-defined class for the form-control. Defaults to nil, which means no class attribute will be generated.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/14/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 2,
      "chunk_count": 20
    },
    "id": "d8680137b05ad54550c8fc5677729095"
  },
  {
    "text": "[ from SKELETON-FORM-CONTROL ] string You can use this to specify a user-defined class for the form-control. Defaults to nil, which means no class attribute will be generated. DEFAULT [ from BASE-FORM-CONTROL ] lisp value of a type compatible with (the domain) This is the initial default value for the control. This must be specified by user code, or an error will result. DESCRIPTION-POSITION keyword symbol or nil Specifies where the description for each radio goes, if any. Can be: :paragraph-prepend (or :p-prepend or :p) Description goes in a paragraph tag before the input tag.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/14/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 3,
      "chunk_count": 20
    },
    "id": "ad157b5a9ded3914dcf2ab9f64a19d52"
  },
  {
    "text": ":paragraph-append (or :p-append) Description goes in a paragraph tag after the input tag :table-row-prepend (or :table-tr or :table-tr-prepend) Description goes in a table cell wrapped in a table row before the input tag table cell :table-row-append (or :table-tr-append) Description goes in a table cell wrapped in a table row after the input tag table cell nil (or any other value) No description, only the bare input tag for the radio Default is :paragraph-append. DISABLED-KEYS [ from MENU-FORM-CONTROL ] list of keyword symbols Each of these should match a key in the choice-plist, and where there is a match, that key will be disabled in the rendering. DISABLED? [ from BASE-FORM-CONTROL ] boolean Maps to HTML form control attribute of the same name. Default is nil. DOM-ID [ from SKELETON-UI-ELEMENT ] string This is the auto-computed dom-id which should be used for rendering this section.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/14/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 4,
      "chunk_count": 20
    },
    "id": "f2e9a25e472992d822b56b7eaa2faf99"
  },
  {
    "text": "-ELEMENT ] string This is the auto-computed dom-id which should be used for rendering this section. If you use the main-div HTML string for rendering this object as a page section, then you do not have to generate the :div tag yourself - the main-div will be a string of HTML which is wrapped in the correct :div tag already. DOMAIN [ from BASE-FORM-CONTROL ] keyword symbol, one of :number, :keyword, :list-of-strings, :list-of-anything, or :string . This specifies the expected and acceptable type for the submitted form value. If possible, the submitted value will be coerced into the specified type. The default is based upon the Lisp type of (the default) provided as input to this object. If the default is nil, the domain will default to :string FIELD-NAME [ from SKELETON-FORM-CONTROL ] keyword symbol The name of this field. Computed from the object name within the tree.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/14/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 5,
      "chunk_count": 20
    },
    "id": "c2178fa012cd37e133c63fd0e084d06e"
  },
  {
    "text": "rd symbol The name of this field. Computed from the object name within the tree. FORCE-VALIDATION-FOR [ from SKELETON-UI-ELEMENT ] list of gdl objects of type form-control The validation-function will be forced on these objects when a form is submitted, even if the object's html form-control does not happen to be included in the values submitted with the form. Defaults to nil. HIDDEN? [ from VANILLA-MIXIN* ] boolean Indicates whether the object should effectively be a hidden-object even if specified in :objects. Default is nil. HTML-SECTIONS [ from SKELETON-UI-ELEMENT ] List of HTML sections to be scanned and possibly replaced in response to GDL Ajax calls. Override this slot at your own risk. The default is all sections who are most recently laid out on the respondent sheet, and this is set programmatically every time the sheet section's main-div is demanded.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/14/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 6,
      "chunk_count": 20
    },
    "id": "2a2c8d59953e261c92938e2254036372"
  },
  {
    "text": "et programmatically every time the sheet section's main-div is demanded. HTML-SECTIONS-VALID [ from SKELETON-UI-ELEMENT ] List of valid HTML sections to be scanned and possibly replaced in response to GDL Ajax calls. Override this slot at your own risk. The default is all sections who are most recently laid out on the respondent sheet, and this is set programmatically every time the sheet section's main-div is demanded. ID [ from SKELETON-FORM-CONTROL ] keyword symbol The ID attribute for this tag. Defaults to (the field-name). INNER-HTML [ from SKELETON-UI-ELEMENT ] string This can be used with (str .) [in cl-who] or (:princ .) [in htmlGen] to output this section of the page, without the wrapping :div tag [so if you use this, your code would be responsible for wrapping the :div tag with :id (the dom-id).] ISMAP? [ from BASE-FORM-CONTROL ] boolean Maps to HTML form control attribute of the same name. Default is nil.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/14/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 7,
      "chunk_count": 20
    },
    "id": "0167f4276c987acee8b88b9b4f9ca02a"
  },
  {
    "text": "id (the dom-id).] ISMAP? [ from BASE-FORM-CONTROL ] boolean Maps to HTML form control attribute of the same name. Default is nil. JS-TO-EVAL [ from SKELETON-UI-ELEMENT ] string of valid javascript This Javascript will be send with the Ajax response, and evaluated after the innerHTML for this section has been replaced. LABEL-POSITION [ from BASE-FORM-CONTROL ] keyword symbol or nil Specifies where the label tag goes, if any. Can be :table-td (label goes in a td before the form control), :table-td-append (label goes in a td after the form control), prepend: (label tag wraps around form control and label text comes before form control), append: (label tag wraps around form control and label text comes after form control), table-with-class: (like :table-td, but adds a class \"form-control\" to the table), or as-div: (puts label and control inside a div of class \"form-control\").",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/14/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 8,
      "chunk_count": 20
    },
    "id": "6c3d03477a12bb818fc64ab5846e2fcd"
  },
  {
    "text": "he table), or as-div: (puts label and control inside a div of class \"form-control\"). Default is :as-div LANG [ from BASE-FORM-CONTROL ] string or nil Maps to HTML form control attribute of the same name. Default is nil. MAXLENGTH [ from BASE-FORM-CONTROL ] number or nil Maps to HTML form control attribute of the same name. Default is nil. NULLIFY-EMPTY-STRING? [ from BASE-FORM-CONTROL ] boolean Regardless of :domain, if this is non-nil, empty strings will convert to nil. Defaults to (the allow-nil?) ONBLUR [ from BASE-FORM-CONTROL ] string or nil Maps to HTML form control attribute of the same name. Default is nil. ONCHANGE [ from BASE-FORM-CONTROL ] string or nil Maps to HTML form control attribute of the same name. Default is nil, unless ajax-submit-on-change? is non-nil, in which case it calls ajax to set current form value. ONCLICK [ from BASE-FORM-CONTROL ] string or nil Maps to HTML form control attribute of the same name. Default is nil.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/14/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 9,
      "chunk_count": 20
    },
    "id": "f9799959a0372f2a3d866d9f70d22137"
  },
  {
    "text": "t calls ajax to set current form value. ONCLICK [ from BASE-FORM-CONTROL ] string or nil Maps to HTML form control attribute of the same name. Default is nil. ONDBLCLICK [ from BASE-FORM-CONTROL ] string or nil Maps to HTML form control attribute of the same name. Default is nil. ONENTER [ from BASE-FORM-CONTROL ] string or nil Maps to HTML form control attribute of the same name. Default is nil, unless ajax-submit-on-enter? is non-nil, in which case it calls ajax to set current form value. ONFOCUS [ from BASE-FORM-CONTROL ] string or nil Maps to HTML form control attribute of the same name. Default is nil. ONKEYDOWN [ from BASE-FORM-CONTROL ] string or nil Maps to HTML form control attribute of the same name. Default is nil. ONKEYPRESS [ from BASE-FORM-CONTROL ] string or nil Maps to HTML form control attribute of the same name. Default is nil. ONKEYUP [ from BASE-FORM-CONTROL ] string or nil Maps to HTML form control attribute of the same name. Default is nil.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/14/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 10,
      "chunk_count": 20
    },
    "id": "e068fec6b6b52b0cb0ff158ae960507c"
  },
  {
    "text": "form control attribute of the same name. Default is nil. ONKEYUP [ from BASE-FORM-CONTROL ] string or nil Maps to HTML form control attribute of the same name. Default is nil. ONMOUSEDOWN [ from BASE-FORM-CONTROL ] string or nil Maps to HTML form control attribute of the same name. Default is nil. ONMOUSEMOVE [ from BASE-FORM-CONTROL ] string or nil Maps to HTML form control attribute of the same name. Default is nil. ONMOUSEOUT [ from BASE-FORM-CONTROL ] string or nil Maps to HTML form control attribute of the same name. Default is nil. ONMOUSEOVER [ from BASE-FORM-CONTROL ] string or nil Maps to HTML form control attribute of the same name. Default is nil. ONMOUSEUP [ from BASE-FORM-CONTROL ] string or nil Maps to HTML form control attribute of the same name. Default is nil. ONSELECT [ from BASE-FORM-CONTROL ] string or nil Maps to HTML form control attribute of the same name. Default is nil.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/14/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 11,
      "chunk_count": 20
    },
    "id": "477cdf43b681c98ed317fd09a537dc99"
  },
  {
    "text": "from BASE-FORM-CONTROL ] string or nil Maps to HTML form control attribute of the same name. Default is nil. ORDERED-FORM-CONTROLS [ from SKELETON-UI-ELEMENT ] list of gdl objects, which should be of type 'base-form-control . [Note -- this slot is not really necessary for protecting out-of-bounds sequence references anymore, the form-control processor protects against this by itself now]. These objects are validated and bashed first, in the order given. If the cardinality of one form-control depends on another as in the example below, then you should list those dependent objects first. Default is nil. examples: ...",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/14/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 12,
      "chunk_count": 20
    },
    "id": "17e5b533029fd6202111ccf3e07c7b79"
  },
  {
    "text": ":computed-slots ((number-of-nozzles (the number-of-nozzles-form value)) (ordered-form-controls (append (list-elements (the inner-flange-form)) (list (the number-of-nozzles-form))))) :objects ((inner-flange-form :type 'menu-form-control :choice-plist (list :hey \"hey\" :now \"now\") :default :hey :sequence (:size (the number-of-nozzles))) (number-of-nozzles-form :type 'text-form-control :prompt \"Number of Shell Nozzles Required: \" :domain :number :default 0) PLACEHOLDER [ from BASE-FORM-CONTROL ] string Text to place in the field by default, overwritten as soon as the field is selected. Works only in HTML5. Default is nil. POSSIBLE-NIL? [ from MENU-FORM-CONTROL ] boolean Indicates whether this should be included in possible-nils. Defaults to (the multiple?) POSSIBLE-NILS [ from SKELETON-UI-ELEMENT ] list of keyword symbols Messages corresponding to form fields which could be missing from form submission (e.g. checkbox fields).",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/14/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 13,
      "chunk_count": 20
    },
    "id": "a7e12e3bece83866a168e6e43e70c859"
  },
  {
    "text": "MENT ] list of keyword symbols Messages corresponding to form fields which could be missing from form submission (e.g. checkbox fields). Defaults to the names of any children or hidden-children of type menu-form-control or checkbox-form-control. PRESET-ALL? [ from SKELETON-UI-ELEMENT ] boolean This switch determines whether all form-controls should be preset before the final setting, in order to allow any interdependencies to be detected for validation or detecting changed values. If this is specified as a non-nil value, then any nil values of (the preset?) on individual form controls will be ignored. If this is specified as nil, then (the preset?) of individual form-controls (default of these is also nil) will be respected. Default is nil. PRESET? [ from BASE-FORM-CONTROL ] boolean This switch determines whether this form-control should be preset before the final setting, in order to allow any interdependencies to be detected for validation or detecting changed values.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/14/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 14,
      "chunk_count": 20
    },
    "id": "b878707b54ec982b440178408fef7912"
  },
  {
    "text": "witch determines whether this form-control should be preset before the final setting, in order to allow any interdependencies to be detected for validation or detecting changed values. Default is nil. PRIMARY? [ from SKELETON-FORM-CONTROL ] boolean Set this to t if the form-control should always occur first in an outputted snapshot file. Defaults to nil. PROMPT [ from BASE-FORM-CONTROL ] string The prompt used in the label. READONLY? [ from BASE-FORM-CONTROL ] boolean Maps to HTML form control attribute of the same name. Default is nil. ROOT [ from VANILLA-MIXIN* ] gdl instance The root-level node in this object's ``tree'' (instance hierarchy). SAFE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances All objects from the :objects specification, including elements of sequences as flat lists.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/14/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 15,
      "chunk_count": 20
    },
    "id": "2b75904af574e8ed014df49b1c510316"
  },
  {
    "text": "sts. Any children which throw errors come back as a plist with error information SIZE [ from MENU-FORM-CONTROL ] number How many choices to display SRC [ from BASE-FORM-CONTROL ] string or nil Maps to HTML form control attribute of the same name. Default is nil. STRINGS-FOR-DISPLAY [ from VANILLA-MIXIN* ] string or list of strings Determines how the name of objects of this type will be printed in most places. This defaults to the name-for-display (generally the part's name as specified in its parent), followed by an index number if the part is an element of a sequence. STYLE [ from BASE-FORM-CONTROL ] string or nil Maps to HTML form control attribute of the same name. Default is nil. TABINDEX [ from BASE-FORM-CONTROL ] integer or nil Maps to HTML form control attribute of the same name. Default is nil. TABLE-CLASS string Allows you to specify a class for the table surrounding the radio input elements. Defaults to empty string.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/14/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 16,
      "chunk_count": 20
    },
    "id": "33db36fd49b407292d539c49eae1924c"
  },
  {
    "text": "fault is nil. TABLE-CLASS string Allows you to specify a class for the table surrounding the radio input elements. Defaults to empty string. TEST [ from MENU-FORM-CONTROL ] predicate function of two arguments Defaults based on type of first in choice-plist: eql for keywords, string-equal for strings, and equalp otherwise. TITLE [ from BASE-FORM-CONTROL ] string or nil Maps to HTML form control attribute of the same name. Default is nil. USEMAP [ from BASE-FORM-CONTROL ] string or nil Maps to HTML form control attribute of the same name. Default is nil. VALIDATION-FUNCTION [ from BASE-FORM-CONTROL ] function of one argument The argument will be the submitted form value converted to the proper type. The return value from this function can be nil, any non-nil value, or a plist with keys :validated-value and :error. The following behavior applies: If the function returns nil, error is set to :unspecified-validation-fail.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/14/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 17,
      "chunk_count": 20
    },
    "id": "2d1668f2f36b4b711cd73dde18fd8123"
  },
  {
    "text": "dated-value and :error. The following behavior applies: If the function returns nil, error is set to :unspecified-validation-fail. If the function returns a plist with keys :validated-value and :error, and if :error is non-nil, it means the value is not acceptable, the form-controls error message is set to this error (usually a keyword symbol), and the error string will be appended to the html-string by default. If the function returns any other value, then the properly typed submitted form value is considered valid and is used. In the case of an error, the form-control's failed-value message is set to the properly typed submitted form value. If allow-invalid? is non-nil, then the form-control's value message is also set to this value (i.e. the invalid value is still accepted, even though a non-nil error is present). Default is (list :validated-value value :error nil). VISIBLE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances Additional objects to display in Tatu tree.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/14/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 18,
      "chunk_count": 20
    },
    "id": "3a63428ccdf188be534f03d83c4cfa3f"
  },
  {
    "text": "a non-nil error is present). Default is (list :validated-value value :error nil). VISIBLE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances Additional objects to display in Tatu tree. Typically this would be a subset of hidden-children. Defaults to NIL. Input Slots (optional, defaulting) RESPONDENT [ from SKELETON-UI-ELEMENT ] gdl object Object to respond to the form submission. Defaults to self. Computed Slots MULTIPLE? [ from MENU-FORM-CONTROL ] boolean Are multiple selections allowed? Default is nil. Package Documentation Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/14/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 19,
      "chunk_count": 20
    },
    "id": "ca51c5880ec8c34f5569b540cdb91338"
  },
  {
    "text": "GendL Application - LAYOUT-MIXIN Package Documentation Object: LAYOUT-MIXIN (The :GWL Package) Mixins: BASE-HTML-GRAPHICS-SHEET Description This is mixed into both node-mixin and application-mixin . It contains the common messages for nodes in a GWL application tree. For any node-mixin or application-mixin , you may override the default (empty) model-inputs output-function of the corresponding html-format view to make specific model-inputs for that node. Input Slots (optional) AFTER-PRESENT! [ from BASE-HTML-SHEET ] void This is an empty function by default, but can be overridden in the respondent of a form, to do some processing after the respondent's write-html-sheet function runs to present the object. AFTER-SET! [ from BASE-HTML-SHEET ] void This is an empty function by default, but can be overridden in the requestor of a form, to do some processing after the requestor's form values are set into the specified bashee.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/11/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 0,
      "chunk_count": 23
    },
    "id": "c0e0edc7150631e4823849883975ecf6"
  },
  {
    "text": "n be overridden in the requestor of a form, to do some processing after the requestor's form values are set into the specified bashee. AVAILABLE-IMAGE-FORMATS list of keyword symbols Determines which formats are available in the Preferences. Defaults to :png, :jpeg, and :vrml. BASHEE [ from SKELETON-UI-ELEMENT ] gdl object Object to have its settable computed-slots and/or query-plist set from the fields on the form upon submission. Defaults to self. BEFORE-PRESENT! [ from BASE-HTML-SHEET ] void This is an empty function by default, but can be overridden in the respondent of a form, to do some processing before the respondent's write-html-sheet function runs to present the object. This can be useful especially for objects which are subclasses of higher-level mixins such as application-mixin and node-mixin , where you do not have direct access to the write-html-sheet function and typically only define the model-inputs function.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/11/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 1,
      "chunk_count": 23
    },
    "id": "cde8da031651fff8507b29883736587c"
  },
  {
    "text": "and node-mixin , where you do not have direct access to the write-html-sheet function and typically only define the model-inputs function. It is not always reliable to do processing in the model-inputs function, since some slots which depend on your intended modifications may already have been evaluated by the time the model-inputs function runs. BEFORE-RESPONSE! [ from BASE-HTML-SHEET ] void This is an empty function by default, but can be overridden in a user specialization of base-html-sheet, to do some processing before the header-plist is evaluated and before the HTTP response is actually initiated. BEFORE-SET! [ from BASE-HTML-SHEET ] void This is an empty function by default, but can be overridden in the requestor of a form, to do some processing before the requestor's form values are set into the specified bashee. BODY-BGCOLOR keyword symbol Color keyword from *color-table* for the body background. Defaults to :blue-sky .",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/11/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 2,
      "chunk_count": 23
    },
    "id": "d3726c966e50543089feff69f9a8fde8"
  },
  {
    "text": "are set into the specified bashee. BODY-BGCOLOR keyword symbol Color keyword from *color-table* for the body background. Defaults to :blue-sky . BOUNDING-BOX [ from BASE-OBJECT ] list of two 3d points The left front bottom and right rear top corners, in global coordinates, of the rectangular volume bounding the tree of geometric objects rooted at this object. CENTER [ from BASE-OBJECT ] 3d point Indicates in global coordinates where the center of the reference box of this object should be located. CHECK-SANITY? [ from BASE-HTML-SHEET ] boolean Determines whether a a sanity check is done (with the check-sanity function) before presenting the response page if this page is a respondent. Default is NIL. DOM-ID [ from SKELETON-UI-ELEMENT ] string This is the auto-computed dom-id which should be used for rendering this section.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/11/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 3,
      "chunk_count": 23
    },
    "id": "c7e651b755302308b76b9453c1e87d63"
  },
  {
    "text": "used for rendering this section. If you use the main-div HTML string for rendering this object as a page section, then you do not have to generate the :div tag yourself - the main-div will be a string of HTML which is wrapped in the correct :div tag already. FORCE-VALIDATION-FOR [ from SKELETON-UI-ELEMENT ] list of gdl objects of type form-control The validation-function will be forced on these objects when a form is submitted, even if the object's html form-control does not happen to be included in the values submitted with the form. Defaults to nil. HEIGHT [ from BASE-OBJECT ] number Z-axis dimension of the reference box. Defaults to zero. HIDDEN? [ from VANILLA-MIXIN* ] boolean Indicates whether the object should effectively be a hidden-object even if specified in :objects. Default is nil. HTML-SECTIONS [ from SKELETON-UI-ELEMENT ] List of HTML sections to be scanned and possibly replaced in response to GDL Ajax calls. Override this slot at your own risk.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/11/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 4,
      "chunk_count": 23
    },
    "id": "abc89599623d45ca39ff76c6b38ad2d3"
  },
  {
    "text": "nil. HTML-SECTIONS [ from SKELETON-UI-ELEMENT ] List of HTML sections to be scanned and possibly replaced in response to GDL Ajax calls. Override this slot at your own risk. The default is all sections who are most recently laid out on the respondent sheet, and this is set programmatically every time the sheet section's main-div is demanded. HTML-SECTIONS-VALID [ from SKELETON-UI-ELEMENT ] List of valid HTML sections to be scanned and possibly replaced in response to GDL Ajax calls. Override this slot at your own risk. The default is all sections who are most recently laid out on the respondent sheet, and this is set programmatically every time the sheet section's main-div is demanded. IMAGE-FILE [ from BASE-OBJECT ] pathname or string Points to a pre-existing image file to be displayed instead of actual geometry for this object. Defaults to nil IMAGE-FORMAT [ from BASE-HTML-GRAPHICS-SHEET ] keyword symbol Determines the default image format.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/11/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 5,
      "chunk_count": 23
    },
    "id": "f9f4ea77c6ef94336db4d1b53ec0bf94"
  },
  {
    "text": "stead of actual geometry for this object. Defaults to nil IMAGE-FORMAT [ from BASE-HTML-GRAPHICS-SHEET ] keyword symbol Determines the default image format. Defaults to :png INNER-HTML [ from SKELETON-UI-ELEMENT ] string This can be used with (str .) [in cl-who] or (:princ .) [in htmlGen] to output this section of the page, without the wrapping :div tag [so if you use this, your code would be responsible for wrapping the :div tag with :id (the dom-id).] INPUTS-BGCOLOR keyword symbol Color keyword from *color-table* for the model-inputs area background. Defaults to :aquamarine . INPUTS-TITLE string Title for the model-inputs section. Defaults to \"Model Inputs\". JS-TO-EVAL [ from SKELETON-UI-ELEMENT ] string of valid javascript This Javascript will be send with the Ajax response, and evaluated after the innerHTML for this section has been replaced. LENGTH [ from GEOMETRY-VIEW-MIXIN ] number Length (\"height\" of screen window) of the graphics viewport. Default is 300.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/11/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 6,
      "chunk_count": 23
    },
    "id": "c1dcce1b63c5f0f058ba69f17823dfef"
  },
  {
    "text": "ed after the innerHTML for this section has been replaced. LENGTH [ from GEOMETRY-VIEW-MIXIN ] number Length (\"height\" of screen window) of the graphics viewport. Default is 300. LOCAL-BOX [ from BASE-OBJECT ] list of two 3d points The left front bottom and right rear top corners, in global coordinates, of the rectangular volume bounding this geometric object. MULTIPART-FORM? boolean Determines whether the embedded form will support multipart MIME parts. Defaults to NIL. OBLIQUENESS [ from BASE-OBJECT ] 3x3 orthonormal matrix of double-float numbers This is synonymous with the orientation . ONCLICK-FUNCTION [ from BASE-OBJECT ] lambda function of zero arguments, or nil If non-nil, this function gets invoked when the user clicks the object in graphics front-ends which support this functionality, e.g. SVG/Raphael and X3DOM. ORDERED-FORM-CONTROLS [ from SKELETON-UI-ELEMENT ] list of gdl objects, which should be of type 'base-form-control .",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/11/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 7,
      "chunk_count": 23
    },
    "id": "be5ebff90824cca7f74aed6e1f2ebadd"
  },
  {
    "text": "lity, e.g. SVG/Raphael and X3DOM. ORDERED-FORM-CONTROLS [ from SKELETON-UI-ELEMENT ] list of gdl objects, which should be of type 'base-form-control . [Note -- this slot is not really necessary for protecting out-of-bounds sequence references anymore, the form-control processor protects against this by itself now]. These objects are validated and bashed first, in the order given. If the cardinality of one form-control depends on another as in the example below, then you should list those dependent objects first. Default is nil. examples: ...",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/11/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 8,
      "chunk_count": 23
    },
    "id": "99f8d47b96ea4901958591629cc59e53"
  },
  {
    "text": ":computed-slots ((number-of-nozzles (the number-of-nozzles-form value)) (ordered-form-controls (append (list-elements (the inner-flange-form)) (list (the number-of-nozzles-form))))) :objects ((inner-flange-form :type 'menu-form-control :choice-plist (list :hey \"hey\" :now \"now\") :default :hey :sequence (:size (the number-of-nozzles))) (number-of-nozzles-form :type 'text-form-control :prompt \"Number of Shell Nozzles Required: \" :domain :number :default 0) ORIENTATION [ from BASE-OBJECT ] 3x3 matrix of double-float numbers Indicates the absolute Rotation Matrix used to create the coordinate system of this object. This matrix is given in absolute terms (i.e. with respect to the root's orientation), and is generally created with the alignment function. It should be an orthonormal matrix, meaning each row is a vector with a magnitude of one (1.0). OTHER-RULES list of gdl objects of type base-rule-object or (preferably) gwl-base-rule-object .",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/11/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 9,
      "chunk_count": 23
    },
    "id": "956f21c8f6048d421074d7fc12be9605"
  },
  {
    "text": "ng each row is a vector with a magnitude of one (1.0). OTHER-RULES list of gdl objects of type base-rule-object or (preferably) gwl-base-rule-object . Links to these will be displayed in the other-rules section. Default to the collection of all objects of type base-rule-object from this node in the tree down to the leaves, whose violated? message evaluates to NIL. OTHER-RULES-BGCOLOR keyword symbol Color keyword from *color-table* for the other-rules area background. Defaults to :aquamarine . OTHER-RULES-TITLE string Title for the other-rules section. Defaults to \"Other Rules\". PAGE-TITLE string The title to display on the page and in the tree. Defaults to (the strings-for-display) . POSSIBLE-NILS [ from SKELETON-UI-ELEMENT ] list of keyword symbols Messages corresponding to form fields which could be missing from form submission (e.g. checkbox fields). Defaults to the names of any children or hidden-children of type menu-form-control or checkbox-form-control.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/11/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 10,
      "chunk_count": 23
    },
    "id": "d409d82ddf27234949410ba4fef93895"
  },
  {
    "text": "ich could be missing from form submission (e.g. checkbox fields). Defaults to the names of any children or hidden-children of type menu-form-control or checkbox-form-control. PRESET-ALL? [ from SKELETON-UI-ELEMENT ] boolean This switch determines whether all form-controls should be preset before the final setting, in order to allow any interdependencies to be detected for validation or detecting changed values. If this is specified as a non-nil value, then any nil values of (the preset?) on individual form controls will be ignored. If this is specified as nil, then (the preset?) of individual form-controls (default of these is also nil) will be respected. Default is nil. PROCESS-COOKIES! [ from BASE-HTML-SHEET ] void This is an empty function by default, but can be overridden in a user specialization of base-html-sheet, to do some processing before the header-plist is evaluated and before the HTTP response is actually initiated, but after the cookies-received have been set.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/11/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 11,
      "chunk_count": 23
    },
    "id": "f69a32c323e48dc5b5cd614a859412ca"
  },
  {
    "text": "cialization of base-html-sheet, to do some processing before the header-plist is evaluated and before the HTTP response is actually initiated, but after the cookies-received have been set. RETURN-OBJECT [ from BASE-HTML-SHEET ] gdl object Default object to which control will return with the write-back-link method ROOT [ from VANILLA-MIXIN* ] gdl instance The root-level node in this object's ``tree'' (instance hierarchy). SAFE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances All objects from the :objects specification, including elements of sequences as flat lists. Any children which throw errors come back as a plist with error information SHOW-TITLE? boolean Indicates whether to display the title at the top of the page. Defaults to T. STANDARD-VIEWS [ from BASE-HTML-GRAPHICS-SHEET ] plist of keywords and 3d vectors . Indicates the views to show in the graphics controls.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/11/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 12,
      "chunk_count": 23
    },
    "id": "7e0a629810afa696fb73fd1ff44084ac"
  },
  {
    "text": "plist of keywords and 3d vectors . Indicates the views to show in the graphics controls. STRINGS-FOR-DISPLAY [ from VANILLA-MIXIN* ] string or list of strings Determines how the name of objects of this type will be printed in most places. This defaults to the name-for-display (generally the part's name as specified in its parent), followed by an index number if the part is an element of a sequence. TARGET [ from BASE-HTML-SHEET ] string Name of a browser frame or window to display this page. Default of NIL indicates to use the same window. TRANSITORY-SLOTS [ from BASE-HTML-SHEET ] list of keyword symbols Messages corresponding to form fields which should not be retained against Updates to the model (e.g. calls to the update! function or hitting the Update button or link in the browser in development mode). Defaults to NIL (the empty list). TREE-BGCOLOR keyword symbol Color keyword from *color-table* for the tree area background. Defaults to :aquamarine .",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/11/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 13,
      "chunk_count": 23
    },
    "id": "ab8b55f0f6b290a0683c697bb92460a5"
  },
  {
    "text": "evelopment mode). Defaults to NIL (the empty list). TREE-BGCOLOR keyword symbol Color keyword from *color-table* for the tree area background. Defaults to :aquamarine . TREE-TITLE string Title for the Tree section. Defaults to \"Assembly Tree\" if the tree-root is only a subclass of application-mixin , and \"Assembly Tree\" if the tree-root is an actual node with child applications. UI-DISPLAY-LIST-LEAVES list of gdl objects This should be overridden with a list of objects of your choice. These objects (not their leaves, but these actual nodes) will be scaled to fit and displayed in the graphics area. Defaults to NIL. UI-DISPLAY-LIST-OBJECTS list of gdl objects This should be overridden with a list of objects of your choice. The leaves of these objects will be scaled to fit and displayed in the graphics area. Defaults to NIL.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/11/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 14,
      "chunk_count": 23
    },
    "id": "509071c90293a627764ce809473c0597"
  },
  {
    "text": "e graphics area. Defaults to NIL. USE-BSPLINES? [ from BASE-HTML-GRAPHICS-SHEET ] boolean Determines whether to use native bspline data in the vrml VIOLATED-RULES list of gdl objects of type base-rule-object or (preferably) gwl-base-rule-object . Links to these will be displayed in the other-rules section. Default to the collection of all objects of type base-rule-object from this node in the tree down to the leaves, whose violated? message evaluates to non-NIL. VIOLATED-RULES-BGCOLOR keyword symbol Color keyword from *color-table* for the violated-rules area background. Defaults to :aquamarine . VIOLATED-RULES-TITLE string Title for the violated-rules section. Defaults to \"Violated Rules\". VISIBLE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances Additional objects to display in Tatu tree. Typically this would be a subset of hidden-children. Defaults to NIL. WIDTH [ from GEOMETRY-VIEW-MIXIN ] number Width of the graphics viewport. Default is 300.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/11/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 15,
      "chunk_count": 23
    },
    "id": "caed0ebf7f2b3b3e68197d3ec1610f37"
  },
  {
    "text": "tree. Typically this would be a subset of hidden-children. Defaults to NIL. WIDTH [ from GEOMETRY-VIEW-MIXIN ] number Width of the graphics viewport. Default is 300. Input Slots (optional, settable) DIGITATION-MODE [ from BASE-HTML-GRAPHICS-SHEET ] keyword symbol, one of :zoom-and-center , :report-point , or :measure-distance . If :zoom-and-center , sets the user-center and user-scale accordingly when graphics area is clicked. If :report-point , the slot digitized-point is set with the x y value. If measure-distance , the slot :digitized-distance is set with the resultant distance. Default is :zoom-and-center VIEW [ from BASE-HTML-GRAPHICS-SHEET ] keyword symbol Determines the default view from the standard-views . Defaults to :trimetric. ZOOM-FACTOR [ from BASE-HTML-GRAPHICS-SHEET ] number The factor used for zooming in or out.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/11/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 16,
      "chunk_count": 23
    },
    "id": "97f845cafa0d12dc591e4b79819a7bc9"
  },
  {
    "text": "er The factor used for zooming in or out. ZOOM-MODE [ from BASE-HTML-GRAPHICS-SHEET ] keyword symbol, one of :in, :out, or :none, or nil If :in, then clicks in the graphics area will increase the zoom factor by (the zoom-factor). If :out, then clicks will decrease the factor by that amount. If :none or nil, then clicks will have no effect. Input Slots (optional, defaulting) DISPLAY-CONTROLS [ from BASE-OBJECT ] plist May contain keywords and values indicating display characteristics for this object. The following keywords are recognized currently: :color color keyword from the *color-table* parameter, or an HTML-style hexidecimal RGB string value, e.g. \"#FFFFFF\" for pure white. Defaults to :black. :line-thickness an integer, defaulting to 1, indicating relative line thickness for wireframe representations of this object. :dash-pattern (currently PDF/PNG/JPEG only).",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/11/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 17,
      "chunk_count": 23
    },
    "id": "e1dd6a444f94960177849234b0fef07f"
  },
  {
    "text": "representations of this object. :dash-pattern (currently PDF/PNG/JPEG only). This is a list of two or three numbers which indicate the length, in pixels, of the dashes and blank spaces in a dashed line. The optional third number indicates how far into the line or curve to start the dash pattern. DISPLAY-RULES? boolean Indicates whether the Rules panel should be displayed. Defaults to T. DISPLAY-TREE? boolean Indicates whether the Tree area should be displayed. Defaults to T. GRAPHICS-HEIGHT integer Height (top to bottom on screen) in pixels of the graphics area. Defaults to 500. GRAPHICS-WIDTH integer Height (left to right on screen) in pixels of the graphics area. Defaults to 500. RESPONDENT [ from SKELETON-UI-ELEMENT ] gdl object Object to respond to the form submission. Defaults to self. USE-STANDARD-SAVED-SLOTS? boolean Determines whether the standard-saved-slots are automatically used by default for the saved-slots.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/11/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 18,
      "chunk_count": 23
    },
    "id": "7d8b6765f5d8ba46cc608f0939ff66c2"
  },
  {
    "text": "f. USE-STANDARD-SAVED-SLOTS? boolean Determines whether the standard-saved-slots are automatically used by default for the saved-slots. This is a trickle-down slot so its value will be passed to descendent objects automatically. The default value is NIL. Computed Slots SAVED-SLOTS list of keyword symbols or lists . The first of this list should be the unique name for this tree node for the purposes of saving slots. The rest of this list is made up of either keyword symbols or lists. A keyword symbol indicates the name of a slot to be saved in the current object. These slot names should correspond to :settable slots of this object. A list indicates slots to be saved in a child object, specified as follows: the first of the list is the name of the child part, and the rest is made up of keywords naming the slots in the child part to be saved. These should correspond to :settable slots in the child object.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/11/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 19,
      "chunk_count": 23
    },
    "id": "d19e617b3051ddd06e3a0404f826a26b"
  },
  {
    "text": "rds naming the slots in the child part to be saved. These should correspond to :settable slots in the child object. The default value is the standard-saved-slots if the use-standard-saved-slots? is non-NIL, NIL otherwise. STANDARD-SAVED-SLOTS list of keyword symbols The first of this list is the name-for-display of this object. The rest of the list are all the keyword symbols representing the settable computed-slots and input-slots which have a default value. Required input-slots (i.e. input-slots without a default value) are not included in this list. If you wish to include required inputs with the saved-slots, you should explicitly append them to this list when specifying the saved-slots . Hidden Objects VIEW-OBJECT [ from GEOMETRY-VIEW-MIXIN ] gdl web-drawing object This must be overridden in the specialized class.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/11/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 20,
      "chunk_count": 23
    },
    "id": "569f1d69b8f11c03591f067e20040e82"
  },
  {
    "text": "den in the specialized class. GDL Functions READ-SAVED-SLOTS void Reads the slots data from filename , restores the corresponding slots in this object and matching descendant objects, and calls the restore! function on each object. keyword arguments: filename String or pathname , Default Value: \"/tmp/<object type>\" Name of file to be read WRITE-HTML-SHEET [ from BASE-HTML-SHEET ] void This GDL function should be redefined to generate the HTML page corresponding to this object. It can be specified here, or as the main-sheet output-function in an html-format lens for this object's type. This write-html-sheet function, if defined, will override any main-sheet function defined in the lens. Typically a write-html-sheet function would look as follows: example: (write-html-sheet () (html (:html (:head (:title (:princ (the :page-title)))) (:body ;;",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/11/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 21,
      "chunk_count": 23
    },
    "id": "0a563fcf68d0971927b0fbe96a49e213"
  },
  {
    "text": ":head (:title (:princ (the :page-title)))) (:body ;;; fill in your body here )))) WRITE-SAVED-SLOTS void Writes the unique application name names and values of all saved-slots in this and all descendants which are of type node-mixin or application-mixin. keyword arguments: filename-or-stream String, pathname, or stream , Default Value: \"/tmp/<object type>\" Name or stream for file to be written Package Documentation Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/11/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 22,
      "chunk_count": 23
    },
    "id": "b749ef467624529a07ac13a4b66ec91a"
  },
  {
    "text": "GendL Application - TEXT-FORM-CONTROL Package Documentation Object: TEXT-FORM-CONTROL (The :GWL Package) Mixins: BASE-FORM-CONTROL , VANILLA-MIXIN Author Dave Cooper, Genworks Description This represents a INPUT TYPE=TEXT or TEXTAREA form control tag. Input Slots (optional) ACCEPT [ from BASE-FORM-CONTROL ] string or nil Maps to HTML form control attribute of the same name. Default is nil. ACCESSKEY [ from BASE-FORM-CONTROL ] string or nil Maps to HTML form control attribute of the same name. Default is nil. AJAX-SUBMIT-ON-CHANGE? [ from BASE-FORM-CONTROL ] boolean If set to non-nil, this field's value will be sent to server upon change. Default is nil. AJAX-SUBMIT-ON-ENTER? [ from BASE-FORM-CONTROL ] boolean If set to non-nil, this field's value will be sent to server upon enter. Default is nil. ALIGN [ from BASE-FORM-CONTROL ] string or nil Maps to HTML form control attribute of the same name. Default is nil.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/19/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 0,
      "chunk_count": 19
    },
    "id": "02e038b9e11484b19e9ffbfdf27bfd14"
  },
  {
    "text": "is nil. ALIGN [ from BASE-FORM-CONTROL ] string or nil Maps to HTML form control attribute of the same name. Default is nil. ALLOW-INVALID-TYPE? [ from BASE-FORM-CONTROL ] boolean If non-nil, then values which fail the type test will still be allowed to be the value. Default is nil. ALLOW-INVALID? [ from BASE-FORM-CONTROL ] boolean If non-nil, then values which fail the type or validation test will still be allowed to be the value. Default is t. ALLOW-NIL? [ from BASE-FORM-CONTROL ] boolean Regardless of :domain, if this is non-nil, nil values will be accepted. Defaults to t if (the default) is nil, otherwise defaults to nil. ALT [ from BASE-FORM-CONTROL ] string or nil Maps to HTML form control attribute of the same name. Default is nil. APPEND-ERROR-STRING? [ from BASE-FORM-CONTROL ] boolean Determines whether a default error string is appended to string ouput-function for html-format (and therefore html-string computed-slot as well). Defaults to t.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/19/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 1,
      "chunk_count": 19
    },
    "id": "b6dab8e1136b105f62292ad2290d7857"
  },
  {
    "text": "lean Determines whether a default error string is appended to string ouput-function for html-format (and therefore html-string computed-slot as well). Defaults to t. BASHEE [ from SKELETON-UI-ELEMENT ] gdl object Object to have its settable computed-slots and/or query-plist set from the fields on the form upon submission. Defaults to self. CLASS [ from SKELETON-FORM-CONTROL ] string You can use this to specify a user-defined class for the form-control. Defaults to nil, which means no class attribute will be generated. COLS integer The number of columns for a TEXTAREA (if rows is > 1). Defaults to (the size). DEFAULT [ from BASE-FORM-CONTROL ] lisp value of a type compatible with (the domain) This is the initial default value for the control. This must be specified by user code, or an error will result. DISABLED? [ from BASE-FORM-CONTROL ] boolean Maps to HTML form control attribute of the same name. Default is nil.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/19/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 2,
      "chunk_count": 19
    },
    "id": "0ee4086a66f3de15a899d0333c6924f4"
  },
  {
    "text": "will result. DISABLED? [ from BASE-FORM-CONTROL ] boolean Maps to HTML form control attribute of the same name. Default is nil. DOM-ID [ from SKELETON-UI-ELEMENT ] string This is the auto-computed dom-id which should be used for rendering this section. If you use the main-div HTML string for rendering this object as a page section, then you do not have to generate the :div tag yourself - the main-div will be a string of HTML which is wrapped in the correct :div tag already. DOMAIN [ from BASE-FORM-CONTROL ] keyword symbol, one of :number, :keyword, :list-of-strings, :list-of-anything, or :string . This specifies the expected and acceptable type for the submitted form value. If possible, the submitted value will be coerced into the specified type. The default is based upon the Lisp type of (the default) provided as input to this object. If the default is nil, the domain will default to :string FIELD-NAME [ from SKELETON-FORM-CONTROL ] keyword symbol The name of this field.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/19/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 3,
      "chunk_count": 19
    },
    "id": "3781885e4356658c53f40cf640cc6f8a"
  },
  {
    "text": "(the default) provided as input to this object. If the default is nil, the domain will default to :string FIELD-NAME [ from SKELETON-FORM-CONTROL ] keyword symbol The name of this field. Computed from the object name within the tree. FORCE-VALIDATION-FOR [ from SKELETON-UI-ELEMENT ] list of gdl objects of type form-control The validation-function will be forced on these objects when a form is submitted, even if the object's html form-control does not happen to be included in the values submitted with the form. Defaults to nil. HIDDEN? [ from VANILLA-MIXIN* ] boolean Indicates whether the object should effectively be a hidden-object even if specified in :objects. Default is nil. HTML-SECTIONS [ from SKELETON-UI-ELEMENT ] List of HTML sections to be scanned and possibly replaced in response to GDL Ajax calls. Override this slot at your own risk.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/19/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 4,
      "chunk_count": 19
    },
    "id": "0424973389529caab0b3f841492ab6aa"
  },
  {
    "text": "to GDL Ajax calls. Override this slot at your own risk. The default is all sections who are most recently laid out on the respondent sheet, and this is set programmatically every time the sheet section's main-div is demanded. HTML-SECTIONS-VALID [ from SKELETON-UI-ELEMENT ] List of valid HTML sections to be scanned and possibly replaced in response to GDL Ajax calls. Override this slot at your own risk. The default is all sections who are most recently laid out on the respondent sheet, and this is set programmatically every time the sheet section's main-div is demanded. ID [ from SKELETON-FORM-CONTROL ] keyword symbol The ID attribute for this tag. Defaults to (the field-name).",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/19/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 5,
      "chunk_count": 19
    },
    "id": "0e696b33c52a885dca8b324559e75aad"
  },
  {
    "text": "INNER-HTML [ from SKELETON-UI-ELEMENT ] string This can be used with (str .) [in cl-who] or (:princ .) [in htmlGen] to output this section of the page, without the wrapping :div tag [so if you use this, your code would be responsible for wrapping the :div tag with :id (the dom-id).] ISMAP? [ from BASE-FORM-CONTROL ] boolean Maps to HTML form control attribute of the same name. Default is nil. JS-TO-EVAL [ from SKELETON-UI-ELEMENT ] string of valid javascript This Javascript will be send with the Ajax response, and evaluated after the innerHTML for this section has been replaced. LABEL-POSITION [ from BASE-FORM-CONTROL ] keyword symbol or nil Specifies where the label tag goes, if any.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/19/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 6,
      "chunk_count": 19
    },
    "id": "b72efa3d61ad69b006df6397c23a52fb"
  },
  {
    "text": "Can be :table-td (label goes in a td before the form control), :table-td-append (label goes in a td after the form control), prepend: (label tag wraps around form control and label text comes before form control), append: (label tag wraps around form control and label text comes after form control), table-with-class: (like :table-td, but adds a class \"form-control\" to the table), or as-div: (puts label and control inside a div of class \"form-control\"). Default is :as-div LANG [ from BASE-FORM-CONTROL ] string or nil Maps to HTML form control attribute of the same name. Default is nil. MAXLENGTH [ from BASE-FORM-CONTROL ] number or nil Maps to HTML form control attribute of the same name. Default is nil. NULLIFY-EMPTY-STRING? [ from BASE-FORM-CONTROL ] boolean Regardless of :domain, if this is non-nil, empty strings will convert to nil. Defaults to (the allow-nil?) NUMBER? boolean Specifies whether this should be a number form control with support for numerical input. Defaults to nil.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/19/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 7,
      "chunk_count": 19
    },
    "id": "f7d645372fa2515b4fb5121679cb08df"
  },
  {
    "text": "s is non-nil, empty strings will convert to nil. Defaults to (the allow-nil?) NUMBER? boolean Specifies whether this should be a number form control with support for numerical input. Defaults to nil. Use number-form-control to get a default of t. ONBLUR [ from BASE-FORM-CONTROL ] string or nil Maps to HTML form control attribute of the same name. Default is nil. ONCHANGE [ from BASE-FORM-CONTROL ] string or nil Maps to HTML form control attribute of the same name. Default is nil, unless ajax-submit-on-change? is non-nil, in which case it calls ajax to set current form value. ONCLICK [ from BASE-FORM-CONTROL ] string or nil Maps to HTML form control attribute of the same name. Default is nil. ONDBLCLICK [ from BASE-FORM-CONTROL ] string or nil Maps to HTML form control attribute of the same name. Default is nil. ONENTER [ from BASE-FORM-CONTROL ] string or nil Maps to HTML form control attribute of the same name.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/19/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 8,
      "chunk_count": 19
    },
    "id": "881294f0f32f65eb851ef1b25de01861"
  },
  {
    "text": "name. Default is nil. ONENTER [ from BASE-FORM-CONTROL ] string or nil Maps to HTML form control attribute of the same name. Default is nil, unless ajax-submit-on-enter? is non-nil, in which case it calls ajax to set current form value. ONFOCUS [ from BASE-FORM-CONTROL ] string or nil Maps to HTML form control attribute of the same name. Default is nil. ONKEYDOWN [ from BASE-FORM-CONTROL ] string or nil Maps to HTML form control attribute of the same name. Default is nil. ONKEYPRESS [ from BASE-FORM-CONTROL ] string or nil Maps to HTML form control attribute of the same name. Default is nil. ONKEYUP [ from BASE-FORM-CONTROL ] string or nil Maps to HTML form control attribute of the same name. Default is nil. ONMOUSEDOWN [ from BASE-FORM-CONTROL ] string or nil Maps to HTML form control attribute of the same name. Default is nil. ONMOUSEMOVE [ from BASE-FORM-CONTROL ] string or nil Maps to HTML form control attribute of the same name. Default is nil.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/19/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 9,
      "chunk_count": 19
    },
    "id": "12b6f86a8f8a27b765506d1bd3c870cf"
  },
  {
    "text": "tribute of the same name. Default is nil. ONMOUSEMOVE [ from BASE-FORM-CONTROL ] string or nil Maps to HTML form control attribute of the same name. Default is nil. ONMOUSEOUT [ from BASE-FORM-CONTROL ] string or nil Maps to HTML form control attribute of the same name. Default is nil. ONMOUSEOVER [ from BASE-FORM-CONTROL ] string or nil Maps to HTML form control attribute of the same name. Default is nil. ONMOUSEUP [ from BASE-FORM-CONTROL ] string or nil Maps to HTML form control attribute of the same name. Default is nil. ONSELECT [ from BASE-FORM-CONTROL ] string or nil Maps to HTML form control attribute of the same name. Default is nil. ORDERED-FORM-CONTROLS [ from SKELETON-UI-ELEMENT ] list of gdl objects, which should be of type 'base-form-control . [Note -- this slot is not really necessary for protecting out-of-bounds sequence references anymore, the form-control processor protects against this by itself now]. These objects are validated and bashed first, in the order given.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/19/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 10,
      "chunk_count": 19
    },
    "id": "50a09d2b31a7bd7e3a5fd902b8e5d70a"
  },
  {
    "text": "necessary for protecting out-of-bounds sequence references anymore, the form-control processor protects against this by itself now]. These objects are validated and bashed first, in the order given. If the cardinality of one form-control depends on another as in the example below, then you should list those dependent objects first. Default is nil. examples: ... :computed-slots ((number-of-nozzles (the number-of-nozzles-form value)) (ordered-form-controls (append (list-elements (the inner-flange-form)) (list (the number-of-nozzles-form))))) :objects ((inner-flange-form :type 'menu-form-control :choice-plist (list :hey \"hey\" :now \"now\") :default :hey :sequence (:size (the number-of-nozzles))) (number-of-nozzles-form :type 'text-form-control :prompt \"Number of Shell Nozzles Required: \" :domain :number :default 0) PASSWORD? boolean Specifies whether this should be a password form control with obscured screen text.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/19/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 11,
      "chunk_count": 19
    },
    "id": "9d13cb5df5ee65ba098e55ac239a4cf0"
  },
  {
    "text": "in :number :default 0) PASSWORD? boolean Specifies whether this should be a password form control with obscured screen text. Note that this does not automatically give encrypted transmission to the server - you need SSL for that. Defaults to nil. Use password-form-control to get a default of t. PLACEHOLDER [ from BASE-FORM-CONTROL ] string Text to place in the field by default, overwritten as soon as the field is selected. Works only in HTML5. Default is nil. POSSIBLE-NILS [ from SKELETON-UI-ELEMENT ] list of keyword symbols Messages corresponding to form fields which could be missing from form submission (e.g. checkbox fields). Defaults to the names of any children or hidden-children of type menu-form-control or checkbox-form-control. PRESET-ALL? [ from SKELETON-UI-ELEMENT ] boolean This switch determines whether all form-controls should be preset before the final setting, in order to allow any interdependencies to be detected for validation or detecting changed values.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/19/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 12,
      "chunk_count": 19
    },
    "id": "b221c4799c29ef5bdd7ae6e3b0705835"
  },
  {
    "text": "switch determines whether all form-controls should be preset before the final setting, in order to allow any interdependencies to be detected for validation or detecting changed values. If this is specified as a non-nil value, then any nil values of (the preset?) on individual form controls will be ignored. If this is specified as nil, then (the preset?) of individual form-controls (default of these is also nil) will be respected. Default is nil. PRESET? [ from BASE-FORM-CONTROL ] boolean This switch determines whether this form-control should be preset before the final setting, in order to allow any interdependencies to be detected for validation or detecting changed values. Default is nil. PRIMARY? [ from SKELETON-FORM-CONTROL ] boolean Set this to t if the form-control should always occur first in an outputted snapshot file. Defaults to nil. PROMPT [ from BASE-FORM-CONTROL ] string The prompt used in the label.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/19/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 13,
      "chunk_count": 19
    },
    "id": "bb54d0096010093257b38cc32e22dfe0"
  },
  {
    "text": "ur first in an outputted snapshot file. Defaults to nil. PROMPT [ from BASE-FORM-CONTROL ] string The prompt used in the label. READONLY? [ from BASE-FORM-CONTROL ] boolean Maps to HTML form control attribute of the same name. Default is nil. ROOT [ from VANILLA-MIXIN* ] gdl instance The root-level node in this object's ``tree'' (instance hierarchy). ROWS integer The number of rows. If more than 1, this will be a TEXTAREA. Defaults to 1. SAFE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances All objects from the :objects specification, including elements of sequences as flat lists. Any children which throw errors come back as a plist with error information SIZE [ from BASE-FORM-CONTROL ] number or nil Maps to HTML form control attribute of the same name. Default is nil. SRC [ from BASE-FORM-CONTROL ] string or nil Maps to HTML form control attribute of the same name. Default is nil.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/19/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 14,
      "chunk_count": 19
    },
    "id": "33c63b3e1f4ecd6aa7ab3be7b17976ba"
  },
  {
    "text": "E-FORM-CONTROL ] string or nil Maps to HTML form control attribute of the same name. Default is nil. STRINGS-FOR-DISPLAY [ from VANILLA-MIXIN* ] string or list of strings Determines how the name of objects of this type will be printed in most places. This defaults to the name-for-display (generally the part's name as specified in its parent), followed by an index number if the part is an element of a sequence. STYLE [ from BASE-FORM-CONTROL ] string or nil Maps to HTML form control attribute of the same name. Default is nil. TABINDEX [ from BASE-FORM-CONTROL ] integer or nil Maps to HTML form control attribute of the same name. Default is nil. TITLE [ from BASE-FORM-CONTROL ] string or nil Maps to HTML form control attribute of the same name. Default is nil. USEMAP [ from BASE-FORM-CONTROL ] string or nil Maps to HTML form control attribute of the same name. Default is nil.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/19/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 15,
      "chunk_count": 19
    },
    "id": "3a3d8bbcdac49955fcbe637b7a5e619d"
  },
  {
    "text": "] string or nil Maps to HTML form control attribute of the same name. Default is nil. VALIDATION-FUNCTION [ from BASE-FORM-CONTROL ] function of one argument The argument will be the submitted form value converted to the proper type. The return value from this function can be nil, any non-nil value, or a plist with keys :validated-value and :error. The following behavior applies: If the function returns nil, error is set to :unspecified-validation-fail. If the function returns a plist with keys :validated-value and :error, and if :error is non-nil, it means the value is not acceptable, the form-controls error message is set to this error (usually a keyword symbol), and the error string will be appended to the html-string by default. If the function returns any other value, then the properly typed submitted form value is considered valid and is used. In the case of an error, the form-control's failed-value message is set to the properly typed submitted form value.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/19/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 16,
      "chunk_count": 19
    },
    "id": "72789f5433242455d15b6eb4bed50b36"
  },
  {
    "text": "ly typed submitted form value is considered valid and is used. In the case of an error, the form-control's failed-value message is set to the properly typed submitted form value. If allow-invalid? is non-nil, then the form-control's value message is also set to this value (i.e. the invalid value is still accepted, even though a non-nil error is present). Default is (list :validated-value value :error nil). VISIBLE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances Additional objects to display in Tatu tree. Typically this would be a subset of hidden-children. Defaults to NIL. Input Slots (optional, defaulting) RESPONDENT [ from SKELETON-UI-ELEMENT ] gdl object Object to respond to the form submission. Defaults to self. Examples Please see base-form-control for all the examples. Package Documentation Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/19/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 17,
      "chunk_count": 19
    },
    "id": "71803912d88f0faa7f6f3135bbe4230c"
  },
  {
    "text": "Documentation Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/19/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 18,
      "chunk_count": 19
    },
    "id": "3ab9f7817e93172dde09ca9096b0993d"
  },
  {
    "text": "GendL Application - GEOMETRY-VIEW-MIXIN Package Documentation Object: GEOMETRY-VIEW-MIXIN (The :GWL Package) Mixins: VANILLA-MIXIN Description Internal mixin for use inside e.g. base-html-graphics-sheet. Input Slots (optional) HIDDEN? [ from VANILLA-MIXIN* ] boolean Indicates whether the object should effectively be a hidden-object even if specified in :objects. Default is nil. LENGTH number Length (\"height\" of screen window) of the graphics viewport. Default is 300. ROOT [ from VANILLA-MIXIN* ] gdl instance The root-level node in this object's ``tree'' (instance hierarchy). SAFE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances All objects from the :objects specification, including elements of sequences as flat lists. Any children which throw errors come back as a plist with error information STRINGS-FOR-DISPLAY [ from VANILLA-MIXIN* ] string or list of strings Determines how the name of objects of this type will be printed in most places.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/8/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 0,
      "chunk_count": 2
    },
    "id": "663b22ec2885ab4f7e9e9391e6bb1ed3"
  },
  {
    "text": "formation STRINGS-FOR-DISPLAY [ from VANILLA-MIXIN* ] string or list of strings Determines how the name of objects of this type will be printed in most places. This defaults to the name-for-display (generally the part's name as specified in its parent), followed by an index number if the part is an element of a sequence. VIEW-OBJECT gdl web-drawing object This must be overridden in the specialized class. VISIBLE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances Additional objects to display in Tatu tree. Typically this would be a subset of hidden-children. Defaults to NIL. WIDTH number Width of the graphics viewport. Default is 300. Package Documentation Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/8/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 1,
      "chunk_count": 2
    },
    "id": "00208cb512acb7f8e0a793b392743617"
  },
  {
    "text": "GendL Application - CHECKBOX-FORM-CONTROL Package Documentation Object: CHECKBOX-FORM-CONTROL (The :GWL Package) Mixins: BASE-FORM-CONTROL , VANILLA-MIXIN Author Dave Cooper, Genworks Description This represents a INPUT of TYPE CHECKBOX Input Slots (optional) ACCEPT [ from BASE-FORM-CONTROL ] string or nil Maps to HTML form control attribute of the same name. Default is nil. ACCESSKEY [ from BASE-FORM-CONTROL ] string or nil Maps to HTML form control attribute of the same name. Default is nil. AJAX-SUBMIT-ON-CHANGE? [ from BASE-FORM-CONTROL ] boolean If set to non-nil, this field's value will be sent to server upon change. Default is nil. AJAX-SUBMIT-ON-ENTER? [ from BASE-FORM-CONTROL ] boolean If set to non-nil, this field's value will be sent to server upon enter. Default is nil. ALIGN [ from BASE-FORM-CONTROL ] string or nil Maps to HTML form control attribute of the same name. Default is nil.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/6/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 0,
      "chunk_count": 18
    },
    "id": "1b8af409e99e41a0857039594778a1f7"
  },
  {
    "text": "from BASE-FORM-CONTROL ] string or nil Maps to HTML form control attribute of the same name. Default is nil. ALLOW-INVALID-TYPE? [ from BASE-FORM-CONTROL ] boolean If non-nil, then values which fail the type test will still be allowed to be the value. Default is nil. ALLOW-INVALID? [ from BASE-FORM-CONTROL ] boolean If non-nil, then values which fail the type or validation test will still be allowed to be the value. Default is t. ALLOW-NIL? [ from BASE-FORM-CONTROL ] boolean Regardless of :domain, if this is non-nil, nil values will be accepted. Defaults to t if (the default) is nil, otherwise defaults to nil. ALT [ from BASE-FORM-CONTROL ] string or nil Maps to HTML form control attribute of the same name. Default is nil. APPEND-ERROR-STRING? [ from BASE-FORM-CONTROL ] boolean Determines whether a default error string is appended to string ouput-function for html-format (and therefore html-string computed-slot as well). Defaults to t.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/6/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 1,
      "chunk_count": 18
    },
    "id": "e271658496ad2fbc60c51d0488be33aa"
  },
  {
    "text": "whether a default error string is appended to string ouput-function for html-format (and therefore html-string computed-slot as well). Defaults to t. BASHEE [ from SKELETON-UI-ELEMENT ] gdl object Object to have its settable computed-slots and/or query-plist set from the fields on the form upon submission. Defaults to self. CLASS [ from SKELETON-FORM-CONTROL ] string You can use this to specify a user-defined class for the form-control. Defaults to nil, which means no class attribute will be generated. DEFAULT [ from BASE-FORM-CONTROL ] lisp value of a type compatible with (the domain) This is the initial default value for the control. This must be specified by user code, or an error will result. DISABLED? [ from BASE-FORM-CONTROL ] boolean Maps to HTML form control attribute of the same name. Default is nil. DOM-ID [ from SKELETON-UI-ELEMENT ] string This is the auto-computed dom-id which should be used for rendering this section.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/6/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 2,
      "chunk_count": 18
    },
    "id": "e391455fa637ff0fffc2a660166eae8a"
  },
  {
    "text": "name. Default is nil. DOM-ID [ from SKELETON-UI-ELEMENT ] string This is the auto-computed dom-id which should be used for rendering this section. If you use the main-div HTML string for rendering this object as a page section, then you do not have to generate the :div tag yourself - the main-div will be a string of HTML which is wrapped in the correct :div tag already. DOMAIN keyword symbol The domain defaults to :boolean for the checkbox-form-control. However, this can be overridden in user code if the checkbox is supposed to return a meaningful value other than nil or t (e.g. for a group of checkboxes with the same name, where each can return a different value). FIELD-NAME [ from SKELETON-FORM-CONTROL ] keyword symbol The name of this field. Computed from the object name within the tree.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/6/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 3,
      "chunk_count": 18
    },
    "id": "6ddfca179be86f9741139553d1e2a66b"
  },
  {
    "text": ". FORCE-VALIDATION-FOR [ from SKELETON-UI-ELEMENT ] list of gdl objects of type form-control The validation-function will be forced on these objects when a form is submitted, even if the object's html form-control does not happen to be included in the values submitted with the form. Defaults to nil. HIDDEN? [ from VANILLA-MIXIN* ] boolean Indicates whether the object should effectively be a hidden-object even if specified in :objects. Default is nil. HTML-SECTIONS [ from SKELETON-UI-ELEMENT ] List of HTML sections to be scanned and possibly replaced in response to GDL Ajax calls. Override this slot at your own risk. The default is all sections who are most recently laid out on the respondent sheet, and this is set programmatically every time the sheet section's main-div is demanded. HTML-SECTIONS-VALID [ from SKELETON-UI-ELEMENT ] List of valid HTML sections to be scanned and possibly replaced in response to GDL Ajax calls. Override this slot at your own risk.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/6/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 4,
      "chunk_count": 18
    },
    "id": "caf61e7e9d2cd69a3390c360f74bcaba"
  },
  {
    "text": "ECTIONS-VALID [ from SKELETON-UI-ELEMENT ] List of valid HTML sections to be scanned and possibly replaced in response to GDL Ajax calls. Override this slot at your own risk. The default is all sections who are most recently laid out on the respondent sheet, and this is set programmatically every time the sheet section's main-div is demanded. ID [ from SKELETON-FORM-CONTROL ] keyword symbol The ID attribute for this tag. Defaults to (the field-name). INNER-HTML [ from SKELETON-UI-ELEMENT ] string This can be used with (str .) [in cl-who] or (:princ .) [in htmlGen] to output this section of the page, without the wrapping :div tag [so if you use this, your code would be responsible for wrapping the :div tag with :id (the dom-id).] ISMAP? [ from BASE-FORM-CONTROL ] boolean Maps to HTML form control attribute of the same name. Default is nil.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/6/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 5,
      "chunk_count": 18
    },
    "id": "4e8a8316c406686ff150b834bb7843b1"
  },
  {
    "text": "ontrol attribute of the same name. Default is nil. JS-TO-EVAL [ from SKELETON-UI-ELEMENT ] string of valid javascript This Javascript will be send with the Ajax response, and evaluated after the innerHTML for this section has been replaced. LABEL-POSITION [ from BASE-FORM-CONTROL ] keyword symbol or nil Specifies where the label tag goes, if any. Can be :table-td (label goes in a td before the form control), :table-td-append (label goes in a td after the form control), prepend: (label tag wraps around form control and label text comes before form control), append: (label tag wraps around form control and label text comes after form control), table-with-class: (like :table-td, but adds a class \"form-control\" to the table), or as-div: (puts label and control inside a div of class \"form-control\"). Default is :as-div LANG [ from BASE-FORM-CONTROL ] string or nil Maps to HTML form control attribute of the same name. Default is nil.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/6/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 6,
      "chunk_count": 18
    },
    "id": "ea524751f3c002fc6f6cbb1490395f4d"
  },
  {
    "text": "ol\"). Default is :as-div LANG [ from BASE-FORM-CONTROL ] string or nil Maps to HTML form control attribute of the same name. Default is nil. MAXLENGTH [ from BASE-FORM-CONTROL ] number or nil Maps to HTML form control attribute of the same name. Default is nil. NULLIFY-EMPTY-STRING? [ from BASE-FORM-CONTROL ] boolean Regardless of :domain, if this is non-nil, empty strings will convert to nil. Defaults to (the allow-nil?) ONBLUR [ from BASE-FORM-CONTROL ] string or nil Maps to HTML form control attribute of the same name. Default is nil. ONCHANGE [ from BASE-FORM-CONTROL ] string or nil Maps to HTML form control attribute of the same name. Default is nil, unless ajax-submit-on-change? is non-nil, in which case it calls ajax to set current form value. ONCLICK [ from BASE-FORM-CONTROL ] string or nil Maps to HTML form control attribute of the same name. Default is nil. ONDBLCLICK [ from BASE-FORM-CONTROL ] string or nil Maps to HTML form control attribute of the same name.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/6/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 7,
      "chunk_count": 18
    },
    "id": "c76170e6ab205a6529d559036dba1d9a"
  },
  {
    "text": "ng or nil Maps to HTML form control attribute of the same name. Default is nil. ONDBLCLICK [ from BASE-FORM-CONTROL ] string or nil Maps to HTML form control attribute of the same name. Default is nil. ONENTER [ from BASE-FORM-CONTROL ] string or nil Maps to HTML form control attribute of the same name. Default is nil, unless ajax-submit-on-enter? is non-nil, in which case it calls ajax to set current form value. ONFOCUS [ from BASE-FORM-CONTROL ] string or nil Maps to HTML form control attribute of the same name. Default is nil. ONKEYDOWN [ from BASE-FORM-CONTROL ] string or nil Maps to HTML form control attribute of the same name. Default is nil. ONKEYPRESS [ from BASE-FORM-CONTROL ] string or nil Maps to HTML form control attribute of the same name. Default is nil. ONKEYUP [ from BASE-FORM-CONTROL ] string or nil Maps to HTML form control attribute of the same name. Default is nil.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/6/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 8,
      "chunk_count": 18
    },
    "id": "2ffccf88aac647b2180d17890ec5a60f"
  },
  {
    "text": "ORM-CONTROL ] string or nil Maps to HTML form control attribute of the same name. Default is nil. ONMOUSEDOWN [ from BASE-FORM-CONTROL ] string or nil Maps to HTML form control attribute of the same name. Default is nil. ONMOUSEMOVE [ from BASE-FORM-CONTROL ] string or nil Maps to HTML form control attribute of the same name. Default is nil. ONMOUSEOUT [ from BASE-FORM-CONTROL ] string or nil Maps to HTML form control attribute of the same name. Default is nil. ONMOUSEOVER [ from BASE-FORM-CONTROL ] string or nil Maps to HTML form control attribute of the same name. Default is nil. ONMOUSEUP [ from BASE-FORM-CONTROL ] string or nil Maps to HTML form control attribute of the same name. Default is nil. ONSELECT [ from BASE-FORM-CONTROL ] string or nil Maps to HTML form control attribute of the same name. Default is nil. ORDERED-FORM-CONTROLS [ from SKELETON-UI-ELEMENT ] list of gdl objects, which should be of type 'base-form-control .",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/6/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 9,
      "chunk_count": 18
    },
    "id": "5f4f67d7a25c1e95e1eb66a1aa6bc244"
  },
  {
    "text": "he same name. Default is nil. ORDERED-FORM-CONTROLS [ from SKELETON-UI-ELEMENT ] list of gdl objects, which should be of type 'base-form-control . [Note -- this slot is not really necessary for protecting out-of-bounds sequence references anymore, the form-control processor protects against this by itself now]. These objects are validated and bashed first, in the order given. If the cardinality of one form-control depends on another as in the example below, then you should list those dependent objects first. Default is nil. examples: ...",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/6/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 10,
      "chunk_count": 18
    },
    "id": "863ef5e07f62d6c435a8cd2d0e821e0b"
  },
  {
    "text": ":computed-slots ((number-of-nozzles (the number-of-nozzles-form value)) (ordered-form-controls (append (list-elements (the inner-flange-form)) (list (the number-of-nozzles-form))))) :objects ((inner-flange-form :type 'menu-form-control :choice-plist (list :hey \"hey\" :now \"now\") :default :hey :sequence (:size (the number-of-nozzles))) (number-of-nozzles-form :type 'text-form-control :prompt \"Number of Shell Nozzles Required: \" :domain :number :default 0) PLACEHOLDER [ from BASE-FORM-CONTROL ] string Text to place in the field by default, overwritten as soon as the field is selected. Works only in HTML5. Default is nil. POSSIBLE-NIL? boolean Indicates whether this should be included in possible-nils. Defaults to t. POSSIBLE-NILS [ from SKELETON-UI-ELEMENT ] list of keyword symbols Messages corresponding to form fields which could be missing from form submission (e.g. checkbox fields).",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/6/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 11,
      "chunk_count": 18
    },
    "id": "3fe9c4a21c27aeba87b0a6c1423820fd"
  },
  {
    "text": "corresponding to form fields which could be missing from form submission (e.g. checkbox fields). Defaults to the names of any children or hidden-children of type menu-form-control or checkbox-form-control. PRESET-ALL? [ from SKELETON-UI-ELEMENT ] boolean This switch determines whether all form-controls should be preset before the final setting, in order to allow any interdependencies to be detected for validation or detecting changed values. If this is specified as a non-nil value, then any nil values of (the preset?) on individual form controls will be ignored. If this is specified as nil, then (the preset?) of individual form-controls (default of these is also nil) will be respected. Default is nil. PRESET? [ from BASE-FORM-CONTROL ] boolean This switch determines whether this form-control should be preset before the final setting, in order to allow any interdependencies to be detected for validation or detecting changed values. Default is nil.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/6/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 12,
      "chunk_count": 18
    },
    "id": "56ab4c319949ad4154421a8a3d34eb6a"
  },
  {
    "text": "ol should be preset before the final setting, in order to allow any interdependencies to be detected for validation or detecting changed values. Default is nil. PRIMARY? [ from SKELETON-FORM-CONTROL ] boolean Set this to t if the form-control should always occur first in an outputted snapshot file. Defaults to nil. PROMPT [ from BASE-FORM-CONTROL ] string The prompt used in the label. READONLY? [ from BASE-FORM-CONTROL ] boolean Maps to HTML form control attribute of the same name. Default is nil. ROOT [ from VANILLA-MIXIN* ] gdl instance The root-level node in this object's ``tree'' (instance hierarchy). SAFE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances All objects from the :objects specification, including elements of sequences as flat lists. Any children which throw errors come back as a plist with error information SIZE [ from BASE-FORM-CONTROL ] number or nil Maps to HTML form control attribute of the same name. Default is nil.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/6/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 13,
      "chunk_count": 18
    },
    "id": "6b150ecee4d8c3b72e4b131b567eae53"
  },
  {
    "text": "e back as a plist with error information SIZE [ from BASE-FORM-CONTROL ] number or nil Maps to HTML form control attribute of the same name. Default is nil. SRC [ from BASE-FORM-CONTROL ] string or nil Maps to HTML form control attribute of the same name. Default is nil. STRINGS-FOR-DISPLAY [ from VANILLA-MIXIN* ] string or list of strings Determines how the name of objects of this type will be printed in most places. This defaults to the name-for-display (generally the part's name as specified in its parent), followed by an index number if the part is an element of a sequence. STYLE [ from BASE-FORM-CONTROL ] string or nil Maps to HTML form control attribute of the same name. Default is nil. TABINDEX [ from BASE-FORM-CONTROL ] integer or nil Maps to HTML form control attribute of the same name. Default is nil. TITLE [ from BASE-FORM-CONTROL ] string or nil Maps to HTML form control attribute of the same name. Default is nil.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/6/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 14,
      "chunk_count": 18
    },
    "id": "7e76bd1c352ea45ff3e21f70e722b22c"
  },
  {
    "text": "name. Default is nil. TITLE [ from BASE-FORM-CONTROL ] string or nil Maps to HTML form control attribute of the same name. Default is nil. USEMAP [ from BASE-FORM-CONTROL ] string or nil Maps to HTML form control attribute of the same name. Default is nil. VALIDATION-FUNCTION [ from BASE-FORM-CONTROL ] function of one argument The argument will be the submitted form value converted to the proper type. The return value from this function can be nil, any non-nil value, or a plist with keys :validated-value and :error. The following behavior applies: If the function returns nil, error is set to :unspecified-validation-fail. If the function returns a plist with keys :validated-value and :error, and if :error is non-nil, it means the value is not acceptable, the form-controls error message is set to this error (usually a keyword symbol), and the error string will be appended to the html-string by default.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/6/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 15,
      "chunk_count": 18
    },
    "id": "e81e8ae688e7198ce03e9c56f1349f55"
  },
  {
    "text": "set to this error (usually a keyword symbol), and the error string will be appended to the html-string by default. If the function returns any other value, then the properly typed submitted form value is considered valid and is used. In the case of an error, the form-control's failed-value message is set to the properly typed submitted form value. If allow-invalid? is non-nil, then the form-control's value message is also set to this value (i.e. the invalid value is still accepted, even though a non-nil error is present). Default is (list :validated-value value :error nil). VISIBLE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances Additional objects to display in Tatu tree. Typically this would be a subset of hidden-children. Defaults to NIL. Input Slots (optional, defaulting) RESPONDENT [ from SKELETON-UI-ELEMENT ] gdl object Object to respond to the form submission. Defaults to self. Examples Please see base-form-control for all the examples.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/6/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 16,
      "chunk_count": 18
    },
    "id": "6585886ce10b309026725e9e1630fd0a"
  },
  {
    "text": "ENT [ from SKELETON-UI-ELEMENT ] gdl object Object to respond to the form submission. Defaults to self. Examples Please see base-form-control for all the examples. Package Documentation Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/6/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 17,
      "chunk_count": 18
    },
    "id": "de96143fc2173b7718dd21ca56280466"
  },
  {
    "text": "GendL Application - BASE-HTML-GRAPHICS-SHEET Package Documentation Object: BASE-HTML-GRAPHICS-SHEET (The :GWL Package) Mixins: BASE-HTML-SHEET , GEOMETRY-VIEW-MIXIN , BASE-OBJECT Description This mixin allows a part to be displayed as a web page in GWL, and to contain one graphics area. It requires the geom-base module to be loaded. This will probably be extended to allow more than one graphics area. This mixin inherits from base-html-sheet, so just like with base-html-sheet you can prepare the output with the write-html-sheet function in a the object which mixes this in, or in a main-sheet output-function in an html-format view of the object. Input Slots (optional) AFTER-PRESENT! [ from BASE-HTML-SHEET ] void This is an empty function by default, but can be overridden in the respondent of a form, to do some processing after the respondent's write-html-sheet function runs to present the object.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/4/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 0,
      "chunk_count": 18
    },
    "id": "1b8fb130b7044664d4d20dca6117474e"
  },
  {
    "text": "a form, to do some processing after the respondent's write-html-sheet function runs to present the object. AFTER-SET! [ from BASE-HTML-SHEET ] void This is an empty function by default, but can be overridden in the requestor of a form, to do some processing after the requestor's form values are set into the specified bashee. BASHEE [ from SKELETON-UI-ELEMENT ] gdl object Object to have its settable computed-slots and/or query-plist set from the fields on the form upon submission. Defaults to self. BEFORE-PRESENT! [ from BASE-HTML-SHEET ] void This is an empty function by default, but can be overridden in the respondent of a form, to do some processing before the respondent's write-html-sheet function runs to present the object. This can be useful especially for objects which are subclasses of higher-level mixins such as application-mixin and node-mixin , where you do not have direct access to the write-html-sheet function and typically only define the model-inputs function.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/4/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 1,
      "chunk_count": 18
    },
    "id": "655ad69781f8397744ee582122ef0d2a"
  },
  {
    "text": "s of higher-level mixins such as application-mixin and node-mixin , where you do not have direct access to the write-html-sheet function and typically only define the model-inputs function. It is not always reliable to do processing in the model-inputs function, since some slots which depend on your intended modifications may already have been evaluated by the time the model-inputs function runs. BEFORE-RESPONSE! [ from BASE-HTML-SHEET ] void This is an empty function by default, but can be overridden in a user specialization of base-html-sheet, to do some processing before the header-plist is evaluated and before the HTTP response is actually initiated. BEFORE-SET! [ from BASE-HTML-SHEET ] void This is an empty function by default, but can be overridden in the requestor of a form, to do some processing before the requestor's form values are set into the specified bashee.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/4/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 2,
      "chunk_count": 18
    },
    "id": "46dbe041dcd62d95f59f06d1b284f0a0"
  },
  {
    "text": "ome processing before the requestor's form values are set into the specified bashee. BOUNDING-BOX [ from BASE-OBJECT ] list of two 3d points The left front bottom and right rear top corners, in global coordinates, of the rectangular volume bounding the tree of geometric objects rooted at this object. CENTER [ from BASE-OBJECT ] 3d point Indicates in global coordinates where the center of the reference box of this object should be located. CHECK-SANITY? [ from BASE-HTML-SHEET ] boolean Determines whether a a sanity check is done (with the check-sanity function) before presenting the response page if this page is a respondent. Default is NIL. DOM-ID [ from SKELETON-UI-ELEMENT ] string This is the auto-computed dom-id which should be used for rendering this section. If you use the main-div HTML string for rendering this object as a page section, then you do not have to generate the :div tag yourself - the main-div will be a string of HTML which is wrapped in the correct :div tag already.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/4/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 3,
      "chunk_count": 18
    },
    "id": "525481df97ce9f9b0b7acafc82ad55a0"
  },
  {
    "text": "ML string for rendering this object as a page section, then you do not have to generate the :div tag yourself - the main-div will be a string of HTML which is wrapped in the correct :div tag already. FORCE-VALIDATION-FOR [ from SKELETON-UI-ELEMENT ] list of gdl objects of type form-control The validation-function will be forced on these objects when a form is submitted, even if the object's html form-control does not happen to be included in the values submitted with the form. Defaults to nil. HIDDEN? [ from VANILLA-MIXIN* ] boolean Indicates whether the object should effectively be a hidden-object even if specified in :objects. Default is nil. HTML-SECTIONS [ from SKELETON-UI-ELEMENT ] List of HTML sections to be scanned and possibly replaced in response to GDL Ajax calls. Override this slot at your own risk. The default is all sections who are most recently laid out on the respondent sheet, and this is set programmatically every time the sheet section's main-div is demanded.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/4/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 4,
      "chunk_count": 18
    },
    "id": "8f73c003e19d867fb30b675a7788c695"
  },
  {
    "text": "lot at your own risk. The default is all sections who are most recently laid out on the respondent sheet, and this is set programmatically every time the sheet section's main-div is demanded. HTML-SECTIONS-VALID [ from SKELETON-UI-ELEMENT ] List of valid HTML sections to be scanned and possibly replaced in response to GDL Ajax calls. Override this slot at your own risk. The default is all sections who are most recently laid out on the respondent sheet, and this is set programmatically every time the sheet section's main-div is demanded. IMAGE-FILE [ from BASE-OBJECT ] pathname or string Points to a pre-existing image file to be displayed instead of actual geometry for this object.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/4/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 5,
      "chunk_count": 18
    },
    "id": "d8bc12acdbdc7f98fb28054277bb64ab"
  },
  {
    "text": "Defaults to nil INNER-HTML [ from SKELETON-UI-ELEMENT ] string This can be used with (str .) [in cl-who] or (:princ .) [in htmlGen] to output this section of the page, without the wrapping :div tag [so if you use this, your code would be responsible for wrapping the :div tag with :id (the dom-id).] JS-TO-EVAL [ from SKELETON-UI-ELEMENT ] string of valid javascript This Javascript will be send with the Ajax response, and evaluated after the innerHTML for this section has been replaced. LENGTH [ from GEOMETRY-VIEW-MIXIN ] number Length (\"height\" of screen window) of the graphics viewport. Default is 300. LOCAL-BOX [ from BASE-OBJECT ] list of two 3d points The left front bottom and right rear top corners, in global coordinates, of the rectangular volume bounding this geometric object. OBLIQUENESS [ from BASE-OBJECT ] 3x3 orthonormal matrix of double-float numbers This is synonymous with the orientation .",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/4/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 6,
      "chunk_count": 18
    },
    "id": "dc9f8eb13da00d67ba2c83b8f27f1fb1"
  },
  {
    "text": "UENESS [ from BASE-OBJECT ] 3x3 orthonormal matrix of double-float numbers This is synonymous with the orientation . ONCLICK-FUNCTION [ from BASE-OBJECT ] lambda function of zero arguments, or nil If non-nil, this function gets invoked when the user clicks the object in graphics front-ends which support this functionality, e.g. SVG/Raphael and X3DOM. ORDERED-FORM-CONTROLS [ from SKELETON-UI-ELEMENT ] list of gdl objects, which should be of type 'base-form-control . [Note -- this slot is not really necessary for protecting out-of-bounds sequence references anymore, the form-control processor protects against this by itself now]. These objects are validated and bashed first, in the order given. If the cardinality of one form-control depends on another as in the example below, then you should list those dependent objects first. Default is nil. examples: ...",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/4/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 7,
      "chunk_count": 18
    },
    "id": "c974f4ec4df2d9e7231a35f77e778ffe"
  },
  {
    "text": "list those dependent objects first. Default is nil. examples: ... :computed-slots ((number-of-nozzles (the number-of-nozzles-form value)) (ordered-form-controls (append (list-elements (the inner-flange-form)) (list (the number-of-nozzles-form))))) :objects ((inner-flange-form :type 'menu-form-control :choice-plist (list :hey \"hey\" :now \"now\") :default :hey :sequence (:size (the number-of-nozzles))) (number-of-nozzles-form :type 'text-form-control :prompt \"Number of Shell Nozzles Required: \" :domain :number :default 0) ORIENTATION [ from BASE-OBJECT ] 3x3 matrix of double-float numbers Indicates the absolute Rotation Matrix used to create the coordinate system of this object. This matrix is given in absolute terms (i.e. with respect to the root's orientation), and is generally created with the alignment function. It should be an orthonormal matrix, meaning each row is a vector with a magnitude of one (1.0).",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/4/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 8,
      "chunk_count": 18
    },
    "id": "63da03c72efa5d1f8606a7f3f0e3fccc"
  },
  {
    "text": "the alignment function. It should be an orthonormal matrix, meaning each row is a vector with a magnitude of one (1.0). POSSIBLE-NILS [ from SKELETON-UI-ELEMENT ] list of keyword symbols Messages corresponding to form fields which could be missing from form submission (e.g. checkbox fields). Defaults to the names of any children or hidden-children of type menu-form-control or checkbox-form-control. PRESET-ALL? [ from SKELETON-UI-ELEMENT ] boolean This switch determines whether all form-controls should be preset before the final setting, in order to allow any interdependencies to be detected for validation or detecting changed values. If this is specified as a non-nil value, then any nil values of (the preset?) on individual form controls will be ignored. If this is specified as nil, then (the preset?) of individual form-controls (default of these is also nil) will be respected. Default is nil.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/4/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 9,
      "chunk_count": 18
    },
    "id": "b62318f2a360e85162622e5fde918284"
  },
  {
    "text": "(the preset?) of individual form-controls (default of these is also nil) will be respected. Default is nil. PROCESS-COOKIES! [ from BASE-HTML-SHEET ] void This is an empty function by default, but can be overridden in a user specialization of base-html-sheet, to do some processing before the header-plist is evaluated and before the HTTP response is actually initiated, but after the cookies-received have been set. RETURN-OBJECT [ from BASE-HTML-SHEET ] gdl object Default object to which control will return with the write-back-link method ROOT [ from VANILLA-MIXIN* ] gdl instance The root-level node in this object's ``tree'' (instance hierarchy). SAFE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances All objects from the :objects specification, including elements of sequences as flat lists. Any children which throw errors come back as a plist with error information STANDARD-VIEWS plist of keywords and 3d vectors . Indicates the views to show in the graphics controls.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/4/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 10,
      "chunk_count": 18
    },
    "id": "cafa8f980ea69746587958a4f8871e43"
  },
  {
    "text": "sts. Any children which throw errors come back as a plist with error information STANDARD-VIEWS plist of keywords and 3d vectors . Indicates the views to show in the graphics controls. STRINGS-FOR-DISPLAY [ from VANILLA-MIXIN* ] string or list of strings Determines how the name of objects of this type will be printed in most places. This defaults to the name-for-display (generally the part's name as specified in its parent), followed by an index number if the part is an element of a sequence. TARGET [ from BASE-HTML-SHEET ] string Name of a browser frame or window to display this page. Default of NIL indicates to use the same window. TRANSITORY-SLOTS [ from BASE-HTML-SHEET ] list of keyword symbols Messages corresponding to form fields which should not be retained against Updates to the model (e.g. calls to the update! function or hitting the Update button or link in the browser in development mode). Defaults to NIL (the empty list).",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/4/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 11,
      "chunk_count": 18
    },
    "id": "83f166862cbf9dd15f7df68cbf22da2c"
  },
  {
    "text": "del (e.g. calls to the update! function or hitting the Update button or link in the browser in development mode). Defaults to NIL (the empty list). USE-BSPLINES? boolean Determines whether to use native bspline data in the vrml VIEW-OBJECT [ from GEOMETRY-VIEW-MIXIN ] gdl web-drawing object This must be overridden in the specialized class. VISIBLE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances Additional objects to display in Tatu tree. Typically this would be a subset of hidden-children. Defaults to NIL. WIDTH [ from GEOMETRY-VIEW-MIXIN ] number Width of the graphics viewport. Default is 300. Input Slots (optional, settable) DIGITATION-MODE keyword symbol, one of :zoom-and-center , :report-point , or :measure-distance . If :zoom-and-center , sets the user-center and user-scale accordingly when graphics area is clicked. If :report-point , the slot digitized-point is set with the x y value. If measure-distance , the slot :digitized-distance is set with the resultant distance.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/4/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 12,
      "chunk_count": 18
    },
    "id": "08011e22848fb18d85d6b7b005f67160"
  },
  {
    "text": "ordingly when graphics area is clicked. If :report-point , the slot digitized-point is set with the x y value. If measure-distance , the slot :digitized-distance is set with the resultant distance. Default is :zoom-and-center IMAGE-FORMAT keyword symbol Determines the default image format. Defaults to :png VIEW keyword symbol Determines the default view from the standard-views . Defaults to :trimetric. ZOOM-FACTOR number The factor used for zooming in or out. ZOOM-MODE keyword symbol, one of :in, :out, or :none, or nil If :in, then clicks in the graphics area will increase the zoom factor by (the zoom-factor). If :out, then clicks will decrease the factor by that amount. If :none or nil, then clicks will have no effect. Input Slots (optional, defaulting) DISPLAY-CONTROLS [ from BASE-OBJECT ] plist May contain keywords and values indicating display characteristics for this object.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/4/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 13,
      "chunk_count": 18
    },
    "id": "bc90ad298b6ac20f33af2dea889c1da1"
  },
  {
    "text": "] plist May contain keywords and values indicating display characteristics for this object. The following keywords are recognized currently: :color color keyword from the *color-table* parameter, or an HTML-style hexidecimal RGB string value, e.g. \"#FFFFFF\" for pure white. Defaults to :black. :line-thickness an integer, defaulting to 1, indicating relative line thickness for wireframe representations of this object. :dash-pattern (currently PDF/PNG/JPEG only). This is a list of two or three numbers which indicate the length, in pixels, of the dashes and blank spaces in a dashed line. The optional third number indicates how far into the line or curve to start the dash pattern. HEIGHT [ from BASE-OBJECT ] number Z-axis dimension of the reference box. Defaults to zero. RESPONDENT [ from SKELETON-UI-ELEMENT ] gdl object Object to respond to the form submission. Defaults to self.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/4/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 14,
      "chunk_count": 18
    },
    "id": "6ea459573c28980bb38c5bc1510ad124"
  },
  {
    "text": "ETON-UI-ELEMENT ] gdl object Object to respond to the form submission. Defaults to self. GDL Functions BACKGROUND-COLOR keyword symbol, string, list, or vector Default background for the graphics viewport. Can be specified as a name (keyword or string) in *color-table*, an html-style hex string (starting with #), or a decimal RGB triplet in a list or vector. The default comes from the :background entry in *colors-default* . FOREGROUND-COLOR keyword symbol, string, list, or vector Default foreground for the graphics viewport. Can be specified as a name (keyword or string) in *color-table*, an html-style hex string (starting with #), or a decimal RGB triplet in a list or vector. The default comes from the :foreground entry in *colors-default* . REPORT-POINT void Process the points selected by digitizing in the graphics. You can override this function to do your own processing. By default, it prints the information to the console.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/4/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 15,
      "chunk_count": 18
    },
    "id": "01e29b6f7f65a1fb87cf336df78257ab"
  },
  {
    "text": "y digitizing in the graphics. You can override this function to do your own processing. By default, it prints the information to the console. arguments: x Number The X Coordinate of the digitized point y Number The Y Coordinate of the digitized point WRITE-EMBEDDED-VRML-WORLD void Writes an EMBED tag and publishes a VRML world for the view-object child of this object. The view-object child should exist and be of type web-drawing . WRITE-EMBEDDED-X3D-WORLD void Writes an OBJECT tag and publishes an X3D world for the view-object child of this object. The view-object child should exist and be of type web-drawing . WRITE-GEOMETRY void Writes an image tag and publishes an image for the view-object child of this object. The view-object child should exist and be of type web-drawing . For objects of type gwl:application-mixin or gwl:node-mixin , this is done automatically.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/4/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 16,
      "chunk_count": 18
    },
    "id": "33a1dbbb51a0b6fc99adb2878a7e6b74"
  },
  {
    "text": "of type gwl:application-mixin or gwl:node-mixin , this is done automatically. For the time being, we recommend that you use gwl:application-mixin or gwl:node-mixin if you want to display geometric parts in a GWL application. keyword arguments: include-view-controls? Boolean , Default Value: T Determines whether the standard view controls are displayed below the image Package Documentation Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/4/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 17,
      "chunk_count": 18
    },
    "id": "c81011825e49af1262b45aafcb1a504b"
  },
  {
    "text": "GendL Application - NODE-MIXIN Package Documentation Object: NODE-MIXIN (The :GWL Package) Mixins: LAYOUT-MIXIN , VANILLA-MIXIN Description Generates a default GWL user interface with a model-inputs area, user-navigable tree with child applications, graphics view with controls, and rule display. Child objects should be of type node-mixin or application-mixin . Child hidden-objects may be of any type. The ui-display-list-objects is appended up automatically from those of the children. Input Slots (optional) AFTER-PRESENT! [ from BASE-HTML-SHEET ] void This is an empty function by default, but can be overridden in the respondent of a form, to do some processing after the respondent's write-html-sheet function runs to present the object. AFTER-SET! [ from BASE-HTML-SHEET ] void This is an empty function by default, but can be overridden in the requestor of a form, to do some processing after the requestor's form values are set into the specified bashee.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/13/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 0,
      "chunk_count": 21
    },
    "id": "db89489184248dc80ffde56a38441b7e"
  },
  {
    "text": "ty function by default, but can be overridden in the requestor of a form, to do some processing after the requestor's form values are set into the specified bashee. AVAILABLE-IMAGE-FORMATS [ from LAYOUT-MIXIN ] list of keyword symbols Determines which formats are available in the Preferences. Defaults to :png, :jpeg, and :vrml. BASHEE [ from SKELETON-UI-ELEMENT ] gdl object Object to have its settable computed-slots and/or query-plist set from the fields on the form upon submission. Defaults to self. BEFORE-PRESENT! [ from BASE-HTML-SHEET ] void This is an empty function by default, but can be overridden in the respondent of a form, to do some processing before the respondent's write-html-sheet function runs to present the object. This can be useful especially for objects which are subclasses of higher-level mixins such as application-mixin and node-mixin , where you do not have direct access to the write-html-sheet function and typically only define the model-inputs function.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/13/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 1,
      "chunk_count": 21
    },
    "id": "bbe5117362620f6ec44282a6b426e669"
  },
  {
    "text": "ses of higher-level mixins such as application-mixin and node-mixin , where you do not have direct access to the write-html-sheet function and typically only define the model-inputs function. It is not always reliable to do processing in the model-inputs function, since some slots which depend on your intended modifications may already have been evaluated by the time the model-inputs function runs. BEFORE-RESPONSE! [ from BASE-HTML-SHEET ] void This is an empty function by default, but can be overridden in a user specialization of base-html-sheet, to do some processing before the header-plist is evaluated and before the HTTP response is actually initiated. BEFORE-SET! [ from BASE-HTML-SHEET ] void This is an empty function by default, but can be overridden in the requestor of a form, to do some processing before the requestor's form values are set into the specified bashee. BODY-BGCOLOR [ from LAYOUT-MIXIN ] keyword symbol Color keyword from *color-table* for the body background.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/13/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 2,
      "chunk_count": 21
    },
    "id": "b3479abac7853a6b38d9ff70a48901a6"
  },
  {
    "text": "some processing before the requestor's form values are set into the specified bashee. BODY-BGCOLOR [ from LAYOUT-MIXIN ] keyword symbol Color keyword from *color-table* for the body background. Defaults to :blue-sky . BOUNDING-BOX [ from BASE-OBJECT ] list of two 3d points The left front bottom and right rear top corners, in global coordinates, of the rectangular volume bounding the tree of geometric objects rooted at this object. CENTER [ from BASE-OBJECT ] 3d point Indicates in global coordinates where the center of the reference box of this object should be located. CHECK-SANITY? [ from BASE-HTML-SHEET ] boolean Determines whether a a sanity check is done (with the check-sanity function) before presenting the response page if this page is a respondent. Default is NIL. DEFAULT-TREE-DEPTH integer Determines how many descendant levels to show in the tree initially. Default is 1.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/13/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 3,
      "chunk_count": 21
    },
    "id": "fea4e7951888949266e57f18e77bf3e8"
  },
  {
    "text": "H integer Determines how many descendant levels to show in the tree initially. Default is 1. DOM-ID [ from SKELETON-UI-ELEMENT ] string This is the auto-computed dom-id which should be used for rendering this section. If you use the main-div HTML string for rendering this object as a page section, then you do not have to generate the :div tag yourself - the main-div will be a string of HTML which is wrapped in the correct :div tag already. FORCE-VALIDATION-FOR [ from SKELETON-UI-ELEMENT ] list of gdl objects of type form-control The validation-function will be forced on these objects when a form is submitted, even if the object's html form-control does not happen to be included in the values submitted with the form. Defaults to nil. HEIGHT [ from BASE-OBJECT ] number Z-axis dimension of the reference box. Defaults to zero. HIDDEN? [ from VANILLA-MIXIN* ] boolean Indicates whether the object should effectively be a hidden-object even if specified in :objects. Default is nil.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/13/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 4,
      "chunk_count": 21
    },
    "id": "1fb4f8686bc9b9c7ae5680aef279ad5b"
  },
  {
    "text": "e reference box. Defaults to zero. HIDDEN? [ from VANILLA-MIXIN* ] boolean Indicates whether the object should effectively be a hidden-object even if specified in :objects. Default is nil. HTML-SECTIONS [ from SKELETON-UI-ELEMENT ] List of HTML sections to be scanned and possibly replaced in response to GDL Ajax calls. Override this slot at your own risk. The default is all sections who are most recently laid out on the respondent sheet, and this is set programmatically every time the sheet section's main-div is demanded. HTML-SECTIONS-VALID [ from SKELETON-UI-ELEMENT ] List of valid HTML sections to be scanned and possibly replaced in response to GDL Ajax calls. Override this slot at your own risk. The default is all sections who are most recently laid out on the respondent sheet, and this is set programmatically every time the sheet section's main-div is demanded.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/13/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 5,
      "chunk_count": 21
    },
    "id": "73bc04663a657f464d181ad95ae2a1ef"
  },
  {
    "text": "s is set programmatically every time the sheet section's main-div is demanded. IMAGE-FILE [ from BASE-OBJECT ] pathname or string Points to a pre-existing image file to be displayed instead of actual geometry for this object. Defaults to nil IMAGE-FORMAT [ from BASE-HTML-GRAPHICS-SHEET ] keyword symbol Determines the default image format. Defaults to :png INNER-HTML [ from SKELETON-UI-ELEMENT ] string This can be used with (str .) [in cl-who] or (:princ .) [in htmlGen] to output this section of the page, without the wrapping :div tag [so if you use this, your code would be responsible for wrapping the :div tag with :id (the dom-id).] INPUTS-BGCOLOR [ from LAYOUT-MIXIN ] keyword symbol Color keyword from *color-table* for the model-inputs area background. Defaults to :aquamarine . INPUTS-TITLE [ from LAYOUT-MIXIN ] string Title for the model-inputs section. Defaults to \"Model Inputs\".",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/13/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 6,
      "chunk_count": 21
    },
    "id": "ca93be5c82c6166cd898c0c27e7a68fa"
  },
  {
    "text": "TLE [ from LAYOUT-MIXIN ] string Title for the model-inputs section. Defaults to \"Model Inputs\". JS-TO-EVAL [ from SKELETON-UI-ELEMENT ] string of valid javascript This Javascript will be send with the Ajax response, and evaluated after the innerHTML for this section has been replaced. LENGTH [ from GEOMETRY-VIEW-MIXIN ] number Length (\"height\" of screen window) of the graphics viewport. Default is 300. LOCAL-BOX [ from BASE-OBJECT ] list of two 3d points The left front bottom and right rear top corners, in global coordinates, of the rectangular volume bounding this geometric object. MULTIPART-FORM? [ from LAYOUT-MIXIN ] boolean Determines whether the embedded form will support multipart MIME parts. Defaults to NIL. NODE-UI-DISPLAY-LIST-OBJECTS gdl object list Appends additional objects to the automatically-appended ui-display-list-objects from the children. OBLIQUENESS [ from BASE-OBJECT ] 3x3 orthonormal matrix of double-float numbers This is synonymous with the orientation .",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/13/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 7,
      "chunk_count": 21
    },
    "id": "d85e459de705c86e38dfb3f267ff9a7a"
  },
  {
    "text": "the automatically-appended ui-display-list-objects from the children. OBLIQUENESS [ from BASE-OBJECT ] 3x3 orthonormal matrix of double-float numbers This is synonymous with the orientation . ONCLICK-FUNCTION [ from BASE-OBJECT ] lambda function of zero arguments, or nil If non-nil, this function gets invoked when the user clicks the object in graphics front-ends which support this functionality, e.g. SVG/Raphael and X3DOM. ORDERED-FORM-CONTROLS [ from SKELETON-UI-ELEMENT ] list of gdl objects, which should be of type 'base-form-control . [Note -- this slot is not really necessary for protecting out-of-bounds sequence references anymore, the form-control processor protects against this by itself now]. These objects are validated and bashed first, in the order given. If the cardinality of one form-control depends on another as in the example below, then you should list those dependent objects first. Default is nil. examples: ...",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/13/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 8,
      "chunk_count": 21
    },
    "id": "800af1484a63b4d4137c90d2788cab9a"
  },
  {
    "text": "one form-control depends on another as in the example below, then you should list those dependent objects first. Default is nil. examples: ... :computed-slots ((number-of-nozzles (the number-of-nozzles-form value)) (ordered-form-controls (append (list-elements (the inner-flange-form)) (list (the number-of-nozzles-form))))) :objects ((inner-flange-form :type 'menu-form-control :choice-plist (list :hey \"hey\" :now \"now\") :default :hey :sequence (:size (the number-of-nozzles))) (number-of-nozzles-form :type 'text-form-control :prompt \"Number of Shell Nozzles Required: \" :domain :number :default 0) ORIENTATION [ from BASE-OBJECT ] 3x3 matrix of double-float numbers Indicates the absolute Rotation Matrix used to create the coordinate system of this object. This matrix is given in absolute terms (i.e. with respect to the root's orientation), and is generally created with the alignment function. It should be an orthonormal matrix, meaning each row is a vector with a magnitude of one (1.0).",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/13/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 9,
      "chunk_count": 21
    },
    "id": "73b87c36b9855731f40a81807182cf62"
  },
  {
    "text": "(i.e. with respect to the root's orientation), and is generally created with the alignment function. It should be an orthonormal matrix, meaning each row is a vector with a magnitude of one (1.0). OTHER-RULES [ from LAYOUT-MIXIN ] list of gdl objects of type base-rule-object or (preferably) gwl-base-rule-object . Links to these will be displayed in the other-rules section. Default to the collection of all objects of type base-rule-object from this node in the tree down to the leaves, whose violated? message evaluates to NIL. OTHER-RULES-BGCOLOR [ from LAYOUT-MIXIN ] keyword symbol Color keyword from *color-table* for the other-rules area background. Defaults to :aquamarine . OTHER-RULES-TITLE [ from LAYOUT-MIXIN ] string Title for the other-rules section. Defaults to \"Other Rules\". PAGE-TITLE [ from LAYOUT-MIXIN ] string The title to display on the page and in the tree. Defaults to (the strings-for-display) .",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/13/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 10,
      "chunk_count": 21
    },
    "id": "33541f229bc7df886b1906e3886ea109"
  },
  {
    "text": "TLE [ from LAYOUT-MIXIN ] string The title to display on the page and in the tree. Defaults to (the strings-for-display) . POSSIBLE-NILS [ from SKELETON-UI-ELEMENT ] list of keyword symbols Messages corresponding to form fields which could be missing from form submission (e.g. checkbox fields). Defaults to the names of any children or hidden-children of type menu-form-control or checkbox-form-control. PRESET-ALL? [ from SKELETON-UI-ELEMENT ] boolean This switch determines whether all form-controls should be preset before the final setting, in order to allow any interdependencies to be detected for validation or detecting changed values. If this is specified as a non-nil value, then any nil values of (the preset?) on individual form controls will be ignored. If this is specified as nil, then (the preset?) of individual form-controls (default of these is also nil) will be respected. Default is nil.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/13/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 11,
      "chunk_count": 21
    },
    "id": "b6afacaf77cd0e3100735036f413f3b5"
  },
  {
    "text": "n (the preset?) of individual form-controls (default of these is also nil) will be respected. Default is nil. PROCESS-COOKIES! [ from BASE-HTML-SHEET ] void This is an empty function by default, but can be overridden in a user specialization of base-html-sheet, to do some processing before the header-plist is evaluated and before the HTTP response is actually initiated, but after the cookies-received have been set. RETURN-OBJECT [ from BASE-HTML-SHEET ] gdl object Default object to which control will return with the write-back-link method ROOT [ from VANILLA-MIXIN* ] gdl instance The root-level node in this object's ``tree'' (instance hierarchy). SAFE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances All objects from the :objects specification, including elements of sequences as flat lists. Any children which throw errors come back as a plist with error information SHOW-TITLE? [ from LAYOUT-MIXIN ] boolean Indicates whether to display the title at the top of the page.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/13/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 12,
      "chunk_count": 21
    },
    "id": "f97c993278ff37d4ff87de6f915ad627"
  },
  {
    "text": "lists. Any children which throw errors come back as a plist with error information SHOW-TITLE? [ from LAYOUT-MIXIN ] boolean Indicates whether to display the title at the top of the page. Defaults to T. STANDARD-VIEWS [ from BASE-HTML-GRAPHICS-SHEET ] plist of keywords and 3d vectors . Indicates the views to show in the graphics controls. STRINGS-FOR-DISPLAY [ from VANILLA-MIXIN* ] string or list of strings Determines how the name of objects of this type will be printed in most places. This defaults to the name-for-display (generally the part's name as specified in its parent), followed by an index number if the part is an element of a sequence. TARGET [ from BASE-HTML-SHEET ] string Name of a browser frame or window to display this page. Default of NIL indicates to use the same window. TRANSITORY-SLOTS [ from BASE-HTML-SHEET ] list of keyword symbols Messages corresponding to form fields which should not be retained against Updates to the model (e.g.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/13/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 13,
      "chunk_count": 21
    },
    "id": "377751242972cbf2872769bccddb1a0b"
  },
  {
    "text": "ANSITORY-SLOTS [ from BASE-HTML-SHEET ] list of keyword symbols Messages corresponding to form fields which should not be retained against Updates to the model (e.g. calls to the update! function or hitting the Update button or link in the browser in development mode). Defaults to NIL (the empty list). TREE-BGCOLOR [ from LAYOUT-MIXIN ] keyword symbol Color keyword from *color-table* for the tree area background. Defaults to :aquamarine . TREE-TITLE [ from LAYOUT-MIXIN ] string Title for the Tree section. Defaults to \"Assembly Tree\" if the tree-root is only a subclass of application-mixin , and \"Assembly Tree\" if the tree-root is an actual node with child applications. USE-BSPLINES? [ from BASE-HTML-GRAPHICS-SHEET ] boolean Determines whether to use native bspline data in the vrml VIOLATED-RULES [ from LAYOUT-MIXIN ] list of gdl objects of type base-rule-object or (preferably) gwl-base-rule-object . Links to these will be displayed in the other-rules section.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/13/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 14,
      "chunk_count": 21
    },
    "id": "18f9f8d2b11b9898eeffabacd0bad41e"
  },
  {
    "text": "-RULES [ from LAYOUT-MIXIN ] list of gdl objects of type base-rule-object or (preferably) gwl-base-rule-object . Links to these will be displayed in the other-rules section. Default to the collection of all objects of type base-rule-object from this node in the tree down to the leaves, whose violated? message evaluates to non-NIL. VIOLATED-RULES-BGCOLOR [ from LAYOUT-MIXIN ] keyword symbol Color keyword from *color-table* for the violated-rules area background. Defaults to :aquamarine . VIOLATED-RULES-TITLE [ from LAYOUT-MIXIN ] string Title for the violated-rules section. Defaults to \"Violated Rules\". VISIBLE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances Additional objects to display in Tatu tree. Typically this would be a subset of hidden-children. Defaults to NIL. WIDTH [ from GEOMETRY-VIEW-MIXIN ] number Width of the graphics viewport. Default is 300.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/13/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 15,
      "chunk_count": 21
    },
    "id": "9b049b1157a14510ae5bad7cabbf8b49"
  },
  {
    "text": "GEOMETRY-VIEW-MIXIN ] number Width of the graphics viewport. Default is 300. Input Slots (optional, settable) DIGITATION-MODE [ from BASE-HTML-GRAPHICS-SHEET ] keyword symbol, one of :zoom-and-center , :report-point , or :measure-distance . If :zoom-and-center , sets the user-center and user-scale accordingly when graphics area is clicked. If :report-point , the slot digitized-point is set with the x y value. If measure-distance , the slot :digitized-distance is set with the resultant distance. Default is :zoom-and-center VIEW [ from BASE-HTML-GRAPHICS-SHEET ] keyword symbol Determines the default view from the standard-views . Defaults to :trimetric. ZOOM-FACTOR [ from BASE-HTML-GRAPHICS-SHEET ] number The factor used for zooming in or out. ZOOM-MODE [ from BASE-HTML-GRAPHICS-SHEET ] keyword symbol, one of :in, :out, or :none, or nil If :in, then clicks in the graphics area will increase the zoom factor by (the zoom-factor).",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/13/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 16,
      "chunk_count": 21
    },
    "id": "c742dff3269b7d26d737aae81defa0e1"
  },
  {
    "text": "ord symbol, one of :in, :out, or :none, or nil If :in, then clicks in the graphics area will increase the zoom factor by (the zoom-factor). If :out, then clicks will decrease the factor by that amount. If :none or nil, then clicks will have no effect. Input Slots (optional, defaulting) DISPLAY-CONTROLS [ from BASE-OBJECT ] plist May contain keywords and values indicating display characteristics for this object. The following keywords are recognized currently: :color color keyword from the *color-table* parameter, or an HTML-style hexidecimal RGB string value, e.g. \"#FFFFFF\" for pure white. Defaults to :black. :line-thickness an integer, defaulting to 1, indicating relative line thickness for wireframe representations of this object. :dash-pattern (currently PDF/PNG/JPEG only). This is a list of two or three numbers which indicate the length, in pixels, of the dashes and blank spaces in a dashed line.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/13/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 17,
      "chunk_count": 21
    },
    "id": "eeecae8df9be738e8a0b195d26330e6d"
  },
  {
    "text": "st of two or three numbers which indicate the length, in pixels, of the dashes and blank spaces in a dashed line. The optional third number indicates how far into the line or curve to start the dash pattern. DISPLAY-RULES? [ from LAYOUT-MIXIN ] boolean Indicates whether the Rules panel should be displayed. Defaults to T. DISPLAY-TREE? [ from LAYOUT-MIXIN ] boolean Indicates whether the Tree area should be displayed. Defaults to T. GRAPHICS-HEIGHT [ from LAYOUT-MIXIN ] integer Height (top to bottom on screen) in pixels of the graphics area. Defaults to 500. GRAPHICS-WIDTH [ from LAYOUT-MIXIN ] integer Height (left to right on screen) in pixels of the graphics area. Defaults to 500. RESPONDENT [ from SKELETON-UI-ELEMENT ] gdl object Object to respond to the form submission. Defaults to self. USE-STANDARD-SAVED-SLOTS? [ from LAYOUT-MIXIN ] boolean Determines whether the standard-saved-slots are automatically used by default for the saved-slots.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/13/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 18,
      "chunk_count": 21
    },
    "id": "93b2171113f42c474f5da329250f9bf0"
  },
  {
    "text": "USE-STANDARD-SAVED-SLOTS? [ from LAYOUT-MIXIN ] boolean Determines whether the standard-saved-slots are automatically used by default for the saved-slots. This is a trickle-down slot so its value will be passed to descendent objects automatically. The default value is NIL. Computed Slots UI-DISPLAY-LIST-LEAVES [ from LAYOUT-MIXIN ] list of gdl objects This should be overridden with a list of objects of your choice. These objects (not their leaves, but these actual nodes) will be scaled to fit and displayed in the graphics area. Defaults to NIL. UI-DISPLAY-LIST-OBJECTS list of gdl object roots The leaves of these objects will be displayed in the graphics. Defaults to the appended result of children's ui-display-list-objects . Package Documentation Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/13/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 19,
      "chunk_count": 21
    },
    "id": "cf7cbda7785babdc1c518d375cb0c1f5"
  },
  {
    "text": ". All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/13/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 20,
      "chunk_count": 21
    },
    "id": "da8d64073733ce7379bb8766bad8c421"
  },
  {
    "text": "GendL Application - GRID-FORM-CONTROL Package Documentation Object: GRID-FORM-CONTROL (The :GWL Package) Mixins: SKELETON-FORM-CONTROL , VANILLA-MIXIN Description Beginnings of spread-sheet-like grid control. To do: Add row button, sort by column values, save & restore snapshot. Easy way for user to customize layout and markup. Allow for all types of form-control for each column. Input Slots (optional) BASHEE [ from SKELETON-UI-ELEMENT ] gdl object Object to have its settable computed-slots and/or query-plist set from the fields on the form upon submission. Defaults to self. CLASS [ from SKELETON-FORM-CONTROL ] string You can use this to specify a user-defined class for the form-control. Defaults to nil, which means no class attribute will be generated. DEFAULT list of lists These values become the default row and column values for the grid. DOM-ID [ from SKELETON-UI-ELEMENT ] string This is the auto-computed dom-id which should be used for rendering this section.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/9/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 0,
      "chunk_count": 9
    },
    "id": "be4c1af9b26d930ab801d7d8f8545e2f"
  },
  {
    "text": "ecome the default row and column values for the grid. DOM-ID [ from SKELETON-UI-ELEMENT ] string This is the auto-computed dom-id which should be used for rendering this section. If you use the main-div HTML string for rendering this object as a page section, then you do not have to generate the :div tag yourself - the main-div will be a string of HTML which is wrapped in the correct :div tag already. FIELD-NAME [ from SKELETON-FORM-CONTROL ] keyword symbol The name of this field. Computed from the object name within the tree. FORCE-VALIDATION-FOR [ from SKELETON-UI-ELEMENT ] list of gdl objects of type form-control The validation-function will be forced on these objects when a form is submitted, even if the object's html form-control does not happen to be included in the values submitted with the form. Defaults to nil. FORM-CONTROL-ATTRIBUTES list of plists Each plist contains the desired form-control inputs for the respective column in the table.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/9/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 1,
      "chunk_count": 9
    },
    "id": "cdf69bd78226151baec8d614e925b87b"
  },
  {
    "text": "with the form. Defaults to nil. FORM-CONTROL-ATTRIBUTES list of plists Each plist contains the desired form-control inputs for the respective column in the table. FORM-CONTROL-INPUTS list of lists plists Each list corresponds to one row and contains plists desired form-control inputs for the respective column in the table. FORM-CONTROL-TYPES list of symbols naming gdl object types This must be the same length as a row of the table. The corresponding form-element in the grid will be of the specified type. Default is nil, which means all the form-controls will be of type 'text-form-control. HIDDEN? [ from VANILLA-MIXIN* ] boolean Indicates whether the object should effectively be a hidden-object even if specified in :objects. Default is nil. HTML-SECTIONS [ from SKELETON-UI-ELEMENT ] List of HTML sections to be scanned and possibly replaced in response to GDL Ajax calls. Override this slot at your own risk.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/9/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 2,
      "chunk_count": 9
    },
    "id": "66bae5ed34e0c272c2741bfb92fe1113"
  },
  {
    "text": "HTML sections to be scanned and possibly replaced in response to GDL Ajax calls. Override this slot at your own risk. The default is all sections who are most recently laid out on the respondent sheet, and this is set programmatically every time the sheet section's main-div is demanded. HTML-SECTIONS-VALID [ from SKELETON-UI-ELEMENT ] List of valid HTML sections to be scanned and possibly replaced in response to GDL Ajax calls. Override this slot at your own risk. The default is all sections who are most recently laid out on the respondent sheet, and this is set programmatically every time the sheet section's main-div is demanded. ID [ from SKELETON-FORM-CONTROL ] keyword symbol The ID attribute for this tag. Defaults to (the field-name). INCLUDE-DELETE-BUTTONS? boolean Should each row have a delete button? Default is nil.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/9/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 3,
      "chunk_count": 9
    },
    "id": "0b827ddcde8d552bd584f742c9a9363e"
  },
  {
    "text": "ve a delete button? Default is nil. INNER-HTML [ from SKELETON-UI-ELEMENT ] string This can be used with (str .) [in cl-who] or (:princ .) [in htmlGen] to output this section of the page, without the wrapping :div tag [so if you use this, your code would be responsible for wrapping the :div tag with :id (the dom-id).] JS-TO-EVAL [ from SKELETON-UI-ELEMENT ] string of valid javascript This Javascript will be send with the Ajax response, and evaluated after the innerHTML for this section has been replaced. ORDERED-FORM-CONTROLS [ from SKELETON-UI-ELEMENT ] list of gdl objects, which should be of type 'base-form-control . [Note -- this slot is not really necessary for protecting out-of-bounds sequence references anymore, the form-control processor protects against this by itself now]. These objects are validated and bashed first, in the order given. If the cardinality of one form-control depends on another as in the example below, then you should list those dependent objects first.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/9/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 4,
      "chunk_count": 9
    },
    "id": "01e600ee927632dc4e43c4bc35cd2fd8"
  },
  {
    "text": "bjects are validated and bashed first, in the order given. If the cardinality of one form-control depends on another as in the example below, then you should list those dependent objects first. Default is nil. examples: ... :computed-slots ((number-of-nozzles (the number-of-nozzles-form value)) (ordered-form-controls (append (list-elements (the inner-flange-form)) (list (the number-of-nozzles-form))))) :objects ((inner-flange-form :type 'menu-form-control :choice-plist (list :hey \"hey\" :now \"now\") :default :hey :sequence (:size (the number-of-nozzles))) (number-of-nozzles-form :type 'text-form-control :prompt \"Number of Shell Nozzles Required: \" :domain :number :default 0) POSSIBLE-NILS [ from SKELETON-UI-ELEMENT ] list of keyword symbols Messages corresponding to form fields which could be missing from form submission (e.g. checkbox fields). Defaults to the names of any children or hidden-children of type menu-form-control or checkbox-form-control.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/9/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 5,
      "chunk_count": 9
    },
    "id": "ce3a25699d5c10080491552ac947bb2c"
  },
  {
    "text": "e missing from form submission (e.g. checkbox fields). Defaults to the names of any children or hidden-children of type menu-form-control or checkbox-form-control. PRESET-ALL? [ from SKELETON-UI-ELEMENT ] boolean This switch determines whether all form-controls should be preset before the final setting, in order to allow any interdependencies to be detected for validation or detecting changed values. If this is specified as a non-nil value, then any nil values of (the preset?) on individual form controls will be ignored. If this is specified as nil, then (the preset?) of individual form-controls (default of these is also nil) will be respected. Default is nil. PRIMARY? [ from SKELETON-FORM-CONTROL ] boolean Set this to t if the form-control should always occur first in an outputted snapshot file. Defaults to nil. ROOT [ from VANILLA-MIXIN* ] gdl instance The root-level node in this object's ``tree'' (instance hierarchy). ROW-LABELS list of strings One for each row.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/9/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 6,
      "chunk_count": 9
    },
    "id": "7a774556ec7f25e527c79e26b8341ffb"
  },
  {
    "text": "t file. Defaults to nil. ROOT [ from VANILLA-MIXIN* ] gdl instance The root-level node in this object's ``tree'' (instance hierarchy). ROW-LABELS list of strings One for each row. SAFE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances All objects from the :objects specification, including elements of sequences as flat lists. Any children which throw errors come back as a plist with error information STRINGS-FOR-DISPLAY [ from VANILLA-MIXIN* ] string or list of strings Determines how the name of objects of this type will be printed in most places. This defaults to the name-for-display (generally the part's name as specified in its parent), followed by an index number if the part is an element of a sequence. VISIBLE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances Additional objects to display in Tatu tree. Typically this would be a subset of hidden-children. Defaults to NIL.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/9/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 7,
      "chunk_count": 9
    },
    "id": "999eee6ddb48d78d421e70e7e7e4576f"
  },
  {
    "text": "ts to display in Tatu tree. Typically this would be a subset of hidden-children. Defaults to NIL. Input Slots (optional, defaulting) RESPONDENT [ from SKELETON-UI-ELEMENT ] gdl object Object to respond to the form submission. Defaults to self. Computed Slots FORM-CONTROLS [ from SKELETON-UI-ELEMENT ] list of gdl objects All the children or hidden-children of type base-form-control. Package Documentation Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/9/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 8,
      "chunk_count": 9
    },
    "id": "720208b1774895a870b8929c5c101b05"
  },
  {
    "text": "GendL Application - SHEET-SECTION Package Documentation Object: SHEET-SECTION (The :GWL Package) Mixins: SKELETON-UI-ELEMENT , VANILLA-MIXIN Description Basic mixin to support an object representing a section of an HTML sheet (i.e. web page). Currently this simply mixes in skeleton-ui-element, and the functionality is not extended. Sheet-section is also mixed into base-html-sheet, so it and any of its subclasses will be considered as sheet-sections if they are the child of a base-ajax-sheet. Input Slots (optional) BASHEE [ from SKELETON-UI-ELEMENT ] gdl object Object to have its settable computed-slots and/or query-plist set from the fields on the form upon submission. Defaults to self. DOM-ID [ from SKELETON-UI-ELEMENT ] string This is the auto-computed dom-id which should be used for rendering this section.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/16/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 0,
      "chunk_count": 8
    },
    "id": "45d60ffe8579ca19ece68a81d609ee71"
  },
  {
    "text": "dering this section. If you use the main-div HTML string for rendering this object as a page section, then you do not have to generate the :div tag yourself - the main-div will be a string of HTML which is wrapped in the correct :div tag already. FORCE-VALIDATION-FOR [ from SKELETON-UI-ELEMENT ] list of gdl objects of type form-control The validation-function will be forced on these objects when a form is submitted, even if the object's html form-control does not happen to be included in the values submitted with the form. Defaults to nil. HIDDEN? [ from VANILLA-MIXIN* ] boolean Indicates whether the object should effectively be a hidden-object even if specified in :objects. Default is nil. HTML-SECTIONS [ from SKELETON-UI-ELEMENT ] List of HTML sections to be scanned and possibly replaced in response to GDL Ajax calls. Override this slot at your own risk.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/16/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 1,
      "chunk_count": 8
    },
    "id": "c2f55bb74c44294f72b3a1c63d90e0bb"
  },
  {
    "text": "in response to GDL Ajax calls. Override this slot at your own risk. The default is all sections who are most recently laid out on the respondent sheet, and this is set programmatically every time the sheet section's main-div is demanded. HTML-SECTIONS-VALID [ from SKELETON-UI-ELEMENT ] List of valid HTML sections to be scanned and possibly replaced in response to GDL Ajax calls. Override this slot at your own risk. The default is all sections who are most recently laid out on the respondent sheet, and this is set programmatically every time the sheet section's main-div is demanded.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/16/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 2,
      "chunk_count": 8
    },
    "id": "b50e7b1b70fa89365d1f5b80b71a6d04"
  },
  {
    "text": "INNER-HTML [ from SKELETON-UI-ELEMENT ] string This can be used with (str .) [in cl-who] or (:princ .) [in htmlGen] to output this section of the page, without the wrapping :div tag [so if you use this, your code would be responsible for wrapping the :div tag with :id (the dom-id).] JS-TO-EVAL [ from SKELETON-UI-ELEMENT ] string of valid javascript This Javascript will be send with the Ajax response, and evaluated after the innerHTML for this section has been replaced. ORDERED-FORM-CONTROLS [ from SKELETON-UI-ELEMENT ] list of gdl objects, which should be of type 'base-form-control . [Note -- this slot is not really necessary for protecting out-of-bounds sequence references anymore, the form-control processor protects against this by itself now]. These objects are validated and bashed first, in the order given. If the cardinality of one form-control depends on another as in the example below, then you should list those dependent objects first. Default is nil. examples: ...",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/16/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 3,
      "chunk_count": 8
    },
    "id": "deffb318b411f6933141e57ec89aa71a"
  },
  {
    "text": "st, in the order given. If the cardinality of one form-control depends on another as in the example below, then you should list those dependent objects first. Default is nil. examples: ... :computed-slots ((number-of-nozzles (the number-of-nozzles-form value)) (ordered-form-controls (append (list-elements (the inner-flange-form)) (list (the number-of-nozzles-form))))) :objects ((inner-flange-form :type 'menu-form-control :choice-plist (list :hey \"hey\" :now \"now\") :default :hey :sequence (:size (the number-of-nozzles))) (number-of-nozzles-form :type 'text-form-control :prompt \"Number of Shell Nozzles Required: \" :domain :number :default 0) POSSIBLE-NILS [ from SKELETON-UI-ELEMENT ] list of keyword symbols Messages corresponding to form fields which could be missing from form submission (e.g. checkbox fields). Defaults to the names of any children or hidden-children of type menu-form-control or checkbox-form-control.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/16/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 4,
      "chunk_count": 8
    },
    "id": "5737936459afcc96a769c41bd7268b3a"
  },
  {
    "text": ". checkbox fields). Defaults to the names of any children or hidden-children of type menu-form-control or checkbox-form-control. PRESET-ALL? [ from SKELETON-UI-ELEMENT ] boolean This switch determines whether all form-controls should be preset before the final setting, in order to allow any interdependencies to be detected for validation or detecting changed values. If this is specified as a non-nil value, then any nil values of (the preset?) on individual form controls will be ignored. If this is specified as nil, then (the preset?) of individual form-controls (default of these is also nil) will be respected. Default is nil. ROOT [ from VANILLA-MIXIN* ] gdl instance The root-level node in this object's ``tree'' (instance hierarchy). SAFE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances All objects from the :objects specification, including elements of sequences as flat lists.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/16/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 5,
      "chunk_count": 8
    },
    "id": "c34300c31aa05b7f44ee0b1a4822ecb5"
  },
  {
    "text": "ces All objects from the :objects specification, including elements of sequences as flat lists. Any children which throw errors come back as a plist with error information STRINGS-FOR-DISPLAY [ from VANILLA-MIXIN* ] string or list of strings Determines how the name of objects of this type will be printed in most places. This defaults to the name-for-display (generally the part's name as specified in its parent), followed by an index number if the part is an element of a sequence. VISIBLE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances Additional objects to display in Tatu tree. Typically this would be a subset of hidden-children. Defaults to NIL. Input Slots (optional, defaulting) RESPONDENT [ from SKELETON-UI-ELEMENT ] gdl object Object to respond to the form submission. Defaults to self. Examples FLAG -- fill in!!! Package Documentation Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/16/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 6,
      "chunk_count": 8
    },
    "id": "2102626b29f25e587cc96123f6ecf53f"
  },
  {
    "text": "o self. Examples FLAG -- fill in!!! Package Documentation Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/16/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 7,
      "chunk_count": 8
    },
    "id": "e63e44bf6f3cac80dc9152d768e2fe48"
  },
  {
    "text": "GendL Application - SESSION-CONTROL-MIXIN Package Documentation Object: SESSION-CONTROL-MIXIN (The :GWL Package) Mixins: VANILLA-MIXIN Author Brian Sorg, Liberating Insight LLC (revised Dave Cooper, Genworks) Description Mixin to the root object of the part which you wish to have session control over Input Slots (optional) HIDDEN? [ from VANILLA-MIXIN* ] boolean Indicates whether the object should effectively be a hidden-object even if specified in :objects. Default is nil. ORG-TYPE Type of original object, useful when viewing session report log RECOVERY-EXPIRES-AT expiration time of the recovery object After the recovery object has replaced the orginal instance at what time should the recovery instance expire? RECOVERY-URL Url to which a user will be redirected if requesting a session that has been cleared ROOT [ from VANILLA-MIXIN* ] gdl instance The root-level node in this object's ``tree'' (instance hierarchy).",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/15/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 0,
      "chunk_count": 4
    },
    "id": "240c682cb0b185a4366b05322feabd0c"
  },
  {
    "text": "t has been cleared ROOT [ from VANILLA-MIXIN* ] gdl instance The root-level node in this object's ``tree'' (instance hierarchy). SAFE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances All objects from the :objects specification, including elements of sequences as flat lists. Any children which throw errors come back as a plist with error information SESSION-DURATION Length of time a session should last without activity in minutes STRINGS-FOR-DISPLAY [ from VANILLA-MIXIN* ] string or list of strings Determines how the name of objects of this type will be printed in most places. This defaults to the name-for-display (generally the part's name as specified in its parent), followed by an index number if the part is an element of a sequence. USE-RECOVERY-OBJECT? boolean Determines whether expired sessions are replaced by recovery object. Default is nil. VISIBLE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances Additional objects to display in Tatu tree.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/15/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 1,
      "chunk_count": 4
    },
    "id": "a4aaccd9ae3ebab28665a77185c1550f"
  },
  {
    "text": "expired sessions are replaced by recovery object. Default is nil. VISIBLE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances Additional objects to display in Tatu tree. Typically this would be a subset of hidden-children. Defaults to NIL. Input Slots (optional, settable) EXPIRES-AT Universal time after which the session should expire GDL Functions CLEAR-EXPIRED-SESSION This is the function called to check for and handle session control keyword arguments: debug? Boolean , Default Value: NIL Prints debug statement if needed CLEAR-NOW? boolean Test to run to see if this session has expired and needs to be cleared now. SESSION-CLEAN-UP gets called right before the instance is going to get cleared Is intended to be used to stop any instance states that may not be elequently handled by the garbage collector. ie database connections, multiprocessing locks, open streams etc.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/15/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 2,
      "chunk_count": 4
    },
    "id": "6d8d44bd9d4deef8bdd67a0df894a47f"
  },
  {
    "text": "arbage collector. ie database connections, multiprocessing locks, open streams etc. SET-EXPIRES-AT Method which will set the expires-at slot to the current time + the session-duration Package Documentation Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/15/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 3,
      "chunk_count": 4
    },
    "id": "f1ae271913b5c08e0755921ac8986916"
  },
  {
    "text": "GendL Application - GWL-RULE-OBJECT Package Documentation Object: GWL-RULE-OBJECT (The :GWL Package) Mixins: BASE-HTML-GRAPHICS-SHEET , BASE-RULE-OBJECT Description Used to display a rule as a GWL web page. Mixes together base-html-sheet and base-rule-object . Input Slots (optional) AFTER-PRESENT! [ from BASE-HTML-SHEET ] void This is an empty function by default, but can be overridden in the respondent of a form, to do some processing after the respondent's write-html-sheet function runs to present the object. AFTER-SET! [ from BASE-HTML-SHEET ] void This is an empty function by default, but can be overridden in the requestor of a form, to do some processing after the requestor's form values are set into the specified bashee. BASHEE [ from SKELETON-UI-ELEMENT ] gdl object Object to have its settable computed-slots and/or query-plist set from the fields on the form upon submission. Defaults to self.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/10/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 0,
      "chunk_count": 16
    },
    "id": "7f42406a4ab56d0fbdb94ca9e51ce818"
  },
  {
    "text": "ts settable computed-slots and/or query-plist set from the fields on the form upon submission. Defaults to self. BEFORE-PRESENT! [ from BASE-HTML-SHEET ] void This is an empty function by default, but can be overridden in the respondent of a form, to do some processing before the respondent's write-html-sheet function runs to present the object. This can be useful especially for objects which are subclasses of higher-level mixins such as application-mixin and node-mixin , where you do not have direct access to the write-html-sheet function and typically only define the model-inputs function. It is not always reliable to do processing in the model-inputs function, since some slots which depend on your intended modifications may already have been evaluated by the time the model-inputs function runs.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/10/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 1,
      "chunk_count": 16
    },
    "id": "47bf31de0d51557e2d09f6a1793d0e8f"
  },
  {
    "text": "on runs. BEFORE-RESPONSE! [ from BASE-HTML-SHEET ] void This is an empty function by default, but can be overridden in a user specialization of base-html-sheet, to do some processing before the header-plist is evaluated and before the HTTP response is actually initiated. BEFORE-SET! [ from BASE-HTML-SHEET ] void This is an empty function by default, but can be overridden in the requestor of a form, to do some processing before the requestor's form values are set into the specified bashee. BOUNDING-BOX [ from BASE-OBJECT ] list of two 3d points The left front bottom and right rear top corners, in global coordinates, of the rectangular volume bounding the tree of geometric objects rooted at this object. CENTER [ from BASE-OBJECT ] 3d point Indicates in global coordinates where the center of the reference box of this object should be located.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/10/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 2,
      "chunk_count": 16
    },
    "id": "894154734d7037d3bd10f45794b4f642"
  },
  {
    "text": "the reference box of this object should be located. CHECK-SANITY? [ from BASE-HTML-SHEET ] boolean Determines whether a a sanity check is done (with the check-sanity function) before presenting the response page if this page is a respondent. Default is NIL. DOM-ID [ from SKELETON-UI-ELEMENT ] string This is the auto-computed dom-id which should be used for rendering this section. If you use the main-div HTML string for rendering this object as a page section, then you do not have to generate the :div tag yourself - the main-div will be a string of HTML which is wrapped in the correct :div tag already. FORCE-VALIDATION-FOR [ from SKELETON-UI-ELEMENT ] list of gdl objects of type form-control The validation-function will be forced on these objects when a form is submitted, even if the object's html form-control does not happen to be included in the values submitted with the form. Defaults to nil.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/10/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 3,
      "chunk_count": 16
    },
    "id": "febb6c235d86e0323e05bc0021ef9317"
  },
  {
    "text": "'s html form-control does not happen to be included in the values submitted with the form. Defaults to nil. HIDDEN? [ from VANILLA-MIXIN* ] boolean Indicates whether the object should effectively be a hidden-object even if specified in :objects. Default is nil. HTML-SECTIONS [ from SKELETON-UI-ELEMENT ] List of HTML sections to be scanned and possibly replaced in response to GDL Ajax calls. Override this slot at your own risk. The default is all sections who are most recently laid out on the respondent sheet, and this is set programmatically every time the sheet section's main-div is demanded. HTML-SECTIONS-VALID [ from SKELETON-UI-ELEMENT ] List of valid HTML sections to be scanned and possibly replaced in response to GDL Ajax calls. Override this slot at your own risk. The default is all sections who are most recently laid out on the respondent sheet, and this is set programmatically every time the sheet section's main-div is demanded.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/10/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 4,
      "chunk_count": 16
    },
    "id": "a82114357f2d83d3580db0011d49eb74"
  },
  {
    "text": "sections who are most recently laid out on the respondent sheet, and this is set programmatically every time the sheet section's main-div is demanded. IMAGE-FILE [ from BASE-OBJECT ] pathname or string Points to a pre-existing image file to be displayed instead of actual geometry for this object. Defaults to nil INNER-HTML [ from SKELETON-UI-ELEMENT ] string This can be used with (str .) [in cl-who] or (:princ .) [in htmlGen] to output this section of the page, without the wrapping :div tag [so if you use this, your code would be responsible for wrapping the :div tag with :id (the dom-id).] JS-TO-EVAL [ from SKELETON-UI-ELEMENT ] string of valid javascript This Javascript will be send with the Ajax response, and evaluated after the innerHTML for this section has been replaced. LENGTH [ from GEOMETRY-VIEW-MIXIN ] number Length (\"height\" of screen window) of the graphics viewport. Default is 300.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/10/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 5,
      "chunk_count": 16
    },
    "id": "e8e97c2cfbf086cb41b6660937bd808e"
  },
  {
    "text": "om GEOMETRY-VIEW-MIXIN ] number Length (\"height\" of screen window) of the graphics viewport. Default is 300. LOCAL-BOX [ from BASE-OBJECT ] list of two 3d points The left front bottom and right rear top corners, in global coordinates, of the rectangular volume bounding this geometric object. OBLIQUENESS [ from BASE-OBJECT ] 3x3 orthonormal matrix of double-float numbers This is synonymous with the orientation . ONCLICK-FUNCTION [ from BASE-OBJECT ] lambda function of zero arguments, or nil If non-nil, this function gets invoked when the user clicks the object in graphics front-ends which support this functionality, e.g. SVG/Raphael and X3DOM. ORDERED-FORM-CONTROLS [ from SKELETON-UI-ELEMENT ] list of gdl objects, which should be of type 'base-form-control . [Note -- this slot is not really necessary for protecting out-of-bounds sequence references anymore, the form-control processor protects against this by itself now]. These objects are validated and bashed first, in the order given.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/10/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 6,
      "chunk_count": 16
    },
    "id": "3b5527f615e6b1b16edf72f7d52725ac"
  },
  {
    "text": "necessary for protecting out-of-bounds sequence references anymore, the form-control processor protects against this by itself now]. These objects are validated and bashed first, in the order given. If the cardinality of one form-control depends on another as in the example below, then you should list those dependent objects first. Default is nil. examples: ... :computed-slots ((number-of-nozzles (the number-of-nozzles-form value)) (ordered-form-controls (append (list-elements (the inner-flange-form)) (list (the number-of-nozzles-form))))) :objects ((inner-flange-form :type 'menu-form-control :choice-plist (list :hey \"hey\" :now \"now\") :default :hey :sequence (:size (the number-of-nozzles))) (number-of-nozzles-form :type 'text-form-control :prompt \"Number of Shell Nozzles Required: \" :domain :number :default 0) ORIENTATION [ from BASE-OBJECT ] 3x3 matrix of double-float numbers Indicates the absolute Rotation Matrix used to create the coordinate system of this object.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/10/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 7,
      "chunk_count": 16
    },
    "id": "2cbfc5e84ad0483d79202473489020a0"
  },
  {
    "text": "in :number :default 0) ORIENTATION [ from BASE-OBJECT ] 3x3 matrix of double-float numbers Indicates the absolute Rotation Matrix used to create the coordinate system of this object. This matrix is given in absolute terms (i.e. with respect to the root's orientation), and is generally created with the alignment function. It should be an orthonormal matrix, meaning each row is a vector with a magnitude of one (1.0). POSSIBLE-NILS [ from SKELETON-UI-ELEMENT ] list of keyword symbols Messages corresponding to form fields which could be missing from form submission (e.g. checkbox fields). Defaults to the names of any children or hidden-children of type menu-form-control or checkbox-form-control. PRESET-ALL? [ from SKELETON-UI-ELEMENT ] boolean This switch determines whether all form-controls should be preset before the final setting, in order to allow any interdependencies to be detected for validation or detecting changed values.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/10/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 8,
      "chunk_count": 16
    },
    "id": "b36534094c24b3941ea844019839328b"
  },
  {
    "text": "hould be preset before the final setting, in order to allow any interdependencies to be detected for validation or detecting changed values. If this is specified as a non-nil value, then any nil values of (the preset?) on individual form controls will be ignored. If this is specified as nil, then (the preset?) of individual form-controls (default of these is also nil) will be respected. Default is nil. PROCESS-COOKIES! [ from BASE-HTML-SHEET ] void This is an empty function by default, but can be overridden in a user specialization of base-html-sheet, to do some processing before the header-plist is evaluated and before the HTTP response is actually initiated, but after the cookies-received have been set. RETURN-OBJECT [ from BASE-HTML-SHEET ] gdl object Default object to which control will return with the write-back-link method ROOT [ from VANILLA-MIXIN* ] gdl instance The root-level node in this object's ``tree'' (instance hierarchy).",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/10/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 9,
      "chunk_count": 16
    },
    "id": "67d33683f7580b8a7ee8a2e9b67e5082"
  },
  {
    "text": "l return with the write-back-link method ROOT [ from VANILLA-MIXIN* ] gdl instance The root-level node in this object's ``tree'' (instance hierarchy). RULE-DESCRIPTION [ from BASE-RULE-OBJECT ] string Short description of the rule (generally one line). Defaults to NIL. RULE-DESCRIPTION-HELP [ from BASE-RULE-OBJECT ] string Verbose description of the purpose of the rule. RULE-RESULT [ from BASE-RULE-OBJECT ] string The basic return-value, or result, of evaluating the rule. RULE-RESULT-HELP [ from BASE-RULE-OBJECT ] string Verbose description of how the rule result is computed. RULE-TITLE [ from BASE-RULE-OBJECT ] string Title to be used with the rule object. Defaults to NIL. SAFE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances All objects from the :objects specification, including elements of sequences as flat lists. Any children which throw errors come back as a plist with error information STANDARD-VIEWS [ from BASE-HTML-GRAPHICS-SHEET ] plist of keywords and 3d vectors .",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/10/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 10,
      "chunk_count": 16
    },
    "id": "528dc02bea8227bedc0f49f7a761f543"
  },
  {
    "text": "ements of sequences as flat lists. Any children which throw errors come back as a plist with error information STANDARD-VIEWS [ from BASE-HTML-GRAPHICS-SHEET ] plist of keywords and 3d vectors . Indicates the views to show in the graphics controls. STRINGS-FOR-DISPLAY [ from BASE-RULE-OBJECT ] string Determines the rule's default name in various internal GDL contexts. Defaults to the rule-title , or \"Unnamed Rule\" if rule-title is NIL. SUPPRESS-DISPLAY? [ from BASE-RULE-OBJECT ] boolean Determines whether the rule is displayed by default in reports etc. TARGET [ from BASE-HTML-SHEET ] string Name of a browser frame or window to display this page. Default of NIL indicates to use the same window. TRANSITORY-SLOTS [ from BASE-HTML-SHEET ] list of keyword symbols Messages corresponding to form fields which should not be retained against Updates to the model (e.g. calls to the update! function or hitting the Update button or link in the browser in development mode).",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/10/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 11,
      "chunk_count": 16
    },
    "id": "212e0c9d7e84f74592e1dfea6b430547"
  },
  {
    "text": "fields which should not be retained against Updates to the model (e.g. calls to the update! function or hitting the Update button or link in the browser in development mode). Defaults to NIL (the empty list). USE-BSPLINES? [ from BASE-HTML-GRAPHICS-SHEET ] boolean Determines whether to use native bspline data in the vrml VIEW-OBJECT [ from GEOMETRY-VIEW-MIXIN ] gdl web-drawing object This must be overridden in the specialized class. VIOLATED? [ from BASE-RULE-OBJECT ] boolean Indicates whether this rule violates a standard condition. VISIBLE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances Additional objects to display in Tatu tree. Typically this would be a subset of hidden-children. Defaults to NIL. WIDTH [ from GEOMETRY-VIEW-MIXIN ] number Width of the graphics viewport. Default is 300. Input Slots (optional, settable) DIGITATION-MODE [ from BASE-HTML-GRAPHICS-SHEET ] keyword symbol, one of :zoom-and-center , :report-point , or :measure-distance .",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/10/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 12,
      "chunk_count": 16
    },
    "id": "95817eb099a351b11d2a96b6f12e4e08"
  },
  {
    "text": "is 300. Input Slots (optional, settable) DIGITATION-MODE [ from BASE-HTML-GRAPHICS-SHEET ] keyword symbol, one of :zoom-and-center , :report-point , or :measure-distance . If :zoom-and-center , sets the user-center and user-scale accordingly when graphics area is clicked. If :report-point , the slot digitized-point is set with the x y value. If measure-distance , the slot :digitized-distance is set with the resultant distance. Default is :zoom-and-center IMAGE-FORMAT [ from BASE-HTML-GRAPHICS-SHEET ] keyword symbol Determines the default image format. Defaults to :png VIEW [ from BASE-HTML-GRAPHICS-SHEET ] keyword symbol Determines the default view from the standard-views . Defaults to :trimetric. ZOOM-FACTOR [ from BASE-HTML-GRAPHICS-SHEET ] number The factor used for zooming in or out. ZOOM-MODE [ from BASE-HTML-GRAPHICS-SHEET ] keyword symbol, one of :in, :out, or :none, or nil If :in, then clicks in the graphics area will increase the zoom factor by (the zoom-factor).",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/10/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 13,
      "chunk_count": 16
    },
    "id": "1f0a598a1921443c3e7d391701708c87"
  },
  {
    "text": "OOM-MODE [ from BASE-HTML-GRAPHICS-SHEET ] keyword symbol, one of :in, :out, or :none, or nil If :in, then clicks in the graphics area will increase the zoom factor by (the zoom-factor). If :out, then clicks will decrease the factor by that amount. If :none or nil, then clicks will have no effect. Input Slots (optional, defaulting) DISPLAY-CONTROLS [ from BASE-OBJECT ] plist May contain keywords and values indicating display characteristics for this object. The following keywords are recognized currently: :color color keyword from the *color-table* parameter, or an HTML-style hexidecimal RGB string value, e.g. \"#FFFFFF\" for pure white. Defaults to :black. :line-thickness an integer, defaulting to 1, indicating relative line thickness for wireframe representations of this object. :dash-pattern (currently PDF/PNG/JPEG only). This is a list of two or three numbers which indicate the length, in pixels, of the dashes and blank spaces in a dashed line.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/10/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 14,
      "chunk_count": 16
    },
    "id": "a8f257638a7bf549fc42d0dc3677c0a4"
  },
  {
    "text": "ern (currently PDF/PNG/JPEG only). This is a list of two or three numbers which indicate the length, in pixels, of the dashes and blank spaces in a dashed line. The optional third number indicates how far into the line or curve to start the dash pattern. HEIGHT [ from BASE-OBJECT ] number Z-axis dimension of the reference box. Defaults to zero. RESPONDENT [ from SKELETON-UI-ELEMENT ] gdl object Object to respond to the form submission. Defaults to self. Package Documentation Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/object-docs/dokumentation/10/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_objects",
      "chunk_id": 15,
      "chunk_count": 16
    },
    "id": "034318587a9ec306ab700fccaec44a0b"
  },
  {
    "text": "Function: GWL:BASE64-DECODE-SAFE <-Back Function: Gwl:Base64-Decode-Safe BASE64-DECODE-SAFE string Decodes a base64 string without need for trailing = signs into a decoded string. arguments: string string <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/function-docs/dokumentation/1/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "a2aa3d431d1a3f99e5df33bf2975d802"
  },
  {
    "text": "Function: GWL:BASE64-DECODE-LIST <-Back Function: Gwl:Base64-Decode-List BASE64-DECODE-LIST list Decodes a base64 string into a Lisp list. arguments: string string <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/function-docs/dokumentation/0/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "96bb943d255829e8a56805aba48f2a45"
  },
  {
    "text": "Function: GWL:BASE64-ENCODE-SAFE <-Back Function: Gwl:Base64-Encode-Safe BASE64-ENCODE-SAFE string Encodes a string into base64 without the trailing = signs. arguments: string string <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/function-docs/dokumentation/3/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "572f9ca66d2b98da08c82302ba54d6e7"
  },
  {
    "text": "Function: GWL:CRAWL <-Back Function: Gwl:Crawl CRAWL void Instantiates and ``Crawls'' a given object instance and creates static HTML pages reflecting the instance tree. This means it will recursively follow all the links for the object. By default the files are written into \"/tmp/sites/\". arguments: part String Names a package-qualified part which should mix in base-html-sheet keyword arguments: host String , Default Value: \"localhost\" Host on which the server is running port Integer , Default Value: 9000 Port on which the server is running output-root String or pathname , Default Value: \"/tmp/sites/[non-package-qualified-part-name]/\" Directory where filfes will be written make-part-args Plist , Default Value: NIL Other make-instance arguments to use to initialize the object example: (gwl:crawl \"yadd:assembly\") <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/function-docs/dokumentation/7/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "038253ceeb0f49e8c2c573ccaa855b2a"
  },
  {
    "text": "Function: GWL:BASE64-ENCODE-LIST <-Back Function: Gwl:Base64-Encode-List BASE64-ENCODE-LIST string Encodes a list into base64 without the trailing = signs. arguments: list list <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/function-docs/dokumentation/2/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "e5648be5f00d624e1e995b6abe875349"
  },
  {
    "text": "Macro: GWL:WITH-HTML-FORM <-Back Macro: Gwl:With-Html-Form WITH-HTML-FORM enclose a body of code with a form . flag: -- fill in. <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/function-docs/dokumentation/17/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "67c59b355cb4f786d08ff6de0ee00efa"
  },
  {
    "text": "Function: GWL:CLEAR-INSTANCE <-Back Function: Gwl:Clear-Instance CLEAR-INSTANCE void Clears the specified instance from GWL's master table of root-level instances. The instance ID is the same number you see in published GWL URIs, and is available as the \"instance-id\" message within all GWL objects which inherit from base-html-sheet. Clearing the specified instance makes available for garbage collection all memory used by the object hierarchy rooted at the instance, as well as all associated published URIs. arguments: id Integer or Keyword Symbol The key whose entry you wish to clear from the *instance-hash-table* example: (clear-instance 639) <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/function-docs/dokumentation/5/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "7b4bd43324f0b0d7b37120804dd82789"
  },
  {
    "text": "Function: GWL::RELATIVIZE-PATHNAME <-Back Function: Gwl::Relativize-Pathname RELATIVIZE-PATHNAME Return a relative pathname for TARGET-PATHNAME that can be reached from the directory that TARGET-PATHNAME refers to. <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/function-docs/dokumentation/12/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "45fae7bb382ccbc06744eff08e0ecc83"
  },
  {
    "text": "Function: GWL::SESSION-REPORT <-Back Function: Gwl::Session-Report SESSION-REPORT returns list of instances in a runtime environment Those that are of type session-control-mixin, it provides more detailed information, that can be useful in tracking the session life. Currently, this is intended to run from the lisp command prompt. <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/function-docs/dokumentation/14/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "37cd8143a4e2cff5c941f6358c1cd592"
  },
  {
    "text": "Function: GWL:PUBLISH-STRING-CONTENT <-Back Function: Gwl:Publish-String-Content PUBLISH-STRING-CONTENT string (representing a url path) Publishes given url to respond with text content as specified by given string. arguments: url String The url to be published string String The content to be emitted when the url is requested rest arguments: publish-args plist Arguments to be passed on to publish function, e.g. :content-type <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/function-docs/dokumentation/11/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "e8fc1873de6efb61e1a40888b663a41c"
  },
  {
    "text": "Function: GWL:GWL-MAKE-OBJECT <-Back Function: Gwl:Gwl-Make-Object GWL-MAKE-OBJECT void Used within the context of the body of a :function argument to Allegroserve's publish function, makes an instance of the specified part and responds to the request with a redirect to a URI representing the instance. arguments: req Allegroserve request object, as used in the function of a publish ent Allegroserve entity object, as used in the function of a publish package-and-part String Should name the colon- (or double-colon)-separated package-qualified object name keyword arguments: make-object-args Plist of keys and values , Default Value: NIL These are passed to the object upon instantiation share? Boolean , Default Value: NIL If non-nil, the instance ID will be the constant string ``share'' rather than a real instance id example: (publish :path \"/calendar\" :function #'(lambda(req ent) (gwl-make-object req ent \"calendar:assembly\"))) <-Back Copyright \u00a9 2025 Genworks \u00ae International .",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/function-docs/dokumentation/8/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_functions",
      "chunk_id": 0,
      "chunk_count": 2
    },
    "id": "6cb0f63a123b3ad15701febee6820302"
  },
  {
    "text": "than a real instance id example: (publish :path \"/calendar\" :function #'(lambda(req ent) (gwl-make-object req ent \"calendar:assembly\"))) <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/function-docs/dokumentation/8/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_functions",
      "chunk_id": 1,
      "chunk_count": 2
    },
    "id": "3fb85a9b10b2680b4af0c346a04f63ff"
  },
  {
    "text": "Function: GWL:CLEAR-OLD-TIMERS <-Back Function: Gwl:Clear-Old-Timers CLEAR-OLD-TIMERS void This is a lighter-weight alternative to the session-object-mixin for timing out instances in a web application. keyword arguments: idle-time-required Time in seconds , Default Value: 600 The maximum age of a session for timeout <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/function-docs/dokumentation/6/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "6b859724c53942b9ece94846808e5b76"
  },
  {
    "text": "Function: GWL:CLEAR-ALL-INSTANCES <-Back Function: Gwl:Clear-All-Instances CLEAR-ALL-INSTANCES void Clears all instances from GWL's master table of root-level instances. The instance IDs are the numbers you see in published GWL URIs, and are available as the \"instance-id\" message within each GWL object which inherit from base-html-sheet. Clearing all the instances makes available for garbage collection all memory used by the object hierarchies rooted at the instances, as well as all associated published URIs. example: (clear-all-instance) <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/function-docs/dokumentation/4/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "f0da583d689e89a54ce0a45c9cbf66de"
  },
  {
    "text": "Function: GWL::SESSION-CONTROL-AUTO-REFRESH <-Back Function: Gwl::Session-Control-Auto-Refresh SESSION-CONTROL-AUTO-REFRESH adding this javascript function into the header of a web page will cause the page to timeout and reload repeatedly This is intended to be used such that when an instance is open in an active browser the page will automatically update the expires-at function even if the operator takes an extended break from the application. It works by checking if any forms exist on this page. If they do it will submit the first form on the page when the timeout value is reached. This is done to avoid the Post Data confirmation warning that most browser present. If no forms are found it will use the reload(true) function to reload the page. arguments: timeout Time in seconds between page reloads optional arguments: html-stream Stream which the output should be sent to , Default Value: NIL Default is *html-stream* <-Back Copyright \u00a9 2025 Genworks \u00ae International .",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/function-docs/dokumentation/13/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_functions",
      "chunk_id": 0,
      "chunk_count": 2
    },
    "id": "92bf9392b5406bea84b52ab3a93d7897"
  },
  {
    "text": "ge reloads optional arguments: html-stream Stream which the output should be sent to , Default Value: NIL Default is *html-stream* <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/function-docs/dokumentation/13/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_functions",
      "chunk_id": 1,
      "chunk_count": 2
    },
    "id": "4eed7afe7a987e705cdeb412ab420d17"
  },
  {
    "text": "Function: GWL:PUBLISH-GWL-APP <-Back Function: Gwl:Publish-Gwl-App PUBLISH-GWL-APP void Publishes an application, optionally with some initial arguments to be passed in as input-slots. arguments: path String The URL pathname component to be published string-or-symbol String or symbol The object type to insantiate keyword arguments: make-object-args Plist , Default Value: NIL Extra arguments to pass to make-object <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/function-docs/dokumentation/9/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "fe4df4ab534b0834fdbfe059c5ca396b"
  },
  {
    "text": "Macro: GWL:WITH-CL-WHO-STRING <-Back Macro: Gwl:With-Cl-Who-String WITH-CL-WHO-STRING form Sets up body to be evaluated with our with-cl-who return the resulting string instead of side-effecting anything at all to the default *stream*. <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/function-docs/dokumentation/16/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "19fbf078c8d65df4ee20b2f119f07d57"
  },
  {
    "text": "Macro: GWL:WITH-CL-WHO <-Back Macro: Gwl:With-Cl-Who WITH-CL-WHO form Sets up body to be evaluated with cl-who and output the resulting string to the default *stream* Note that the args are spliced into cl-who:with-html-output after *stream* nil, so for example you can do (with-cl-who (:indent t) ...) and it will expand into: (with-html-output (*stream* nil :indent t) ...) . <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/function-docs/dokumentation/15/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "f426672c31b2da548b5d3e6dbf5f02a0"
  },
  {
    "text": "Function: GWL:PUBLISH-SHARED <-Back Function: Gwl:Publish-Shared PUBLISH-SHARED void Used to publish a site which is to have a shared toplevel instance tree, and no URI rewriting (i.e. no \"/sessions/XXX/\" at the beginning of the path). So, this site will appear to be a normal non-dynamic site even though the pages are being generated dynamically. arguments: object-type Symbol The type of the toplevel object to be instantiated keyword arguments: path String , Default Value: \"/\" Must start with / The URI path to be published , Default Value: NIL Defaults to / NIL , Default Value: NIL paths If you want to give multiple paths , Default Value: (ENSURE-LIST PATH) Overrides path server Allegroserve server object , Default Value: *HTTP-SERVER* If you have additional servers other than the default *http-server* (e.g. an SSL server) then you may want to call this function for each server host Hostname for URI , Default Value: NIL Must be a valid hostname.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/function-docs/dokumentation/10/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_functions",
      "chunk_id": 0,
      "chunk_count": 3
    },
    "id": "3deb63bdd6cb75fe38fae9251de83b63"
  },
  {
    "text": "*http-server* (e.g. an SSL server) then you may want to call this function for each server host Hostname for URI , Default Value: NIL Must be a valid hostname. By default comes from the object instance hosts Hostnames for URI , Default Value: NIL Must be valid hostnames. Overrides host key Key for the *instance-hash-table* , Default Value: NIL Defaults to someting reasonable. object if you want to provide an already-instantiated one , Default Value: NIL Can be a list. Will override object-type content-type by default comes from the object instance , Default Value: NIL aserve-args Any other AllegroServe arguments you'd like to provide, defaults to nil , Default Value: NIL object-args Any other object arguments you'd like to provide on instantiation, defaults to nil , Default Value: NIL example: (publish-shared 'site:assembly :host (list \"www.genworks.com\" \"ww2.genworks.com\" \"mccarthy.genworks.com\")) <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/function-docs/dokumentation/10/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_functions",
      "chunk_id": 1,
      "chunk_count": 3
    },
    "id": "904f87455de1fd4e76d19854e434d7e7"
  },
  {
    "text": "ple: (publish-shared 'site:assembly :host (list \"www.genworks.com\" \"ww2.genworks.com\" \"mccarthy.genworks.com\")) <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/8/function-docs/dokumentation/10/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_8_functions",
      "chunk_id": 2,
      "chunk_count": 3
    },
    "id": "e36b7c61ab2ba44fa2b98d7b2cfa6352"
  },
  {
    "text": "The GEYSR (Web-based Development Environment (geysr)) Package Documentation Home The GEYSR (Web-based Development Environment (geysr)) Package Object Definitions menu tree Variables and Constants *suppress-$$-messages?* *suppress-%%-messages?* Documentation Home Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/6/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_6",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "b9f573f589bbb47a078a8f7d95b509f2"
  },
  {
    "text": "Documentation for GEYSR:*SUPPRESS-%%-MESSAGES?* <-Back Parameter: Geysr:*Suppress-%%-Messages?* *SUPPRESS-%%-MESSAGES?* boolean Set to nil if you want to see messages starting and ending with %% in tasty inspector. Defaults to t. <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/6/variable-docs/dokumentation/1/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_6_variables",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "c977713f1e3681576a6e9a16176edd2c"
  },
  {
    "text": "Documentation for GEYSR:*SUPPRESS-$$-MESSAGES?* <-Back Parameter: Geysr:*Suppress-$$-Messages?* *SUPPRESS-$$-MESSAGES?* boolean Set to nil if you want to see messages starting with $$ in tasty inspector. Defaults to t. <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/6/variable-docs/dokumentation/0/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_6_variables",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "cdbfa08cd35927b892acf0eaff4d837f"
  },
  {
    "text": "GendL Application - TREE Package Documentation Object: TREE (The :GEYSR Package) Mixins: SHEET-SECTION Description Implements an interactive graphical tree from a nested list using HTML list element and CSS. Input Slots (optional) BASHEE [ from SKELETON-UI-ELEMENT ] gdl object Object to have its settable computed-slots and/or query-plist set from the fields on the form upon submission. Defaults to self. DOM-ID [ from SKELETON-UI-ELEMENT ] string This is the auto-computed dom-id which should be used for rendering this section. If you use the main-div HTML string for rendering this object as a page section, then you do not have to generate the :div tag yourself - the main-div will be a string of HTML which is wrapped in the correct :div tag already.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/6/object-docs/dokumentation/1/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_6_objects",
      "chunk_id": 0,
      "chunk_count": 8
    },
    "id": "653d2dedd19f83acef6bffa6ff875e0a"
  },
  {
    "text": "FORCE-VALIDATION-FOR [ from SKELETON-UI-ELEMENT ] list of gdl objects of type form-control The validation-function will be forced on these objects when a form is submitted, even if the object's html form-control does not happen to be included in the values submitted with the form. Defaults to nil. HIDDEN? [ from VANILLA-MIXIN* ] boolean Indicates whether the object should effectively be a hidden-object even if specified in :objects. Default is nil. HTML-SECTIONS [ from SKELETON-UI-ELEMENT ] List of HTML sections to be scanned and possibly replaced in response to GDL Ajax calls. Override this slot at your own risk. The default is all sections who are most recently laid out on the respondent sheet, and this is set programmatically every time the sheet section's main-div is demanded. HTML-SECTIONS-VALID [ from SKELETON-UI-ELEMENT ] List of valid HTML sections to be scanned and possibly replaced in response to GDL Ajax calls. Override this slot at your own risk.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/6/object-docs/dokumentation/1/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_6_objects",
      "chunk_id": 1,
      "chunk_count": 8
    },
    "id": "5a362a933c9e5c8000a0be6e52770767"
  },
  {
    "text": "CTIONS-VALID [ from SKELETON-UI-ELEMENT ] List of valid HTML sections to be scanned and possibly replaced in response to GDL Ajax calls. Override this slot at your own risk. The default is all sections who are most recently laid out on the respondent sheet, and this is set programmatically every time the sheet section's main-div is demanded. JS-TO-EVAL [ from SKELETON-UI-ELEMENT ] string of valid javascript This Javascript will be send with the Ajax response, and evaluated after the innerHTML for this section has been replaced. ONCLICK-FUNCTION function of one argument This function takes a node in the tree as an argument, and should return a plist with keys :function and :arguments, which is a function in the bashee which will be called with the given arguments when the given node in the tree is clicked. ORDERED-FORM-CONTROLS [ from SKELETON-UI-ELEMENT ] list of gdl objects, which should be of type 'base-form-control .",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/6/object-docs/dokumentation/1/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_6_objects",
      "chunk_id": 2,
      "chunk_count": 8
    },
    "id": "c0365ed89253e9df6f474c4db039bdf6"
  },
  {
    "text": "tree is clicked. ORDERED-FORM-CONTROLS [ from SKELETON-UI-ELEMENT ] list of gdl objects, which should be of type 'base-form-control . [Note -- this slot is not really necessary for protecting out-of-bounds sequence references anymore, the form-control processor protects against this by itself now]. These objects are validated and bashed first, in the order given. If the cardinality of one form-control depends on another as in the example below, then you should list those dependent objects first. Default is nil. examples: ...",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/6/object-docs/dokumentation/1/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_6_objects",
      "chunk_id": 3,
      "chunk_count": 8
    },
    "id": "cecb3ae94678e29c191ef55ee46c2b81"
  },
  {
    "text": ":computed-slots ((number-of-nozzles (the number-of-nozzles-form value)) (ordered-form-controls (append (list-elements (the inner-flange-form)) (list (the number-of-nozzles-form))))) :objects ((inner-flange-form :type 'menu-form-control :choice-plist (list :hey \"hey\" :now \"now\") :default :hey :sequence (:size (the number-of-nozzles))) (number-of-nozzles-form :type 'text-form-control :prompt \"Number of Shell Nozzles Required: \" :domain :number :default 0) POSSIBLE-NILS [ from SKELETON-UI-ELEMENT ] list of keyword symbols Messages corresponding to form fields which could be missing from form submission (e.g. checkbox fields). Defaults to the names of any children or hidden-children of type menu-form-control or checkbox-form-control. PRESET-ALL? [ from SKELETON-UI-ELEMENT ] boolean This switch determines whether all form-controls should be preset before the final setting, in order to allow any interdependencies to be detected for validation or detecting changed values.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/6/object-docs/dokumentation/1/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_6_objects",
      "chunk_id": 4,
      "chunk_count": 8
    },
    "id": "a4bf63ffbc7314dfe43b1cc63189ad88"
  },
  {
    "text": "h determines whether all form-controls should be preset before the final setting, in order to allow any interdependencies to be detected for validation or detecting changed values. If this is specified as a non-nil value, then any nil values of (the preset?) on individual form controls will be ignored. If this is specified as nil, then (the preset?) of individual form-controls (default of these is also nil) will be respected. Default is nil. RESPONDENT [ from SKELETON-UI-ELEMENT ] gdl object Object to respond to the form submission. Defaults to self. ROOT [ from VANILLA-MIXIN* ] gdl instance The root-level node in this object's ``tree'' (instance hierarchy). STRINGS-FOR-DISPLAY [ from VANILLA-MIXIN* ] string or list of strings Determines how the name of objects of this type will be printed in most places. This defaults to the name-for-display (generally the part's name as specified in its parent), followed by an index number if the part is an element of a sequence.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/6/object-docs/dokumentation/1/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_6_objects",
      "chunk_id": 5,
      "chunk_count": 8
    },
    "id": "bddacebfed7441de9716314cc52c4959"
  },
  {
    "text": "in most places. This defaults to the name-for-display (generally the part's name as specified in its parent), followed by an index number if the part is an element of a sequence. VISIBLE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances Additional objects to display in Tatu tree. Typically this would be a subset of hidden-children. Defaults to NIL. Computed Slots INNER-HTML [ from SKELETON-UI-ELEMENT ] string This can be used with (str .) [in cl-who] or (:princ .) [in htmlGen] to output this section of the page, without the wrapping :div tag [so if you use this, your code would be responsible for wrapping the :div tag with :id (the dom-id).] SAFE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances All objects from the :objects specification, including elements of sequences as flat lists. Any children which throw errors come back as a plist with error information Package Documentation Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/6/object-docs/dokumentation/1/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_6_objects",
      "chunk_id": 6,
      "chunk_count": 8
    },
    "id": "3dc06f7e83e869f45fffb1b5049f4bb6"
  },
  {
    "text": "lists. Any children which throw errors come back as a plist with error information Package Documentation Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/6/object-docs/dokumentation/1/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_6_objects",
      "chunk_id": 7,
      "chunk_count": 8
    },
    "id": "44673c019470bbb34b9d716d7593a91a"
  },
  {
    "text": "GendL Application - MENU Package Documentation Object: MENU (The :GEYSR Package) Mixins: SHEET-SECTION Input Slots (optional) BASHEE [ from SKELETON-UI-ELEMENT ] gdl object Object to have its settable computed-slots and/or query-plist set from the fields on the form upon submission. Defaults to self. DOM-ID [ from SKELETON-UI-ELEMENT ] string This is the auto-computed dom-id which should be used for rendering this section. If you use the main-div HTML string for rendering this object as a page section, then you do not have to generate the :div tag yourself - the main-div will be a string of HTML which is wrapped in the correct :div tag already. FORCE-VALIDATION-FOR [ from SKELETON-UI-ELEMENT ] list of gdl objects of type form-control The validation-function will be forced on these objects when a form is submitted, even if the object's html form-control does not happen to be included in the values submitted with the form. Defaults to nil.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/6/object-docs/dokumentation/0/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_6_objects",
      "chunk_id": 0,
      "chunk_count": 7
    },
    "id": "ff9ad59adb8625e8bb9ba47f12e669a8"
  },
  {
    "text": "when a form is submitted, even if the object's html form-control does not happen to be included in the values submitted with the form. Defaults to nil. HIDDEN? [ from VANILLA-MIXIN* ] boolean Indicates whether the object should effectively be a hidden-object even if specified in :objects. Default is nil. HTML-SECTIONS [ from SKELETON-UI-ELEMENT ] List of HTML sections to be scanned and possibly replaced in response to GDL Ajax calls. Override this slot at your own risk. The default is all sections who are most recently laid out on the respondent sheet, and this is set programmatically every time the sheet section's main-div is demanded. HTML-SECTIONS-VALID [ from SKELETON-UI-ELEMENT ] List of valid HTML sections to be scanned and possibly replaced in response to GDL Ajax calls. Override this slot at your own risk. The default is all sections who are most recently laid out on the respondent sheet, and this is set programmatically every time the sheet section's main-div is demanded.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/6/object-docs/dokumentation/0/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_6_objects",
      "chunk_id": 1,
      "chunk_count": 7
    },
    "id": "945510fddac769370db272f863a41858"
  },
  {
    "text": "is slot at your own risk. The default is all sections who are most recently laid out on the respondent sheet, and this is set programmatically every time the sheet section's main-div is demanded. INCLUDED-CHILDREN keyword `:all` or list of keyword symbols . These dropdown menus will be included in the rendering, or `:all` to include all defined ones. JS-TO-EVAL [ from SKELETON-UI-ELEMENT ] string of valid javascript This Javascript will be send with the Ajax response, and evaluated after the innerHTML for this section has been replaced. ORDERED-FORM-CONTROLS [ from SKELETON-UI-ELEMENT ] list of gdl objects, which should be of type 'base-form-control . [Note -- this slot is not really necessary for protecting out-of-bounds sequence references anymore, the form-control processor protects against this by itself now]. These objects are validated and bashed first, in the order given.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/6/object-docs/dokumentation/0/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_6_objects",
      "chunk_id": 2,
      "chunk_count": 7
    },
    "id": "167e1f4573638f5797d27baa994493c0"
  },
  {
    "text": "inst this by itself now]. These objects are validated and bashed first, in the order given. If the cardinality of one form-control depends on another as in the example below, then you should list those dependent objects first. Default is nil. examples: ... :computed-slots ((number-of-nozzles (the number-of-nozzles-form value)) (ordered-form-controls (append (list-elements (the inner-flange-form)) (list (the number-of-nozzles-form))))) :objects ((inner-flange-form :type 'menu-form-control :choice-plist (list :hey \"hey\" :now \"now\") :default :hey :sequence (:size (the number-of-nozzles))) (number-of-nozzles-form :type 'text-form-control :prompt \"Number of Shell Nozzles Required: \" :domain :number :default 0) POSSIBLE-NILS [ from SKELETON-UI-ELEMENT ] list of keyword symbols Messages corresponding to form fields which could be missing from form submission (e.g. checkbox fields). Defaults to the names of any children or hidden-children of type menu-form-control or checkbox-form-control.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/6/object-docs/dokumentation/0/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_6_objects",
      "chunk_id": 3,
      "chunk_count": 7
    },
    "id": "53923a3839b4c4eb292820ddee779b51"
  },
  {
    "text": "ding to form fields which could be missing from form submission (e.g. checkbox fields). Defaults to the names of any children or hidden-children of type menu-form-control or checkbox-form-control. PRESET-ALL? [ from SKELETON-UI-ELEMENT ] boolean This switch determines whether all form-controls should be preset before the final setting, in order to allow any interdependencies to be detected for validation or detecting changed values. If this is specified as a non-nil value, then any nil values of (the preset?) on individual form controls will be ignored. If this is specified as nil, then (the preset?) of individual form-controls (default of these is also nil) will be respected. Default is nil. ROOT [ from VANILLA-MIXIN* ] gdl instance The root-level node in this object's ``tree'' (instance hierarchy). SAFE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances All objects from the :objects specification, including elements of sequences as flat lists.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/6/object-docs/dokumentation/0/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_6_objects",
      "chunk_id": 4,
      "chunk_count": 7
    },
    "id": "1f03beb2a00a40b79f9a740f6db9e72d"
  },
  {
    "text": "hierarchy). SAFE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances All objects from the :objects specification, including elements of sequences as flat lists. Any children which throw errors come back as a plist with error information STRINGS-FOR-DISPLAY [ from VANILLA-MIXIN* ] string or list of strings Determines how the name of objects of this type will be printed in most places. This defaults to the name-for-display (generally the part's name as specified in its parent), followed by an index number if the part is an element of a sequence. VISIBLE-CHILDREN [ from VANILLA-MIXIN* ] list of gdl instances Additional objects to display in Tatu tree. Typically this would be a subset of hidden-children. Defaults to NIL. Input Slots (optional, defaulting) RESPONDENT [ from SKELETON-UI-ELEMENT ] gdl object Object to respond to the form submission. Defaults to self.",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/6/object-docs/dokumentation/0/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_6_objects",
      "chunk_id": 5,
      "chunk_count": 7
    },
    "id": "f4105ee1a18be8f76e41253a82330daf"
  },
  {
    "text": "NT ] gdl object Object to respond to the form submission. Defaults to self. Computed Slots INNER-HTML [ from SKELETON-UI-ELEMENT ] string This can be used with (str .) [in cl-who] or (:princ .) [in htmlGen] to output this section of the page, without the wrapping :div tag [so if you use this, your code would be responsible for wrapping the :div tag with :id (the dom-id).] Package Documentation Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/6/object-docs/dokumentation/0/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_6_objects",
      "chunk_id": 6,
      "chunk_count": 7
    },
    "id": "0bcd0d1fdd5ce4bf47653b0be9f0672a"
  },
  {
    "text": "The GENDL-MCP Package Documentation Home The GENDL-MCP Package Function and Macro Definitions generate-mcp-openapi-spec generate-mcp-tool-description initialize-standard-endpoints Documentation Home Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/4/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_4",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "6acaff2e94ccc0f3cfff546bef87cbbb"
  },
  {
    "text": "Function: GENDL-MCP::GENERATE-MCP-TOOL-DESCRIPTION <-Back Function: Gendl-Mcp::Generate-Mcp-Tool-Description GENERATE-MCP-TOOL-DESCRIPTION generate a tool description for claude mcp integration . <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/4/function-docs/dokumentation/1/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_4_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "b7d8243ab60fa548858f7ed25467564f"
  },
  {
    "text": "Function: GENDL-MCP::GENERATE-MCP-OPENAPI-SPEC <-Back Function: Gendl-Mcp::Generate-Mcp-Openapi-Spec GENERATE-MCP-OPENAPI-SPEC generate an openapi specification for claude mcp integration . <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/4/function-docs/dokumentation/0/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_4_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "215a6faae314e3fa854ff73b496ff695"
  },
  {
    "text": "Function: GENDL-MCP:INITIALIZE-STANDARD-ENDPOINTS <-Back Function: Gendl-Mcp:Initialize-Standard-Endpoints INITIALIZE-STANDARD-ENDPOINTS set up standard mcp endpoints . <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/package-dokumentations/4/function-docs/dokumentation/2/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "package_4_functions",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "04b2c4d33b1b8db51870dbba072ad8a2"
  },
  {
    "text": "GendL Application - MASTER-INDEX Index for Relevant GDL Symbols Documentation Home *allow-nil-list-of-numbers?* ( Parameter or Constant, gendl) *bias-to-double-float?* ( Parameter or Constant, gendl) *break-leaders?* ( Parameter or Constant, geom-base) *break-on-set-self?* ( Parameter or Constant, gwl) *bypass-security-check?* ( Parameter or Constant, gwl) *color-table* ( Parameter or Constant, gendl) *color-table-decimal* ( Parameter or Constant, gendl) *colors-default* ( Parameter or Constant, gendl) *compile-circular-reference-detection?* ( Parameter or Constant, gendl) *compile-dependency-tracking?* ( Parameter or Constant, gendl) *compile-documentation-database?* ( Parameter or Constant, gendl) *compile-for-dgdl?* ( Parameter or Constant, gendl) *compile-source-code-database?* ( Parameter or Constant, gendl) *curve-chords* ( Parameter or Constant, gendl) *developing?* ( Parameter or Constant, gwl) *ensure-lists-when-bashing?* ( Parameter or Constant, gendl) *ent* ( Parameter or",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 0,
      "chunk_count": 216
    },
    "id": "d2cf230f25dc4b1deb0f192610473a32"
  },
  {
    "text": "eter or Constant, gendl) *curve-chords* ( Parameter or Constant, gendl) *developing?* ( Parameter or Constant, gwl) *ensure-lists-when-bashing?* ( Parameter or Constant, gendl) *ent* ( Parameter or Constant, gwl) *failed-request-url* ( Parameter or Constant, gwl) *gs-graphics-alpha-bits* ( Parameter or Constant, geom-base) *gs-text-alpha-bits* ( Parameter or Constant, geom-base) *hash-transforms?* ( Parameter or Constant, geom-base) *instance-finalizers* ( Parameter or Constant, gwl) *instance-hash-table* ( Parameter or Constant, gwl) *jump-to-toplevel-on-set-self?* ( Parameter or Constant, gwl) *load-documentation-database?* ( Parameter or Constant, gendl) *load-source-code-database?* ( Parameter or Constant, gendl) *max-id-value* ( Parameter or Constant, gwl) *on-syntax-error* ( Parameter or Constant, gendl) *out-of-bounds-sequence-reference-action* ( Parameter or Constant, gendl) *publishers* ( Parameter or Constant, gwl) *query* ( Parameter or Constant, gwl)",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 1,
      "chunk_count": 216
    },
    "id": "ae11e3394dc171fee38f36030f66613c"
  },
  {
    "text": "r or Constant, gendl) *out-of-bounds-sequence-reference-action* ( Parameter or Constant, gendl) *publishers* ( Parameter or Constant, gwl) *query* ( Parameter or Constant, gwl) *reap-expired-sessions?* ( Parameter or Constant, gwl) *recovery-url-default* ( Parameter or Constant, gwl) *remember-previous-slot-values?* ( Parameter or Constant, gendl) *req* ( Parameter or Constant, gwl) *root-checking-enabled?* ( Parameter or Constant, gendl) *run-with-circular-reference-detection?* ( Parameter or Constant, gendl) *run-with-dependency-tracking?* ( Parameter or Constant, gendl) *sort-children?* ( Parameter or Constant, gendl) *suppress-$$-messages?* ( Parameter or Constant, geysr) *suppress-%%-messages?* ( Parameter or Constant, geysr) *undeclared-parameters-enabled?* ( Parameter or Constant, gendl) *with-format-direction ( Parameter or Constant, gendl) *with-format-external-format* ( Parameter or Constant, gendl) *with-format-if-does-not-exist* ( Parameter or Constant, gendl)",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 2,
      "chunk_count": 216
    },
    "id": "4e7ab744ae40f2d9a0cc18d96b0726b6"
  },
  {
    "text": "endl) *with-format-direction ( Parameter or Constant, gendl) *with-format-external-format* ( Parameter or Constant, gendl) *with-format-if-does-not-exist* ( Parameter or Constant, gendl) *with-format-if-exists* ( Parameter or Constant, gendl) *zero-epsilon* ( Parameter or Constant, gendl) *zero-vector-checking?* ( Parameter or Constant, geom-base) +phi+ ( Parameter or Constant, gendl) +postnet-bits+ ( Parameter or Constant, geom-base) 2pi ( Parameter or Constant, gendl) 3D-BOX ( GDL object message on GEOM-BASE::RENDERER-MIXIN, keyword) 3D-BOX ( GDL object message on GWL:WEB-DRAWING, keyword) 3D-BOX-CENTER ( GDL object message on GEOM-BASE::RENDERER-MIXIN, keyword) 3D-BOX-CENTER ( GDL object message on GWL:WEB-DRAWING, keyword) 3d-distance ( Function, geom-base) 3d-point-p ( Function, geom-base) 3d-point? ( Function, geom-base) 3d-vector-p ( Function, geom-base) 3d-vector-to-array ( Function, geom-base) 3d-vector? ( Function, geom-base) ACCEPT ( GDL object message on",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 3,
      "chunk_count": 216
    },
    "id": "176416b8b39cfc07a276bbfe4e183838"
  },
  {
    "text": "base) 3d-point? ( Function, geom-base) 3d-vector-p ( Function, geom-base) 3d-vector-to-array ( Function, geom-base) 3d-vector? ( Function, geom-base) ACCEPT ( GDL object message on GWL:BASE-FORM-CONTROL, keyword) ACCEPT ( GDL object message on GWL:CHECKBOX-FORM-CONTROL, keyword) ACCEPT ( GDL object message on GWL:MENU-FORM-CONTROL, keyword) ACCEPT ( GDL object message on GWL:RADIO-FORM-CONTROL, keyword) ACCEPT ( GDL object message on GWL:TEXT-FORM-CONTROL, keyword) ACCESSKEY ( GDL object message on GWL:BASE-FORM-CONTROL, keyword) ACCESSKEY ( GDL object message on GWL:CHECKBOX-FORM-CONTROL, keyword) ACCESSKEY ( GDL object message on GWL:MENU-FORM-CONTROL, keyword) ACCESSKEY ( GDL object message on GWL:RADIO-FORM-CONTROL, keyword) ACCESSKEY ( GDL object message on GWL:TEXT-FORM-CONTROL, keyword) acosd ( Function, geom-base) add-matrices ( Function, geom-base) add-vectors ( Function, geom-base) ADDITIONAL-HEADER-CONTENT ( GDL object message on GWL:BASE-AJAX-GRAPHICS-SHEET, keyword)",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 4,
      "chunk_count": 216
    },
    "id": "0150d78b44e93d54926e9608526a7e6f"
  },
  {
    "text": "ord) acosd ( Function, geom-base) add-matrices ( Function, geom-base) add-vectors ( Function, geom-base) ADDITIONAL-HEADER-CONTENT ( GDL object message on GWL:BASE-AJAX-GRAPHICS-SHEET, keyword) ADDITIONAL-HEADER-CONTENT ( GDL object message on GWL:BASE-AJAX-SHEET, keyword) ADDITIONAL-HEADER-CONTENT ( GDL object message on YADD::BASE-YADD-SHEET, keyword) ADDITIONAL-HEADER-JS ( GDL object message on YADD::BASE-YADD-SHEET, keyword) ADDITIONAL-HEADER-JS-CONTENT ( GDL object message on GWL:BASE-AJAX-GRAPHICS-SHEET, keyword) ADDITIONAL-HEADER-JS-CONTENT ( GDL object message on GWL:BASE-AJAX-SHEET, keyword) ADDITIONAL-HEADER-JS-CONTENT ( GDL object message on YADD:ASSEMBLY, keyword) ADDITIONAL-HEADER-JS-CONTENT ( GDL object message on YADD::BASE-YADD-SHEET, keyword) ADDITIONAL-HEADER-JS-CONTENT ( GDL object message on YADD::MASTER-INDEX, keyword) ADDITIONAL-HEADER-JS-CONTENT ( GDL object message on YADD:PACKAGE-DOKUMENTATION, keyword) ADDITIONAL-HEADER-JS-CONTENT ( GDL object message on",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 5,
      "chunk_count": 216
    },
    "id": "ba766110e28a5db5b2d36da410dfb01d"
  },
  {
    "text": "GDL object message on YADD::MASTER-INDEX, keyword) ADDITIONAL-HEADER-JS-CONTENT ( GDL object message on YADD:PACKAGE-DOKUMENTATION, keyword) ADDITIONAL-HEADER-JS-CONTENT ( GDL object message on YADD::PACKAGE-FORM, keyword) AFTER-PRESENT! ( GDL object message on GWL:APPLICATION-MIXIN, keyword) AFTER-PRESENT! ( GDL object message on GWL:BASE-AJAX-GRAPHICS-SHEET, keyword) AFTER-PRESENT! ( GDL object message on GWL:BASE-AJAX-SHEET, keyword) AFTER-PRESENT! ( GDL object message on GWL:BASE-HTML-GRAPHICS-SHEET, keyword) AFTER-PRESENT! ( GDL object message on GWL:BASE-HTML-SHEET, keyword) AFTER-PRESENT! ( GDL object message on GWL::COLOR-MAP, keyword) AFTER-PRESENT! ( GDL object message on GWL:GWL-RULE-OBJECT, keyword) AFTER-PRESENT! ( GDL object message on GWL::LAYOUT-MIXIN, keyword) AFTER-PRESENT! ( GDL object message on GWL:NODE-MIXIN, keyword) AFTER-PRESENT! ( GDL object message on YADD:ASSEMBLY, keyword) AFTER-PRESENT! ( GDL object message on YADD::BASE-YADD-SHEET, keyword)",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 6,
      "chunk_count": 216
    },
    "id": "f48746002abb9c371b51a2797c52523c"
  },
  {
    "text": "NT! ( GDL object message on GWL:NODE-MIXIN, keyword) AFTER-PRESENT! ( GDL object message on YADD:ASSEMBLY, keyword) AFTER-PRESENT! ( GDL object message on YADD::BASE-YADD-SHEET, keyword) AFTER-PRESENT! ( GDL object message on YADD::MASTER-INDEX, keyword) AFTER-PRESENT! ( GDL object message on YADD:PACKAGE-DOKUMENTATION, keyword) AFTER-PRESENT! ( GDL object message on YADD::PACKAGE-FORM, keyword) AFTER-SET! ( GDL object message on GWL:APPLICATION-MIXIN, keyword) AFTER-SET! ( GDL object message on GWL:BASE-AJAX-GRAPHICS-SHEET, keyword) AFTER-SET! ( GDL object message on GWL:BASE-AJAX-SHEET, keyword) AFTER-SET! ( GDL object message on GWL:BASE-HTML-GRAPHICS-SHEET, keyword) AFTER-SET! ( GDL object message on GWL:BASE-HTML-SHEET, keyword) AFTER-SET! ( GDL object message on GWL::COLOR-MAP, keyword) AFTER-SET! ( GDL object message on GWL:GWL-RULE-OBJECT, keyword) AFTER-SET! ( GDL object message on GWL::LAYOUT-MIXIN, keyword) AFTER-SET! ( GDL object message on GWL:NODE-MIXIN, keyword)",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 7,
      "chunk_count": 216
    },
    "id": "f6c85962900e6480ed3500c9528b3dfe"
  },
  {
    "text": "rd) AFTER-SET! ( GDL object message on GWL:GWL-RULE-OBJECT, keyword) AFTER-SET! ( GDL object message on GWL::LAYOUT-MIXIN, keyword) AFTER-SET! ( GDL object message on GWL:NODE-MIXIN, keyword) AFTER-SET! ( GDL object message on YADD:ASSEMBLY, keyword) AFTER-SET! ( GDL object message on YADD::BASE-YADD-SHEET, keyword) AFTER-SET! ( GDL object message on YADD::MASTER-INDEX, keyword) AFTER-SET! ( GDL object message on YADD:PACKAGE-DOKUMENTATION, keyword) AFTER-SET! ( GDL object message on YADD::PACKAGE-FORM, keyword) AGGREGATE ( GDL object message on VANILLA-MIXIN*, keyword) AJAX-SUBMIT-ON-CHANGE? ( GDL object message on GWL:BASE-FORM-CONTROL, keyword) AJAX-SUBMIT-ON-CHANGE? ( GDL object message on GWL:CHECKBOX-FORM-CONTROL, keyword) AJAX-SUBMIT-ON-CHANGE? ( GDL object message on GWL:MENU-FORM-CONTROL, keyword) AJAX-SUBMIT-ON-CHANGE? ( GDL object message on GWL:RADIO-FORM-CONTROL, keyword) AJAX-SUBMIT-ON-CHANGE? ( GDL object message on GWL:TEXT-FORM-CONTROL, keyword) AJAX-SUBMIT-ON-ENTER?",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 8,
      "chunk_count": 216
    },
    "id": "e9a5ea483f9ba0f4888ad38ed9419e16"
  },
  {
    "text": "CONTROL, keyword) AJAX-SUBMIT-ON-CHANGE? ( GDL object message on GWL:RADIO-FORM-CONTROL, keyword) AJAX-SUBMIT-ON-CHANGE? ( GDL object message on GWL:TEXT-FORM-CONTROL, keyword) AJAX-SUBMIT-ON-ENTER? ( GDL object message on GWL:BASE-FORM-CONTROL, keyword) AJAX-SUBMIT-ON-ENTER? ( GDL object message on GWL:CHECKBOX-FORM-CONTROL, keyword) AJAX-SUBMIT-ON-ENTER? ( GDL object message on GWL:MENU-FORM-CONTROL, keyword) AJAX-SUBMIT-ON-ENTER? ( GDL object message on GWL:RADIO-FORM-CONTROL, keyword) AJAX-SUBMIT-ON-ENTER? ( GDL object message on GWL:TEXT-FORM-CONTROL, keyword) ALIGN ( GDL object message on GWL:BASE-FORM-CONTROL, keyword) ALIGN ( GDL object message on GWL:CHECKBOX-FORM-CONTROL, keyword) ALIGN ( GDL object message on GWL:MENU-FORM-CONTROL, keyword) ALIGN ( GDL object message on GWL:RADIO-FORM-CONTROL, keyword) ALIGN ( GDL object message on GWL:TEXT-FORM-CONTROL, keyword) alignment ( Function, geom-base) alist2plist ( Function, gendl) ALL-MIXINS ( GDL object message on",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 9,
      "chunk_count": 216
    },
    "id": "41243c8268e4a85a6c3b421a70d11eee"
  },
  {
    "text": "O-FORM-CONTROL, keyword) ALIGN ( GDL object message on GWL:TEXT-FORM-CONTROL, keyword) alignment ( Function, geom-base) alist2plist ( Function, gendl) ALL-MIXINS ( GDL object message on VANILLA-MIXIN*, keyword) ALLOW-INVALID-TYPE? ( GDL object message on GWL:BASE-FORM-CONTROL, keyword) ALLOW-INVALID-TYPE? ( GDL object message on GWL:CHECKBOX-FORM-CONTROL, keyword) ALLOW-INVALID-TYPE? ( GDL object message on GWL:MENU-FORM-CONTROL, keyword) ALLOW-INVALID-TYPE? ( GDL object message on GWL:RADIO-FORM-CONTROL, keyword) ALLOW-INVALID-TYPE? ( GDL object message on GWL:TEXT-FORM-CONTROL, keyword) ALLOW-INVALID? ( GDL object message on GWL:BASE-FORM-CONTROL, keyword) ALLOW-INVALID? ( GDL object message on GWL:CHECKBOX-FORM-CONTROL, keyword) ALLOW-INVALID? ( GDL object message on GWL:MENU-FORM-CONTROL, keyword) ALLOW-INVALID? ( GDL object message on GWL:RADIO-FORM-CONTROL, keyword) ALLOW-INVALID? ( GDL object message on GWL:TEXT-FORM-CONTROL, keyword) ALLOW-NIL? ( GDL object message on",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 10,
      "chunk_count": 216
    },
    "id": "2f7e1e1970ff612f18f8eb974e9cf070"
  },
  {
    "text": "OL, keyword) ALLOW-INVALID? ( GDL object message on GWL:RADIO-FORM-CONTROL, keyword) ALLOW-INVALID? ( GDL object message on GWL:TEXT-FORM-CONTROL, keyword) ALLOW-NIL? ( GDL object message on GWL:BASE-FORM-CONTROL, keyword) ALLOW-NIL? ( GDL object message on GWL:CHECKBOX-FORM-CONTROL, keyword) ALLOW-NIL? ( GDL object message on GWL:MENU-FORM-CONTROL, keyword) ALLOW-NIL? ( GDL object message on GWL:RADIO-FORM-CONTROL, keyword) ALLOW-NIL? ( GDL object message on GWL:TEXT-FORM-CONTROL, keyword) ALT ( GDL object message on GWL:BASE-FORM-CONTROL, keyword) ALT ( GDL object message on GWL:CHECKBOX-FORM-CONTROL, keyword) ALT ( GDL object message on GWL:MENU-FORM-CONTROL, keyword) ALT ( GDL object message on GWL:RADIO-FORM-CONTROL, keyword) ALT ( GDL object message on GWL:TEXT-FORM-CONTROL, keyword) always ( Function, gendl) angle-between-vectors ( Function, geom-base) angle-between-vectors-d ( Function, geom-base) ANGULAR-DIMENSION ( Object, geom-base) ANNOTATION-OBJECTS ( GDL object message",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 11,
      "chunk_count": 216
    },
    "id": "511c259d537ad0a568d779c660a69f6a"
  },
  {
    "text": "always ( Function, gendl) angle-between-vectors ( Function, geom-base) angle-between-vectors-d ( Function, geom-base) ANGULAR-DIMENSION ( Object, geom-base) ANNOTATION-OBJECTS ( GDL object message on BASE-VIEW, keyword) append-elements ( Macro, gendl) APPEND-ERROR-STRING? ( GDL object message on GWL:BASE-FORM-CONTROL, keyword) APPEND-ERROR-STRING? ( GDL object message on GWL:CHECKBOX-FORM-CONTROL, keyword) APPEND-ERROR-STRING? ( GDL object message on GWL:MENU-FORM-CONTROL, keyword) APPEND-ERROR-STRING? ( GDL object message on GWL:RADIO-FORM-CONTROL, keyword) APPEND-ERROR-STRING? ( GDL object message on GWL:TEXT-FORM-CONTROL, keyword) APPLICATION-FASLS ( GDL object message on GDL-APP, keyword) APPLICATION-MIXIN ( Object, gwl) APPLICATION-NAME ( GDL object message on GDL-APP, keyword) apply-make-point ( Function, geom-base) ARC ( Object, geom-base) ARC ( GDL object message on TORUS, keyword) ARC-OBJECT ( GDL object message on ANGULAR-DIMENSION, keyword) ARCOID-MIXIN ( Object,",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 12,
      "chunk_count": 216
    },
    "id": "6300e935124b79289f305db27f9b424d"
  },
  {
    "text": "-make-point ( Function, geom-base) ARC ( Object, geom-base) ARC ( GDL object message on TORUS, keyword) ARC-OBJECT ( GDL object message on ANGULAR-DIMENSION, keyword) ARCOID-MIXIN ( Object, geom-base) AREA ( GDL object message on CIRCLE, keyword) array-to-3d-vector ( Function, geom-base) array-to-list ( Function, geom-base) ARROWHEAD-LENGTH ( GDL object message on ANGULAR-DIMENSION, keyword) ARROWHEAD-LENGTH ( GDL object message on HORIZONTAL-DIMENSION, keyword) ARROWHEAD-LENGTH ( GDL object message on LABEL, keyword) ARROWHEAD-LENGTH ( GDL object message on LEADER-LINE, keyword) ARROWHEAD-LENGTH ( GDL object message on LINEAR-DIMENSION, keyword) ARROWHEAD-LENGTH ( GDL object message on PARALLEL-DIMENSION, keyword) ARROWHEAD-LENGTH ( GDL object message on VERTICAL-DIMENSION, keyword) ARROWHEAD-STYLE ( GDL object message on ANGULAR-DIMENSION, keyword) ARROWHEAD-STYLE ( GDL object message on HORIZONTAL-DIMENSION, keyword) ARROWHEAD-STYLE ( GDL object message on LABEL, keyword)",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 13,
      "chunk_count": 216
    },
    "id": "b7f35434d24b77d2c62db9e84ce13a37"
  },
  {
    "text": "HEAD-STYLE ( GDL object message on ANGULAR-DIMENSION, keyword) ARROWHEAD-STYLE ( GDL object message on HORIZONTAL-DIMENSION, keyword) ARROWHEAD-STYLE ( GDL object message on LABEL, keyword) ARROWHEAD-STYLE ( GDL object message on LEADER-LINE, keyword) ARROWHEAD-STYLE ( GDL object message on LINEAR-DIMENSION, keyword) ARROWHEAD-STYLE ( GDL object message on PARALLEL-DIMENSION, keyword) ARROWHEAD-STYLE ( GDL object message on VERTICAL-DIMENSION, keyword) ARROWHEAD-STYLE-2 ( GDL object message on ANGULAR-DIMENSION, keyword) ARROWHEAD-STYLE-2 ( GDL object message on HORIZONTAL-DIMENSION, keyword) ARROWHEAD-STYLE-2 ( GDL object message on LABEL, keyword) ARROWHEAD-STYLE-2 ( GDL object message on LEADER-LINE, keyword) ARROWHEAD-STYLE-2 ( GDL object message on LINEAR-DIMENSION, keyword) ARROWHEAD-STYLE-2 ( GDL object message on PARALLEL-DIMENSION, keyword) ARROWHEAD-STYLE-2 ( GDL object message on VERTICAL-DIMENSION, keyword) ARROWHEAD-WIDTH ( GDL object message on ANGULAR-DIMENSION,",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 14,
      "chunk_count": 216
    },
    "id": "a528a0e315e2bb9bd268c3f90b80c937"
  },
  {
    "text": "-STYLE-2 ( GDL object message on PARALLEL-DIMENSION, keyword) ARROWHEAD-STYLE-2 ( GDL object message on VERTICAL-DIMENSION, keyword) ARROWHEAD-WIDTH ( GDL object message on ANGULAR-DIMENSION, keyword) ARROWHEAD-WIDTH ( GDL object message on HORIZONTAL-DIMENSION, keyword) ARROWHEAD-WIDTH ( GDL object message on LABEL, keyword) ARROWHEAD-WIDTH ( GDL object message on LEADER-LINE, keyword) ARROWHEAD-WIDTH ( GDL object message on LINEAR-DIMENSION, keyword) ARROWHEAD-WIDTH ( GDL object message on PARALLEL-DIMENSION, keyword) ARROWHEAD-WIDTH ( GDL object message on VERTICAL-DIMENSION, keyword) asind ( Function, geom-base) ASSEMBLY ( Object, yadd) atand ( Function, geom-base) AVAILABLE-IMAGE-FORMATS ( GDL object message on GWL:APPLICATION-MIXIN, keyword) AVAILABLE-IMAGE-FORMATS ( GDL object message on GWL::LAYOUT-MIXIN, keyword) AVAILABLE-IMAGE-FORMATS ( GDL object message on GWL:NODE-MIXIN, keyword) AXIS-LENGTH ( GDL object message on SPHERICAL-CAP, keyword) AXIS-VECTOR ( GDL object message",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 15,
      "chunk_count": 216
    },
    "id": "47f011592d6169c608fc5ba694bc9877"
  },
  {
    "text": "ge on GWL::LAYOUT-MIXIN, keyword) AVAILABLE-IMAGE-FORMATS ( GDL object message on GWL:NODE-MIXIN, keyword) AXIS-LENGTH ( GDL object message on SPHERICAL-CAP, keyword) AXIS-VECTOR ( GDL object message on BASE-OBJECT, keyword) BACKGROUND-COLOR ( GDL object message on GWL:BASE-AJAX-GRAPHICS-SHEET, keyword) BACKGROUND-COLOR ( GDL object message on GWL:BASE-HTML-GRAPHICS-SHEET, keyword) BASE-AJAX-GRAPHICS-SHEET ( Object, gwl) BASE-AJAX-SHEET ( Object, gwl) BASE-COORDINATE-SYSTEM ( Object, geom-base) BASE-DRAWING ( Object, geom-base) BASE-FORM-CONTROL ( Object, gwl) BASE-HTML-GRAPHICS-SHEET ( Object, gwl) BASE-HTML-SHEET ( Object, gwl) BASE-OBJECT ( Object, geom-base) BASE-PLANE-NORMAL ( GDL object message on ANGULAR-DIMENSION, keyword) BASE-PLANE-NORMAL ( GDL object message on HORIZONTAL-DIMENSION, keyword) BASE-PLANE-NORMAL ( GDL object message on LINEAR-DIMENSION, keyword) BASE-PLANE-NORMAL ( GDL object message on PARALLEL-DIMENSION, keyword) BASE-PLANE-NORMAL ( GDL object message on",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 16,
      "chunk_count": 216
    },
    "id": "01a6e833235bf9a6cd707134af9f778f"
  },
  {
    "text": "ION, keyword) BASE-PLANE-NORMAL ( GDL object message on LINEAR-DIMENSION, keyword) BASE-PLANE-NORMAL ( GDL object message on PARALLEL-DIMENSION, keyword) BASE-PLANE-NORMAL ( GDL object message on VERTICAL-DIMENSION, keyword) BASE-RADIUS ( GDL object message on SPHERICAL-CAP, keyword) BASE-RULE-OBJECT ( Object, gendl) BASE-VIEW ( Object, geom-base) BASE-YADD-SHEET ( Object, yadd) base64-decode-list ( Function, gwl) base64-decode-safe ( Function, gwl) base64-encode-list ( Function, gwl) base64-encode-safe ( Function, gwl) BASHEE ( GDL object message on GEYSR::MENU, keyword) BASHEE ( GDL object message on GEYSR:TREE, keyword) BASHEE ( GDL object message on GWL:APPLICATION-MIXIN, keyword) BASHEE ( GDL object message on GWL:BASE-AJAX-GRAPHICS-SHEET, keyword) BASHEE ( GDL object message on GWL:BASE-AJAX-SHEET, keyword) BASHEE ( GDL object message on GWL:BASE-FORM-CONTROL, keyword) BASHEE ( GDL object message on GWL:BASE-HTML-GRAPHICS-SHEET, keyword) BASHEE ( GDL object message on",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 17,
      "chunk_count": 216
    },
    "id": "1971830c16c188d21652780d1f79cf82"
  },
  {
    "text": "ASE-AJAX-SHEET, keyword) BASHEE ( GDL object message on GWL:BASE-FORM-CONTROL, keyword) BASHEE ( GDL object message on GWL:BASE-HTML-GRAPHICS-SHEET, keyword) BASHEE ( GDL object message on GWL:BASE-HTML-SHEET, keyword) BASHEE ( GDL object message on GWL:CHECKBOX-FORM-CONTROL, keyword) BASHEE ( GDL object message on GWL::COLOR-MAP, keyword) BASHEE ( GDL object message on GWL:GRID-FORM-CONTROL, keyword) BASHEE ( GDL object message on GWL:GWL-RULE-OBJECT, keyword) BASHEE ( GDL object message on GWL::LAYOUT-MIXIN, keyword) BASHEE ( GDL object message on GWL:MENU-FORM-CONTROL, keyword) BASHEE ( GDL object message on GWL:NODE-MIXIN, keyword) BASHEE ( GDL object message on GWL:RADIO-FORM-CONTROL, keyword) BASHEE ( GDL object message on GWL:SHEET-SECTION, keyword) BASHEE ( GDL object message on GWL::SKELETON-FORM-CONTROL, keyword) BASHEE ( GDL object message on GWL:SKELETON-UI-ELEMENT, keyword) BASHEE ( GDL object message on GWL:TEXT-FORM-CONTROL, keyword) BASHEE ( GDL object message on",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 18,
      "chunk_count": 216
    },
    "id": "faa793f590ae59a8e210eae6bbda0e54"
  },
  {
    "text": "L::SKELETON-FORM-CONTROL, keyword) BASHEE ( GDL object message on GWL:SKELETON-UI-ELEMENT, keyword) BASHEE ( GDL object message on GWL:TEXT-FORM-CONTROL, keyword) BASHEE ( GDL object message on YADD:ASSEMBLY, keyword) BASHEE ( GDL object message on YADD::BASE-YADD-SHEET, keyword) BASHEE ( GDL object message on YADD::MASTER-INDEX, keyword) BASHEE ( GDL object message on YADD:PACKAGE-DOKUMENTATION, keyword) BASHEE ( GDL object message on YADD::PACKAGE-FORM, keyword) BEFORE-PRESENT! ( GDL object message on GWL:APPLICATION-MIXIN, keyword) BEFORE-PRESENT! ( GDL object message on GWL:BASE-AJAX-GRAPHICS-SHEET, keyword) BEFORE-PRESENT! ( GDL object message on GWL:BASE-AJAX-SHEET, keyword) BEFORE-PRESENT! ( GDL object message on GWL:BASE-HTML-GRAPHICS-SHEET, keyword) BEFORE-PRESENT! ( GDL object message on GWL:BASE-HTML-SHEET, keyword) BEFORE-PRESENT! ( GDL object message on GWL::COLOR-MAP, keyword) BEFORE-PRESENT! ( GDL object message on GWL:GWL-RULE-OBJECT, keyword) BEFORE-PRESENT! ( GDL",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 19,
      "chunk_count": 216
    },
    "id": "c8c0b14907304aab34922bfcad89f3bd"
  },
  {
    "text": "ssage on GWL:BASE-HTML-SHEET, keyword) BEFORE-PRESENT! ( GDL object message on GWL::COLOR-MAP, keyword) BEFORE-PRESENT! ( GDL object message on GWL:GWL-RULE-OBJECT, keyword) BEFORE-PRESENT! ( GDL object message on GWL::LAYOUT-MIXIN, keyword) BEFORE-PRESENT! ( GDL object message on GWL:NODE-MIXIN, keyword) BEFORE-PRESENT! ( GDL object message on YADD:ASSEMBLY, keyword) BEFORE-PRESENT! ( GDL object message on YADD::BASE-YADD-SHEET, keyword) BEFORE-PRESENT! ( GDL object message on YADD::MASTER-INDEX, keyword) BEFORE-PRESENT! ( GDL object message on YADD:PACKAGE-DOKUMENTATION, keyword) BEFORE-PRESENT! ( GDL object message on YADD::PACKAGE-FORM, keyword) BEFORE-RESPONSE! ( GDL object message on GWL:APPLICATION-MIXIN, keyword) BEFORE-RESPONSE! ( GDL object message on GWL:BASE-AJAX-GRAPHICS-SHEET, keyword) BEFORE-RESPONSE! ( GDL object message on GWL:BASE-AJAX-SHEET, keyword) BEFORE-RESPONSE! ( GDL object message on GWL:BASE-HTML-GRAPHICS-SHEET, keyword) BEFORE-RESPONSE! ( GDL object message",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 20,
      "chunk_count": 216
    },
    "id": "9f130a7b17cc4b57ca726452aa9e2dff"
  },
  {
    "text": ", keyword) BEFORE-RESPONSE! ( GDL object message on GWL:BASE-AJAX-SHEET, keyword) BEFORE-RESPONSE! ( GDL object message on GWL:BASE-HTML-GRAPHICS-SHEET, keyword) BEFORE-RESPONSE! ( GDL object message on GWL:BASE-HTML-SHEET, keyword) BEFORE-RESPONSE! ( GDL object message on GWL::COLOR-MAP, keyword) BEFORE-RESPONSE! ( GDL object message on GWL:GWL-RULE-OBJECT, keyword) BEFORE-RESPONSE! ( GDL object message on GWL::LAYOUT-MIXIN, keyword) BEFORE-RESPONSE! ( GDL object message on GWL:NODE-MIXIN, keyword) BEFORE-RESPONSE! ( GDL object message on YADD:ASSEMBLY, keyword) BEFORE-RESPONSE! ( GDL object message on YADD::BASE-YADD-SHEET, keyword) BEFORE-RESPONSE! ( GDL object message on YADD::MASTER-INDEX, keyword) BEFORE-RESPONSE! ( GDL object message on YADD:PACKAGE-DOKUMENTATION, keyword) BEFORE-RESPONSE! ( GDL object message on YADD::PACKAGE-FORM, keyword) BEFORE-SET! ( GDL object message on GWL:APPLICATION-MIXIN, keyword) BEFORE-SET! ( GDL object message on GWL:BASE-AJAX-GRAPHICS-SHEET,",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 21,
      "chunk_count": 216
    },
    "id": "956f664bbf79f10789c4d5974498e4da"
  },
  {
    "text": "SPONSE! ( GDL object message on YADD::PACKAGE-FORM, keyword) BEFORE-SET! ( GDL object message on GWL:APPLICATION-MIXIN, keyword) BEFORE-SET! ( GDL object message on GWL:BASE-AJAX-GRAPHICS-SHEET, keyword) BEFORE-SET! ( GDL object message on GWL:BASE-AJAX-SHEET, keyword) BEFORE-SET! ( GDL object message on GWL:BASE-HTML-GRAPHICS-SHEET, keyword) BEFORE-SET! ( GDL object message on GWL:BASE-HTML-SHEET, keyword) BEFORE-SET! ( GDL object message on GWL::COLOR-MAP, keyword) BEFORE-SET! ( GDL object message on GWL:GWL-RULE-OBJECT, keyword) BEFORE-SET! ( GDL object message on GWL::LAYOUT-MIXIN, keyword) BEFORE-SET! ( GDL object message on GWL:NODE-MIXIN, keyword) BEFORE-SET! ( GDL object message on YADD:ASSEMBLY, keyword) BEFORE-SET! ( GDL object message on YADD::BASE-YADD-SHEET, keyword) BEFORE-SET! ( GDL object message on YADD::MASTER-INDEX, keyword) BEFORE-SET! ( GDL object message on YADD:PACKAGE-DOKUMENTATION, keyword) BEFORE-SET! ( GDL object message on YADD::PACKAGE-FORM, keyword)",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 22,
      "chunk_count": 216
    },
    "id": "e8ce22d585974103c3fe5beb04ee102b"
  },
  {
    "text": "T! ( GDL object message on YADD::MASTER-INDEX, keyword) BEFORE-SET! ( GDL object message on YADD:PACKAGE-DOKUMENTATION, keyword) BEFORE-SET! ( GDL object message on YADD::PACKAGE-FORM, keyword) BEZIER-CURVE ( Object, geom-base) BIN-SUBDIR-NAMES ( GDL object message on CL-LITE:CODEBASE-DIRECTORY-NODE, keyword) BODY-BGCOLOR ( GDL object message on GWL:APPLICATION-MIXIN, keyword) BODY-BGCOLOR ( GDL object message on GWL::LAYOUT-MIXIN, keyword) BODY-BGCOLOR ( GDL object message on GWL:NODE-MIXIN, keyword) BODY-CLASS ( GDL object message on GWL:BASE-AJAX-GRAPHICS-SHEET, keyword) BODY-CLASS ( GDL object message on GWL:BASE-AJAX-SHEET, keyword) BODY-CLASS ( GDL object message on YADD:ASSEMBLY, keyword) BODY-CLASS ( GDL object message on YADD::BASE-YADD-SHEET, keyword) BODY-CLASS ( GDL object message on YADD::MASTER-INDEX, keyword) BODY-CLASS ( GDL object message on YADD:PACKAGE-DOKUMENTATION, keyword) BODY-CLASS ( GDL object message on YADD::PACKAGE-FORM, keyword) BODY-ONLOAD ( GDL object",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 23,
      "chunk_count": 216
    },
    "id": "486ed19f3c4b81a481134320730bc7fd"
  },
  {
    "text": "age on YADD::MASTER-INDEX, keyword) BODY-CLASS ( GDL object message on YADD:PACKAGE-DOKUMENTATION, keyword) BODY-CLASS ( GDL object message on YADD::PACKAGE-FORM, keyword) BODY-ONLOAD ( GDL object message on GWL:BASE-AJAX-GRAPHICS-SHEET, keyword) BODY-ONLOAD ( GDL object message on GWL:BASE-AJAX-SHEET, keyword) BODY-ONLOAD ( GDL object message on YADD:ASSEMBLY, keyword) BODY-ONLOAD ( GDL object message on YADD::BASE-YADD-SHEET, keyword) BODY-ONLOAD ( GDL object message on YADD::MASTER-INDEX, keyword) BODY-ONLOAD ( GDL object message on YADD:PACKAGE-DOKUMENTATION, keyword) BODY-ONLOAD ( GDL object message on YADD::PACKAGE-FORM, keyword) BODY-ONPAGESHOW ( GDL object message on GWL:BASE-AJAX-GRAPHICS-SHEET, keyword) BODY-ONPAGESHOW ( GDL object message on GWL:BASE-AJAX-SHEET, keyword) BODY-ONPAGESHOW ( GDL object message on YADD:ASSEMBLY, keyword) BODY-ONPAGESHOW ( GDL object message on YADD::BASE-YADD-SHEET, keyword) BODY-ONPAGESHOW ( GDL object message on YADD::MASTER-INDEX, keyword)",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 24,
      "chunk_count": 216
    },
    "id": "b84e7c112e6dfbe7594c168a7db895fa"
  },
  {
    "text": "PAGESHOW ( GDL object message on YADD:ASSEMBLY, keyword) BODY-ONPAGESHOW ( GDL object message on YADD::BASE-YADD-SHEET, keyword) BODY-ONPAGESHOW ( GDL object message on YADD::MASTER-INDEX, keyword) BODY-ONPAGESHOW ( GDL object message on YADD:PACKAGE-DOKUMENTATION, keyword) BODY-ONPAGESHOW ( GDL object message on YADD::PACKAGE-FORM, keyword) BODY-ONRESIZE ( GDL object message on GWL:BASE-AJAX-GRAPHICS-SHEET, keyword) BODY-ONRESIZE ( GDL object message on GWL:BASE-AJAX-SHEET, keyword) BODY-ONRESIZE ( GDL object message on YADD:ASSEMBLY, keyword) BODY-ONRESIZE ( GDL object message on YADD::BASE-YADD-SHEET, keyword) BODY-ONRESIZE ( GDL object message on YADD::MASTER-INDEX, keyword) BODY-ONRESIZE ( GDL object message on YADD:PACKAGE-DOKUMENTATION, keyword) BODY-ONRESIZE ( GDL object message on YADD::PACKAGE-FORM, keyword) BORDER-BOX? ( GDL object message on BASE-VIEW, keyword) BOTTOM-CAP? ( GDL object message on C-CYLINDER, keyword) BOTTOM-CAP? ( GDL object message on CONE, keyword)",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 25,
      "chunk_count": 216
    },
    "id": "1688f42434aa10c5589110e440c05b98"
  },
  {
    "text": "YADD::PACKAGE-FORM, keyword) BORDER-BOX? ( GDL object message on BASE-VIEW, keyword) BOTTOM-CAP? ( GDL object message on C-CYLINDER, keyword) BOTTOM-CAP? ( GDL object message on CONE, keyword) BOTTOM-CAP? ( GDL object message on CYLINDER, keyword) BOUNDING-BBOX ( GDL object message on BASE-OBJECT, keyword) BOUNDING-BOX ( GDL object message on ANGULAR-DIMENSION, keyword) BOUNDING-BOX ( GDL object message on ARC, keyword) BOUNDING-BOX ( GDL object message on BASE-COORDINATE-SYSTEM, keyword) BOUNDING-BOX ( GDL object message on BASE-DRAWING, keyword) BOUNDING-BOX ( GDL object message on BASE-OBJECT, keyword) BOUNDING-BOX ( GDL object message on BASE-VIEW, keyword) BOUNDING-BOX ( GDL object message on BEZIER-CURVE, keyword) BOUNDING-BOX ( GDL object message on BOX, keyword) BOUNDING-BOX ( GDL object message on C-CYLINDER, keyword) BOUNDING-BOX ( GDL object message on CENTER-LINE, keyword) BOUNDING-BOX ( GDL object message on CIRCLE, keyword) BOUNDING-BOX ( GDL object message on CONE,",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 26,
      "chunk_count": 216
    },
    "id": "5e37e2cb639ed9bb47df726942863a3a"
  },
  {
    "text": "object message on C-CYLINDER, keyword) BOUNDING-BOX ( GDL object message on CENTER-LINE, keyword) BOUNDING-BOX ( GDL object message on CIRCLE, keyword) BOUNDING-BOX ( GDL object message on CONE, keyword) BOUNDING-BOX ( GDL object message on CONSTRAINED-ARC, keyword) BOUNDING-BOX ( GDL object message on CONSTRAINED-FILLET, keyword) BOUNDING-BOX ( GDL object message on CYLINDER, keyword) BOUNDING-BOX ( GDL object message on ELLIPSE, keyword) BOUNDING-BOX ( GDL object message on GENERAL-NOTE, keyword) BOUNDING-BOX ( GDL object message on GLOBAL-POLYGON-PROJECTION, keyword) BOUNDING-BOX ( GDL object message on GEOM-BASE::GLOBAL-POLYLINE-MIXIN, keyword) BOUNDING-BOX ( GDL object message on HORIZONTAL-DIMENSION, keyword) BOUNDING-BOX ( GDL object message on LABEL, keyword) BOUNDING-BOX ( GDL object message on LEADER-LINE, keyword) BOUNDING-BOX ( GDL object message on LINE, keyword) BOUNDING-BOX ( GDL object message on LINEAR-DIMENSION, keyword) BOUNDING-BOX ( GDL object message on",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 27,
      "chunk_count": 216
    },
    "id": "04c877849803191e6fe1c94a957179b2"
  },
  {
    "text": "ject message on LEADER-LINE, keyword) BOUNDING-BOX ( GDL object message on LINE, keyword) BOUNDING-BOX ( GDL object message on LINEAR-DIMENSION, keyword) BOUNDING-BOX ( GDL object message on PARALLEL-DIMENSION, keyword) BOUNDING-BOX ( GDL object message on PIE-CHART, keyword) BOUNDING-BOX ( GDL object message on POINT, keyword) BOUNDING-BOX ( GDL object message on POINTS-DISPLAY, keyword) BOUNDING-BOX ( GDL object message on ROUTE-PIPE, keyword) BOUNDING-BOX ( GDL object message on SAMPLE-DRAWING, keyword) BOUNDING-BOX ( GDL object message on SPHERE, keyword) BOUNDING-BOX ( GDL object message on SPHERICAL-CAP, keyword) BOUNDING-BOX ( GDL object message on TEXT-LINE, keyword) BOUNDING-BOX ( GDL object message on TORUS, keyword) BOUNDING-BOX ( GDL object message on TYPESET-BLOCK, keyword) BOUNDING-BOX ( GDL object message on VERTICAL-DIMENSION, keyword) BOUNDING-BOX ( GDL object message on GWL:APPLICATION-MIXIN, keyword) BOUNDING-BOX ( GDL object message on GWL:BASE-AJAX-GRAPHICS-SHEET,",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 28,
      "chunk_count": 216
    },
    "id": "f9814a6f0b16b4df9c08df1ede6a5b29"
  },
  {
    "text": "UNDING-BOX ( GDL object message on VERTICAL-DIMENSION, keyword) BOUNDING-BOX ( GDL object message on GWL:APPLICATION-MIXIN, keyword) BOUNDING-BOX ( GDL object message on GWL:BASE-AJAX-GRAPHICS-SHEET, keyword) BOUNDING-BOX ( GDL object message on GWL:BASE-HTML-GRAPHICS-SHEET, keyword) BOUNDING-BOX ( GDL object message on GWL:GWL-RULE-OBJECT, keyword) BOUNDING-BOX ( GDL object message on GWL::LAYOUT-MIXIN, keyword) BOUNDING-BOX ( GDL object message on GWL:NODE-MIXIN, keyword) BOUNDING-BOX ( GDL object message on GWL:WEB-DRAWING, keyword) BOUNDING-SPHERE ( GDL object message on GEOM-BASE::RENDERER-MIXIN, keyword) BOUNDING-SPHERE ( GDL object message on GWL:WEB-DRAWING, keyword) BOX ( Object, geom-base) BREAK-POINTS ( GDL object message on LEADER-LINE, keyword) C-CYLINDER ( Object, geom-base) CAP-THICKNESS ( GDL object message on SPHERICAL-CAP, keyword) CENTER ( GDL object message on ANGULAR-DIMENSION, keyword) CENTER ( GDL object message on ARC, keyword) CENTER ( GDL object message on",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 29,
      "chunk_count": 216
    },
    "id": "429dad48873da929a97679cc9eb68176"
  },
  {
    "text": "CAP-THICKNESS ( GDL object message on SPHERICAL-CAP, keyword) CENTER ( GDL object message on ANGULAR-DIMENSION, keyword) CENTER ( GDL object message on ARC, keyword) CENTER ( GDL object message on BASE-COORDINATE-SYSTEM, keyword) CENTER ( GDL object message on BASE-DRAWING, keyword) CENTER ( GDL object message on BASE-OBJECT, keyword) CENTER ( GDL object message on BASE-VIEW, keyword) CENTER ( GDL object message on BEZIER-CURVE, keyword) CENTER ( GDL object message on BOX, keyword) CENTER ( GDL object message on C-CYLINDER, keyword) CENTER ( GDL object message on CENTER-LINE, keyword) CENTER ( GDL object message on CIRCLE, keyword) CENTER ( GDL object message on CONE, keyword) CENTER ( GDL object message on CONSTRAINED-ARC, keyword) CENTER ( GDL object message on CYLINDER, keyword) CENTER ( GDL object message on ELLIPSE, keyword) CENTER ( GDL object message on GENERAL-NOTE, keyword) CENTER ( GDL object message on GLOBAL-FILLETED-POLYGON-PROJECTION, keyword) CENTER ( GDL object message",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 30,
      "chunk_count": 216
    },
    "id": "587a8b1a3414599986265a58e0380e55"
  },
  {
    "text": "( GDL object message on ELLIPSE, keyword) CENTER ( GDL object message on GENERAL-NOTE, keyword) CENTER ( GDL object message on GLOBAL-FILLETED-POLYGON-PROJECTION, keyword) CENTER ( GDL object message on GLOBAL-FILLETED-POLYLINE, keyword) CENTER ( GDL object message on GEOM-BASE::GLOBAL-FILLETED-POLYLINE-MIXIN, keyword) CENTER ( GDL object message on GLOBAL-POLYGON-PROJECTION, keyword) CENTER ( GDL object message on GLOBAL-POLYLINE, keyword) CENTER ( GDL object message on GEOM-BASE::GLOBAL-POLYLINE-MIXIN, keyword) CENTER ( GDL object message on HORIZONTAL-DIMENSION, keyword) CENTER ( GDL object message on LABEL, keyword) CENTER ( GDL object message on LEADER-LINE, keyword) CENTER ( GDL object message on LINE, keyword) CENTER ( GDL object message on LINEAR-DIMENSION, keyword) CENTER ( GDL object message on PARALLEL-DIMENSION, keyword) CENTER ( GDL object message on PIE-CHART, keyword) CENTER ( GDL object message on POINT, keyword) CENTER ( GDL object message on POINTS-DISPLAY, keyword)",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 31,
      "chunk_count": 216
    },
    "id": "3e899bd89e0b9f0f0ba24475b39ada89"
  },
  {
    "text": "ject message on PARALLEL-DIMENSION, keyword) CENTER ( GDL object message on PIE-CHART, keyword) CENTER ( GDL object message on POINT, keyword) CENTER ( GDL object message on POINTS-DISPLAY, keyword) CENTER ( GDL object message on ROUTE-PIPE, keyword) CENTER ( GDL object message on SAMPLE-DRAWING, keyword) CENTER ( GDL object message on SPHERE, keyword) CENTER ( GDL object message on SPHERICAL-CAP, keyword) CENTER ( GDL object message on TEXT-LINE, keyword) CENTER ( GDL object message on TORUS, keyword) CENTER ( GDL object message on TYPESET-BLOCK, keyword) CENTER ( GDL object message on VERTICAL-DIMENSION, keyword) CENTER ( GDL object message on GWL:APPLICATION-MIXIN, keyword) CENTER ( GDL object message on GWL:BASE-AJAX-GRAPHICS-SHEET, keyword) CENTER ( GDL object message on GWL:BASE-HTML-GRAPHICS-SHEET, keyword) CENTER ( GDL object message on GWL:GWL-RULE-OBJECT, keyword) CENTER ( GDL object message on GWL::LAYOUT-MIXIN, keyword) CENTER ( GDL object message on GWL:NODE-MIXIN,",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 32,
      "chunk_count": 216
    },
    "id": "709d5b4c66860bd3c4e0df2becb1ca1f"
  },
  {
    "text": "-GRAPHICS-SHEET, keyword) CENTER ( GDL object message on GWL:GWL-RULE-OBJECT, keyword) CENTER ( GDL object message on GWL::LAYOUT-MIXIN, keyword) CENTER ( GDL object message on GWL:NODE-MIXIN, keyword) CENTER ( GDL object message on GWL:WEB-DRAWING, keyword) CENTER-LINE ( GDL object message on C-CYLINDER, keyword) CENTER-LINE ( Object, geom-base) CENTER-POINT ( GDL object message on ANGULAR-DIMENSION, keyword) CHARACTER-SIZE ( GDL object message on ANGULAR-DIMENSION, keyword) CHARACTER-SIZE ( GDL object message on GENERAL-NOTE, keyword) CHARACTER-SIZE ( GDL object message on HORIZONTAL-DIMENSION, keyword) CHARACTER-SIZE ( GDL object message on LABEL, keyword) CHARACTER-SIZE ( GDL object message on LINEAR-DIMENSION, keyword) CHARACTER-SIZE ( GDL object message on PARALLEL-DIMENSION, keyword) CHARACTER-SIZE ( GDL object message on VERTICAL-DIMENSION, keyword) check-computed-slots ( Function, gendl) check-documentation ( Function, gendl) check-floating-string ( Function, gendl)",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 33,
      "chunk_count": 216
    },
    "id": "5a500e08eb198711adc9c438da1e22ba"
  },
  {
    "text": ") CHARACTER-SIZE ( GDL object message on VERTICAL-DIMENSION, keyword) check-computed-slots ( Function, gendl) check-documentation ( Function, gendl) check-floating-string ( Function, gendl) check-form ( Function, gendl) check-functions ( Function, gendl) check-input-slots ( Function, gendl) check-objects ( Function, gendl) check-query-slots ( Function, gendl) CHECK-SANITY ( GDL object message on GWL:BASE-HTML-SHEET, keyword) CHECK-SANITY? ( GDL object message on GWL:APPLICATION-MIXIN, keyword) CHECK-SANITY? ( GDL object message on GWL:BASE-AJAX-GRAPHICS-SHEET, keyword) CHECK-SANITY? ( GDL object message on GWL:BASE-AJAX-SHEET, keyword) CHECK-SANITY? ( GDL object message on GWL:BASE-HTML-GRAPHICS-SHEET, keyword) CHECK-SANITY? ( GDL object message on GWL:BASE-HTML-SHEET, keyword) CHECK-SANITY? ( GDL object message on GWL::COLOR-MAP, keyword) CHECK-SANITY? ( GDL object message on GWL:GWL-RULE-OBJECT, keyword) CHECK-SANITY? ( GDL object message on GWL::LAYOUT-MIXIN, keyword) CHECK-SANITY?",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 34,
      "chunk_count": 216
    },
    "id": "b4ed3836a6c3bf5d61256b2588cb35f8"
  },
  {
    "text": "Y? ( GDL object message on GWL::COLOR-MAP, keyword) CHECK-SANITY? ( GDL object message on GWL:GWL-RULE-OBJECT, keyword) CHECK-SANITY? ( GDL object message on GWL::LAYOUT-MIXIN, keyword) CHECK-SANITY? ( GDL object message on GWL:NODE-MIXIN, keyword) CHECK-SANITY? ( GDL object message on YADD:ASSEMBLY, keyword) CHECK-SANITY? ( GDL object message on YADD::BASE-YADD-SHEET, keyword) CHECK-SANITY? ( GDL object message on YADD::MASTER-INDEX, keyword) CHECK-SANITY? ( GDL object message on YADD:PACKAGE-DOKUMENTATION, keyword) CHECK-SANITY? ( GDL object message on YADD::PACKAGE-FORM, keyword) check-trickle-down-slots ( Function, gendl) CHECKBOX-FORM-CONTROL ( Object, gwl) CHILDREN ( GDL object message on VANILLA-MIXIN*, keyword) CHOICE-LIST ( GDL object message on GWL:MENU-FORM-CONTROL, keyword) CHOICE-LIST ( GDL object message on GWL:RADIO-FORM-CONTROL, keyword) CHOICE-PLIST ( GDL object message on GWL:MENU-FORM-CONTROL, keyword) CHOICE-PLIST ( GDL object message on GWL:RADIO-FORM-CONTROL,",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 35,
      "chunk_count": 216
    },
    "id": "ec46514b603d13bfb1c24e7f0fa8f34c"
  },
  {
    "text": "ICE-LIST ( GDL object message on GWL:RADIO-FORM-CONTROL, keyword) CHOICE-PLIST ( GDL object message on GWL:MENU-FORM-CONTROL, keyword) CHOICE-PLIST ( GDL object message on GWL:RADIO-FORM-CONTROL, keyword) CHOICE-STYLES ( GDL object message on GWL:MENU-FORM-CONTROL, keyword) CHOICE-STYLES ( GDL object message on GWL:RADIO-FORM-CONTROL, keyword) CIRCLE ( Object, geom-base) CIRCLE-INTERSECTION-2D ( GDL object message on BEZIER-CURVE, keyword) CIRCLE? ( GDL object message on CENTER-LINE, keyword) CIRCUMFERENCE ( GDL object message on CIRCLE, keyword) cl-lite ( Function, gendl) cl-patch ( Function, cl-lite) CLASS ( GDL object message on GWL:BASE-FORM-CONTROL, keyword) CLASS ( GDL object message on GWL:CHECKBOX-FORM-CONTROL, keyword) CLASS ( GDL object message on GWL:GRID-FORM-CONTROL, keyword) CLASS ( GDL object message on GWL:MENU-FORM-CONTROL, keyword) CLASS ( GDL object message on GWL:RADIO-FORM-CONTROL, keyword) CLASS ( GDL object message on GWL::SKELETON-FORM-CONTROL, keyword) CLASS (",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 36,
      "chunk_count": 216
    },
    "id": "a29a69caa28235dabe5688f7301c7118"
  },
  {
    "text": "CLASS ( GDL object message on GWL:MENU-FORM-CONTROL, keyword) CLASS ( GDL object message on GWL:RADIO-FORM-CONTROL, keyword) CLASS ( GDL object message on GWL::SKELETON-FORM-CONTROL, keyword) CLASS ( GDL object message on GWL:TEXT-FORM-CONTROL, keyword) clear-all-instances ( Function, gwl) CLEAR-EXPIRED-SESSION ( GDL object message on GWL:SESSION-CONTROL-MIXIN, keyword) clear-instance ( Function, gwl) CLEAR-NOW? ( GDL object message on GWL:SESSION-CONTROL-MIXIN, keyword) clear-old-timers ( Function, gwl) CLOSED? ( GDL object message on C-CYLINDER, keyword) CLOSED? ( GDL object message on CONE, keyword) CLOSED? ( GDL object message on CYLINDER, keyword) CLOSED? ( GDL object message on GLOBAL-FILLETED-POLYLINE, keyword) CLOSED? ( GDL object message on GEOM-BASE::GLOBAL-FILLETED-POLYLINE-MIXIN, keyword) CLOSED? ( GDL object message on GLOBAL-POLYLINE, keyword) CLOSED? ( GDL object message on GEOM-BASE::GLOBAL-POLYLINE-MIXIN, keyword) CLOSED? ( GDL object message on ROUTE-PIPE, keyword)",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 37,
      "chunk_count": 216
    },
    "id": "b17ce14206e6a04d50fa1f4b3aef6910"
  },
  {
    "text": "N, keyword) CLOSED? ( GDL object message on GLOBAL-POLYLINE, keyword) CLOSED? ( GDL object message on GEOM-BASE::GLOBAL-POLYLINE-MIXIN, keyword) CLOSED? ( GDL object message on ROUTE-PIPE, keyword) CLOSEST-VERTEX ( GDL object message on BOX, keyword) CODEBASE-DIRECTORY-NODE ( Object, cl-lite) coincident-point? ( Function, geom-base) COLOR-DECIMAL ( GDL object message on BASE-OBJECT, keyword) COLOR-MAP ( Object, gwl) COLS ( GDL object message on GWL:TEXT-FORM-CONTROL, keyword) CONE ( Object, geom-base) CONSTRAINED-ARC ( Object, geom-base) CONSTRAINED-FILLET ( Object, geom-base) CONSTRAINED-LINE ( Object, geom-base) CONTROL-POINTS ( GDL object message on BEZIER-CURVE, keyword) CORNER ( GDL object message on BASE-VIEW, keyword) crawl ( Function, gwl) CREATE-FASL? ( GDL object message on CL-LITE:CODEBASE-DIRECTORY-NODE, keyword) create-obliqueness ( Function, geom-base) cross-vectors ( Function, geom-base) CROSSHAIR-LENGTH ( GDL object message on POINT, keyword) CUSTOM-SNAP-RESTORE! ( GDL",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 38,
      "chunk_count": 216
    },
    "id": "f83fcfeb1f1c938df4d63bf9357a7f9b"
  },
  {
    "text": "TE:CODEBASE-DIRECTORY-NODE, keyword) create-obliqueness ( Function, geom-base) cross-vectors ( Function, geom-base) CROSSHAIR-LENGTH ( GDL object message on POINT, keyword) CUSTOM-SNAP-RESTORE! ( GDL object message on GWL:BASE-AJAX-SHEET, keyword) cyclic-nth ( Function, gendl) CYLINDER ( Object, geom-base) DATA ( GDL object message on PIE-CHART, keyword) DEFAULT ( GDL object message on GWL:BASE-FORM-CONTROL, keyword) DEFAULT ( GDL object message on GWL:CHECKBOX-FORM-CONTROL, keyword) DEFAULT ( GDL object message on GWL:GRID-FORM-CONTROL, keyword) DEFAULT ( GDL object message on GWL:MENU-FORM-CONTROL, keyword) DEFAULT ( GDL object message on GWL:RADIO-FORM-CONTROL, keyword) DEFAULT ( GDL object message on GWL:TEXT-FORM-CONTROL, keyword) DEFAULT-HEADER-CONTENT ( GDL object message on YADD::BASE-YADD-SHEET, keyword) DEFAULT-RADIUS ( GDL object message on GLOBAL-FILLETED-POLYGON-PROJECTION, keyword) DEFAULT-RADIUS ( GDL object message on GLOBAL-FILLETED-POLYLINE, keyword) DEFAULT-RADIUS (",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 39,
      "chunk_count": 216
    },
    "id": "1dbe00e43132153927c07079266f04d2"
  },
  {
    "text": "ASE-YADD-SHEET, keyword) DEFAULT-RADIUS ( GDL object message on GLOBAL-FILLETED-POLYGON-PROJECTION, keyword) DEFAULT-RADIUS ( GDL object message on GLOBAL-FILLETED-POLYLINE, keyword) DEFAULT-RADIUS ( GDL object message on GEOM-BASE::GLOBAL-FILLETED-POLYLINE-MIXIN, keyword) DEFAULT-RADIUS ( GDL object message on ROUTE-PIPE, keyword) DEFAULT-TREE-DEPTH ( GDL object message on GWL:NODE-MIXIN, keyword) defaulting ( Macro, gendl) define-format ( Macro, gendl) define-lens ( Macro, gendl) define-object ( Macro, gendl) define-object-amendment ( Macro, gendl) degree ( Function, geom-base) degrees-to-radians ( Function, geom-base) DELETE! ( GDL object message on GENDL::VARIABLE-SEQUENCE, keyword) DESCRIPTION-POSITION ( GDL object message on GWL:RADIO-FORM-CONTROL, keyword) DESTINATION-DIRECTORY ( GDL object message on GDL-APP, keyword) DEVELOPMENT-LINKS ( GDL object message on GWL:BASE-AJAX-SHEET, keyword) DIGITATION-MODE ( GDL object message on GWL:APPLICATION-MIXIN, keyword) DIGITATION-MODE (",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 40,
      "chunk_count": 216
    },
    "id": "2905923acf37f701838c45b379f2bb15"
  },
  {
    "text": "L object message on GDL-APP, keyword) DEVELOPMENT-LINKS ( GDL object message on GWL:BASE-AJAX-SHEET, keyword) DIGITATION-MODE ( GDL object message on GWL:APPLICATION-MIXIN, keyword) DIGITATION-MODE ( GDL object message on GWL:BASE-AJAX-GRAPHICS-SHEET, keyword) DIGITATION-MODE ( GDL object message on GWL:BASE-HTML-GRAPHICS-SHEET, keyword) DIGITATION-MODE ( GDL object message on GWL:GWL-RULE-OBJECT, keyword) DIGITATION-MODE ( GDL object message on GWL::LAYOUT-MIXIN, keyword) DIGITATION-MODE ( GDL object message on GWL:NODE-MIXIN, keyword) DIM-TEXT ( GDL object message on ANGULAR-DIMENSION, keyword) DIM-TEXT ( GDL object message on HORIZONTAL-DIMENSION, keyword) DIM-TEXT ( GDL object message on LINEAR-DIMENSION, keyword) DIM-TEXT ( GDL object message on PARALLEL-DIMENSION, keyword) DIM-TEXT ( GDL object message on VERTICAL-DIMENSION, keyword) DIM-TEXT-BIAS ( GDL object message on ANGULAR-DIMENSION, keyword) DIM-TEXT-BIAS ( GDL object message on HORIZONTAL-DIMENSION, keyword)",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 41,
      "chunk_count": 216
    },
    "id": "ef2a8b94fbe1130c062bd48d633d01d4"
  },
  {
    "text": "GDL object message on VERTICAL-DIMENSION, keyword) DIM-TEXT-BIAS ( GDL object message on ANGULAR-DIMENSION, keyword) DIM-TEXT-BIAS ( GDL object message on HORIZONTAL-DIMENSION, keyword) DIM-TEXT-BIAS ( GDL object message on LINEAR-DIMENSION, keyword) DIM-TEXT-BIAS ( GDL object message on PARALLEL-DIMENSION, keyword) DIM-TEXT-BIAS ( GDL object message on VERTICAL-DIMENSION, keyword) DIM-TEXT-START ( GDL object message on ANGULAR-DIMENSION, keyword) DIM-TEXT-START ( GDL object message on HORIZONTAL-DIMENSION, keyword) DIM-TEXT-START ( GDL object message on LINEAR-DIMENSION, keyword) DIM-TEXT-START ( GDL object message on PARALLEL-DIMENSION, keyword) DIM-TEXT-START ( GDL object message on VERTICAL-DIMENSION, keyword) DIM-TEXT-START-OFFSET ( GDL object message on ANGULAR-DIMENSION, keyword) DIM-TEXT-START-OFFSET ( GDL object message on HORIZONTAL-DIMENSION, keyword) DIM-TEXT-START-OFFSET ( GDL object message on LINEAR-DIMENSION, keyword) DIM-TEXT-START-OFFSET ( GDL object message on",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 42,
      "chunk_count": 216
    },
    "id": "85db36cddd61c259f8294580f7b1adec"
  },
  {
    "text": "IM-TEXT-START-OFFSET ( GDL object message on HORIZONTAL-DIMENSION, keyword) DIM-TEXT-START-OFFSET ( GDL object message on LINEAR-DIMENSION, keyword) DIM-TEXT-START-OFFSET ( GDL object message on PARALLEL-DIMENSION, keyword) DIM-TEXT-START-OFFSET ( GDL object message on VERTICAL-DIMENSION, keyword) DIM-VALUE ( GDL object message on ANGULAR-DIMENSION, keyword) DIM-VALUE ( GDL object message on HORIZONTAL-DIMENSION, keyword) DIM-VALUE ( GDL object message on LINEAR-DIMENSION, keyword) DIM-VALUE ( GDL object message on PARALLEL-DIMENSION, keyword) DIM-VALUE ( GDL object message on VERTICAL-DIMENSION, keyword) DIRECT-MIXINS ( GDL object message on VANILLA-MIXIN*, keyword) DIRECTION-VECTOR ( GDL object message on CYLINDER, keyword) DIRECTION-VECTOR ( GDL object message on LINE, keyword) DISABLED-KEYS ( GDL object message on GWL:MENU-FORM-CONTROL, keyword) DISABLED-KEYS ( GDL object message on GWL:RADIO-FORM-CONTROL, keyword) DISABLED? ( GDL object message on GWL:BASE-FORM-CONTROL, keyword)",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 43,
      "chunk_count": 216
    },
    "id": "e30c44ef8b1124edf92bd78fcaf63f22"
  },
  {
    "text": "-KEYS ( GDL object message on GWL:MENU-FORM-CONTROL, keyword) DISABLED-KEYS ( GDL object message on GWL:RADIO-FORM-CONTROL, keyword) DISABLED? ( GDL object message on GWL:BASE-FORM-CONTROL, keyword) DISABLED? ( GDL object message on GWL:CHECKBOX-FORM-CONTROL, keyword) DISABLED? ( GDL object message on GWL:MENU-FORM-CONTROL, keyword) DISABLED? ( GDL object message on GWL:RADIO-FORM-CONTROL, keyword) DISABLED? ( GDL object message on GWL:TEXT-FORM-CONTROL, keyword) DISPLAY-CONTROLS ( GDL object message on ANGULAR-DIMENSION, keyword) DISPLAY-CONTROLS ( GDL object message on ARC, keyword) DISPLAY-CONTROLS ( GDL object message on BASE-COORDINATE-SYSTEM, keyword) DISPLAY-CONTROLS ( GDL object message on BASE-DRAWING, keyword) DISPLAY-CONTROLS ( GDL object message on BASE-OBJECT, keyword) DISPLAY-CONTROLS ( GDL object message on BASE-VIEW, keyword) DISPLAY-CONTROLS ( GDL object message on BEZIER-CURVE, keyword) DISPLAY-CONTROLS ( GDL object message on BOX, keyword) DISPLAY-CONTROLS ( GDL",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 44,
      "chunk_count": 216
    },
    "id": "ddb3a32f2bd20c8e52992874cd1bdf9e"
  },
  {
    "text": "-CONTROLS ( GDL object message on BASE-VIEW, keyword) DISPLAY-CONTROLS ( GDL object message on BEZIER-CURVE, keyword) DISPLAY-CONTROLS ( GDL object message on BOX, keyword) DISPLAY-CONTROLS ( GDL object message on C-CYLINDER, keyword) DISPLAY-CONTROLS ( GDL object message on CENTER-LINE, keyword) DISPLAY-CONTROLS ( GDL object message on CIRCLE, keyword) DISPLAY-CONTROLS ( GDL object message on CONE, keyword) DISPLAY-CONTROLS ( GDL object message on CONSTRAINED-ARC, keyword) DISPLAY-CONTROLS ( GDL object message on CONSTRAINED-FILLET, keyword) DISPLAY-CONTROLS ( GDL object message on CONSTRAINED-LINE, keyword) DISPLAY-CONTROLS ( GDL object message on CYLINDER, keyword) DISPLAY-CONTROLS ( GDL object message on ELLIPSE, keyword) DISPLAY-CONTROLS ( GDL object message on GENERAL-NOTE, keyword) DISPLAY-CONTROLS ( GDL object message on GLOBAL-FILLETED-POLYGON-PROJECTION, keyword) DISPLAY-CONTROLS ( GDL object message on GLOBAL-FILLETED-POLYLINE, keyword) DISPLAY-CONTROLS ( GDL object message",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 45,
      "chunk_count": 216
    },
    "id": "000a955318d8ef836fef883708fba59e"
  },
  {
    "text": "DISPLAY-CONTROLS ( GDL object message on GLOBAL-FILLETED-POLYGON-PROJECTION, keyword) DISPLAY-CONTROLS ( GDL object message on GLOBAL-FILLETED-POLYLINE, keyword) DISPLAY-CONTROLS ( GDL object message on GEOM-BASE::GLOBAL-FILLETED-POLYLINE-MIXIN, keyword) DISPLAY-CONTROLS ( GDL object message on GLOBAL-POLYGON-PROJECTION, keyword) DISPLAY-CONTROLS ( GDL object message on GLOBAL-POLYLINE, keyword) DISPLAY-CONTROLS ( GDL object message on GEOM-BASE::GLOBAL-POLYLINE-MIXIN, keyword) DISPLAY-CONTROLS ( GDL object message on HORIZONTAL-DIMENSION, keyword) DISPLAY-CONTROLS ( GDL object message on LABEL, keyword) DISPLAY-CONTROLS ( GDL object message on LEADER-LINE, keyword) DISPLAY-CONTROLS ( GDL object message on LINE, keyword) DISPLAY-CONTROLS ( GDL object message on LINEAR-DIMENSION, keyword) DISPLAY-CONTROLS ( GDL object message on PARALLEL-DIMENSION, keyword) DISPLAY-CONTROLS ( GDL object message on PIE-CHART, keyword) DISPLAY-CONTROLS ( GDL object message on POINT, keyword)",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 46,
      "chunk_count": 216
    },
    "id": "2d79f6917f8f7c49bab13ca6d3dbf18e"
  },
  {
    "text": "ISPLAY-CONTROLS ( GDL object message on PARALLEL-DIMENSION, keyword) DISPLAY-CONTROLS ( GDL object message on PIE-CHART, keyword) DISPLAY-CONTROLS ( GDL object message on POINT, keyword) DISPLAY-CONTROLS ( GDL object message on POINTS-DISPLAY, keyword) DISPLAY-CONTROLS ( GDL object message on ROUTE-PIPE, keyword) DISPLAY-CONTROLS ( GDL object message on SAMPLE-DRAWING, keyword) DISPLAY-CONTROLS ( GDL object message on SPHERE, keyword) DISPLAY-CONTROLS ( GDL object message on SPHERICAL-CAP, keyword) DISPLAY-CONTROLS ( GDL object message on TEXT-LINE, keyword) DISPLAY-CONTROLS ( GDL object message on TORUS, keyword) DISPLAY-CONTROLS ( GDL object message on TYPESET-BLOCK, keyword) DISPLAY-CONTROLS ( GDL object message on VERTICAL-DIMENSION, keyword) DISPLAY-CONTROLS ( GDL object message on GWL:APPLICATION-MIXIN, keyword) DISPLAY-CONTROLS ( GDL object message on GWL:BASE-AJAX-GRAPHICS-SHEET, keyword) DISPLAY-CONTROLS ( GDL object message on GWL:BASE-HTML-GRAPHICS-SHEET, keyword)",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 47,
      "chunk_count": 216
    },
    "id": "426d0e05f9b8545216068c2f490e2ed8"
  },
  {
    "text": "L:APPLICATION-MIXIN, keyword) DISPLAY-CONTROLS ( GDL object message on GWL:BASE-AJAX-GRAPHICS-SHEET, keyword) DISPLAY-CONTROLS ( GDL object message on GWL:BASE-HTML-GRAPHICS-SHEET, keyword) DISPLAY-CONTROLS ( GDL object message on GWL:GWL-RULE-OBJECT, keyword) DISPLAY-CONTROLS ( GDL object message on GWL::LAYOUT-MIXIN, keyword) DISPLAY-CONTROLS ( GDL object message on GWL:NODE-MIXIN, keyword) DISPLAY-CONTROLS ( GDL object message on GWL:WEB-DRAWING, keyword) DISPLAY-LIST-OBJECT-ROOTS ( GDL object message on GWL:BASE-AJAX-GRAPHICS-SHEET, keyword) DISPLAY-LIST-OBJECTS ( GDL object message on GWL:BASE-AJAX-GRAPHICS-SHEET, keyword) DISPLAY-RULES? ( GDL object message on GWL:APPLICATION-MIXIN, keyword) DISPLAY-RULES? ( GDL object message on GWL::LAYOUT-MIXIN, keyword) DISPLAY-RULES? ( GDL object message on GWL:NODE-MIXIN, keyword) DISPLAY-TREE? ( GDL object message on GWL:APPLICATION-MIXIN, keyword) DISPLAY-TREE? ( GDL object message on GWL::LAYOUT-MIXIN, keyword) DISPLAY-TREE? ( GDL",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 48,
      "chunk_count": 216
    },
    "id": "dee53ffeb2a9083169688afeb0736a93"
  },
  {
    "text": "t message on GWL:NODE-MIXIN, keyword) DISPLAY-TREE? ( GDL object message on GWL:APPLICATION-MIXIN, keyword) DISPLAY-TREE? ( GDL object message on GWL::LAYOUT-MIXIN, keyword) DISPLAY-TREE? ( GDL object message on GWL:NODE-MIXIN, keyword) distance-to-line ( Function, geom-base) div ( Function, gendl) DOCTYPE-STRING ( GDL object message on GWL:BASE-AJAX-GRAPHICS-SHEET, keyword) DOCTYPE-STRING ( GDL object message on GWL:BASE-AJAX-SHEET, keyword) DOCTYPE-STRING ( GDL object message on YADD:ASSEMBLY, keyword) DOCTYPE-STRING ( GDL object message on YADD::BASE-YADD-SHEET, keyword) DOCTYPE-STRING ( GDL object message on YADD::MASTER-INDEX, keyword) DOCTYPE-STRING ( GDL object message on YADD:PACKAGE-DOKUMENTATION, keyword) DOCTYPE-STRING ( GDL object message on YADD::PACKAGE-FORM, keyword) DOCUMENTATION ( GDL object message on VANILLA-MIXIN*, keyword) DOM-ID ( GDL object message on GEYSR::MENU, keyword) DOM-ID ( GDL object message on GEYSR:TREE, keyword) DOM-ID ( GDL object message on",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 49,
      "chunk_count": 216
    },
    "id": "266af3b508152c93f96030ee2b2e4d39"
  },
  {
    "text": "TATION ( GDL object message on VANILLA-MIXIN*, keyword) DOM-ID ( GDL object message on GEYSR::MENU, keyword) DOM-ID ( GDL object message on GEYSR:TREE, keyword) DOM-ID ( GDL object message on GWL:APPLICATION-MIXIN, keyword) DOM-ID ( GDL object message on GWL:BASE-AJAX-GRAPHICS-SHEET, keyword) DOM-ID ( GDL object message on GWL:BASE-AJAX-SHEET, keyword) DOM-ID ( GDL object message on GWL:BASE-FORM-CONTROL, keyword) DOM-ID ( GDL object message on GWL:BASE-HTML-GRAPHICS-SHEET, keyword) DOM-ID ( GDL object message on GWL:BASE-HTML-SHEET, keyword) DOM-ID ( GDL object message on GWL:CHECKBOX-FORM-CONTROL, keyword) DOM-ID ( GDL object message on GWL::COLOR-MAP, keyword) DOM-ID ( GDL object message on GWL:GRID-FORM-CONTROL, keyword) DOM-ID ( GDL object message on GWL:GWL-RULE-OBJECT, keyword) DOM-ID ( GDL object message on GWL::LAYOUT-MIXIN, keyword) DOM-ID ( GDL object message on GWL:MENU-FORM-CONTROL, keyword) DOM-ID ( GDL object message on GWL:NODE-MIXIN, keyword) DOM-ID ( GDL object",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 50,
      "chunk_count": 216
    },
    "id": "62612996335b60aac75cdb1d42e8cc09"
  },
  {
    "text": "ID ( GDL object message on GWL::LAYOUT-MIXIN, keyword) DOM-ID ( GDL object message on GWL:MENU-FORM-CONTROL, keyword) DOM-ID ( GDL object message on GWL:NODE-MIXIN, keyword) DOM-ID ( GDL object message on GWL:RADIO-FORM-CONTROL, keyword) DOM-ID ( GDL object message on GWL:SHEET-SECTION, keyword) DOM-ID ( GDL object message on GWL::SKELETON-FORM-CONTROL, keyword) DOM-ID ( GDL object message on GWL:SKELETON-UI-ELEMENT, keyword) DOM-ID ( GDL object message on GWL:TEXT-FORM-CONTROL, keyword) DOM-ID ( GDL object message on YADD:ASSEMBLY, keyword) DOM-ID ( GDL object message on YADD::BASE-YADD-SHEET, keyword) DOM-ID ( GDL object message on YADD::MASTER-INDEX, keyword) DOM-ID ( GDL object message on YADD:PACKAGE-DOKUMENTATION, keyword) DOM-ID ( GDL object message on YADD::PACKAGE-FORM, keyword) DOM-SECTION ( GDL object message on YADD:PACKAGE-DOKUMENTATION, keyword) DOMAIN ( GDL object message on GWL:BASE-FORM-CONTROL, keyword) DOMAIN ( GDL object message on GWL:CHECKBOX-FORM-CONTROL,",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 51,
      "chunk_count": 216
    },
    "id": "de6723884fe92cc075f3c6374e4f37a2"
  },
  {
    "text": "OM-SECTION ( GDL object message on YADD:PACKAGE-DOKUMENTATION, keyword) DOMAIN ( GDL object message on GWL:BASE-FORM-CONTROL, keyword) DOMAIN ( GDL object message on GWL:CHECKBOX-FORM-CONTROL, keyword) DOMAIN ( GDL object message on GWL:MENU-FORM-CONTROL, keyword) DOMAIN ( GDL object message on GWL:RADIO-FORM-CONTROL, keyword) DOMAIN ( GDL object message on GWL:TEXT-FORM-CONTROL, keyword) dot-vectors ( Function, geom-base) DRAW-CENTERLINE-ARC? ( GDL object message on TORUS, keyword) DROPPED-HEIGHT-WIDTH ( GDL object message on GWL:BASE-AJAX-GRAPHICS-SHEET, keyword) DROPPED-OBJECT ( GDL object message on GWL:BASE-AJAX-GRAPHICS-SHEET, keyword) DROPPED-X-Y ( GDL object message on GWL:BASE-AJAX-GRAPHICS-SHEET, keyword) DXF-FONT ( GDL object message on ANGULAR-DIMENSION, keyword) DXF-FONT ( GDL object message on GENERAL-NOTE, keyword) DXF-FONT ( GDL object message on HORIZONTAL-DIMENSION, keyword) DXF-FONT ( GDL object message on LABEL, keyword) DXF-FONT ( GDL object message on",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 52,
      "chunk_count": 216
    },
    "id": "99844f5b477b580a412cf60cc25a1cfc"
  },
  {
    "text": "object message on GENERAL-NOTE, keyword) DXF-FONT ( GDL object message on HORIZONTAL-DIMENSION, keyword) DXF-FONT ( GDL object message on LABEL, keyword) DXF-FONT ( GDL object message on LINEAR-DIMENSION, keyword) DXF-FONT ( GDL object message on PARALLEL-DIMENSION, keyword) DXF-FONT ( GDL object message on VERTICAL-DIMENSION, keyword) DXF-OFFSET ( GDL object message on ANGULAR-DIMENSION, keyword) DXF-OFFSET ( GDL object message on GENERAL-NOTE, keyword) DXF-OFFSET ( GDL object message on HORIZONTAL-DIMENSION, keyword) DXF-OFFSET ( GDL object message on LABEL, keyword) DXF-OFFSET ( GDL object message on LINEAR-DIMENSION, keyword) DXF-OFFSET ( GDL object message on PARALLEL-DIMENSION, keyword) DXF-OFFSET ( GDL object message on VERTICAL-DIMENSION, keyword) DXF-SIZE-RATIO ( GDL object message on ANGULAR-DIMENSION, keyword) DXF-SIZE-RATIO ( GDL object message on GENERAL-NOTE, keyword) DXF-SIZE-RATIO ( GDL object message on HORIZONTAL-DIMENSION, keyword) DXF-SIZE-RATIO ( GDL object",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 53,
      "chunk_count": 216
    },
    "id": "d943507b9762331bc28f8792b5f2de3d"
  },
  {
    "text": "ge on ANGULAR-DIMENSION, keyword) DXF-SIZE-RATIO ( GDL object message on GENERAL-NOTE, keyword) DXF-SIZE-RATIO ( GDL object message on HORIZONTAL-DIMENSION, keyword) DXF-SIZE-RATIO ( GDL object message on LABEL, keyword) DXF-SIZE-RATIO ( GDL object message on LINEAR-DIMENSION, keyword) DXF-SIZE-RATIO ( GDL object message on PARALLEL-DIMENSION, keyword) DXF-SIZE-RATIO ( GDL object message on VERTICAL-DIMENSION, keyword) DXF-TEXT-X-SCALE ( GDL object message on ANGULAR-DIMENSION, keyword) DXF-TEXT-X-SCALE ( GDL object message on GENERAL-NOTE, keyword) DXF-TEXT-X-SCALE ( GDL object message on HORIZONTAL-DIMENSION, keyword) DXF-TEXT-X-SCALE ( GDL object message on LABEL, keyword) DXF-TEXT-X-SCALE ( GDL object message on LINEAR-DIMENSION, keyword) DXF-TEXT-X-SCALE ( GDL object message on PARALLEL-DIMENSION, keyword) DXF-TEXT-X-SCALE ( GDL object message on VERTICAL-DIMENSION, keyword) EDGE-CENTER ( GDL object message on BASE-OBJECT, keyword) ELLIPSE ( Object, geom-base) END ( GDL object",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 54,
      "chunk_count": 216
    },
    "id": "0cc991f22226189fc21adcb5a050cbc0"
  },
  {
    "text": "EL-DIMENSION, keyword) DXF-TEXT-X-SCALE ( GDL object message on VERTICAL-DIMENSION, keyword) EDGE-CENTER ( GDL object message on BASE-OBJECT, keyword) ELLIPSE ( Object, geom-base) END ( GDL object message on ARC, keyword) END ( GDL object message on C-CYLINDER, keyword) END ( GDL object message on CONSTRAINED-LINE, keyword) END ( GDL object message on CYLINDER, keyword) END ( GDL object message on LINE, keyword) END-ANGLE ( GDL object message on ARC, keyword) END-ANGLE ( GDL object message on GEOM-BASE::ARCOID-MIXIN, keyword) END-ANGLE ( GDL object message on C-CYLINDER, keyword) END-ANGLE ( GDL object message on CIRCLE, keyword) END-ANGLE ( GDL object message on CONE, keyword) END-ANGLE ( GDL object message on CONSTRAINED-ARC, keyword) END-ANGLE ( GDL object message on CONSTRAINED-FILLET, keyword) END-ANGLE ( GDL object message on CYLINDER, keyword) END-ANGLE ( GDL object message on ELLIPSE, keyword) END-ANGLE ( GDL object message on POINT, keyword) END-ANGLE ( GDL object message on",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 55,
      "chunk_count": 216
    },
    "id": "2612ba919097b3e9dd1c0bdaa2d3637a"
  },
  {
    "text": "keyword) END-ANGLE ( GDL object message on CYLINDER, keyword) END-ANGLE ( GDL object message on ELLIPSE, keyword) END-ANGLE ( GDL object message on POINT, keyword) END-ANGLE ( GDL object message on SPHERE, keyword) END-ANGLE ( GDL object message on SPHERICAL-CAP, keyword) END-ANGLE ( GDL object message on TORUS, keyword) END-CAPS? ( GDL object message on TORUS, keyword) END-HORIZONTAL-ARC ( GDL object message on POINT, keyword) END-HORIZONTAL-ARC ( GDL object message on SPHERE, keyword) END-POINT ( GDL object message on ANGULAR-DIMENSION, keyword) END-POINT ( GDL object message on HORIZONTAL-DIMENSION, keyword) END-POINT ( GDL object message on LINEAR-DIMENSION, keyword) END-POINT ( GDL object message on PARALLEL-DIMENSION, keyword) END-POINT ( GDL object message on VERTICAL-DIMENSION, keyword) END-VERTICAL-ARC ( GDL object message on POINT, keyword) END-VERTICAL-ARC ( GDL object message on SPHERE, keyword) ensure-list ( Function, gendl) equi-space-points ( Function, geom-base)",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 56,
      "chunk_count": 216
    },
    "id": "b21f0476595359b167bef605ce0a4621"
  },
  {
    "text": "yword) END-VERTICAL-ARC ( GDL object message on POINT, keyword) END-VERTICAL-ARC ( GDL object message on SPHERE, keyword) ensure-list ( Function, gendl) equi-space-points ( Function, geom-base) EQUI-SPACED-POINTS ( GDL object message on ARC, keyword) ERROR ( GDL object message on GWL:BASE-FORM-CONTROL, keyword) EXPIRES-AT ( GDL object message on GWL:SESSION-CONTROL-MIXIN, keyword) EXTERNAL-ONLY? ( GDL object message on YADD:ASSEMBLY, keyword) EXTERNAL-ONLY? ( GDL object message on YADD:PACKAGE-DOKUMENTATION, keyword) FACE-CENTER ( GDL object message on BASE-OBJECT, keyword) FACE-NORMAL-VECTOR ( GDL object message on BASE-OBJECT, keyword) FACE-VERTICES ( GDL object message on BASE-OBJECT, keyword) FAILED-FORM-CONTROLS ( GDL object message on GWL:SKELETON-UI-ELEMENT, keyword) FAILED-VALUE ( GDL object message on GWL:BASE-FORM-CONTROL, keyword) FASL-OUTPUT-NAME ( GDL object message on CL-LITE:CODEBASE-DIRECTORY-NODE, keyword) FASL-OUTPUT-PATH ( GDL object message on",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 57,
      "chunk_count": 216
    },
    "id": "42a13bd21aee34dca1c16bb9d3e96c2b"
  },
  {
    "text": "GDL object message on GWL:BASE-FORM-CONTROL, keyword) FASL-OUTPUT-NAME ( GDL object message on CL-LITE:CODEBASE-DIRECTORY-NODE, keyword) FASL-OUTPUT-PATH ( GDL object message on CL-LITE:CODEBASE-DIRECTORY-NODE, keyword) FASL-OUTPUT-TYPE ( GDL object message on CL-LITE:CODEBASE-DIRECTORY-NODE, keyword) FIELD-NAME ( GDL object message on GWL:BASE-FORM-CONTROL, keyword) FIELD-NAME ( GDL object message on GWL:CHECKBOX-FORM-CONTROL, keyword) FIELD-NAME ( GDL object message on GWL:GRID-FORM-CONTROL, keyword) FIELD-NAME ( GDL object message on GWL:MENU-FORM-CONTROL, keyword) FIELD-NAME ( GDL object message on GWL:RADIO-FORM-CONTROL, keyword) FIELD-NAME ( GDL object message on GWL::SKELETON-FORM-CONTROL, keyword) FIELD-NAME ( GDL object message on GWL:TEXT-FORM-CONTROL, keyword) FIELD-OF-VIEW-DEFAULT ( GDL object message on GEOM-BASE::RENDERER-MIXIN, keyword) FIELD-OF-VIEW-DEFAULT ( GDL object message on GWL:BASE-AJAX-GRAPHICS-SHEET, keyword) FIELD-OF-VIEW-DEFAULT ( GDL object message on",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 58,
      "chunk_count": 216
    },
    "id": "5ccffe86fd04504f40a4cf0258886e36"
  },
  {
    "text": "ULT ( GDL object message on GEOM-BASE::RENDERER-MIXIN, keyword) FIELD-OF-VIEW-DEFAULT ( GDL object message on GWL:BASE-AJAX-GRAPHICS-SHEET, keyword) FIELD-OF-VIEW-DEFAULT ( GDL object message on GWL:WEB-DRAWING, keyword) FILLETS ( GDL object message on GEOM-BASE::GLOBAL-FILLETED-POLYLINE-MIXIN, keyword) find-dependants ( Function, gendl) find-dependencies ( Function, gendl) find-messages-used-by ( Function, gendl) find-messages-which-use ( Function, gendl) FIRST ( GDL object message on GENDL::MATRIX-SEQUENCE, keyword) FIRST ( GDL object message on QUANTIFICATION, keyword) FIRST ( GDL object message on GENDL::STANDARD-SEQUENCE, keyword) FIRST ( GDL object message on GENDL::VARIABLE-SEQUENCE, keyword) FIRST? ( GDL object message on VANILLA-MIXIN*, keyword) flatten ( Function, gendl) FLIP-LEADERS? ( GDL object message on ANGULAR-DIMENSION, keyword) FLIP-LEADERS? ( GDL object message on HORIZONTAL-DIMENSION, keyword) FLIP-LEADERS? ( GDL object message on LINEAR-DIMENSION, keyword)",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 59,
      "chunk_count": 216
    },
    "id": "67404a2f166d34e34ccbbe87b918f0c5"
  },
  {
    "text": "DERS? ( GDL object message on ANGULAR-DIMENSION, keyword) FLIP-LEADERS? ( GDL object message on HORIZONTAL-DIMENSION, keyword) FLIP-LEADERS? ( GDL object message on LINEAR-DIMENSION, keyword) FLIP-LEADERS? ( GDL object message on PARALLEL-DIMENSION, keyword) FLIP-LEADERS? ( GDL object message on VERTICAL-DIMENSION, keyword) FOLLOW-ROOT-PATH ( GDL object message on VANILLA-MIXIN*, keyword) FONT ( GDL object message on ANGULAR-DIMENSION, keyword) FONT ( GDL object message on GENERAL-NOTE, keyword) FONT ( GDL object message on HORIZONTAL-DIMENSION, keyword) FONT ( GDL object message on LABEL, keyword) FONT ( GDL object message on LINEAR-DIMENSION, keyword) FONT ( GDL object message on PARALLEL-DIMENSION, keyword) FONT ( GDL object message on VERTICAL-DIMENSION, keyword) FORCE-VALIDATION-FOR ( GDL object message on GEYSR::MENU, keyword) FORCE-VALIDATION-FOR ( GDL object message on GEYSR:TREE, keyword) FORCE-VALIDATION-FOR ( GDL object message on GWL:APPLICATION-MIXIN, keyword)",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 60,
      "chunk_count": 216
    },
    "id": "a3afe4064eec187a0c28f8ceb89a2481"
  },
  {
    "text": "GDL object message on GEYSR::MENU, keyword) FORCE-VALIDATION-FOR ( GDL object message on GEYSR:TREE, keyword) FORCE-VALIDATION-FOR ( GDL object message on GWL:APPLICATION-MIXIN, keyword) FORCE-VALIDATION-FOR ( GDL object message on GWL:BASE-AJAX-GRAPHICS-SHEET, keyword) FORCE-VALIDATION-FOR ( GDL object message on GWL:BASE-AJAX-SHEET, keyword) FORCE-VALIDATION-FOR ( GDL object message on GWL:BASE-FORM-CONTROL, keyword) FORCE-VALIDATION-FOR ( GDL object message on GWL:BASE-HTML-GRAPHICS-SHEET, keyword) FORCE-VALIDATION-FOR ( GDL object message on GWL:BASE-HTML-SHEET, keyword) FORCE-VALIDATION-FOR ( GDL object message on GWL:CHECKBOX-FORM-CONTROL, keyword) FORCE-VALIDATION-FOR ( GDL object message on GWL::COLOR-MAP, keyword) FORCE-VALIDATION-FOR ( GDL object message on GWL:GRID-FORM-CONTROL, keyword) FORCE-VALIDATION-FOR ( GDL object message on GWL:GWL-RULE-OBJECT, keyword) FORCE-VALIDATION-FOR ( GDL object message on GWL::LAYOUT-MIXIN, keyword) FORCE-VALIDATION-FOR ( GDL object",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 61,
      "chunk_count": 216
    },
    "id": "23edcff77541dc5987a5bdc73166521c"
  },
  {
    "text": ", keyword) FORCE-VALIDATION-FOR ( GDL object message on GWL:GWL-RULE-OBJECT, keyword) FORCE-VALIDATION-FOR ( GDL object message on GWL::LAYOUT-MIXIN, keyword) FORCE-VALIDATION-FOR ( GDL object message on GWL:MENU-FORM-CONTROL, keyword) FORCE-VALIDATION-FOR ( GDL object message on GWL:NODE-MIXIN, keyword) FORCE-VALIDATION-FOR ( GDL object message on GWL:RADIO-FORM-CONTROL, keyword) FORCE-VALIDATION-FOR ( GDL object message on GWL:SHEET-SECTION, keyword) FORCE-VALIDATION-FOR ( GDL object message on GWL::SKELETON-FORM-CONTROL, keyword) FORCE-VALIDATION-FOR ( GDL object message on GWL:SKELETON-UI-ELEMENT, keyword) FORCE-VALIDATION-FOR ( GDL object message on GWL:TEXT-FORM-CONTROL, keyword) FORCE-VALIDATION-FOR ( GDL object message on YADD:ASSEMBLY, keyword) FORCE-VALIDATION-FOR ( GDL object message on YADD::BASE-YADD-SHEET, keyword) FORCE-VALIDATION-FOR ( GDL object message on YADD::MASTER-INDEX, keyword) FORCE-VALIDATION-FOR ( GDL object message on YADD:PACKAGE-DOKUMENTATION, keyword)",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 62,
      "chunk_count": 216
    },
    "id": "2d191f36ecf1708befd17955a1f1656f"
  },
  {
    "text": "ssage on YADD::BASE-YADD-SHEET, keyword) FORCE-VALIDATION-FOR ( GDL object message on YADD::MASTER-INDEX, keyword) FORCE-VALIDATION-FOR ( GDL object message on YADD:PACKAGE-DOKUMENTATION, keyword) FORCE-VALIDATION-FOR ( GDL object message on YADD::PACKAGE-FORM, keyword) FOREGROUND-COLOR ( GDL object message on GWL:BASE-HTML-GRAPHICS-SHEET, keyword) FORM-CONTROL ( GDL object message on GWL::SKELETON-FORM-CONTROL, keyword) FORM-CONTROL-ATTRIBUTES ( GDL object message on GWL:GRID-FORM-CONTROL, keyword) FORM-CONTROL-INPUTS ( GDL object message on GWL:GRID-FORM-CONTROL, keyword) FORM-CONTROL-STRING ( GDL object message on GWL::SKELETON-FORM-CONTROL, keyword) FORM-CONTROL-TYPES ( GDL object message on GWL:GRID-FORM-CONTROL, keyword) FORM-CONTROLS ( GDL object message on GWL:GRID-FORM-CONTROL, keyword) FORM-CONTROLS ( GDL object message on GWL::SKELETON-FORM-CONTROL, keyword) FORM-CONTROLS ( GDL object message on GWL:SKELETON-UI-ELEMENT, keyword) format-slot ( Macro, gendl) FRONT-MARGIN (",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 63,
      "chunk_count": 216
    },
    "id": "3b019dccfa7ab879dd8f7eb73ebefd2b"
  },
  {
    "text": "yword) FORM-CONTROLS ( GDL object message on GWL::SKELETON-FORM-CONTROL, keyword) FORM-CONTROLS ( GDL object message on GWL:SKELETON-UI-ELEMENT, keyword) format-slot ( Macro, gendl) FRONT-MARGIN ( GDL object message on BASE-VIEW, keyword) fround-to-nearest ( Function, gendl) FULL-LEADER-LINE-LENGTH ( GDL object message on ANGULAR-DIMENSION, keyword) FULL-LEADER-LINE-LENGTH ( GDL object message on HORIZONTAL-DIMENSION, keyword) FULL-LEADER-LINE-LENGTH ( GDL object message on LINEAR-DIMENSION, keyword) FULL-LEADER-LINE-LENGTH ( GDL object message on PARALLEL-DIMENSION, keyword) FULL-LEADER-LINE-LENGTH ( GDL object message on VERTICAL-DIMENSION, keyword) FUNCTION-DOCS ( GDL object message on YADD:PACKAGE-DOKUMENTATION, keyword) GAP-LENGTH ( GDL object message on CENTER-LINE, keyword) GDL-AJAX-CALL ( GDL object message on GWL:SKELETON-UI-ELEMENT, keyword) GDL-APP ( Object, gendl) GDLINIT-CONTENT ( GDL object message on GDL-APP, keyword) GENERAL-NOTE ( Object, geom-base)",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 64,
      "chunk_count": 216
    },
    "id": "2ec08bec0b0990a172a1c9d73eb95a1e"
  },
  {
    "text": "-CALL ( GDL object message on GWL:SKELETON-UI-ELEMENT, keyword) GDL-APP ( Object, gendl) GDLINIT-CONTENT ( GDL object message on GDL-APP, keyword) GENERAL-NOTE ( Object, geom-base) generate-mcp-openapi-spec ( Function, gendl-mcp) generate-mcp-tool-description ( Function, gendl-mcp) GEOMETRY-VIEW-MIXIN ( Object, gwl) get-u ( Function, geom-base) get-v ( Function, geom-base) get-w ( Function, geom-base) get-x ( Function, geom-base) get-y ( Function, geom-base) get-z ( Function, geom-base) GLOBAL-FILLETED-POLYGON-PROJECTION ( Object, geom-base) GLOBAL-FILLETED-POLYLINE ( Object, geom-base) GLOBAL-FILLETED-POLYLINE-MIXIN ( Object, geom-base) GLOBAL-POLYGON-PROJECTION ( Object, geom-base) GLOBAL-POLYLINE ( Object, geom-base) GLOBAL-POLYLINE-MIXIN ( Object, geom-base) GLOBAL-TO-LOCAL ( GDL object message on BASE-OBJECT, keyword) GRAPHICS ( GDL object message on GWL:BASE-AJAX-GRAPHICS-SHEET, keyword) GRAPHICS-HEIGHT ( GDL object message on GWL:APPLICATION-MIXIN, keyword) GRAPHICS-HEIGHT (",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 65,
      "chunk_count": 216
    },
    "id": "79e7e1990f08d9f163cab27cffbcde41"
  },
  {
    "text": "t message on BASE-OBJECT, keyword) GRAPHICS ( GDL object message on GWL:BASE-AJAX-GRAPHICS-SHEET, keyword) GRAPHICS-HEIGHT ( GDL object message on GWL:APPLICATION-MIXIN, keyword) GRAPHICS-HEIGHT ( GDL object message on GWL::LAYOUT-MIXIN, keyword) GRAPHICS-HEIGHT ( GDL object message on GWL:NODE-MIXIN, keyword) GRAPHICS-WIDTH ( GDL object message on GWL:APPLICATION-MIXIN, keyword) GRAPHICS-WIDTH ( GDL object message on GWL::LAYOUT-MIXIN, keyword) GRAPHICS-WIDTH ( GDL object message on GWL:NODE-MIXIN, keyword) GRID-FORM-CONTROL ( Object, gwl) gwl-make-object ( Function, gwl) GWL-RULE-OBJECT ( Object, gwl) half ( Function, gendl) HEAD-CLASS ( GDL object message on GWL:BASE-AJAX-GRAPHICS-SHEET, keyword) HEAD-CLASS ( GDL object message on GWL:BASE-AJAX-SHEET, keyword) HEAD-CLASS ( GDL object message on YADD:ASSEMBLY, keyword) HEAD-CLASS ( GDL object message on YADD::BASE-YADD-SHEET, keyword) HEAD-CLASS ( GDL object message on YADD::MASTER-INDEX, keyword) HEAD-CLASS ( GDL object message on",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 66,
      "chunk_count": 216
    },
    "id": "797fd18891d923d1486f29568f410c11"
  },
  {
    "text": "ssage on YADD:ASSEMBLY, keyword) HEAD-CLASS ( GDL object message on YADD::BASE-YADD-SHEET, keyword) HEAD-CLASS ( GDL object message on YADD::MASTER-INDEX, keyword) HEAD-CLASS ( GDL object message on YADD:PACKAGE-DOKUMENTATION, keyword) HEAD-CLASS ( GDL object message on YADD::PACKAGE-FORM, keyword) HEADER-PLIST ( GDL object message on GWL:BASE-HTML-SHEET, keyword) HEIGHT ( GDL object message on ANGULAR-DIMENSION, keyword) HEIGHT ( GDL object message on ARC, keyword) HEIGHT ( GDL object message on BASE-COORDINATE-SYSTEM, keyword) HEIGHT ( GDL object message on BASE-DRAWING, keyword) HEIGHT ( GDL object message on BASE-OBJECT, keyword) HEIGHT ( GDL object message on BASE-VIEW, keyword) HEIGHT ( GDL object message on BEZIER-CURVE, keyword) HEIGHT ( GDL object message on BOX, keyword) HEIGHT ( GDL object message on C-CYLINDER, keyword) HEIGHT ( GDL object message on CENTER-LINE, keyword) HEIGHT ( GDL object message on CONE, keyword) HEIGHT ( GDL object message on CONSTRAINED-LINE,",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 67,
      "chunk_count": 216
    },
    "id": "9baaaf5d53757361e66484e497ff54d4"
  },
  {
    "text": "GDL object message on C-CYLINDER, keyword) HEIGHT ( GDL object message on CENTER-LINE, keyword) HEIGHT ( GDL object message on CONE, keyword) HEIGHT ( GDL object message on CONSTRAINED-LINE, keyword) HEIGHT ( GDL object message on CYLINDER, keyword) HEIGHT ( GDL object message on ELLIPSE, keyword) HEIGHT ( GDL object message on GENERAL-NOTE, keyword) HEIGHT ( GDL object message on GLOBAL-FILLETED-POLYGON-PROJECTION, keyword) HEIGHT ( GDL object message on GLOBAL-FILLETED-POLYLINE, keyword) HEIGHT ( GDL object message on GEOM-BASE::GLOBAL-FILLETED-POLYLINE-MIXIN, keyword) HEIGHT ( GDL object message on GLOBAL-POLYGON-PROJECTION, keyword) HEIGHT ( GDL object message on GLOBAL-POLYLINE, keyword) HEIGHT ( GDL object message on GEOM-BASE::GLOBAL-POLYLINE-MIXIN, keyword) HEIGHT ( GDL object message on HORIZONTAL-DIMENSION, keyword) HEIGHT ( GDL object message on LABEL, keyword) HEIGHT ( GDL object message on LEADER-LINE, keyword) HEIGHT ( GDL object message on LINE, keyword) HEIGHT ( GDL",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 68,
      "chunk_count": 216
    },
    "id": "eefeea62cf362e44c403ae5ba1ecfc81"
  },
  {
    "text": "sage on HORIZONTAL-DIMENSION, keyword) HEIGHT ( GDL object message on LABEL, keyword) HEIGHT ( GDL object message on LEADER-LINE, keyword) HEIGHT ( GDL object message on LINE, keyword) HEIGHT ( GDL object message on LINEAR-DIMENSION, keyword) HEIGHT ( GDL object message on PARALLEL-DIMENSION, keyword) HEIGHT ( GDL object message on PIE-CHART, keyword) HEIGHT ( GDL object message on POINTS-DISPLAY, keyword) HEIGHT ( GDL object message on ROUTE-PIPE, keyword) HEIGHT ( GDL object message on SAMPLE-DRAWING, keyword) HEIGHT ( GDL object message on SPHERE, keyword) HEIGHT ( GDL object message on SPHERICAL-CAP, keyword) HEIGHT ( GDL object message on TEXT-LINE, keyword) HEIGHT ( GDL object message on TORUS, keyword) HEIGHT ( GDL object message on TYPESET-BLOCK, keyword) HEIGHT ( GDL object message on VERTICAL-DIMENSION, keyword) HEIGHT ( GDL object message on GWL:APPLICATION-MIXIN, keyword) HEIGHT ( GDL object message on GWL:BASE-AJAX-GRAPHICS-SHEET, keyword) HEIGHT ( GDL object message on",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 69,
      "chunk_count": 216
    },
    "id": "b30e4088707cf12b8e7acab0be0c767f"
  },
  {
    "text": "e on VERTICAL-DIMENSION, keyword) HEIGHT ( GDL object message on GWL:APPLICATION-MIXIN, keyword) HEIGHT ( GDL object message on GWL:BASE-AJAX-GRAPHICS-SHEET, keyword) HEIGHT ( GDL object message on GWL:BASE-HTML-GRAPHICS-SHEET, keyword) HEIGHT ( GDL object message on GWL:GWL-RULE-OBJECT, keyword) HEIGHT ( GDL object message on GWL::LAYOUT-MIXIN, keyword) HEIGHT ( GDL object message on GWL:NODE-MIXIN, keyword) HEIGHT ( GDL object message on GWL:WEB-DRAWING, keyword) HIDDEN-CHILDREN ( GDL object message on VANILLA-MIXIN*, keyword) HIDDEN? ( GDL object message on CL-LITE:CODEBASE-DIRECTORY-NODE, keyword) HIDDEN? ( GDL object message on BASE-RULE-OBJECT, keyword) HIDDEN? ( GDL object message on GDL-APP, keyword) HIDDEN? ( GDL object message on GENDL::MATRIX-SEQUENCE, keyword) HIDDEN? ( GDL object message on NULL-OBJECT, keyword) HIDDEN? ( GDL object message on QUANTIFICATION, keyword) HIDDEN? ( GDL object message on GENDL::RADIAL-SEQUENCE, keyword) HIDDEN? ( GDL object message on",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 70,
      "chunk_count": 216
    },
    "id": "29ea3df4d9b77eabf79661b6308f07ef"
  },
  {
    "text": "ect message on NULL-OBJECT, keyword) HIDDEN? ( GDL object message on QUANTIFICATION, keyword) HIDDEN? ( GDL object message on GENDL::RADIAL-SEQUENCE, keyword) HIDDEN? ( GDL object message on GENDL::STANDARD-SEQUENCE, keyword) HIDDEN? ( GDL object message on VANILLA-MIXIN*, keyword) HIDDEN? ( GDL object message on GENDL::VARIABLE-SEQUENCE, keyword) HIDDEN? ( GDL object message on ANGULAR-DIMENSION, keyword) HIDDEN? ( GDL object message on ARC, keyword) HIDDEN? ( GDL object message on GEOM-BASE::ARCOID-MIXIN, keyword) HIDDEN? ( GDL object message on BASE-COORDINATE-SYSTEM, keyword) HIDDEN? ( GDL object message on BASE-DRAWING, keyword) HIDDEN? ( GDL object message on BASE-OBJECT, keyword) HIDDEN? ( GDL object message on BASE-VIEW, keyword) HIDDEN? ( GDL object message on BEZIER-CURVE, keyword) HIDDEN? ( GDL object message on BOX, keyword) HIDDEN? ( GDL object message on C-CYLINDER, keyword) HIDDEN? ( GDL object message on CENTER-LINE, keyword) HIDDEN? ( GDL object message on CIRCLE,",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 71,
      "chunk_count": 216
    },
    "id": "db4787ca8912f290cb780b1b35b5c3ad"
  },
  {
    "text": "d) HIDDEN? ( GDL object message on BOX, keyword) HIDDEN? ( GDL object message on C-CYLINDER, keyword) HIDDEN? ( GDL object message on CENTER-LINE, keyword) HIDDEN? ( GDL object message on CIRCLE, keyword) HIDDEN? ( GDL object message on CONE, keyword) HIDDEN? ( GDL object message on CONSTRAINED-ARC, keyword) HIDDEN? ( GDL object message on CONSTRAINED-FILLET, keyword) HIDDEN? ( GDL object message on CONSTRAINED-LINE, keyword) HIDDEN? ( GDL object message on CYLINDER, keyword) HIDDEN? ( GDL object message on ELLIPSE, keyword) HIDDEN? ( GDL object message on GENERAL-NOTE, keyword) HIDDEN? ( GDL object message on GLOBAL-FILLETED-POLYGON-PROJECTION, keyword) HIDDEN? ( GDL object message on GLOBAL-FILLETED-POLYLINE, keyword) HIDDEN? ( GDL object message on GEOM-BASE::GLOBAL-FILLETED-POLYLINE-MIXIN, keyword) HIDDEN? ( GDL object message on GLOBAL-POLYGON-PROJECTION, keyword) HIDDEN? ( GDL object message on GLOBAL-POLYLINE, keyword) HIDDEN? ( GDL object message on",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 72,
      "chunk_count": 216
    },
    "id": "1e95269b09ef7e0ef7bdfa6b32b6dec1"
  },
  {
    "text": "XIN, keyword) HIDDEN? ( GDL object message on GLOBAL-POLYGON-PROJECTION, keyword) HIDDEN? ( GDL object message on GLOBAL-POLYLINE, keyword) HIDDEN? ( GDL object message on GEOM-BASE::GLOBAL-POLYLINE-MIXIN, keyword) HIDDEN? ( GDL object message on HORIZONTAL-DIMENSION, keyword) HIDDEN? ( GDL object message on LABEL, keyword) HIDDEN? ( GDL object message on LEADER-LINE, keyword) HIDDEN? ( GDL object message on LINE, keyword) HIDDEN? ( GDL object message on LINEAR-DIMENSION, keyword) HIDDEN? ( GDL object message on PARALLEL-DIMENSION, keyword) HIDDEN? ( GDL object message on PIE-CHART, keyword) HIDDEN? ( GDL object message on POINT, keyword) HIDDEN? ( GDL object message on POINTS-DISPLAY, keyword) HIDDEN? ( GDL object message on GEOM-BASE::RENDERER-MIXIN, keyword) HIDDEN? ( GDL object message on ROUTE-PIPE, keyword) HIDDEN? ( GDL object message on SAMPLE-DRAWING, keyword) HIDDEN? ( GDL object message on SPHERE, keyword) HIDDEN? ( GDL object message on SPHERICAL-CAP, keyword) HIDDEN? (",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 73,
      "chunk_count": 216
    },
    "id": "f50090eb2f078b20601b8c118fb11f02"
  },
  {
    "text": "on ROUTE-PIPE, keyword) HIDDEN? ( GDL object message on SAMPLE-DRAWING, keyword) HIDDEN? ( GDL object message on SPHERE, keyword) HIDDEN? ( GDL object message on SPHERICAL-CAP, keyword) HIDDEN? ( GDL object message on TEXT-LINE, keyword) HIDDEN? ( GDL object message on TORUS, keyword) HIDDEN? ( GDL object message on TYPESET-BLOCK, keyword) HIDDEN? ( GDL object message on VERTICAL-DIMENSION, keyword) HIDDEN? ( GDL object message on GEYSR::MENU, keyword) HIDDEN? ( GDL object message on GEYSR:TREE, keyword) HIDDEN? ( GDL object message on GWL:APPLICATION-MIXIN, keyword) HIDDEN? ( GDL object message on GWL:BASE-AJAX-GRAPHICS-SHEET, keyword) HIDDEN? ( GDL object message on GWL:BASE-AJAX-SHEET, keyword) HIDDEN? ( GDL object message on GWL:BASE-FORM-CONTROL, keyword) HIDDEN? ( GDL object message on GWL:BASE-HTML-GRAPHICS-SHEET, keyword) HIDDEN? ( GDL object message on GWL:BASE-HTML-SHEET, keyword) HIDDEN? ( GDL object message on GWL:CHECKBOX-FORM-CONTROL, keyword) HIDDEN? ( GDL object",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 74,
      "chunk_count": 216
    },
    "id": "1259b1abc4993d40863dbfcda1f40952"
  },
  {
    "text": "on GWL:BASE-HTML-GRAPHICS-SHEET, keyword) HIDDEN? ( GDL object message on GWL:BASE-HTML-SHEET, keyword) HIDDEN? ( GDL object message on GWL:CHECKBOX-FORM-CONTROL, keyword) HIDDEN? ( GDL object message on GWL::COLOR-MAP, keyword) HIDDEN? ( GDL object message on GWL::GEOMETRY-VIEW-MIXIN, keyword) HIDDEN? ( GDL object message on GWL:GRID-FORM-CONTROL, keyword) HIDDEN? ( GDL object message on GWL:GWL-RULE-OBJECT, keyword) HIDDEN? ( GDL object message on GWL::LAYOUT-MIXIN, keyword) HIDDEN? ( GDL object message on GWL:MENU-FORM-CONTROL, keyword) HIDDEN? ( GDL object message on GWL:NODE-MIXIN, keyword) HIDDEN? ( GDL object message on GWL:RADIO-FORM-CONTROL, keyword) HIDDEN? ( GDL object message on GWL:SESSION-CONTROL-MIXIN, keyword) HIDDEN? ( GDL object message on GWL:SHEET-SECTION, keyword) HIDDEN? ( GDL object message on GWL::SKELETON-FORM-CONTROL, keyword) HIDDEN? ( GDL object message on GWL:SKELETON-UI-ELEMENT, keyword) HIDDEN? ( GDL object message on GWL:TEXT-FORM-CONTROL, keyword)",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 75,
      "chunk_count": 216
    },
    "id": "b9e019803559659fccc5c3fc19333631"
  },
  {
    "text": "DEN? ( GDL object message on GWL::SKELETON-FORM-CONTROL, keyword) HIDDEN? ( GDL object message on GWL:SKELETON-UI-ELEMENT, keyword) HIDDEN? ( GDL object message on GWL:TEXT-FORM-CONTROL, keyword) HIDDEN? ( GDL object message on GWL:WEB-DRAWING, keyword) HIDDEN? ( GDL object message on YADD:ASSEMBLY, keyword) HIDDEN? ( GDL object message on YADD::BASE-YADD-SHEET, keyword) HIDDEN? ( GDL object message on YADD::MASTER-INDEX, keyword) HIDDEN? ( GDL object message on YADD:PACKAGE-DOKUMENTATION, keyword) HIDDEN? ( GDL object message on YADD::PACKAGE-FORM, keyword) HOLLOW? ( GDL object message on CYLINDER, keyword) HORIZONTAL-DIMENSION ( Object, geom-base) HTML-CLASS ( GDL object message on GWL:BASE-AJAX-GRAPHICS-SHEET, keyword) HTML-CLASS ( GDL object message on GWL:BASE-AJAX-SHEET, keyword) HTML-CLASS ( GDL object message on YADD:ASSEMBLY, keyword) HTML-CLASS ( GDL object message on YADD::BASE-YADD-SHEET, keyword) HTML-CLASS ( GDL object message on YADD::MASTER-INDEX, keyword) HTML-CLASS (",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 76,
      "chunk_count": 216
    },
    "id": "30f32a7aaca4d1797da2332471d6a4c1"
  },
  {
    "text": "L-CLASS ( GDL object message on YADD:ASSEMBLY, keyword) HTML-CLASS ( GDL object message on YADD::BASE-YADD-SHEET, keyword) HTML-CLASS ( GDL object message on YADD::MASTER-INDEX, keyword) HTML-CLASS ( GDL object message on YADD:PACKAGE-DOKUMENTATION, keyword) HTML-CLASS ( GDL object message on YADD::PACKAGE-FORM, keyword) HTML-SECTIONS ( GDL object message on GEYSR::MENU, keyword) HTML-SECTIONS ( GDL object message on GEYSR:TREE, keyword) HTML-SECTIONS ( GDL object message on GWL:APPLICATION-MIXIN, keyword) HTML-SECTIONS ( GDL object message on GWL:BASE-AJAX-GRAPHICS-SHEET, keyword) HTML-SECTIONS ( GDL object message on GWL:BASE-AJAX-SHEET, keyword) HTML-SECTIONS ( GDL object message on GWL:BASE-FORM-CONTROL, keyword) HTML-SECTIONS ( GDL object message on GWL:BASE-HTML-GRAPHICS-SHEET, keyword) HTML-SECTIONS ( GDL object message on GWL:BASE-HTML-SHEET, keyword) HTML-SECTIONS ( GDL object message on GWL:CHECKBOX-FORM-CONTROL, keyword) HTML-SECTIONS ( GDL object message on GWL::COLOR-MAP,",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 77,
      "chunk_count": 216
    },
    "id": "4c64b7cd6a10d5b9b59404f8e8974b4d"
  },
  {
    "text": "rd) HTML-SECTIONS ( GDL object message on GWL:BASE-HTML-SHEET, keyword) HTML-SECTIONS ( GDL object message on GWL:CHECKBOX-FORM-CONTROL, keyword) HTML-SECTIONS ( GDL object message on GWL::COLOR-MAP, keyword) HTML-SECTIONS ( GDL object message on GWL:GRID-FORM-CONTROL, keyword) HTML-SECTIONS ( GDL object message on GWL:GWL-RULE-OBJECT, keyword) HTML-SECTIONS ( GDL object message on GWL::LAYOUT-MIXIN, keyword) HTML-SECTIONS ( GDL object message on GWL:MENU-FORM-CONTROL, keyword) HTML-SECTIONS ( GDL object message on GWL:NODE-MIXIN, keyword) HTML-SECTIONS ( GDL object message on GWL:RADIO-FORM-CONTROL, keyword) HTML-SECTIONS ( GDL object message on GWL:SHEET-SECTION, keyword) HTML-SECTIONS ( GDL object message on GWL::SKELETON-FORM-CONTROL, keyword) HTML-SECTIONS ( GDL object message on GWL:SKELETON-UI-ELEMENT, keyword) HTML-SECTIONS ( GDL object message on GWL:TEXT-FORM-CONTROL, keyword) HTML-SECTIONS ( GDL object message on YADD:ASSEMBLY, keyword) HTML-SECTIONS ( GDL object message on",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 78,
      "chunk_count": 216
    },
    "id": "be851cec6d08a05d5083918b98312c60"
  },
  {
    "text": "SKELETON-UI-ELEMENT, keyword) HTML-SECTIONS ( GDL object message on GWL:TEXT-FORM-CONTROL, keyword) HTML-SECTIONS ( GDL object message on YADD:ASSEMBLY, keyword) HTML-SECTIONS ( GDL object message on YADD::BASE-YADD-SHEET, keyword) HTML-SECTIONS ( GDL object message on YADD::MASTER-INDEX, keyword) HTML-SECTIONS ( GDL object message on YADD:PACKAGE-DOKUMENTATION, keyword) HTML-SECTIONS ( GDL object message on YADD::PACKAGE-FORM, keyword) HTML-SECTIONS-VALID ( GDL object message on GEYSR::MENU, keyword) HTML-SECTIONS-VALID ( GDL object message on GEYSR:TREE, keyword) HTML-SECTIONS-VALID ( GDL object message on GWL:APPLICATION-MIXIN, keyword) HTML-SECTIONS-VALID ( GDL object message on GWL:BASE-AJAX-GRAPHICS-SHEET, keyword) HTML-SECTIONS-VALID ( GDL object message on GWL:BASE-AJAX-SHEET, keyword) HTML-SECTIONS-VALID ( GDL object message on GWL:BASE-FORM-CONTROL, keyword) HTML-SECTIONS-VALID ( GDL object message on GWL:BASE-HTML-GRAPHICS-SHEET, keyword) HTML-SECTIONS-VALID ( GDL object",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 79,
      "chunk_count": 216
    },
    "id": "036d84da51c7f6ea3430656d2a67cd15"
  },
  {
    "text": "ord) HTML-SECTIONS-VALID ( GDL object message on GWL:BASE-FORM-CONTROL, keyword) HTML-SECTIONS-VALID ( GDL object message on GWL:BASE-HTML-GRAPHICS-SHEET, keyword) HTML-SECTIONS-VALID ( GDL object message on GWL:BASE-HTML-SHEET, keyword) HTML-SECTIONS-VALID ( GDL object message on GWL:CHECKBOX-FORM-CONTROL, keyword) HTML-SECTIONS-VALID ( GDL object message on GWL::COLOR-MAP, keyword) HTML-SECTIONS-VALID ( GDL object message on GWL:GRID-FORM-CONTROL, keyword) HTML-SECTIONS-VALID ( GDL object message on GWL:GWL-RULE-OBJECT, keyword) HTML-SECTIONS-VALID ( GDL object message on GWL::LAYOUT-MIXIN, keyword) HTML-SECTIONS-VALID ( GDL object message on GWL:MENU-FORM-CONTROL, keyword) HTML-SECTIONS-VALID ( GDL object message on GWL:NODE-MIXIN, keyword) HTML-SECTIONS-VALID ( GDL object message on GWL:RADIO-FORM-CONTROL, keyword) HTML-SECTIONS-VALID ( GDL object message on GWL:SHEET-SECTION, keyword) HTML-SECTIONS-VALID ( GDL object message on GWL::SKELETON-FORM-CONTROL, keyword)",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 80,
      "chunk_count": 216
    },
    "id": "649658fb43d5e3edf7bac9edcce8c790"
  },
  {
    "text": "L:RADIO-FORM-CONTROL, keyword) HTML-SECTIONS-VALID ( GDL object message on GWL:SHEET-SECTION, keyword) HTML-SECTIONS-VALID ( GDL object message on GWL::SKELETON-FORM-CONTROL, keyword) HTML-SECTIONS-VALID ( GDL object message on GWL:SKELETON-UI-ELEMENT, keyword) HTML-SECTIONS-VALID ( GDL object message on GWL:TEXT-FORM-CONTROL, keyword) HTML-SECTIONS-VALID ( GDL object message on YADD:ASSEMBLY, keyword) HTML-SECTIONS-VALID ( GDL object message on YADD::BASE-YADD-SHEET, keyword) HTML-SECTIONS-VALID ( GDL object message on YADD::MASTER-INDEX, keyword) HTML-SECTIONS-VALID ( GDL object message on YADD:PACKAGE-DOKUMENTATION, keyword) HTML-SECTIONS-VALID ( GDL object message on YADD::PACKAGE-FORM, keyword) HTML-STRING ( GDL object message on GWL::SKELETON-FORM-CONTROL, keyword) ID ( GDL object message on GWL:BASE-FORM-CONTROL, keyword) ID ( GDL object message on GWL:CHECKBOX-FORM-CONTROL, keyword) ID ( GDL object message on GWL:GRID-FORM-CONTROL, keyword) ID ( GDL object message on",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 81,
      "chunk_count": 216
    },
    "id": "a94ee3433154995f22db72f8bd8ebf38"
  },
  {
    "text": "ssage on GWL:BASE-FORM-CONTROL, keyword) ID ( GDL object message on GWL:CHECKBOX-FORM-CONTROL, keyword) ID ( GDL object message on GWL:GRID-FORM-CONTROL, keyword) ID ( GDL object message on GWL:MENU-FORM-CONTROL, keyword) ID ( GDL object message on GWL:RADIO-FORM-CONTROL, keyword) ID ( GDL object message on GWL::SKELETON-FORM-CONTROL, keyword) ID ( GDL object message on GWL:TEXT-FORM-CONTROL, keyword) ignore-errors-with-backtrace ( Macro, gendl) IMAGE-FILE ( GDL object message on ANGULAR-DIMENSION, keyword) IMAGE-FILE ( GDL object message on ARC, keyword) IMAGE-FILE ( GDL object message on BASE-COORDINATE-SYSTEM, keyword) IMAGE-FILE ( GDL object message on BASE-DRAWING, keyword) IMAGE-FILE ( GDL object message on BASE-OBJECT, keyword) IMAGE-FILE ( GDL object message on BASE-VIEW, keyword) IMAGE-FILE ( GDL object message on BEZIER-CURVE, keyword) IMAGE-FILE ( GDL object message on BOX, keyword) IMAGE-FILE ( GDL object message on C-CYLINDER, keyword) IMAGE-FILE ( GDL object message on",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 82,
      "chunk_count": 216
    },
    "id": "a0259ff31bf6be12a8c52e0e2b537e4f"
  },
  {
    "text": "IMAGE-FILE ( GDL object message on BEZIER-CURVE, keyword) IMAGE-FILE ( GDL object message on BOX, keyword) IMAGE-FILE ( GDL object message on C-CYLINDER, keyword) IMAGE-FILE ( GDL object message on CENTER-LINE, keyword) IMAGE-FILE ( GDL object message on CIRCLE, keyword) IMAGE-FILE ( GDL object message on CONE, keyword) IMAGE-FILE ( GDL object message on CONSTRAINED-ARC, keyword) IMAGE-FILE ( GDL object message on CONSTRAINED-FILLET, keyword) IMAGE-FILE ( GDL object message on CONSTRAINED-LINE, keyword) IMAGE-FILE ( GDL object message on CYLINDER, keyword) IMAGE-FILE ( GDL object message on ELLIPSE, keyword) IMAGE-FILE ( GDL object message on GENERAL-NOTE, keyword) IMAGE-FILE ( GDL object message on GLOBAL-FILLETED-POLYGON-PROJECTION, keyword) IMAGE-FILE ( GDL object message on GLOBAL-FILLETED-POLYLINE, keyword) IMAGE-FILE ( GDL object message on GEOM-BASE::GLOBAL-FILLETED-POLYLINE-MIXIN, keyword) IMAGE-FILE ( GDL object message on GLOBAL-POLYGON-PROJECTION, keyword) IMAGE-FILE ( GDL",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 83,
      "chunk_count": 216
    },
    "id": "b5719701b0d8b75903c1227117947896"
  },
  {
    "text": "ETED-POLYLINE, keyword) IMAGE-FILE ( GDL object message on GEOM-BASE::GLOBAL-FILLETED-POLYLINE-MIXIN, keyword) IMAGE-FILE ( GDL object message on GLOBAL-POLYGON-PROJECTION, keyword) IMAGE-FILE ( GDL object message on GLOBAL-POLYLINE, keyword) IMAGE-FILE ( GDL object message on GEOM-BASE::GLOBAL-POLYLINE-MIXIN, keyword) IMAGE-FILE ( GDL object message on HORIZONTAL-DIMENSION, keyword) IMAGE-FILE ( GDL object message on LABEL, keyword) IMAGE-FILE ( GDL object message on LEADER-LINE, keyword) IMAGE-FILE ( GDL object message on LINE, keyword) IMAGE-FILE ( GDL object message on LINEAR-DIMENSION, keyword) IMAGE-FILE ( GDL object message on PARALLEL-DIMENSION, keyword) IMAGE-FILE ( GDL object message on PIE-CHART, keyword) IMAGE-FILE ( GDL object message on POINT, keyword) IMAGE-FILE ( GDL object message on POINTS-DISPLAY, keyword) IMAGE-FILE ( GDL object message on ROUTE-PIPE, keyword) IMAGE-FILE ( GDL object message on SAMPLE-DRAWING, keyword) IMAGE-FILE ( GDL object message on SPHERE,",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 84,
      "chunk_count": 216
    },
    "id": "7886038cfe77a62d8e269e2016dc1082"
  },
  {
    "text": "message on POINTS-DISPLAY, keyword) IMAGE-FILE ( GDL object message on ROUTE-PIPE, keyword) IMAGE-FILE ( GDL object message on SAMPLE-DRAWING, keyword) IMAGE-FILE ( GDL object message on SPHERE, keyword) IMAGE-FILE ( GDL object message on SPHERICAL-CAP, keyword) IMAGE-FILE ( GDL object message on TEXT-LINE, keyword) IMAGE-FILE ( GDL object message on TORUS, keyword) IMAGE-FILE ( GDL object message on TYPESET-BLOCK, keyword) IMAGE-FILE ( GDL object message on VERTICAL-DIMENSION, keyword) IMAGE-FILE ( GDL object message on GWL:APPLICATION-MIXIN, keyword) IMAGE-FILE ( GDL object message on GWL:BASE-AJAX-GRAPHICS-SHEET, keyword) IMAGE-FILE ( GDL object message on GWL:BASE-HTML-GRAPHICS-SHEET, keyword) IMAGE-FILE ( GDL object message on GWL:GWL-RULE-OBJECT, keyword) IMAGE-FILE ( GDL object message on GWL::LAYOUT-MIXIN, keyword) IMAGE-FILE ( GDL object message on GWL:NODE-MIXIN, keyword) IMAGE-FILE ( GDL object message on GWL:WEB-DRAWING, keyword) IMAGE-FORMAT ( GDL object message on",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 85,
      "chunk_count": 216
    },
    "id": "6e76fefbb96e2d06b1dbc8df0be365c7"
  },
  {
    "text": "sage on GWL::LAYOUT-MIXIN, keyword) IMAGE-FILE ( GDL object message on GWL:NODE-MIXIN, keyword) IMAGE-FILE ( GDL object message on GWL:WEB-DRAWING, keyword) IMAGE-FORMAT ( GDL object message on GWL:APPLICATION-MIXIN, keyword) IMAGE-FORMAT ( GDL object message on GWL:BASE-AJAX-GRAPHICS-SHEET, keyword) IMAGE-FORMAT ( GDL object message on GWL:BASE-HTML-GRAPHICS-SHEET, keyword) IMAGE-FORMAT ( GDL object message on GWL:GWL-RULE-OBJECT, keyword) IMAGE-FORMAT ( GDL object message on GWL::LAYOUT-MIXIN, keyword) IMAGE-FORMAT ( GDL object message on GWL:NODE-MIXIN, keyword) IMAGE-FORMAT-DEFAULT ( GDL object message on GWL:BASE-AJAX-GRAPHICS-SHEET, keyword) IMAGE-FORMAT-PLIST ( GDL object message on GWL:BASE-AJAX-GRAPHICS-SHEET, keyword) IMAGE-FORMAT-SELECTOR ( GDL object message on GWL:BASE-AJAX-GRAPHICS-SHEET, keyword) IMMUNE-OBJECTS ( GDL object message on BASE-VIEW, keyword) IMMUNE-OBJECTS ( GDL object message on GWL:BASE-AJAX-GRAPHICS-SHEET, keyword) IMMUNE-OBJECTS ( GDL object message on",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 86,
      "chunk_count": 216
    },
    "id": "ed09d5b4b8e437707b42e84113061130"
  },
  {
    "text": "APHICS-SHEET, keyword) IMMUNE-OBJECTS ( GDL object message on BASE-VIEW, keyword) IMMUNE-OBJECTS ( GDL object message on GWL:BASE-AJAX-GRAPHICS-SHEET, keyword) IMMUNE-OBJECTS ( GDL object message on GWL:WEB-DRAWING, keyword) IN-FACE? ( GDL object message on BASE-OBJECT, keyword) INCLUDE-DELETE-BUTTONS? ( GDL object message on GWL:GRID-FORM-CONTROL, keyword) INCLUDE-LEGEND? ( GDL object message on PIE-CHART, keyword) INCLUDE-VIEW-CONTROLS? ( GDL object message on GWL:BASE-AJAX-GRAPHICS-SHEET, keyword) INCLUDED-CHILDREN ( GDL object message on GEYSR::MENU, keyword) INDEX ( GDL object message on QUANTIFICATION, keyword) INDEX ( GDL object message on VANILLA-MIXIN*, keyword) index-filter ( Function, gendl) initialize-standard-endpoints ( Function, gendl-mcp) INNER-BASE-RADIUS ( GDL object message on SPHERICAL-CAP, keyword) INNER-HTML ( GDL object message on GEYSR::MENU, keyword) INNER-HTML ( GDL object message on GEYSR:TREE, keyword) INNER-HTML ( GDL object message on",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 87,
      "chunk_count": 216
    },
    "id": "7daa491818e2b045be441e4b47faec8d"
  },
  {
    "text": "age on SPHERICAL-CAP, keyword) INNER-HTML ( GDL object message on GEYSR::MENU, keyword) INNER-HTML ( GDL object message on GEYSR:TREE, keyword) INNER-HTML ( GDL object message on GWL:APPLICATION-MIXIN, keyword) INNER-HTML ( GDL object message on GWL:BASE-AJAX-GRAPHICS-SHEET, keyword) INNER-HTML ( GDL object message on GWL:BASE-AJAX-SHEET, keyword) INNER-HTML ( GDL object message on GWL:BASE-FORM-CONTROL, keyword) INNER-HTML ( GDL object message on GWL:BASE-HTML-GRAPHICS-SHEET, keyword) INNER-HTML ( GDL object message on GWL:BASE-HTML-SHEET, keyword) INNER-HTML ( GDL object message on GWL:CHECKBOX-FORM-CONTROL, keyword) INNER-HTML ( GDL object message on GWL::COLOR-MAP, keyword) INNER-HTML ( GDL object message on GWL:GRID-FORM-CONTROL, keyword) INNER-HTML ( GDL object message on GWL:GWL-RULE-OBJECT, keyword) INNER-HTML ( GDL object message on GWL::LAYOUT-MIXIN, keyword) INNER-HTML ( GDL object message on GWL:MENU-FORM-CONTROL, keyword) INNER-HTML ( GDL object message on GWL:NODE-MIXIN,",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 88,
      "chunk_count": 216
    },
    "id": "bb7a1ec4fd363715393e930eb63e5446"
  },
  {
    "text": "E-OBJECT, keyword) INNER-HTML ( GDL object message on GWL::LAYOUT-MIXIN, keyword) INNER-HTML ( GDL object message on GWL:MENU-FORM-CONTROL, keyword) INNER-HTML ( GDL object message on GWL:NODE-MIXIN, keyword) INNER-HTML ( GDL object message on GWL:RADIO-FORM-CONTROL, keyword) INNER-HTML ( GDL object message on GWL:SHEET-SECTION, keyword) INNER-HTML ( GDL object message on GWL::SKELETON-FORM-CONTROL, keyword) INNER-HTML ( GDL object message on GWL:SKELETON-UI-ELEMENT, keyword) INNER-HTML ( GDL object message on GWL:TEXT-FORM-CONTROL, keyword) INNER-HTML ( GDL object message on YADD:ASSEMBLY, keyword) INNER-HTML ( GDL object message on YADD::BASE-YADD-SHEET, keyword) INNER-HTML ( GDL object message on YADD::MASTER-INDEX, keyword) INNER-HTML ( GDL object message on YADD:PACKAGE-DOKUMENTATION, keyword) INNER-HTML ( GDL object message on YADD::PACKAGE-FORM, keyword) INNER-MINOR-RADIUS ( GDL object message on TORUS, keyword) INNER-PIPE-RADIUS ( GDL object message on ROUTE-PIPE, keyword)",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 89,
      "chunk_count": 216
    },
    "id": "1238f78e0301eaa4a05ec05658cbd2c3"
  },
  {
    "text": "keyword) INNER-HTML ( GDL object message on YADD::PACKAGE-FORM, keyword) INNER-MINOR-RADIUS ( GDL object message on TORUS, keyword) INNER-PIPE-RADIUS ( GDL object message on ROUTE-PIPE, keyword) INNER-RADIUS ( GDL object message on C-CYLINDER, keyword) INNER-RADIUS ( GDL object message on CONE, keyword) INNER-RADIUS ( GDL object message on CYLINDER, keyword) INNER-RADIUS ( GDL object message on POINT, keyword) INNER-RADIUS ( GDL object message on SPHERE, keyword) INNER-RADIUS-1 ( GDL object message on CONE, keyword) INNER-RADIUS-2 ( GDL object message on CONE, keyword) INPUTS-BGCOLOR ( GDL object message on GWL:APPLICATION-MIXIN, keyword) INPUTS-BGCOLOR ( GDL object message on GWL::LAYOUT-MIXIN, keyword) INPUTS-BGCOLOR ( GDL object message on GWL:NODE-MIXIN, keyword) INPUTS-TITLE ( GDL object message on GWL:APPLICATION-MIXIN, keyword) INPUTS-TITLE ( GDL object message on GWL::LAYOUT-MIXIN, keyword) INPUTS-TITLE ( GDL object message on GWL:NODE-MIXIN, keyword) INSERT! ( GDL object",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 90,
      "chunk_count": 216
    },
    "id": "4e165e50060a2413c2742355719220c4"
  },
  {
    "text": "ject message on GWL:APPLICATION-MIXIN, keyword) INPUTS-TITLE ( GDL object message on GWL::LAYOUT-MIXIN, keyword) INPUTS-TITLE ( GDL object message on GWL:NODE-MIXIN, keyword) INSERT! ( GDL object message on GENDL::VARIABLE-SEQUENCE, keyword) inter-circle-sphere ( Function, geom-base) inter-line-plane ( Function, geom-base) inter-line-sphere ( Function, geom-base) ISMAP? ( GDL object message on GWL:BASE-FORM-CONTROL, keyword) ISMAP? ( GDL object message on GWL:CHECKBOX-FORM-CONTROL, keyword) ISMAP? ( GDL object message on GWL:MENU-FORM-CONTROL, keyword) ISMAP? ( GDL object message on GWL:RADIO-FORM-CONTROL, keyword) ISMAP? ( GDL object message on GWL:TEXT-FORM-CONTROL, keyword) iso-8601-date ( Function, gendl) JS-TO-EVAL ( GDL object message on GEYSR::MENU, keyword) JS-TO-EVAL ( GDL object message on GEYSR:TREE, keyword) JS-TO-EVAL ( GDL object message on GWL:APPLICATION-MIXIN, keyword) JS-TO-EVAL ( GDL object message on GWL:BASE-AJAX-GRAPHICS-SHEET, keyword) JS-TO-EVAL ( GDL object",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 91,
      "chunk_count": 216
    },
    "id": "e6bf2803b8ad3890598e72936b1d3e09"
  },
  {
    "text": "message on GEYSR:TREE, keyword) JS-TO-EVAL ( GDL object message on GWL:APPLICATION-MIXIN, keyword) JS-TO-EVAL ( GDL object message on GWL:BASE-AJAX-GRAPHICS-SHEET, keyword) JS-TO-EVAL ( GDL object message on GWL:BASE-AJAX-SHEET, keyword) JS-TO-EVAL ( GDL object message on GWL:BASE-FORM-CONTROL, keyword) JS-TO-EVAL ( GDL object message on GWL:BASE-HTML-GRAPHICS-SHEET, keyword) JS-TO-EVAL ( GDL object message on GWL:BASE-HTML-SHEET, keyword) JS-TO-EVAL ( GDL object message on GWL:CHECKBOX-FORM-CONTROL, keyword) JS-TO-EVAL ( GDL object message on GWL::COLOR-MAP, keyword) JS-TO-EVAL ( GDL object message on GWL:GRID-FORM-CONTROL, keyword) JS-TO-EVAL ( GDL object message on GWL:GWL-RULE-OBJECT, keyword) JS-TO-EVAL ( GDL object message on GWL::LAYOUT-MIXIN, keyword) JS-TO-EVAL ( GDL object message on GWL:MENU-FORM-CONTROL, keyword) JS-TO-EVAL ( GDL object message on GWL:NODE-MIXIN, keyword) JS-TO-EVAL ( GDL object message on GWL:RADIO-FORM-CONTROL, keyword) JS-TO-EVAL ( GDL object message on",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 92,
      "chunk_count": 216
    },
    "id": "caa4b76fa875c50fdc0ec6ca5418bf83"
  },
  {
    "text": "e on GWL:MENU-FORM-CONTROL, keyword) JS-TO-EVAL ( GDL object message on GWL:NODE-MIXIN, keyword) JS-TO-EVAL ( GDL object message on GWL:RADIO-FORM-CONTROL, keyword) JS-TO-EVAL ( GDL object message on GWL:SHEET-SECTION, keyword) JS-TO-EVAL ( GDL object message on GWL::SKELETON-FORM-CONTROL, keyword) JS-TO-EVAL ( GDL object message on GWL:SKELETON-UI-ELEMENT, keyword) JS-TO-EVAL ( GDL object message on GWL:TEXT-FORM-CONTROL, keyword) JS-TO-EVAL ( GDL object message on YADD:ASSEMBLY, keyword) JS-TO-EVAL ( GDL object message on YADD::BASE-YADD-SHEET, keyword) JS-TO-EVAL ( GDL object message on YADD::MASTER-INDEX, keyword) JS-TO-EVAL ( GDL object message on YADD:PACKAGE-DOKUMENTATION, keyword) JS-TO-EVAL ( GDL object message on YADD::PACKAGE-FORM, keyword) JUSTIFICATION ( GDL object message on ANGULAR-DIMENSION, keyword) JUSTIFICATION ( GDL object message on GENERAL-NOTE, keyword) JUSTIFICATION ( GDL object message on HORIZONTAL-DIMENSION, keyword) JUSTIFICATION ( GDL object message on",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 93,
      "chunk_count": 216
    },
    "id": "eeea91d96126ff1c7d1c64cc0d70c428"
  },
  {
    "text": "ANGULAR-DIMENSION, keyword) JUSTIFICATION ( GDL object message on GENERAL-NOTE, keyword) JUSTIFICATION ( GDL object message on HORIZONTAL-DIMENSION, keyword) JUSTIFICATION ( GDL object message on LINEAR-DIMENSION, keyword) JUSTIFICATION ( GDL object message on PARALLEL-DIMENSION, keyword) JUSTIFICATION ( GDL object message on VERTICAL-DIMENSION, keyword) LABEL ( Object, geom-base) LABEL-POSITION ( GDL object message on GWL:BASE-FORM-CONTROL, keyword) LABEL-POSITION ( GDL object message on GWL:CHECKBOX-FORM-CONTROL, keyword) LABEL-POSITION ( GDL object message on GWL:MENU-FORM-CONTROL, keyword) LABEL-POSITION ( GDL object message on GWL:RADIO-FORM-CONTROL, keyword) LABEL-POSITION ( GDL object message on GWL:TEXT-FORM-CONTROL, keyword) LABELS&COLORS ( GDL object message on PIE-CHART, keyword) LANG ( GDL object message on GWL:BASE-FORM-CONTROL, keyword) LANG ( GDL object message on GWL:CHECKBOX-FORM-CONTROL, keyword) LANG ( GDL object message on GWL:MENU-FORM-CONTROL, keyword) LANG ( GDL",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 94,
      "chunk_count": 216
    },
    "id": "f5f79696e4ad4f5cfba1f439378295b2"
  },
  {
    "text": ") LANG ( GDL object message on GWL:BASE-FORM-CONTROL, keyword) LANG ( GDL object message on GWL:CHECKBOX-FORM-CONTROL, keyword) LANG ( GDL object message on GWL:MENU-FORM-CONTROL, keyword) LANG ( GDL object message on GWL:RADIO-FORM-CONTROL, keyword) LANG ( GDL object message on GWL:TEXT-FORM-CONTROL, keyword) LAST ( GDL object message on GENDL::MATRIX-SEQUENCE, keyword) LAST ( GDL object message on QUANTIFICATION, keyword) LAST ( GDL object message on GENDL::STANDARD-SEQUENCE, keyword) LAST ( GDL object message on GENDL::VARIABLE-SEQUENCE, keyword) LAST? ( GDL object message on VANILLA-MIXIN*, keyword) lastcar ( Function, gendl) LAYOUT-MIXIN ( Object, gwl) LEADER-1? ( GDL object message on ANGULAR-DIMENSION, keyword) LEADER-1? ( GDL object message on HORIZONTAL-DIMENSION, keyword) LEADER-1? ( GDL object message on LINEAR-DIMENSION, keyword) LEADER-1? ( GDL object message on PARALLEL-DIMENSION, keyword) LEADER-1? ( GDL object message on VERTICAL-DIMENSION, keyword) LEADER-2? ( GDL",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 95,
      "chunk_count": 216
    },
    "id": "c651791f2a05cbd663a2ec097ed3e3c3"
  },
  {
    "text": "1? ( GDL object message on LINEAR-DIMENSION, keyword) LEADER-1? ( GDL object message on PARALLEL-DIMENSION, keyword) LEADER-1? ( GDL object message on VERTICAL-DIMENSION, keyword) LEADER-2? ( GDL object message on ANGULAR-DIMENSION, keyword) LEADER-2? ( GDL object message on HORIZONTAL-DIMENSION, keyword) LEADER-2? ( GDL object message on LINEAR-DIMENSION, keyword) LEADER-2? ( GDL object message on PARALLEL-DIMENSION, keyword) LEADER-2? ( GDL object message on VERTICAL-DIMENSION, keyword) LEADER-DIRECTION-1-VECTOR ( GDL object message on ANGULAR-DIMENSION, keyword) LEADER-DIRECTION-1-VECTOR ( GDL object message on HORIZONTAL-DIMENSION, keyword) LEADER-DIRECTION-1-VECTOR ( GDL object message on LINEAR-DIMENSION, keyword) LEADER-DIRECTION-1-VECTOR ( GDL object message on PARALLEL-DIMENSION, keyword) LEADER-DIRECTION-1-VECTOR ( GDL object message on VERTICAL-DIMENSION, keyword) LEADER-DIRECTION-2-VECTOR ( GDL object message on ANGULAR-DIMENSION, keyword) LEADER-DIRECTION-2-VECTOR ( GDL",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 96,
      "chunk_count": 216
    },
    "id": "df4522ce4874d4a60f8ba25d41a206de"
  },
  {
    "text": "keyword) LEADER-DIRECTION-1-VECTOR ( GDL object message on VERTICAL-DIMENSION, keyword) LEADER-DIRECTION-2-VECTOR ( GDL object message on ANGULAR-DIMENSION, keyword) LEADER-DIRECTION-2-VECTOR ( GDL object message on HORIZONTAL-DIMENSION, keyword) LEADER-DIRECTION-2-VECTOR ( GDL object message on LINEAR-DIMENSION, keyword) LEADER-DIRECTION-2-VECTOR ( GDL object message on PARALLEL-DIMENSION, keyword) LEADER-DIRECTION-2-VECTOR ( GDL object message on VERTICAL-DIMENSION, keyword) LEADER-LINE ( Object, geom-base) LEADER-LINE-LENGTH ( GDL object message on ANGULAR-DIMENSION, keyword) LEADER-LINE-LENGTH ( GDL object message on HORIZONTAL-DIMENSION, keyword) LEADER-LINE-LENGTH ( GDL object message on LINEAR-DIMENSION, keyword) LEADER-LINE-LENGTH ( GDL object message on PARALLEL-DIMENSION, keyword) LEADER-LINE-LENGTH ( GDL object message on VERTICAL-DIMENSION, keyword) LEADER-LINE-LENGTH-2 ( GDL object message on ANGULAR-DIMENSION, keyword) LEADER-LINE-LENGTH-2 ( GDL object message on",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 97,
      "chunk_count": 216
    },
    "id": "18fce6f8a7ad7a6f43e71c07dcfcc3e2"
  },
  {
    "text": ") LEADER-LINE-LENGTH ( GDL object message on VERTICAL-DIMENSION, keyword) LEADER-LINE-LENGTH-2 ( GDL object message on ANGULAR-DIMENSION, keyword) LEADER-LINE-LENGTH-2 ( GDL object message on HORIZONTAL-DIMENSION, keyword) LEADER-LINE-LENGTH-2 ( GDL object message on LINEAR-DIMENSION, keyword) LEADER-LINE-LENGTH-2 ( GDL object message on PARALLEL-DIMENSION, keyword) LEADER-LINE-LENGTH-2 ( GDL object message on VERTICAL-DIMENSION, keyword) LEADER-PATH ( GDL object message on LABEL, keyword) LEADER-RADIUS ( GDL object message on ANGULAR-DIMENSION, keyword) LEADER-TEXT-GAP ( GDL object message on ANGULAR-DIMENSION, keyword) LEADER-TEXT-GAP ( GDL object message on HORIZONTAL-DIMENSION, keyword) LEADER-TEXT-GAP ( GDL object message on LINEAR-DIMENSION, keyword) LEADER-TEXT-GAP ( GDL object message on PARALLEL-DIMENSION, keyword) LEADER-TEXT-GAP ( GDL object message on VERTICAL-DIMENSION, keyword) LEADING ( GDL object message on GENERAL-NOTE, keyword) LEAF? ( GDL object message on",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 98,
      "chunk_count": 216
    },
    "id": "710d08fe103a1ff79a89cc1994efb7a8"
  },
  {
    "text": "age on PARALLEL-DIMENSION, keyword) LEADER-TEXT-GAP ( GDL object message on VERTICAL-DIMENSION, keyword) LEADING ( GDL object message on GENERAL-NOTE, keyword) LEAF? ( GDL object message on VANILLA-MIXIN*, keyword) least ( Function, gendl) LEAVES ( GDL object message on VANILLA-MIXIN*, keyword) LEFT-MARGIN ( GDL object message on BASE-VIEW, keyword) LENGTH ( GDL object message on ANGULAR-DIMENSION, keyword) LENGTH ( GDL object message on ARC, keyword) LENGTH ( GDL object message on BASE-COORDINATE-SYSTEM, keyword) LENGTH ( GDL object message on BASE-DRAWING, keyword) LENGTH ( GDL object message on BASE-OBJECT, keyword) LENGTH ( GDL object message on BASE-VIEW, keyword) LENGTH ( GDL object message on BEZIER-CURVE, keyword) LENGTH ( GDL object message on BOX, keyword) LENGTH ( GDL object message on C-CYLINDER, keyword) LENGTH ( GDL object message on CENTER-LINE, keyword) LENGTH ( GDL object message on CONE, keyword) LENGTH ( GDL object message on CYLINDER, keyword) LENGTH ( GDL object",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 99,
      "chunk_count": 216
    },
    "id": "77a17bcc873030da2f0d99cf46044aff"
  },
  {
    "text": "sage on C-CYLINDER, keyword) LENGTH ( GDL object message on CENTER-LINE, keyword) LENGTH ( GDL object message on CONE, keyword) LENGTH ( GDL object message on CYLINDER, keyword) LENGTH ( GDL object message on ELLIPSE, keyword) LENGTH ( GDL object message on GENERAL-NOTE, keyword) LENGTH ( GDL object message on GLOBAL-FILLETED-POLYGON-PROJECTION, keyword) LENGTH ( GDL object message on GLOBAL-FILLETED-POLYLINE, keyword) LENGTH ( GDL object message on GEOM-BASE::GLOBAL-FILLETED-POLYLINE-MIXIN, keyword) LENGTH ( GDL object message on GLOBAL-POLYGON-PROJECTION, keyword) LENGTH ( GDL object message on GLOBAL-POLYLINE, keyword) LENGTH ( GDL object message on GEOM-BASE::GLOBAL-POLYLINE-MIXIN, keyword) LENGTH ( GDL object message on HORIZONTAL-DIMENSION, keyword) LENGTH ( GDL object message on LABEL, keyword) LENGTH ( GDL object message on LEADER-LINE, keyword) LENGTH ( GDL object message on LINE, keyword) LENGTH ( GDL object message on LINEAR-DIMENSION, keyword) LENGTH ( GDL object message",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 100,
      "chunk_count": 216
    },
    "id": "801eac7bce8a39ba9df160261ecec57a"
  },
  {
    "text": "EL, keyword) LENGTH ( GDL object message on LEADER-LINE, keyword) LENGTH ( GDL object message on LINE, keyword) LENGTH ( GDL object message on LINEAR-DIMENSION, keyword) LENGTH ( GDL object message on PARALLEL-DIMENSION, keyword) LENGTH ( GDL object message on PIE-CHART, keyword) LENGTH ( GDL object message on POINTS-DISPLAY, keyword) LENGTH ( GDL object message on ROUTE-PIPE, keyword) LENGTH ( GDL object message on SAMPLE-DRAWING, keyword) LENGTH ( GDL object message on SPHERE, keyword) LENGTH ( GDL object message on SPHERICAL-CAP, keyword) LENGTH ( GDL object message on TEXT-LINE, keyword) LENGTH ( GDL object message on TORUS, keyword) LENGTH ( GDL object message on TYPESET-BLOCK, keyword) LENGTH ( GDL object message on VERTICAL-DIMENSION, keyword) LENGTH ( GDL object message on GWL:APPLICATION-MIXIN, keyword) LENGTH ( GDL object message on GWL:BASE-AJAX-GRAPHICS-SHEET, keyword) LENGTH ( GDL object message on GWL:BASE-HTML-GRAPHICS-SHEET, keyword) LENGTH ( GDL object message on",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 101,
      "chunk_count": 216
    },
    "id": "c9d6278e024bbd4b1b005ac50e66d36c"
  },
  {
    "text": "ICATION-MIXIN, keyword) LENGTH ( GDL object message on GWL:BASE-AJAX-GRAPHICS-SHEET, keyword) LENGTH ( GDL object message on GWL:BASE-HTML-GRAPHICS-SHEET, keyword) LENGTH ( GDL object message on GWL::GEOMETRY-VIEW-MIXIN, keyword) LENGTH ( GDL object message on GWL:GWL-RULE-OBJECT, keyword) LENGTH ( GDL object message on GWL::LAYOUT-MIXIN, keyword) LENGTH ( GDL object message on GWL:NODE-MIXIN, keyword) LENGTH ( GDL object message on GWL:WEB-DRAWING, keyword) LENGTH-DEFAULT ( GDL object message on TYPESET-BLOCK, keyword) length-vector ( Function, geom-base) LINE ( Object, geom-base) LINE-COLOR ( GDL object message on PIE-CHART, keyword) LINE-INTERSECTION-2D ( GDL object message on BEZIER-CURVE, keyword) LINE-INTERSECTION-POINTS ( GDL object message on BASE-OBJECT, keyword) LINEAR-DIMENSION ( Object, geom-base) LINES ( GDL object message on GEOM-BASE::GLOBAL-POLYLINE-MIXIN, keyword) LINES ( GDL object message on TYPESET-BLOCK, keyword) LISP-HEAP-SIZE ( GDL object message on GDL-APP,",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 102,
      "chunk_count": 216
    },
    "id": "d03babbc426695d092600fe4e0c9b15b"
  },
  {
    "text": "( Object, geom-base) LINES ( GDL object message on GEOM-BASE::GLOBAL-POLYLINE-MIXIN, keyword) LINES ( GDL object message on TYPESET-BLOCK, keyword) LISP-HEAP-SIZE ( GDL object message on GDL-APP, keyword) list-elements ( Macro, gendl) list-of-n-numbers ( Function, gendl) list-of-numbers ( Function, gendl) LOAD-ALWAYS? ( GDL object message on CL-LITE:CODEBASE-DIRECTORY-NODE, keyword) load-glime ( Function, gendl) load-quicklisp ( Function, gendl) LOCAL-BBOX ( GDL object message on BASE-OBJECT, keyword) LOCAL-BOX ( GDL object message on ARC, keyword) LOCAL-BOX ( GDL object message on BASE-COORDINATE-SYSTEM, keyword) LOCAL-BOX ( GDL object message on BASE-DRAWING, keyword) LOCAL-BOX ( GDL object message on BASE-OBJECT, keyword) LOCAL-BOX ( GDL object message on BASE-VIEW, keyword) LOCAL-BOX ( GDL object message on BEZIER-CURVE, keyword) LOCAL-BOX ( GDL object message on BOX, keyword) LOCAL-BOX ( GDL object message on C-CYLINDER, keyword) LOCAL-BOX ( GDL object message on CIRCLE, keyword)",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 103,
      "chunk_count": 216
    },
    "id": "cbd224efd94bb1d4576bccc890d74ebc"
  },
  {
    "text": "GDL object message on BEZIER-CURVE, keyword) LOCAL-BOX ( GDL object message on BOX, keyword) LOCAL-BOX ( GDL object message on C-CYLINDER, keyword) LOCAL-BOX ( GDL object message on CIRCLE, keyword) LOCAL-BOX ( GDL object message on CONE, keyword) LOCAL-BOX ( GDL object message on CONSTRAINED-ARC, keyword) LOCAL-BOX ( GDL object message on CONSTRAINED-FILLET, keyword) LOCAL-BOX ( GDL object message on CONSTRAINED-LINE, keyword) LOCAL-BOX ( GDL object message on CYLINDER, keyword) LOCAL-BOX ( GDL object message on ELLIPSE, keyword) LOCAL-BOX ( GDL object message on GLOBAL-FILLETED-POLYGON-PROJECTION, keyword) LOCAL-BOX ( GDL object message on GLOBAL-FILLETED-POLYLINE, keyword) LOCAL-BOX ( GDL object message on GEOM-BASE::GLOBAL-FILLETED-POLYLINE-MIXIN, keyword) LOCAL-BOX ( GDL object message on GLOBAL-POLYGON-PROJECTION, keyword) LOCAL-BOX ( GDL object message on GLOBAL-POLYLINE, keyword) LOCAL-BOX ( GDL object message on GEOM-BASE::GLOBAL-POLYLINE-MIXIN, keyword) LOCAL-BOX ( GDL",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 104,
      "chunk_count": 216
    },
    "id": "8a57d585ddf48b4371bbf52bb2de508d"
  },
  {
    "text": "ge on GLOBAL-POLYGON-PROJECTION, keyword) LOCAL-BOX ( GDL object message on GLOBAL-POLYLINE, keyword) LOCAL-BOX ( GDL object message on GEOM-BASE::GLOBAL-POLYLINE-MIXIN, keyword) LOCAL-BOX ( GDL object message on LEADER-LINE, keyword) LOCAL-BOX ( GDL object message on LINE, keyword) LOCAL-BOX ( GDL object message on PIE-CHART, keyword) LOCAL-BOX ( GDL object message on POINT, keyword) LOCAL-BOX ( GDL object message on SAMPLE-DRAWING, keyword) LOCAL-BOX ( GDL object message on SPHERE, keyword) LOCAL-BOX ( GDL object message on SPHERICAL-CAP, keyword) LOCAL-BOX ( GDL object message on TEXT-LINE, keyword) LOCAL-BOX ( GDL object message on TORUS, keyword) LOCAL-BOX ( GDL object message on TYPESET-BLOCK, keyword) LOCAL-BOX ( GDL object message on GWL:APPLICATION-MIXIN, keyword) LOCAL-BOX ( GDL object message on GWL:BASE-AJAX-GRAPHICS-SHEET, keyword) LOCAL-BOX ( GDL object message on GWL:BASE-HTML-GRAPHICS-SHEET, keyword) LOCAL-BOX ( GDL object message on GWL:GWL-RULE-OBJECT, keyword)",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 105,
      "chunk_count": 216
    },
    "id": "f439d575298ceaafcaff8a7b038ae38d"
  },
  {
    "text": "object message on GWL:BASE-AJAX-GRAPHICS-SHEET, keyword) LOCAL-BOX ( GDL object message on GWL:BASE-HTML-GRAPHICS-SHEET, keyword) LOCAL-BOX ( GDL object message on GWL:GWL-RULE-OBJECT, keyword) LOCAL-BOX ( GDL object message on GWL::LAYOUT-MIXIN, keyword) LOCAL-BOX ( GDL object message on GWL:NODE-MIXIN, keyword) LOCAL-BOX ( GDL object message on GWL:WEB-DRAWING, keyword) LOCAL-CENTER ( GDL object message on BASE-OBJECT, keyword) LOCAL-CENTER* ( GDL object message on BASE-OBJECT, keyword) LOCAL-ORIENTATION ( GDL object message on BASE-OBJECT, keyword) LOCAL-TO-GLOBAL ( GDL object message on BASE-OBJECT, keyword) LONG-SEGMENT-LENGTH ( GDL object message on CENTER-LINE, keyword) MAIN-DIV% ( GDL object message on GWL:SKELETON-UI-ELEMENT, keyword) MAIN-SHEET-BODY ( GDL object message on GWL:BASE-AJAX-GRAPHICS-SHEET, keyword) MAIN-SHEET-BODY ( GDL object message on GWL:BASE-AJAX-SHEET, keyword) MAIN-SHEET-BODY ( GDL object message on YADD:ASSEMBLY, keyword) MAIN-SHEET-BODY ( GDL object",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 106,
      "chunk_count": 216
    },
    "id": "5a70bdc4e1bad2af024ac96e777ef06c"
  },
  {
    "text": "SE-AJAX-GRAPHICS-SHEET, keyword) MAIN-SHEET-BODY ( GDL object message on GWL:BASE-AJAX-SHEET, keyword) MAIN-SHEET-BODY ( GDL object message on YADD:ASSEMBLY, keyword) MAIN-SHEET-BODY ( GDL object message on YADD::BASE-YADD-SHEET, keyword) MAIN-SHEET-BODY ( GDL object message on YADD::MASTER-INDEX, keyword) MAIN-SHEET-BODY ( GDL object message on YADD:PACKAGE-DOKUMENTATION, keyword) MAIN-SHEET-BODY ( GDL object message on YADD::PACKAGE-FORM, keyword) MAIN-VIEW ( GDL object message on GWL:WEB-DRAWING, keyword) MAJOR-AXIS-LENGTH ( GDL object message on ELLIPSE, keyword) MAJOR-RADIUS ( GDL object message on TORUS, keyword) MAKE! ( GDL object message on GDL-APP, keyword) make-gdl-app ( Function, gendl) make-keyword ( Function, gendl) make-object ( Function, gendl) make-point ( Macro, geom-base) make-transform ( Function, geom-base) make-vector ( Macro, geom-base) mapsend ( Function, gendl) maptree ( Function, gendl) MASTER-INDEX ( GDL object message on YADD:ASSEMBLY, keyword) MASTER-INDEX",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 107,
      "chunk_count": 216
    },
    "id": "edfe6c900b5bd9ef634edcffa0c305c4"
  },
  {
    "text": "make-transform ( Function, geom-base) make-vector ( Macro, geom-base) mapsend ( Function, gendl) maptree ( Function, gendl) MASTER-INDEX ( GDL object message on YADD:ASSEMBLY, keyword) MASTER-INDEX ( Object, yadd) matrix*vector ( Function, geom-base) MATRIX-SEQUENCE ( Object, gendl) matrix-to-quaternion ( Function, geom-base) max-of-elements ( Macro, gendl) MAXIMUM-TEXT-WIDTH ( GDL object message on GENERAL-NOTE, keyword) MAXLENGTH ( GDL object message on GWL:BASE-FORM-CONTROL, keyword) MAXLENGTH ( GDL object message on GWL:CHECKBOX-FORM-CONTROL, keyword) MAXLENGTH ( GDL object message on GWL:MENU-FORM-CONTROL, keyword) MAXLENGTH ( GDL object message on GWL:RADIO-FORM-CONTROL, keyword) MAXLENGTH ( GDL object message on GWL:TEXT-FORM-CONTROL, keyword) MENU ( Object, geysr) MENU-FORM-CONTROL ( Object, gwl) merge-display-controls ( Macro, geom-base) MESSAGE-DOCUMENTATION ( GDL object message on VANILLA-MIXIN*, keyword) MESSAGE-LIST ( GDL object message on VANILLA-MIXIN*, keyword)",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 108,
      "chunk_count": 216
    },
    "id": "91221fdeea50ae542d77a61f990a01c7"
  },
  {
    "text": "L ( Object, gwl) merge-display-controls ( Macro, geom-base) MESSAGE-DOCUMENTATION ( GDL object message on VANILLA-MIXIN*, keyword) MESSAGE-LIST ( GDL object message on VANILLA-MIXIN*, keyword) midpoint ( Function, geom-base) min-of-elements ( Macro, gendl) MINOR-AXIS-LENGTH ( GDL object message on ELLIPSE, keyword) MINOR-RADIUS ( GDL object message on TORUS, keyword) MIXINS ( GDL object message on VANILLA-MIXIN*, keyword) MODEL-POINT ( GDL object message on BASE-VIEW, keyword) most ( Function, gendl) MULTIPART-FORM? ( GDL object message on GWL:APPLICATION-MIXIN, keyword) MULTIPART-FORM? ( GDL object message on GWL::LAYOUT-MIXIN, keyword) MULTIPART-FORM? ( GDL object message on GWL:NODE-MIXIN, keyword) MULTIPLE? ( GDL object message on GWL:MENU-FORM-CONTROL, keyword) MULTIPLE? ( GDL object message on GWL:RADIO-FORM-CONTROL, keyword) multiply-matrices ( Function, geom-base) NAME-FOR-DISPLAY ( GDL object message on VANILLA-MIXIN*, keyword) near-to? ( Function, gendl) near-zero? (",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 109,
      "chunk_count": 216
    },
    "id": "787149cbe068a2bed5f7f6f0c3f97889"
  },
  {
    "text": "message on GWL:RADIO-FORM-CONTROL, keyword) multiply-matrices ( Function, geom-base) NAME-FOR-DISPLAY ( GDL object message on VANILLA-MIXIN*, keyword) near-to? ( Function, gendl) near-zero? ( Function, gendl) never ( Function, gendl) NEXT ( GDL object message on VANILLA-MIXIN*, keyword) NODE-MIXIN ( Object, gwl) NODE-UI-DISPLAY-LIST-OBJECTS ( GDL object message on GWL:NODE-MIXIN, keyword) NULL-OBJECT ( Object, gendl) NULLIFY-EMPTY-STRING? ( GDL object message on GWL:BASE-FORM-CONTROL, keyword) NULLIFY-EMPTY-STRING? ( GDL object message on GWL:CHECKBOX-FORM-CONTROL, keyword) NULLIFY-EMPTY-STRING? ( GDL object message on GWL:MENU-FORM-CONTROL, keyword) NULLIFY-EMPTY-STRING? ( GDL object message on GWL:RADIO-FORM-CONTROL, keyword) NULLIFY-EMPTY-STRING? ( GDL object message on GWL:TEXT-FORM-CONTROL, keyword) number-format ( Function, gendl) NUMBER-OF-HORIZONTAL-SECTIONS ( GDL object message on POINT, keyword) NUMBER-OF-HORIZONTAL-SECTIONS ( GDL object message on SPHERE, keyword)",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 110,
      "chunk_count": 216
    },
    "id": "1c1204d6650eea774c3ded08fd4d794d"
  },
  {
    "text": "NTROL, keyword) number-format ( Function, gendl) NUMBER-OF-HORIZONTAL-SECTIONS ( GDL object message on POINT, keyword) NUMBER-OF-HORIZONTAL-SECTIONS ( GDL object message on SPHERE, keyword) NUMBER-OF-HORIZONTAL-SECTIONS ( GDL object message on SPHERICAL-CAP, keyword) NUMBER-OF-LONGITUDINAL-SECTIONS ( GDL object message on TORUS, keyword) NUMBER-OF-SECTIONS ( GDL object message on C-CYLINDER, keyword) NUMBER-OF-SECTIONS ( GDL object message on CONE, keyword) NUMBER-OF-SECTIONS ( GDL object message on CYLINDER, keyword) NUMBER-OF-TRANSVERSE-SECTIONS ( GDL object message on TORUS, keyword) NUMBER-OF-VERTICAL-SECTIONS ( GDL object message on POINT, keyword) NUMBER-OF-VERTICAL-SECTIONS ( GDL object message on SPHERE, keyword) NUMBER-OF-VERTICAL-SECTIONS ( GDL object message on SPHERICAL-CAP, keyword) number-round ( Function, gendl) NUMBER? ( GDL object message on GWL:TEXT-FORM-CONTROL, keyword) OBJECT-DOCS ( GDL object message on YADD:PACKAGE-DOKUMENTATION, keyword) OBJECT-ROOTS ( GDL",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 111,
      "chunk_count": 216
    },
    "id": "9af43d37825001f93945149e8aba1e2a"
  },
  {
    "text": "yword) number-round ( Function, gendl) NUMBER? ( GDL object message on GWL:TEXT-FORM-CONTROL, keyword) OBJECT-DOCS ( GDL object message on YADD:PACKAGE-DOKUMENTATION, keyword) OBJECT-ROOTS ( GDL object message on BASE-VIEW, keyword) OBJECT-ROOTS ( GDL object message on GEOM-BASE::RENDERER-MIXIN, keyword) OBJECT-ROOTS ( GDL object message on GWL:WEB-DRAWING, keyword) OBJECTS ( GDL object message on BASE-VIEW, keyword) OBJECTS ( GDL object message on GEOM-BASE::RENDERER-MIXIN, keyword) OBJECTS ( GDL object message on GWL:WEB-DRAWING, keyword) OBLIQUENESS ( GDL object message on ANGULAR-DIMENSION, keyword) OBLIQUENESS ( GDL object message on ARC, keyword) OBLIQUENESS ( GDL object message on BASE-COORDINATE-SYSTEM, keyword) OBLIQUENESS ( GDL object message on BASE-DRAWING, keyword) OBLIQUENESS ( GDL object message on BASE-OBJECT, keyword) OBLIQUENESS ( GDL object message on BASE-VIEW, keyword) OBLIQUENESS ( GDL object message on BEZIER-CURVE, keyword) OBLIQUENESS ( GDL object message on",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 112,
      "chunk_count": 216
    },
    "id": "bf802694217676ff18d207722f0928a7"
  },
  {
    "text": "( GDL object message on BASE-OBJECT, keyword) OBLIQUENESS ( GDL object message on BASE-VIEW, keyword) OBLIQUENESS ( GDL object message on BEZIER-CURVE, keyword) OBLIQUENESS ( GDL object message on BOX, keyword) OBLIQUENESS ( GDL object message on C-CYLINDER, keyword) OBLIQUENESS ( GDL object message on CENTER-LINE, keyword) OBLIQUENESS ( GDL object message on CIRCLE, keyword) OBLIQUENESS ( GDL object message on CONE, keyword) OBLIQUENESS ( GDL object message on CONSTRAINED-ARC, keyword) OBLIQUENESS ( GDL object message on CONSTRAINED-FILLET, keyword) OBLIQUENESS ( GDL object message on CONSTRAINED-LINE, keyword) OBLIQUENESS ( GDL object message on CYLINDER, keyword) OBLIQUENESS ( GDL object message on ELLIPSE, keyword) OBLIQUENESS ( GDL object message on GENERAL-NOTE, keyword) OBLIQUENESS ( GDL object message on GLOBAL-FILLETED-POLYGON-PROJECTION, keyword) OBLIQUENESS ( GDL object message on GLOBAL-FILLETED-POLYLINE, keyword) OBLIQUENESS ( GDL object message on",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 113,
      "chunk_count": 216
    },
    "id": "85d4c2f9d079ca8b8d809f56250b6cd4"
  },
  {
    "text": "( GDL object message on GLOBAL-FILLETED-POLYGON-PROJECTION, keyword) OBLIQUENESS ( GDL object message on GLOBAL-FILLETED-POLYLINE, keyword) OBLIQUENESS ( GDL object message on GEOM-BASE::GLOBAL-FILLETED-POLYLINE-MIXIN, keyword) OBLIQUENESS ( GDL object message on GLOBAL-POLYGON-PROJECTION, keyword) OBLIQUENESS ( GDL object message on GLOBAL-POLYLINE, keyword) OBLIQUENESS ( GDL object message on GEOM-BASE::GLOBAL-POLYLINE-MIXIN, keyword) OBLIQUENESS ( GDL object message on HORIZONTAL-DIMENSION, keyword) OBLIQUENESS ( GDL object message on LABEL, keyword) OBLIQUENESS ( GDL object message on LEADER-LINE, keyword) OBLIQUENESS ( GDL object message on LINE, keyword) OBLIQUENESS ( GDL object message on LINEAR-DIMENSION, keyword) OBLIQUENESS ( GDL object message on PARALLEL-DIMENSION, keyword) OBLIQUENESS ( GDL object message on PIE-CHART, keyword) OBLIQUENESS ( GDL object message on POINT, keyword) OBLIQUENESS ( GDL object message on POINTS-DISPLAY, keyword) OBLIQUENESS ( GDL object message",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 114,
      "chunk_count": 216
    },
    "id": "fb8f9148e580eb607c0f6036e7b0dbf6"
  },
  {
    "text": "LIQUENESS ( GDL object message on PIE-CHART, keyword) OBLIQUENESS ( GDL object message on POINT, keyword) OBLIQUENESS ( GDL object message on POINTS-DISPLAY, keyword) OBLIQUENESS ( GDL object message on ROUTE-PIPE, keyword) OBLIQUENESS ( GDL object message on SAMPLE-DRAWING, keyword) OBLIQUENESS ( GDL object message on SPHERE, keyword) OBLIQUENESS ( GDL object message on SPHERICAL-CAP, keyword) OBLIQUENESS ( GDL object message on TEXT-LINE, keyword) OBLIQUENESS ( GDL object message on TORUS, keyword) OBLIQUENESS ( GDL object message on TYPESET-BLOCK, keyword) OBLIQUENESS ( GDL object message on VERTICAL-DIMENSION, keyword) OBLIQUENESS ( GDL object message on GWL:APPLICATION-MIXIN, keyword) OBLIQUENESS ( GDL object message on GWL:BASE-AJAX-GRAPHICS-SHEET, keyword) OBLIQUENESS ( GDL object message on GWL:BASE-HTML-GRAPHICS-SHEET, keyword) OBLIQUENESS ( GDL object message on GWL:GWL-RULE-OBJECT, keyword) OBLIQUENESS ( GDL object message on GWL::LAYOUT-MIXIN, keyword) OBLIQUENESS ( GDL",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 115,
      "chunk_count": 216
    },
    "id": "12b626a1f770868e6d62c3f4bced1d7c"
  },
  {
    "text": "essage on GWL:BASE-HTML-GRAPHICS-SHEET, keyword) OBLIQUENESS ( GDL object message on GWL:GWL-RULE-OBJECT, keyword) OBLIQUENESS ( GDL object message on GWL::LAYOUT-MIXIN, keyword) OBLIQUENESS ( GDL object message on GWL:NODE-MIXIN, keyword) OBLIQUENESS ( GDL object message on GWL:WEB-DRAWING, keyword) OFFSET ( GDL object message on GLOBAL-FILLETED-POLYGON-PROJECTION, keyword) OFFSET ( GDL object message on GLOBAL-POLYGON-PROJECTION, keyword) ONBLUR ( GDL object message on GWL:BASE-FORM-CONTROL, keyword) ONBLUR ( GDL object message on GWL:CHECKBOX-FORM-CONTROL, keyword) ONBLUR ( GDL object message on GWL:MENU-FORM-CONTROL, keyword) ONBLUR ( GDL object message on GWL:RADIO-FORM-CONTROL, keyword) ONBLUR ( GDL object message on GWL:TEXT-FORM-CONTROL, keyword) ONCHANGE ( GDL object message on GWL:BASE-FORM-CONTROL, keyword) ONCHANGE ( GDL object message on GWL:CHECKBOX-FORM-CONTROL, keyword) ONCHANGE ( GDL object message on GWL:MENU-FORM-CONTROL, keyword) ONCHANGE ( GDL object message on",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 116,
      "chunk_count": 216
    },
    "id": "3aefa75f11225957054fd7a950888889"
  },
  {
    "text": "L:BASE-FORM-CONTROL, keyword) ONCHANGE ( GDL object message on GWL:CHECKBOX-FORM-CONTROL, keyword) ONCHANGE ( GDL object message on GWL:MENU-FORM-CONTROL, keyword) ONCHANGE ( GDL object message on GWL:RADIO-FORM-CONTROL, keyword) ONCHANGE ( GDL object message on GWL:TEXT-FORM-CONTROL, keyword) ONCLICK ( GDL object message on GWL:BASE-FORM-CONTROL, keyword) ONCLICK ( GDL object message on GWL:CHECKBOX-FORM-CONTROL, keyword) ONCLICK ( GDL object message on GWL:MENU-FORM-CONTROL, keyword) ONCLICK ( GDL object message on GWL:RADIO-FORM-CONTROL, keyword) ONCLICK ( GDL object message on GWL:TEXT-FORM-CONTROL, keyword) ONCLICK-FUNCTION ( GDL object message on ANGULAR-DIMENSION, keyword) ONCLICK-FUNCTION ( GDL object message on ARC, keyword) ONCLICK-FUNCTION ( GDL object message on BASE-COORDINATE-SYSTEM, keyword) ONCLICK-FUNCTION ( GDL object message on BASE-DRAWING, keyword) ONCLICK-FUNCTION ( GDL object message on BASE-OBJECT, keyword) ONCLICK-FUNCTION ( GDL object message on BASE-VIEW,",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 117,
      "chunk_count": 216
    },
    "id": "43674817c2ef1e2071b0896f22e8c509"
  },
  {
    "text": "-SYSTEM, keyword) ONCLICK-FUNCTION ( GDL object message on BASE-DRAWING, keyword) ONCLICK-FUNCTION ( GDL object message on BASE-OBJECT, keyword) ONCLICK-FUNCTION ( GDL object message on BASE-VIEW, keyword) ONCLICK-FUNCTION ( GDL object message on BEZIER-CURVE, keyword) ONCLICK-FUNCTION ( GDL object message on BOX, keyword) ONCLICK-FUNCTION ( GDL object message on C-CYLINDER, keyword) ONCLICK-FUNCTION ( GDL object message on CENTER-LINE, keyword) ONCLICK-FUNCTION ( GDL object message on CIRCLE, keyword) ONCLICK-FUNCTION ( GDL object message on CONE, keyword) ONCLICK-FUNCTION ( GDL object message on CONSTRAINED-ARC, keyword) ONCLICK-FUNCTION ( GDL object message on CONSTRAINED-FILLET, keyword) ONCLICK-FUNCTION ( GDL object message on CONSTRAINED-LINE, keyword) ONCLICK-FUNCTION ( GDL object message on CYLINDER, keyword) ONCLICK-FUNCTION ( GDL object message on ELLIPSE, keyword) ONCLICK-FUNCTION ( GDL object message on GENERAL-NOTE, keyword) ONCLICK-FUNCTION ( GDL object message on",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 118,
      "chunk_count": 216
    },
    "id": "f2c79e490072f3a53d985831aa087f52"
  },
  {
    "text": "essage on CYLINDER, keyword) ONCLICK-FUNCTION ( GDL object message on ELLIPSE, keyword) ONCLICK-FUNCTION ( GDL object message on GENERAL-NOTE, keyword) ONCLICK-FUNCTION ( GDL object message on GLOBAL-FILLETED-POLYGON-PROJECTION, keyword) ONCLICK-FUNCTION ( GDL object message on GLOBAL-FILLETED-POLYLINE, keyword) ONCLICK-FUNCTION ( GDL object message on GEOM-BASE::GLOBAL-FILLETED-POLYLINE-MIXIN, keyword) ONCLICK-FUNCTION ( GDL object message on GLOBAL-POLYGON-PROJECTION, keyword) ONCLICK-FUNCTION ( GDL object message on GLOBAL-POLYLINE, keyword) ONCLICK-FUNCTION ( GDL object message on GEOM-BASE::GLOBAL-POLYLINE-MIXIN, keyword) ONCLICK-FUNCTION ( GDL object message on HORIZONTAL-DIMENSION, keyword) ONCLICK-FUNCTION ( GDL object message on LABEL, keyword) ONCLICK-FUNCTION ( GDL object message on LEADER-LINE, keyword) ONCLICK-FUNCTION ( GDL object message on LINE, keyword) ONCLICK-FUNCTION ( GDL object message on LINEAR-DIMENSION, keyword) ONCLICK-FUNCTION ( GDL object message on",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 119,
      "chunk_count": 216
    },
    "id": "4ec4fdc19191dd8adf1aadb966c8a561"
  },
  {
    "text": "e on LEADER-LINE, keyword) ONCLICK-FUNCTION ( GDL object message on LINE, keyword) ONCLICK-FUNCTION ( GDL object message on LINEAR-DIMENSION, keyword) ONCLICK-FUNCTION ( GDL object message on PARALLEL-DIMENSION, keyword) ONCLICK-FUNCTION ( GDL object message on PIE-CHART, keyword) ONCLICK-FUNCTION ( GDL object message on POINT, keyword) ONCLICK-FUNCTION ( GDL object message on POINTS-DISPLAY, keyword) ONCLICK-FUNCTION ( GDL object message on ROUTE-PIPE, keyword) ONCLICK-FUNCTION ( GDL object message on SAMPLE-DRAWING, keyword) ONCLICK-FUNCTION ( GDL object message on SPHERE, keyword) ONCLICK-FUNCTION ( GDL object message on SPHERICAL-CAP, keyword) ONCLICK-FUNCTION ( GDL object message on TEXT-LINE, keyword) ONCLICK-FUNCTION ( GDL object message on TORUS, keyword) ONCLICK-FUNCTION ( GDL object message on TYPESET-BLOCK, keyword) ONCLICK-FUNCTION ( GDL object message on VERTICAL-DIMENSION, keyword) ONCLICK-FUNCTION ( GDL object message on GEYSR:TREE, keyword) ONCLICK-FUNCTION ( GDL",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 120,
      "chunk_count": 216
    },
    "id": "64a14ec8d8d9b622b6e6c6d0332dc931"
  },
  {
    "text": "ect message on TYPESET-BLOCK, keyword) ONCLICK-FUNCTION ( GDL object message on VERTICAL-DIMENSION, keyword) ONCLICK-FUNCTION ( GDL object message on GEYSR:TREE, keyword) ONCLICK-FUNCTION ( GDL object message on GWL:APPLICATION-MIXIN, keyword) ONCLICK-FUNCTION ( GDL object message on GWL:BASE-AJAX-GRAPHICS-SHEET, keyword) ONCLICK-FUNCTION ( GDL object message on GWL:BASE-HTML-GRAPHICS-SHEET, keyword) ONCLICK-FUNCTION ( GDL object message on GWL:GWL-RULE-OBJECT, keyword) ONCLICK-FUNCTION ( GDL object message on GWL::LAYOUT-MIXIN, keyword) ONCLICK-FUNCTION ( GDL object message on GWL:NODE-MIXIN, keyword) ONCLICK-FUNCTION ( GDL object message on GWL:WEB-DRAWING, keyword) ONDBLCLICK ( GDL object message on GWL:BASE-FORM-CONTROL, keyword) ONDBLCLICK ( GDL object message on GWL:CHECKBOX-FORM-CONTROL, keyword) ONDBLCLICK ( GDL object message on GWL:MENU-FORM-CONTROL, keyword) ONDBLCLICK ( GDL object message on GWL:RADIO-FORM-CONTROL, keyword) ONDBLCLICK ( GDL object message on",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 121,
      "chunk_count": 216
    },
    "id": "91fd6b64358e4bfc7a14acd9be91be8a"
  },
  {
    "text": "TROL, keyword) ONDBLCLICK ( GDL object message on GWL:MENU-FORM-CONTROL, keyword) ONDBLCLICK ( GDL object message on GWL:RADIO-FORM-CONTROL, keyword) ONDBLCLICK ( GDL object message on GWL:TEXT-FORM-CONTROL, keyword) ONENTER ( GDL object message on GWL:BASE-FORM-CONTROL, keyword) ONENTER ( GDL object message on GWL:CHECKBOX-FORM-CONTROL, keyword) ONENTER ( GDL object message on GWL:MENU-FORM-CONTROL, keyword) ONENTER ( GDL object message on GWL:RADIO-FORM-CONTROL, keyword) ONENTER ( GDL object message on GWL:TEXT-FORM-CONTROL, keyword) ONFOCUS ( GDL object message on GWL:BASE-FORM-CONTROL, keyword) ONFOCUS ( GDL object message on GWL:CHECKBOX-FORM-CONTROL, keyword) ONFOCUS ( GDL object message on GWL:MENU-FORM-CONTROL, keyword) ONFOCUS ( GDL object message on GWL:RADIO-FORM-CONTROL, keyword) ONFOCUS ( GDL object message on GWL:TEXT-FORM-CONTROL, keyword) ONKEYDOWN ( GDL object message on GWL:BASE-FORM-CONTROL, keyword) ONKEYDOWN ( GDL object message on GWL:CHECKBOX-FORM-CONTROL,",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 122,
      "chunk_count": 216
    },
    "id": "e72f9bb50213c5308efc08793510b51d"
  },
  {
    "text": "d) ONFOCUS ( GDL object message on GWL:TEXT-FORM-CONTROL, keyword) ONKEYDOWN ( GDL object message on GWL:BASE-FORM-CONTROL, keyword) ONKEYDOWN ( GDL object message on GWL:CHECKBOX-FORM-CONTROL, keyword) ONKEYDOWN ( GDL object message on GWL:MENU-FORM-CONTROL, keyword) ONKEYDOWN ( GDL object message on GWL:RADIO-FORM-CONTROL, keyword) ONKEYDOWN ( GDL object message on GWL:TEXT-FORM-CONTROL, keyword) ONKEYPRESS ( GDL object message on GWL:BASE-FORM-CONTROL, keyword) ONKEYPRESS ( GDL object message on GWL:CHECKBOX-FORM-CONTROL, keyword) ONKEYPRESS ( GDL object message on GWL:MENU-FORM-CONTROL, keyword) ONKEYPRESS ( GDL object message on GWL:RADIO-FORM-CONTROL, keyword) ONKEYPRESS ( GDL object message on GWL:TEXT-FORM-CONTROL, keyword) ONKEYUP ( GDL object message on GWL:BASE-FORM-CONTROL, keyword) ONKEYUP ( GDL object message on GWL:CHECKBOX-FORM-CONTROL, keyword) ONKEYUP ( GDL object message on GWL:MENU-FORM-CONTROL, keyword) ONKEYUP ( GDL object message on GWL:RADIO-FORM-CONTROL,",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 123,
      "chunk_count": 216
    },
    "id": "e2e617758a6362d5c8eedfe72cafc9b0"
  },
  {
    "text": "word) ONKEYUP ( GDL object message on GWL:CHECKBOX-FORM-CONTROL, keyword) ONKEYUP ( GDL object message on GWL:MENU-FORM-CONTROL, keyword) ONKEYUP ( GDL object message on GWL:RADIO-FORM-CONTROL, keyword) ONKEYUP ( GDL object message on GWL:TEXT-FORM-CONTROL, keyword) ONMOUSEDOWN ( GDL object message on GWL:BASE-FORM-CONTROL, keyword) ONMOUSEDOWN ( GDL object message on GWL:CHECKBOX-FORM-CONTROL, keyword) ONMOUSEDOWN ( GDL object message on GWL:MENU-FORM-CONTROL, keyword) ONMOUSEDOWN ( GDL object message on GWL:RADIO-FORM-CONTROL, keyword) ONMOUSEDOWN ( GDL object message on GWL:TEXT-FORM-CONTROL, keyword) ONMOUSEMOVE ( GDL object message on GWL:BASE-FORM-CONTROL, keyword) ONMOUSEMOVE ( GDL object message on GWL:CHECKBOX-FORM-CONTROL, keyword) ONMOUSEMOVE ( GDL object message on GWL:MENU-FORM-CONTROL, keyword) ONMOUSEMOVE ( GDL object message on GWL:RADIO-FORM-CONTROL, keyword) ONMOUSEMOVE ( GDL object message on GWL:TEXT-FORM-CONTROL, keyword) ONMOUSEOUT ( GDL object message on",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 124,
      "chunk_count": 216
    },
    "id": "1330b3540b1afc3b016abcb64075d1ee"
  },
  {
    "text": "M-CONTROL, keyword) ONMOUSEMOVE ( GDL object message on GWL:RADIO-FORM-CONTROL, keyword) ONMOUSEMOVE ( GDL object message on GWL:TEXT-FORM-CONTROL, keyword) ONMOUSEOUT ( GDL object message on GWL:BASE-FORM-CONTROL, keyword) ONMOUSEOUT ( GDL object message on GWL:CHECKBOX-FORM-CONTROL, keyword) ONMOUSEOUT ( GDL object message on GWL:MENU-FORM-CONTROL, keyword) ONMOUSEOUT ( GDL object message on GWL:RADIO-FORM-CONTROL, keyword) ONMOUSEOUT ( GDL object message on GWL:TEXT-FORM-CONTROL, keyword) ONMOUSEOVER ( GDL object message on GWL:BASE-FORM-CONTROL, keyword) ONMOUSEOVER ( GDL object message on GWL:CHECKBOX-FORM-CONTROL, keyword) ONMOUSEOVER ( GDL object message on GWL:MENU-FORM-CONTROL, keyword) ONMOUSEOVER ( GDL object message on GWL:RADIO-FORM-CONTROL, keyword) ONMOUSEOVER ( GDL object message on GWL:TEXT-FORM-CONTROL, keyword) ONMOUSEUP ( GDL object message on GWL:BASE-FORM-CONTROL, keyword) ONMOUSEUP ( GDL object message on GWL:CHECKBOX-FORM-CONTROL, keyword) ONMOUSEUP ( GDL",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 125,
      "chunk_count": 216
    },
    "id": "30e8b05b29a9933845e545c3a5c1054e"
  },
  {
    "text": "essage on GWL:TEXT-FORM-CONTROL, keyword) ONMOUSEUP ( GDL object message on GWL:BASE-FORM-CONTROL, keyword) ONMOUSEUP ( GDL object message on GWL:CHECKBOX-FORM-CONTROL, keyword) ONMOUSEUP ( GDL object message on GWL:MENU-FORM-CONTROL, keyword) ONMOUSEUP ( GDL object message on GWL:RADIO-FORM-CONTROL, keyword) ONMOUSEUP ( GDL object message on GWL:TEXT-FORM-CONTROL, keyword) ONSELECT ( GDL object message on GWL:BASE-FORM-CONTROL, keyword) ONSELECT ( GDL object message on GWL:CHECKBOX-FORM-CONTROL, keyword) ONSELECT ( GDL object message on GWL:MENU-FORM-CONTROL, keyword) ONSELECT ( GDL object message on GWL:RADIO-FORM-CONTROL, keyword) ONSELECT ( GDL object message on GWL:TEXT-FORM-CONTROL, keyword) ORDERED-FORM-CONTROLS ( GDL object message on GEYSR::MENU, keyword) ORDERED-FORM-CONTROLS ( GDL object message on GEYSR:TREE, keyword) ORDERED-FORM-CONTROLS ( GDL object message on GWL:APPLICATION-MIXIN, keyword) ORDERED-FORM-CONTROLS ( GDL object message on GWL:BASE-AJAX-GRAPHICS-SHEET,",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 126,
      "chunk_count": 216
    },
    "id": "334c8d54adb12a866757f5148a584a9f"
  },
  {
    "text": "DL object message on GEYSR:TREE, keyword) ORDERED-FORM-CONTROLS ( GDL object message on GWL:APPLICATION-MIXIN, keyword) ORDERED-FORM-CONTROLS ( GDL object message on GWL:BASE-AJAX-GRAPHICS-SHEET, keyword) ORDERED-FORM-CONTROLS ( GDL object message on GWL:BASE-AJAX-SHEET, keyword) ORDERED-FORM-CONTROLS ( GDL object message on GWL:BASE-FORM-CONTROL, keyword) ORDERED-FORM-CONTROLS ( GDL object message on GWL:BASE-HTML-GRAPHICS-SHEET, keyword) ORDERED-FORM-CONTROLS ( GDL object message on GWL:BASE-HTML-SHEET, keyword) ORDERED-FORM-CONTROLS ( GDL object message on GWL:CHECKBOX-FORM-CONTROL, keyword) ORDERED-FORM-CONTROLS ( GDL object message on GWL::COLOR-MAP, keyword) ORDERED-FORM-CONTROLS ( GDL object message on GWL:GRID-FORM-CONTROL, keyword) ORDERED-FORM-CONTROLS ( GDL object message on GWL:GWL-RULE-OBJECT, keyword) ORDERED-FORM-CONTROLS ( GDL object message on GWL::LAYOUT-MIXIN, keyword) ORDERED-FORM-CONTROLS ( GDL object message on GWL:MENU-FORM-CONTROL, keyword)",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 127,
      "chunk_count": 216
    },
    "id": "2ddaf0172f5633cfb8c66f298bcb967b"
  },
  {
    "text": ":GWL-RULE-OBJECT, keyword) ORDERED-FORM-CONTROLS ( GDL object message on GWL::LAYOUT-MIXIN, keyword) ORDERED-FORM-CONTROLS ( GDL object message on GWL:MENU-FORM-CONTROL, keyword) ORDERED-FORM-CONTROLS ( GDL object message on GWL:NODE-MIXIN, keyword) ORDERED-FORM-CONTROLS ( GDL object message on GWL:RADIO-FORM-CONTROL, keyword) ORDERED-FORM-CONTROLS ( GDL object message on GWL:SHEET-SECTION, keyword) ORDERED-FORM-CONTROLS ( GDL object message on GWL::SKELETON-FORM-CONTROL, keyword) ORDERED-FORM-CONTROLS ( GDL object message on GWL:SKELETON-UI-ELEMENT, keyword) ORDERED-FORM-CONTROLS ( GDL object message on GWL:TEXT-FORM-CONTROL, keyword) ORDERED-FORM-CONTROLS ( GDL object message on YADD:ASSEMBLY, keyword) ORDERED-FORM-CONTROLS ( GDL object message on YADD::BASE-YADD-SHEET, keyword) ORDERED-FORM-CONTROLS ( GDL object message on YADD::MASTER-INDEX, keyword) ORDERED-FORM-CONTROLS ( GDL object message on YADD:PACKAGE-DOKUMENTATION, keyword) ORDERED-FORM-CONTROLS ( GDL object message on",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 128,
      "chunk_count": 216
    },
    "id": "8237d058aad9eefafa4e7a8265612ff0"
  },
  {
    "text": "FORM-CONTROLS ( GDL object message on YADD::MASTER-INDEX, keyword) ORDERED-FORM-CONTROLS ( GDL object message on YADD:PACKAGE-DOKUMENTATION, keyword) ORDERED-FORM-CONTROLS ( GDL object message on YADD::PACKAGE-FORM, keyword) ORG-TYPE ( GDL object message on GWL:SESSION-CONTROL-MIXIN, keyword) ORIENTATION ( GDL object message on ANGULAR-DIMENSION, keyword) ORIENTATION ( GDL object message on ARC, keyword) ORIENTATION ( GDL object message on BASE-COORDINATE-SYSTEM, keyword) ORIENTATION ( GDL object message on BASE-DRAWING, keyword) ORIENTATION ( GDL object message on BASE-OBJECT, keyword) ORIENTATION ( GDL object message on BASE-VIEW, keyword) ORIENTATION ( GDL object message on BEZIER-CURVE, keyword) ORIENTATION ( GDL object message on BOX, keyword) ORIENTATION ( GDL object message on C-CYLINDER, keyword) ORIENTATION ( GDL object message on CENTER-LINE, keyword) ORIENTATION ( GDL object message on CIRCLE, keyword) ORIENTATION ( GDL object message on CONE, keyword) ORIENTATION ( GDL",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 129,
      "chunk_count": 216
    },
    "id": "6e9cabd1e6298a6a9a261293150ed7fb"
  },
  {
    "text": "INDER, keyword) ORIENTATION ( GDL object message on CENTER-LINE, keyword) ORIENTATION ( GDL object message on CIRCLE, keyword) ORIENTATION ( GDL object message on CONE, keyword) ORIENTATION ( GDL object message on CONSTRAINED-ARC, keyword) ORIENTATION ( GDL object message on CONSTRAINED-LINE, keyword) ORIENTATION ( GDL object message on CYLINDER, keyword) ORIENTATION ( GDL object message on ELLIPSE, keyword) ORIENTATION ( GDL object message on GENERAL-NOTE, keyword) ORIENTATION ( GDL object message on GLOBAL-FILLETED-POLYGON-PROJECTION, keyword) ORIENTATION ( GDL object message on GLOBAL-FILLETED-POLYLINE, keyword) ORIENTATION ( GDL object message on GEOM-BASE::GLOBAL-FILLETED-POLYLINE-MIXIN, keyword) ORIENTATION ( GDL object message on GLOBAL-POLYGON-PROJECTION, keyword) ORIENTATION ( GDL object message on GLOBAL-POLYLINE, keyword) ORIENTATION ( GDL object message on GEOM-BASE::GLOBAL-POLYLINE-MIXIN, keyword) ORIENTATION ( GDL object message on HORIZONTAL-DIMENSION, keyword)",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 130,
      "chunk_count": 216
    },
    "id": "37666665b3298054e82167237df49f05"
  },
  {
    "text": "object message on GLOBAL-POLYLINE, keyword) ORIENTATION ( GDL object message on GEOM-BASE::GLOBAL-POLYLINE-MIXIN, keyword) ORIENTATION ( GDL object message on HORIZONTAL-DIMENSION, keyword) ORIENTATION ( GDL object message on LABEL, keyword) ORIENTATION ( GDL object message on LEADER-LINE, keyword) ORIENTATION ( GDL object message on LINE, keyword) ORIENTATION ( GDL object message on LINEAR-DIMENSION, keyword) ORIENTATION ( GDL object message on PARALLEL-DIMENSION, keyword) ORIENTATION ( GDL object message on PIE-CHART, keyword) ORIENTATION ( GDL object message on POINT, keyword) ORIENTATION ( GDL object message on POINTS-DISPLAY, keyword) ORIENTATION ( GDL object message on ROUTE-PIPE, keyword) ORIENTATION ( GDL object message on SAMPLE-DRAWING, keyword) ORIENTATION ( GDL object message on SPHERE, keyword) ORIENTATION ( GDL object message on SPHERICAL-CAP, keyword) ORIENTATION ( GDL object message on TEXT-LINE, keyword) ORIENTATION ( GDL object message on TORUS, keyword) ORIENTATION",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 131,
      "chunk_count": 216
    },
    "id": "1bdd9387f0cc49318cf8f747a35dbdea"
  },
  {
    "text": "on SPHERE, keyword) ORIENTATION ( GDL object message on SPHERICAL-CAP, keyword) ORIENTATION ( GDL object message on TEXT-LINE, keyword) ORIENTATION ( GDL object message on TORUS, keyword) ORIENTATION ( GDL object message on TYPESET-BLOCK, keyword) ORIENTATION ( GDL object message on VERTICAL-DIMENSION, keyword) ORIENTATION ( GDL object message on GWL:APPLICATION-MIXIN, keyword) ORIENTATION ( GDL object message on GWL:BASE-AJAX-GRAPHICS-SHEET, keyword) ORIENTATION ( GDL object message on GWL:BASE-HTML-GRAPHICS-SHEET, keyword) ORIENTATION ( GDL object message on GWL:GWL-RULE-OBJECT, keyword) ORIENTATION ( GDL object message on GWL::LAYOUT-MIXIN, keyword) ORIENTATION ( GDL object message on GWL:NODE-MIXIN, keyword) ORIENTATION ( GDL object message on GWL:WEB-DRAWING, keyword) orthogonal-component ( Function, geom-base) OTHER-RULES ( GDL object message on GWL:APPLICATION-MIXIN, keyword) OTHER-RULES ( GDL object message on GWL::LAYOUT-MIXIN, keyword) OTHER-RULES ( GDL object message on",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 132,
      "chunk_count": 216
    },
    "id": "4f647410185998635a7ca2b40ea1be49"
  },
  {
    "text": "nent ( Function, geom-base) OTHER-RULES ( GDL object message on GWL:APPLICATION-MIXIN, keyword) OTHER-RULES ( GDL object message on GWL::LAYOUT-MIXIN, keyword) OTHER-RULES ( GDL object message on GWL:NODE-MIXIN, keyword) OTHER-RULES-BGCOLOR ( GDL object message on GWL:APPLICATION-MIXIN, keyword) OTHER-RULES-BGCOLOR ( GDL object message on GWL::LAYOUT-MIXIN, keyword) OTHER-RULES-BGCOLOR ( GDL object message on GWL:NODE-MIXIN, keyword) OTHER-RULES-TITLE ( GDL object message on GWL:APPLICATION-MIXIN, keyword) OTHER-RULES-TITLE ( GDL object message on GWL::LAYOUT-MIXIN, keyword) OTHER-RULES-TITLE ( GDL object message on GWL:NODE-MIXIN, keyword) OUTER-PIPE-RADIUS ( GDL object message on ROUTE-PIPE, keyword) OUTLINE-SHAPE-TYPE ( GDL object message on ANGULAR-DIMENSION, keyword) OUTLINE-SHAPE-TYPE ( GDL object message on GENERAL-NOTE, keyword) OUTLINE-SHAPE-TYPE ( GDL object message on HORIZONTAL-DIMENSION, keyword) OUTLINE-SHAPE-TYPE ( GDL object message on LABEL, keyword)",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 133,
      "chunk_count": 216
    },
    "id": "0fe945128eb1a065f57f4bbb06b373c5"
  },
  {
    "text": "E ( GDL object message on GENERAL-NOTE, keyword) OUTLINE-SHAPE-TYPE ( GDL object message on HORIZONTAL-DIMENSION, keyword) OUTLINE-SHAPE-TYPE ( GDL object message on LABEL, keyword) OUTLINE-SHAPE-TYPE ( GDL object message on LINEAR-DIMENSION, keyword) OUTLINE-SHAPE-TYPE ( GDL object message on PARALLEL-DIMENSION, keyword) OUTLINE-SHAPE-TYPE ( GDL object message on VERTICAL-DIMENSION, keyword) OUTSIDE-LEADERS-LENGTH-FACTOR ( GDL object message on ANGULAR-DIMENSION, keyword) OUTSIDE-LEADERS-LENGTH-FACTOR ( GDL object message on HORIZONTAL-DIMENSION, keyword) OUTSIDE-LEADERS-LENGTH-FACTOR ( GDL object message on LINEAR-DIMENSION, keyword) OUTSIDE-LEADERS-LENGTH-FACTOR ( GDL object message on PARALLEL-DIMENSION, keyword) OUTSIDE-LEADERS-LENGTH-FACTOR ( GDL object message on VERTICAL-DIMENSION, keyword) OUTSIDE-LEADERS? ( GDL object message on ANGULAR-DIMENSION, keyword) OUTSIDE-LEADERS? ( GDL object message on HORIZONTAL-DIMENSION, keyword) OUTSIDE-LEADERS? ( GDL object message on",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 134,
      "chunk_count": 216
    },
    "id": "a3ec824940b54630227c83c747fe808d"
  },
  {
    "text": "keyword) OUTSIDE-LEADERS? ( GDL object message on ANGULAR-DIMENSION, keyword) OUTSIDE-LEADERS? ( GDL object message on HORIZONTAL-DIMENSION, keyword) OUTSIDE-LEADERS? ( GDL object message on LINEAR-DIMENSION, keyword) OUTSIDE-LEADERS? ( GDL object message on PARALLEL-DIMENSION, keyword) OUTSIDE-LEADERS? ( GDL object message on VERTICAL-DIMENSION, keyword) OVERWRITE-VALIDATION-FUNCTION ( GDL object message on GDL-APP, keyword) OVERWRITE? ( GDL object message on GDL-APP, keyword) PACKAGE ( GDL object message on YADD:PACKAGE-DOKUMENTATION, keyword) PACKAGE-DOKUMENTATION ( Object, yadd) PACKAGE-DOKUMENTATIONS ( GDL object message on YADD:ASSEMBLY, keyword) PACKAGE-FORM ( GDL object message on YADD:PACKAGE-DOKUMENTATION, keyword) PACKAGE-FORM ( Object, yadd) PACKAGES-TO-IGNORE ( GDL object message on YADD:ASSEMBLY, keyword) PAGE-LENGTH ( GDL object message on BASE-DRAWING, keyword) PAGE-LENGTH ( GDL object message on SAMPLE-DRAWING, keyword) PAGE-LENGTH ( GDL object message on",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 135,
      "chunk_count": 216
    },
    "id": "86c9aa830c2d6f873d50844f6aa022f8"
  },
  {
    "text": "sage on YADD:ASSEMBLY, keyword) PAGE-LENGTH ( GDL object message on BASE-DRAWING, keyword) PAGE-LENGTH ( GDL object message on SAMPLE-DRAWING, keyword) PAGE-LENGTH ( GDL object message on GWL:WEB-DRAWING, keyword) PAGE-TITLE ( GDL object message on GWL:APPLICATION-MIXIN, keyword) PAGE-TITLE ( GDL object message on GWL::LAYOUT-MIXIN, keyword) PAGE-TITLE ( GDL object message on GWL:NODE-MIXIN, keyword) PAGE-WIDTH ( GDL object message on BASE-DRAWING, keyword) PAGE-WIDTH ( GDL object message on SAMPLE-DRAWING, keyword) PAGE-WIDTH ( GDL object message on GWL:WEB-DRAWING, keyword) PARALLEL-DIMENSION ( Object, geom-base) parallel-vectors? ( Function, geom-base) PARENT ( GDL object message on VANILLA-MIXIN*, keyword) PASSWORD? ( GDL object message on GWL:TEXT-FORM-CONTROL, keyword) PATH-POINTS ( GDL object message on LEADER-LINE, keyword) pi/2 ( Parameter or Constant, gendl) PIE-CHART ( Object, geom-base) PLACEHOLDER ( GDL object message on GWL:BASE-FORM-CONTROL, keyword) PLACEHOLDER ( GDL",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 136,
      "chunk_count": 216
    },
    "id": "10552cb7d89deed8e6e089b480e60092"
  },
  {
    "text": "GDL object message on LEADER-LINE, keyword) pi/2 ( Parameter or Constant, gendl) PIE-CHART ( Object, geom-base) PLACEHOLDER ( GDL object message on GWL:BASE-FORM-CONTROL, keyword) PLACEHOLDER ( GDL object message on GWL:CHECKBOX-FORM-CONTROL, keyword) PLACEHOLDER ( GDL object message on GWL:MENU-FORM-CONTROL, keyword) PLACEHOLDER ( GDL object message on GWL:RADIO-FORM-CONTROL, keyword) PLACEHOLDER ( GDL object message on GWL:TEXT-FORM-CONTROL, keyword) plist-keys ( Function, gendl) plist-values ( Function, gendl) POINT ( GDL object message on BEZIER-CURVE, keyword) POINT ( Object, geom-base) POINT-ON-ARC ( GDL object message on ARC, keyword) point-on-plane? ( Function, geom-base) point-on-vector? ( Function, geom-base) POINTS ( GDL object message on POINTS-DISPLAY, keyword) POINTS-DISPLAY ( Object, geom-base) POSSIBLE-NIL? ( GDL object message on GWL:CHECKBOX-FORM-CONTROL, keyword) POSSIBLE-NIL? ( GDL object message on GWL:MENU-FORM-CONTROL, keyword) POSSIBLE-NIL? ( GDL object message",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 137,
      "chunk_count": 216
    },
    "id": "cc9da6805b50eeffc3200c6fb990db89"
  },
  {
    "text": "( Object, geom-base) POSSIBLE-NIL? ( GDL object message on GWL:CHECKBOX-FORM-CONTROL, keyword) POSSIBLE-NIL? ( GDL object message on GWL:MENU-FORM-CONTROL, keyword) POSSIBLE-NIL? ( GDL object message on GWL:RADIO-FORM-CONTROL, keyword) POSSIBLE-NILS ( GDL object message on GEYSR::MENU, keyword) POSSIBLE-NILS ( GDL object message on GEYSR:TREE, keyword) POSSIBLE-NILS ( GDL object message on GWL:APPLICATION-MIXIN, keyword) POSSIBLE-NILS ( GDL object message on GWL:BASE-AJAX-GRAPHICS-SHEET, keyword) POSSIBLE-NILS ( GDL object message on GWL:BASE-AJAX-SHEET, keyword) POSSIBLE-NILS ( GDL object message on GWL:BASE-FORM-CONTROL, keyword) POSSIBLE-NILS ( GDL object message on GWL:BASE-HTML-GRAPHICS-SHEET, keyword) POSSIBLE-NILS ( GDL object message on GWL:BASE-HTML-SHEET, keyword) POSSIBLE-NILS ( GDL object message on GWL:CHECKBOX-FORM-CONTROL, keyword) POSSIBLE-NILS ( GDL object message on GWL::COLOR-MAP, keyword) POSSIBLE-NILS ( GDL object message on GWL:GRID-FORM-CONTROL, keyword)",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 138,
      "chunk_count": 216
    },
    "id": "86769ed095baa287e4282b48b2a6db7a"
  },
  {
    "text": "GDL object message on GWL:CHECKBOX-FORM-CONTROL, keyword) POSSIBLE-NILS ( GDL object message on GWL::COLOR-MAP, keyword) POSSIBLE-NILS ( GDL object message on GWL:GRID-FORM-CONTROL, keyword) POSSIBLE-NILS ( GDL object message on GWL:GWL-RULE-OBJECT, keyword) POSSIBLE-NILS ( GDL object message on GWL::LAYOUT-MIXIN, keyword) POSSIBLE-NILS ( GDL object message on GWL:MENU-FORM-CONTROL, keyword) POSSIBLE-NILS ( GDL object message on GWL:NODE-MIXIN, keyword) POSSIBLE-NILS ( GDL object message on GWL:RADIO-FORM-CONTROL, keyword) POSSIBLE-NILS ( GDL object message on GWL:SHEET-SECTION, keyword) POSSIBLE-NILS ( GDL object message on GWL::SKELETON-FORM-CONTROL, keyword) POSSIBLE-NILS ( GDL object message on GWL:SKELETON-UI-ELEMENT, keyword) POSSIBLE-NILS ( GDL object message on GWL:TEXT-FORM-CONTROL, keyword) POSSIBLE-NILS ( GDL object message on YADD:ASSEMBLY, keyword) POSSIBLE-NILS ( GDL object message on YADD::BASE-YADD-SHEET, keyword) POSSIBLE-NILS ( GDL object message on",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 139,
      "chunk_count": 216
    },
    "id": "7e64f30f95e2ad97e2dc1930b8e97ac8"
  },
  {
    "text": "OL, keyword) POSSIBLE-NILS ( GDL object message on YADD:ASSEMBLY, keyword) POSSIBLE-NILS ( GDL object message on YADD::BASE-YADD-SHEET, keyword) POSSIBLE-NILS ( GDL object message on YADD::MASTER-INDEX, keyword) POSSIBLE-NILS ( GDL object message on YADD:PACKAGE-DOKUMENTATION, keyword) POSSIBLE-NILS ( GDL object message on YADD::PACKAGE-FORM, keyword) POST-LOAD-FORM ( GDL object message on GDL-APP, keyword) POST-MAKE-FUNCTION ( GDL object message on GDL-APP, keyword) PRE-LOAD-FORM ( GDL object message on GDL-APP, keyword) PRE-MAKE-FUNCTION ( GDL object message on GDL-APP, keyword) PRESET-ALL? ( GDL object message on GEYSR::MENU, keyword) PRESET-ALL? ( GDL object message on GEYSR:TREE, keyword) PRESET-ALL? ( GDL object message on GWL:APPLICATION-MIXIN, keyword) PRESET-ALL? ( GDL object message on GWL:BASE-AJAX-GRAPHICS-SHEET, keyword) PRESET-ALL? ( GDL object message on GWL:BASE-AJAX-SHEET, keyword) PRESET-ALL? ( GDL object message on GWL:BASE-FORM-CONTROL, keyword) PRESET-ALL? ( GDL",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 140,
      "chunk_count": 216
    },
    "id": "0ba5b4608e4ea7775d320bc495e9fc86"
  },
  {
    "text": "age on GWL:BASE-AJAX-GRAPHICS-SHEET, keyword) PRESET-ALL? ( GDL object message on GWL:BASE-AJAX-SHEET, keyword) PRESET-ALL? ( GDL object message on GWL:BASE-FORM-CONTROL, keyword) PRESET-ALL? ( GDL object message on GWL:BASE-HTML-GRAPHICS-SHEET, keyword) PRESET-ALL? ( GDL object message on GWL:BASE-HTML-SHEET, keyword) PRESET-ALL? ( GDL object message on GWL:CHECKBOX-FORM-CONTROL, keyword) PRESET-ALL? ( GDL object message on GWL::COLOR-MAP, keyword) PRESET-ALL? ( GDL object message on GWL:GRID-FORM-CONTROL, keyword) PRESET-ALL? ( GDL object message on GWL:GWL-RULE-OBJECT, keyword) PRESET-ALL? ( GDL object message on GWL::LAYOUT-MIXIN, keyword) PRESET-ALL? ( GDL object message on GWL:MENU-FORM-CONTROL, keyword) PRESET-ALL? ( GDL object message on GWL:NODE-MIXIN, keyword) PRESET-ALL? ( GDL object message on GWL:RADIO-FORM-CONTROL, keyword) PRESET-ALL? ( GDL object message on GWL:SHEET-SECTION, keyword) PRESET-ALL? ( GDL object message on GWL::SKELETON-FORM-CONTROL, keyword) PRESET-ALL?",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 141,
      "chunk_count": 216
    },
    "id": "9139de9b4edee0297df7ae683d63fdc5"
  },
  {
    "text": "bject message on GWL:RADIO-FORM-CONTROL, keyword) PRESET-ALL? ( GDL object message on GWL:SHEET-SECTION, keyword) PRESET-ALL? ( GDL object message on GWL::SKELETON-FORM-CONTROL, keyword) PRESET-ALL? ( GDL object message on GWL:SKELETON-UI-ELEMENT, keyword) PRESET-ALL? ( GDL object message on GWL:TEXT-FORM-CONTROL, keyword) PRESET-ALL? ( GDL object message on YADD:ASSEMBLY, keyword) PRESET-ALL? ( GDL object message on YADD::BASE-YADD-SHEET, keyword) PRESET-ALL? ( GDL object message on YADD::MASTER-INDEX, keyword) PRESET-ALL? ( GDL object message on YADD:PACKAGE-DOKUMENTATION, keyword) PRESET-ALL? ( GDL object message on YADD::PACKAGE-FORM, keyword) PRESET? ( GDL object message on GWL:BASE-FORM-CONTROL, keyword) PRESET? ( GDL object message on GWL:CHECKBOX-FORM-CONTROL, keyword) PRESET? ( GDL object message on GWL:MENU-FORM-CONTROL, keyword) PRESET? ( GDL object message on GWL:RADIO-FORM-CONTROL, keyword) PRESET? ( GDL object message on GWL:TEXT-FORM-CONTROL, keyword) PREVIOUS ( GDL",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 142,
      "chunk_count": 216
    },
    "id": "842f46981d75b52f94742e8c987dc0fe"
  },
  {
    "text": "L object message on GWL:MENU-FORM-CONTROL, keyword) PRESET? ( GDL object message on GWL:RADIO-FORM-CONTROL, keyword) PRESET? ( GDL object message on GWL:TEXT-FORM-CONTROL, keyword) PREVIOUS ( GDL object message on VANILLA-MIXIN*, keyword) PRIMARY? ( GDL object message on GWL:BASE-FORM-CONTROL, keyword) PRIMARY? ( GDL object message on GWL:CHECKBOX-FORM-CONTROL, keyword) PRIMARY? ( GDL object message on GWL:GRID-FORM-CONTROL, keyword) PRIMARY? ( GDL object message on GWL:MENU-FORM-CONTROL, keyword) PRIMARY? ( GDL object message on GWL:RADIO-FORM-CONTROL, keyword) PRIMARY? ( GDL object message on GWL::SKELETON-FORM-CONTROL, keyword) PRIMARY? ( GDL object message on GWL:TEXT-FORM-CONTROL, keyword) print-characters ( Function, geom-base) print-messages ( Macro, gendl) print-variables ( Macro, gendl) PROCESS-COOKIES! ( GDL object message on GWL:APPLICATION-MIXIN, keyword) PROCESS-COOKIES! ( GDL object message on GWL:BASE-AJAX-GRAPHICS-SHEET, keyword) PROCESS-COOKIES! ( GDL object message",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 143,
      "chunk_count": 216
    },
    "id": "0e30eb16ab840b1ffec992b8759f7fce"
  },
  {
    "text": "gendl) PROCESS-COOKIES! ( GDL object message on GWL:APPLICATION-MIXIN, keyword) PROCESS-COOKIES! ( GDL object message on GWL:BASE-AJAX-GRAPHICS-SHEET, keyword) PROCESS-COOKIES! ( GDL object message on GWL:BASE-AJAX-SHEET, keyword) PROCESS-COOKIES! ( GDL object message on GWL:BASE-HTML-GRAPHICS-SHEET, keyword) PROCESS-COOKIES! ( GDL object message on GWL:BASE-HTML-SHEET, keyword) PROCESS-COOKIES! ( GDL object message on GWL::COLOR-MAP, keyword) PROCESS-COOKIES! ( GDL object message on GWL:GWL-RULE-OBJECT, keyword) PROCESS-COOKIES! ( GDL object message on GWL::LAYOUT-MIXIN, keyword) PROCESS-COOKIES! ( GDL object message on GWL:NODE-MIXIN, keyword) PROCESS-COOKIES! ( GDL object message on YADD:ASSEMBLY, keyword) PROCESS-COOKIES! ( GDL object message on YADD::BASE-YADD-SHEET, keyword) PROCESS-COOKIES! ( GDL object message on YADD::MASTER-INDEX, keyword) PROCESS-COOKIES! ( GDL object message on YADD:PACKAGE-DOKUMENTATION, keyword) PROCESS-COOKIES! ( GDL object message on",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 144,
      "chunk_count": 216
    },
    "id": "4bd2a2ac4fce04e832b8ec159a988529"
  },
  {
    "text": "COOKIES! ( GDL object message on YADD::MASTER-INDEX, keyword) PROCESS-COOKIES! ( GDL object message on YADD:PACKAGE-DOKUMENTATION, keyword) PROCESS-COOKIES! ( GDL object message on YADD::PACKAGE-FORM, keyword) proj-point-on-line ( Function, geom-base) projected-vector ( Function, geom-base) PROJECTION-DEPTH ( GDL object message on GLOBAL-FILLETED-POLYGON-PROJECTION, keyword) PROJECTION-DEPTH ( GDL object message on GLOBAL-POLYGON-PROJECTION, keyword) PROJECTION-VECTOR ( GDL object message on BASE-VIEW, keyword) PROJECTION-VECTOR ( GDL object message on GLOBAL-FILLETED-POLYGON-PROJECTION, keyword) PROJECTION-VECTOR ( GDL object message on GLOBAL-POLYGON-PROJECTION, keyword) PROJECTION-VECTOR ( GDL object message on GWL:BASE-AJAX-GRAPHICS-SHEET, keyword) PROJECTION-VECTOR ( GDL object message on GWL:WEB-DRAWING, keyword) PROMPT ( GDL object message on GWL:BASE-FORM-CONTROL, keyword) PROMPT ( GDL object message on GWL:CHECKBOX-FORM-CONTROL, keyword) PROMPT ( GDL object message on",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 145,
      "chunk_count": 216
    },
    "id": "35e26b79734ac69c899b8f716c2f5e7c"
  },
  {
    "text": "e on GWL:WEB-DRAWING, keyword) PROMPT ( GDL object message on GWL:BASE-FORM-CONTROL, keyword) PROMPT ( GDL object message on GWL:CHECKBOX-FORM-CONTROL, keyword) PROMPT ( GDL object message on GWL:MENU-FORM-CONTROL, keyword) PROMPT ( GDL object message on GWL:RADIO-FORM-CONTROL, keyword) PROMPT ( GDL object message on GWL:TEXT-FORM-CONTROL, keyword) publish-gwl-app ( Function, gwl) publish-shared ( Function, gwl) publish-string-content ( Function, gwl) pythagorize ( Function, geom-base) QUANTIFICATION ( Object, gendl) quaternion-to-matrix ( Function, geom-base) quaternion-to-rotation ( Function, geom-base) QUERY-PLIST ( GDL object message on GWL:BASE-HTML-SHEET, keyword) RADIAL-SEQUENCE ( Object, gendl) radians-to-degrees ( Function, geom-base) radians-to-grads ( Function, geom-base) RADIO-FORM-CONTROL ( Object, gwl) RADIUS ( GDL object message on ARC, keyword) RADIUS ( GDL object message on GEOM-BASE::ARCOID-MIXIN, keyword) RADIUS ( GDL object message on C-CYLINDER, keyword) RADIUS (",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 146,
      "chunk_count": 216
    },
    "id": "5e0956bd7504a79ee2e93991810876eb"
  },
  {
    "text": "FORM-CONTROL ( Object, gwl) RADIUS ( GDL object message on ARC, keyword) RADIUS ( GDL object message on GEOM-BASE::ARCOID-MIXIN, keyword) RADIUS ( GDL object message on C-CYLINDER, keyword) RADIUS ( GDL object message on CIRCLE, keyword) RADIUS ( GDL object message on CONE, keyword) RADIUS ( GDL object message on CONSTRAINED-ARC, keyword) RADIUS ( GDL object message on CYLINDER, keyword) RADIUS ( GDL object message on ELLIPSE, keyword) RADIUS ( GDL object message on PIE-CHART, keyword) RADIUS ( GDL object message on POINT, keyword) RADIUS ( GDL object message on SPHERE, keyword) RADIUS ( GDL object message on SPHERICAL-CAP, keyword) RADIUS ( GDL object message on TORUS, keyword) RADIUS-1 ( GDL object message on CONE, keyword) RADIUS-2 ( GDL object message on CONE, keyword) RADIUS-LIST ( GDL object message on GLOBAL-FILLETED-POLYGON-PROJECTION, keyword) RADIUS-LIST ( GDL object message on GLOBAL-FILLETED-POLYLINE, keyword) RADIUS-LIST ( GDL object message on",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 147,
      "chunk_count": 216
    },
    "id": "d57fee3cffedccd9d838bbacd55ff534"
  },
  {
    "text": "L object message on GLOBAL-FILLETED-POLYGON-PROJECTION, keyword) RADIUS-LIST ( GDL object message on GLOBAL-FILLETED-POLYLINE, keyword) RADIUS-LIST ( GDL object message on GEOM-BASE::GLOBAL-FILLETED-POLYLINE-MIXIN, keyword) RADIUS-LIST ( GDL object message on ROUTE-PIPE, keyword) RAPHAEL-CANVAS-ID ( GDL object message on GWL:WEB-DRAWING, keyword) RASTER-GRAPHICS ( GDL object message on GWL:BASE-AJAX-GRAPHICS-SHEET, keyword) read-safe-string ( Function, gendl) READ-SAVED-SLOTS ( GDL object message on GWL::LAYOUT-MIXIN, keyword) read-snapshot ( Function, gendl) READONLY? ( GDL object message on GWL:BASE-FORM-CONTROL, keyword) READONLY? ( GDL object message on GWL:CHECKBOX-FORM-CONTROL, keyword) READONLY? ( GDL object message on GWL:MENU-FORM-CONTROL, keyword) READONLY? ( GDL object message on GWL:RADIO-FORM-CONTROL, keyword) READONLY? ( GDL object message on GWL:TEXT-FORM-CONTROL, keyword) RECOVERY-EXPIRES-AT ( GDL object message on GWL:SESSION-CONTROL-MIXIN, keyword) RECOVERY-URL ( GDL",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 148,
      "chunk_count": 216
    },
    "id": "def047216e8e48612a02759489709046"
  },
  {
    "text": "n GWL:RADIO-FORM-CONTROL, keyword) READONLY? ( GDL object message on GWL:TEXT-FORM-CONTROL, keyword) RECOVERY-EXPIRES-AT ( GDL object message on GWL:SESSION-CONTROL-MIXIN, keyword) RECOVERY-URL ( GDL object message on GWL:SESSION-CONTROL-MIXIN, keyword) relativize-pathname ( Function, gwl) remove-plist-entry ( Function, gendl) RENDERER-MIXIN ( Object, geom-base) replace-substring ( Function, gendl) REPORT-POINT ( GDL object message on GWL:BASE-HTML-GRAPHICS-SHEET, keyword) RESET! ( GDL object message on GENDL::VARIABLE-SEQUENCE, keyword) RESPONDENT ( GDL object message on GEYSR::MENU, keyword) RESPONDENT ( GDL object message on GEYSR:TREE, keyword) RESPONDENT ( GDL object message on GWL:APPLICATION-MIXIN, keyword) RESPONDENT ( GDL object message on GWL:BASE-AJAX-GRAPHICS-SHEET, keyword) RESPONDENT ( GDL object message on GWL:BASE-AJAX-SHEET, keyword) RESPONDENT ( GDL object message on GWL:BASE-FORM-CONTROL, keyword) RESPONDENT ( GDL object message on GWL:BASE-HTML-GRAPHICS-SHEET,",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 149,
      "chunk_count": 216
    },
    "id": "622a4c22c3a27baa097d8b0a717f6fb3"
  },
  {
    "text": "SPONDENT ( GDL object message on GWL:BASE-AJAX-SHEET, keyword) RESPONDENT ( GDL object message on GWL:BASE-FORM-CONTROL, keyword) RESPONDENT ( GDL object message on GWL:BASE-HTML-GRAPHICS-SHEET, keyword) RESPONDENT ( GDL object message on GWL:BASE-HTML-SHEET, keyword) RESPONDENT ( GDL object message on GWL:CHECKBOX-FORM-CONTROL, keyword) RESPONDENT ( GDL object message on GWL::COLOR-MAP, keyword) RESPONDENT ( GDL object message on GWL:GRID-FORM-CONTROL, keyword) RESPONDENT ( GDL object message on GWL:GWL-RULE-OBJECT, keyword) RESPONDENT ( GDL object message on GWL::LAYOUT-MIXIN, keyword) RESPONDENT ( GDL object message on GWL:MENU-FORM-CONTROL, keyword) RESPONDENT ( GDL object message on GWL:NODE-MIXIN, keyword) RESPONDENT ( GDL object message on GWL:RADIO-FORM-CONTROL, keyword) RESPONDENT ( GDL object message on GWL:SHEET-SECTION, keyword) RESPONDENT ( GDL object message on GWL::SKELETON-FORM-CONTROL, keyword) RESPONDENT ( GDL object message on GWL:SKELETON-UI-ELEMENT, keyword)",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 150,
      "chunk_count": 216
    },
    "id": "b4685e7bf7f86d9f318f46ecf045864c"
  },
  {
    "text": "( GDL object message on GWL:SHEET-SECTION, keyword) RESPONDENT ( GDL object message on GWL::SKELETON-FORM-CONTROL, keyword) RESPONDENT ( GDL object message on GWL:SKELETON-UI-ELEMENT, keyword) RESPONDENT ( GDL object message on GWL:TEXT-FORM-CONTROL, keyword) RESPONDENT ( GDL object message on YADD:ASSEMBLY, keyword) RESPONDENT ( GDL object message on YADD::BASE-YADD-SHEET, keyword) RESPONDENT ( GDL object message on YADD::MASTER-INDEX, keyword) RESPONDENT ( GDL object message on YADD:PACKAGE-DOKUMENTATION, keyword) RESPONDENT ( GDL object message on YADD::PACKAGE-FORM, keyword) RESTART-APP-FUNCTION ( GDL object message on GDL-APP, keyword) RESTART-INIT-FUNCTION ( GDL object message on GDL-APP, keyword) RESTORE-ALL-DEFAULTS! ( GDL object message on VANILLA-MIXIN*, keyword) RESTORE-DEFAULTS! ( GDL object message on GWL:BASE-FORM-CONTROL, keyword) RESTORE-FORM-CONTROLS! ( GDL object message on GWL:BASE-HTML-SHEET, keyword) RESTORE-ROOT! ( GDL object message on VANILLA-MIXIN*, keyword)",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 151,
      "chunk_count": 216
    },
    "id": "f86cfa9cafea72897f678b1850b32777"
  },
  {
    "text": "S! ( GDL object message on GWL:BASE-FORM-CONTROL, keyword) RESTORE-FORM-CONTROLS! ( GDL object message on GWL:BASE-HTML-SHEET, keyword) RESTORE-ROOT! ( GDL object message on VANILLA-MIXIN*, keyword) RESTORE-SLOT-DEFAULT! ( GDL object message on VANILLA-MIXIN*, keyword) RESTORE-SLOT-DEFAULTS! ( GDL object message on VANILLA-MIXIN*, keyword) RESTORE-TREE! ( GDL object message on VANILLA-MIXIN*, keyword) RETURN-OBJECT ( GDL object message on GWL:APPLICATION-MIXIN, keyword) RETURN-OBJECT ( GDL object message on GWL:BASE-AJAX-GRAPHICS-SHEET, keyword) RETURN-OBJECT ( GDL object message on GWL:BASE-AJAX-SHEET, keyword) RETURN-OBJECT ( GDL object message on GWL:BASE-HTML-GRAPHICS-SHEET, keyword) RETURN-OBJECT ( GDL object message on GWL:BASE-HTML-SHEET, keyword) RETURN-OBJECT ( GDL object message on GWL::COLOR-MAP, keyword) RETURN-OBJECT ( GDL object message on GWL:GWL-RULE-OBJECT, keyword) RETURN-OBJECT ( GDL object message on GWL::LAYOUT-MIXIN, keyword) RETURN-OBJECT ( GDL object message on",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 152,
      "chunk_count": 216
    },
    "id": "289f8da52ae7c25753ae82c0b8d8242b"
  },
  {
    "text": "on GWL::COLOR-MAP, keyword) RETURN-OBJECT ( GDL object message on GWL:GWL-RULE-OBJECT, keyword) RETURN-OBJECT ( GDL object message on GWL::LAYOUT-MIXIN, keyword) RETURN-OBJECT ( GDL object message on GWL:NODE-MIXIN, keyword) RETURN-OBJECT ( GDL object message on YADD:ASSEMBLY, keyword) RETURN-OBJECT ( GDL object message on YADD::BASE-YADD-SHEET, keyword) RETURN-OBJECT ( GDL object message on YADD::MASTER-INDEX, keyword) RETURN-OBJECT ( GDL object message on YADD:PACKAGE-DOKUMENTATION, keyword) RETURN-OBJECT ( GDL object message on YADD::PACKAGE-FORM, keyword) reverse-vector ( Function, geom-base) roll ( Macro, geom-base) ROOT ( GDL object message on CL-LITE:CODEBASE-DIRECTORY-NODE, keyword) ROOT ( GDL object message on BASE-RULE-OBJECT, keyword) ROOT ( GDL object message on GDL-APP, keyword) ROOT ( GDL object message on GENDL::MATRIX-SEQUENCE, keyword) ROOT ( GDL object message on NULL-OBJECT, keyword) ROOT ( GDL object message on QUANTIFICATION, keyword) ROOT ( GDL object message on",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 153,
      "chunk_count": 216
    },
    "id": "2f7d1d61b32a7494a8c20cea0cbaf643"
  },
  {
    "text": "d) ROOT ( GDL object message on GENDL::MATRIX-SEQUENCE, keyword) ROOT ( GDL object message on NULL-OBJECT, keyword) ROOT ( GDL object message on QUANTIFICATION, keyword) ROOT ( GDL object message on GENDL::RADIAL-SEQUENCE, keyword) ROOT ( GDL object message on GENDL::STANDARD-SEQUENCE, keyword) ROOT ( GDL object message on VANILLA-MIXIN*, keyword) ROOT ( GDL object message on GENDL::VARIABLE-SEQUENCE, keyword) ROOT ( GDL object message on ANGULAR-DIMENSION, keyword) ROOT ( GDL object message on ARC, keyword) ROOT ( GDL object message on GEOM-BASE::ARCOID-MIXIN, keyword) ROOT ( GDL object message on BASE-COORDINATE-SYSTEM, keyword) ROOT ( GDL object message on BASE-DRAWING, keyword) ROOT ( GDL object message on BASE-OBJECT, keyword) ROOT ( GDL object message on BASE-VIEW, keyword) ROOT ( GDL object message on BEZIER-CURVE, keyword) ROOT ( GDL object message on BOX, keyword) ROOT ( GDL object message on C-CYLINDER, keyword) ROOT ( GDL object message on CENTER-LINE, keyword) ROOT ( GDL",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 154,
      "chunk_count": 216
    },
    "id": "e8c65366c2714fc61372561b19c433ac"
  },
  {
    "text": "L object message on BEZIER-CURVE, keyword) ROOT ( GDL object message on BOX, keyword) ROOT ( GDL object message on C-CYLINDER, keyword) ROOT ( GDL object message on CENTER-LINE, keyword) ROOT ( GDL object message on CIRCLE, keyword) ROOT ( GDL object message on CONE, keyword) ROOT ( GDL object message on CONSTRAINED-ARC, keyword) ROOT ( GDL object message on CONSTRAINED-FILLET, keyword) ROOT ( GDL object message on CONSTRAINED-LINE, keyword) ROOT ( GDL object message on CYLINDER, keyword) ROOT ( GDL object message on ELLIPSE, keyword) ROOT ( GDL object message on GENERAL-NOTE, keyword) ROOT ( GDL object message on GLOBAL-FILLETED-POLYGON-PROJECTION, keyword) ROOT ( GDL object message on GLOBAL-FILLETED-POLYLINE, keyword) ROOT ( GDL object message on GEOM-BASE::GLOBAL-FILLETED-POLYLINE-MIXIN, keyword) ROOT ( GDL object message on GLOBAL-POLYGON-PROJECTION, keyword) ROOT ( GDL object message on GLOBAL-POLYLINE, keyword) ROOT ( GDL object message on GEOM-BASE::GLOBAL-POLYLINE-MIXIN,",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 155,
      "chunk_count": 216
    },
    "id": "30fa1a0592182b648673dd002e9580f9"
  },
  {
    "text": "N, keyword) ROOT ( GDL object message on GLOBAL-POLYGON-PROJECTION, keyword) ROOT ( GDL object message on GLOBAL-POLYLINE, keyword) ROOT ( GDL object message on GEOM-BASE::GLOBAL-POLYLINE-MIXIN, keyword) ROOT ( GDL object message on HORIZONTAL-DIMENSION, keyword) ROOT ( GDL object message on LABEL, keyword) ROOT ( GDL object message on LEADER-LINE, keyword) ROOT ( GDL object message on LINE, keyword) ROOT ( GDL object message on LINEAR-DIMENSION, keyword) ROOT ( GDL object message on PARALLEL-DIMENSION, keyword) ROOT ( GDL object message on PIE-CHART, keyword) ROOT ( GDL object message on POINT, keyword) ROOT ( GDL object message on POINTS-DISPLAY, keyword) ROOT ( GDL object message on GEOM-BASE::RENDERER-MIXIN, keyword) ROOT ( GDL object message on ROUTE-PIPE, keyword) ROOT ( GDL object message on SAMPLE-DRAWING, keyword) ROOT ( GDL object message on SPHERE, keyword) ROOT ( GDL object message on SPHERICAL-CAP, keyword) ROOT ( GDL object message on TEXT-LINE, keyword) ROOT ( GDL",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 156,
      "chunk_count": 216
    },
    "id": "5beaf5674696a49505b27f58086a44aa"
  },
  {
    "text": "essage on SAMPLE-DRAWING, keyword) ROOT ( GDL object message on SPHERE, keyword) ROOT ( GDL object message on SPHERICAL-CAP, keyword) ROOT ( GDL object message on TEXT-LINE, keyword) ROOT ( GDL object message on TORUS, keyword) ROOT ( GDL object message on TYPESET-BLOCK, keyword) ROOT ( GDL object message on VERTICAL-DIMENSION, keyword) ROOT ( GDL object message on GEYSR::MENU, keyword) ROOT ( GDL object message on GEYSR:TREE, keyword) ROOT ( GDL object message on GWL:APPLICATION-MIXIN, keyword) ROOT ( GDL object message on GWL:BASE-AJAX-GRAPHICS-SHEET, keyword) ROOT ( GDL object message on GWL:BASE-AJAX-SHEET, keyword) ROOT ( GDL object message on GWL:BASE-FORM-CONTROL, keyword) ROOT ( GDL object message on GWL:BASE-HTML-GRAPHICS-SHEET, keyword) ROOT ( GDL object message on GWL:BASE-HTML-SHEET, keyword) ROOT ( GDL object message on GWL:CHECKBOX-FORM-CONTROL, keyword) ROOT ( GDL object message on GWL::COLOR-MAP, keyword) ROOT ( GDL object message on GWL::GEOMETRY-VIEW-MIXIN, keyword)",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 157,
      "chunk_count": 216
    },
    "id": "52a9a636df116b876b1b99639763c70b"
  },
  {
    "text": "SHEET, keyword) ROOT ( GDL object message on GWL:CHECKBOX-FORM-CONTROL, keyword) ROOT ( GDL object message on GWL::COLOR-MAP, keyword) ROOT ( GDL object message on GWL::GEOMETRY-VIEW-MIXIN, keyword) ROOT ( GDL object message on GWL:GRID-FORM-CONTROL, keyword) ROOT ( GDL object message on GWL:GWL-RULE-OBJECT, keyword) ROOT ( GDL object message on GWL::LAYOUT-MIXIN, keyword) ROOT ( GDL object message on GWL:MENU-FORM-CONTROL, keyword) ROOT ( GDL object message on GWL:NODE-MIXIN, keyword) ROOT ( GDL object message on GWL:RADIO-FORM-CONTROL, keyword) ROOT ( GDL object message on GWL:SESSION-CONTROL-MIXIN, keyword) ROOT ( GDL object message on GWL:SHEET-SECTION, keyword) ROOT ( GDL object message on GWL::SKELETON-FORM-CONTROL, keyword) ROOT ( GDL object message on GWL:SKELETON-UI-ELEMENT, keyword) ROOT ( GDL object message on GWL:TEXT-FORM-CONTROL, keyword) ROOT ( GDL object message on GWL:WEB-DRAWING, keyword) ROOT ( GDL object message on YADD:ASSEMBLY, keyword) ROOT ( GDL object message",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 158,
      "chunk_count": 216
    },
    "id": "9ae4f681fda826c250db77a07a7af1d2"
  },
  {
    "text": "rd) ROOT ( GDL object message on GWL:TEXT-FORM-CONTROL, keyword) ROOT ( GDL object message on GWL:WEB-DRAWING, keyword) ROOT ( GDL object message on YADD:ASSEMBLY, keyword) ROOT ( GDL object message on YADD::BASE-YADD-SHEET, keyword) ROOT ( GDL object message on YADD::MASTER-INDEX, keyword) ROOT ( GDL object message on YADD:PACKAGE-DOKUMENTATION, keyword) ROOT ( GDL object message on YADD::PACKAGE-FORM, keyword) ROOT-PATH ( GDL object message on VANILLA-MIXIN*, keyword) ROOT-PATH-LOCAL ( GDL object message on VANILLA-MIXIN*, keyword) ROOT? ( GDL object message on VANILLA-MIXIN*, keyword) rotate-point ( Function, geom-base) rotate-point-d ( Function, geom-base) rotate-vector ( Function, geom-base) rotate-vector-d ( Function, geom-base) rotation ( Function, geom-base) round-to-nearest ( Function, gendl) ROUTE-PIPE ( Object, geom-base) ROW-LABELS ( GDL object message on GWL:GRID-FORM-CONTROL, keyword) ROWS ( GDL object message on GWL:TEXT-FORM-CONTROL, keyword) RULE-DESCRIPTION ( GDL",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 159,
      "chunk_count": 216
    },
    "id": "ad18e9accf6908db21817eab2f56a837"
  },
  {
    "text": "tion, gendl) ROUTE-PIPE ( Object, geom-base) ROW-LABELS ( GDL object message on GWL:GRID-FORM-CONTROL, keyword) ROWS ( GDL object message on GWL:TEXT-FORM-CONTROL, keyword) RULE-DESCRIPTION ( GDL object message on BASE-RULE-OBJECT, keyword) RULE-DESCRIPTION ( GDL object message on GWL:GWL-RULE-OBJECT, keyword) RULE-DESCRIPTION-HELP ( GDL object message on BASE-RULE-OBJECT, keyword) RULE-DESCRIPTION-HELP ( GDL object message on GWL:GWL-RULE-OBJECT, keyword) RULE-RESULT ( GDL object message on BASE-RULE-OBJECT, keyword) RULE-RESULT ( GDL object message on GWL:GWL-RULE-OBJECT, keyword) RULE-RESULT-HELP ( GDL object message on BASE-RULE-OBJECT, keyword) RULE-RESULT-HELP ( GDL object message on GWL:GWL-RULE-OBJECT, keyword) RULE-TITLE ( GDL object message on BASE-RULE-OBJECT, keyword) RULE-TITLE ( GDL object message on GWL:GWL-RULE-OBJECT, keyword) SAFE-CHILDREN ( GDL object message on CL-LITE:CODEBASE-DIRECTORY-NODE, keyword) SAFE-CHILDREN ( GDL object message on BASE-RULE-OBJECT,",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 160,
      "chunk_count": 216
    },
    "id": "568477e3ced9ac0c6673e942e878a17c"
  },
  {
    "text": "E ( GDL object message on GWL:GWL-RULE-OBJECT, keyword) SAFE-CHILDREN ( GDL object message on CL-LITE:CODEBASE-DIRECTORY-NODE, keyword) SAFE-CHILDREN ( GDL object message on BASE-RULE-OBJECT, keyword) SAFE-CHILDREN ( GDL object message on GDL-APP, keyword) SAFE-CHILDREN ( GDL object message on GENDL::MATRIX-SEQUENCE, keyword) SAFE-CHILDREN ( GDL object message on NULL-OBJECT, keyword) SAFE-CHILDREN ( GDL object message on QUANTIFICATION, keyword) SAFE-CHILDREN ( GDL object message on GENDL::RADIAL-SEQUENCE, keyword) SAFE-CHILDREN ( GDL object message on GENDL::STANDARD-SEQUENCE, keyword) SAFE-CHILDREN ( GDL object message on VANILLA-MIXIN*, keyword) SAFE-CHILDREN ( GDL object message on GENDL::VARIABLE-SEQUENCE, keyword) SAFE-CHILDREN ( GDL object message on ANGULAR-DIMENSION, keyword) SAFE-CHILDREN ( GDL object message on ARC, keyword) SAFE-CHILDREN ( GDL object message on GEOM-BASE::ARCOID-MIXIN, keyword) SAFE-CHILDREN ( GDL object message on BASE-COORDINATE-SYSTEM, keyword)",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 161,
      "chunk_count": 216
    },
    "id": "3e252023416977b2c501647629b0d4d1"
  },
  {
    "text": "E-CHILDREN ( GDL object message on ARC, keyword) SAFE-CHILDREN ( GDL object message on GEOM-BASE::ARCOID-MIXIN, keyword) SAFE-CHILDREN ( GDL object message on BASE-COORDINATE-SYSTEM, keyword) SAFE-CHILDREN ( GDL object message on BASE-DRAWING, keyword) SAFE-CHILDREN ( GDL object message on BASE-OBJECT, keyword) SAFE-CHILDREN ( GDL object message on BASE-VIEW, keyword) SAFE-CHILDREN ( GDL object message on BEZIER-CURVE, keyword) SAFE-CHILDREN ( GDL object message on BOX, keyword) SAFE-CHILDREN ( GDL object message on C-CYLINDER, keyword) SAFE-CHILDREN ( GDL object message on CENTER-LINE, keyword) SAFE-CHILDREN ( GDL object message on CIRCLE, keyword) SAFE-CHILDREN ( GDL object message on CONE, keyword) SAFE-CHILDREN ( GDL object message on CONSTRAINED-ARC, keyword) SAFE-CHILDREN ( GDL object message on CONSTRAINED-FILLET, keyword) SAFE-CHILDREN ( GDL object message on CONSTRAINED-LINE, keyword) SAFE-CHILDREN ( GDL object message on CYLINDER, keyword) SAFE-CHILDREN ( GDL object message",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 162,
      "chunk_count": 216
    },
    "id": "5ba2c1a728cbf40a386f93c5e4b6b971"
  },
  {
    "text": "t message on CONSTRAINED-FILLET, keyword) SAFE-CHILDREN ( GDL object message on CONSTRAINED-LINE, keyword) SAFE-CHILDREN ( GDL object message on CYLINDER, keyword) SAFE-CHILDREN ( GDL object message on ELLIPSE, keyword) SAFE-CHILDREN ( GDL object message on GENERAL-NOTE, keyword) SAFE-CHILDREN ( GDL object message on GLOBAL-FILLETED-POLYGON-PROJECTION, keyword) SAFE-CHILDREN ( GDL object message on GLOBAL-FILLETED-POLYLINE, keyword) SAFE-CHILDREN ( GDL object message on GEOM-BASE::GLOBAL-FILLETED-POLYLINE-MIXIN, keyword) SAFE-CHILDREN ( GDL object message on GLOBAL-POLYGON-PROJECTION, keyword) SAFE-CHILDREN ( GDL object message on GLOBAL-POLYLINE, keyword) SAFE-CHILDREN ( GDL object message on GEOM-BASE::GLOBAL-POLYLINE-MIXIN, keyword) SAFE-CHILDREN ( GDL object message on HORIZONTAL-DIMENSION, keyword) SAFE-CHILDREN ( GDL object message on LABEL, keyword) SAFE-CHILDREN ( GDL object message on LEADER-LINE, keyword) SAFE-CHILDREN ( GDL object message on LINE, keyword) SAFE-CHILDREN (",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 163,
      "chunk_count": 216
    },
    "id": "407b5025a96a2515372171b693e5ebd4"
  },
  {
    "text": "SION, keyword) SAFE-CHILDREN ( GDL object message on LABEL, keyword) SAFE-CHILDREN ( GDL object message on LEADER-LINE, keyword) SAFE-CHILDREN ( GDL object message on LINE, keyword) SAFE-CHILDREN ( GDL object message on LINEAR-DIMENSION, keyword) SAFE-CHILDREN ( GDL object message on PARALLEL-DIMENSION, keyword) SAFE-CHILDREN ( GDL object message on PIE-CHART, keyword) SAFE-CHILDREN ( GDL object message on POINT, keyword) SAFE-CHILDREN ( GDL object message on POINTS-DISPLAY, keyword) SAFE-CHILDREN ( GDL object message on GEOM-BASE::RENDERER-MIXIN, keyword) SAFE-CHILDREN ( GDL object message on ROUTE-PIPE, keyword) SAFE-CHILDREN ( GDL object message on SAMPLE-DRAWING, keyword) SAFE-CHILDREN ( GDL object message on SPHERE, keyword) SAFE-CHILDREN ( GDL object message on SPHERICAL-CAP, keyword) SAFE-CHILDREN ( GDL object message on TEXT-LINE, keyword) SAFE-CHILDREN ( GDL object message on TORUS, keyword) SAFE-CHILDREN ( GDL object message on TYPESET-BLOCK, keyword) SAFE-CHILDREN ( GDL",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 164,
      "chunk_count": 216
    },
    "id": "92a8b6b4c9fb032967aaba64ed4ca54a"
  },
  {
    "text": ") SAFE-CHILDREN ( GDL object message on TEXT-LINE, keyword) SAFE-CHILDREN ( GDL object message on TORUS, keyword) SAFE-CHILDREN ( GDL object message on TYPESET-BLOCK, keyword) SAFE-CHILDREN ( GDL object message on VERTICAL-DIMENSION, keyword) SAFE-CHILDREN ( GDL object message on GEYSR::MENU, keyword) SAFE-CHILDREN ( GDL object message on GEYSR:TREE, keyword) SAFE-CHILDREN ( GDL object message on GWL:APPLICATION-MIXIN, keyword) SAFE-CHILDREN ( GDL object message on GWL:BASE-AJAX-GRAPHICS-SHEET, keyword) SAFE-CHILDREN ( GDL object message on GWL:BASE-AJAX-SHEET, keyword) SAFE-CHILDREN ( GDL object message on GWL:BASE-FORM-CONTROL, keyword) SAFE-CHILDREN ( GDL object message on GWL:BASE-HTML-GRAPHICS-SHEET, keyword) SAFE-CHILDREN ( GDL object message on GWL:BASE-HTML-SHEET, keyword) SAFE-CHILDREN ( GDL object message on GWL:CHECKBOX-FORM-CONTROL, keyword) SAFE-CHILDREN ( GDL object message on GWL::COLOR-MAP, keyword) SAFE-CHILDREN ( GDL object message on GWL::GEOMETRY-VIEW-MIXIN,",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 165,
      "chunk_count": 216
    },
    "id": "14ce9d3df484e8e6bb079e1a6e2f03fd"
  },
  {
    "text": "LDREN ( GDL object message on GWL:CHECKBOX-FORM-CONTROL, keyword) SAFE-CHILDREN ( GDL object message on GWL::COLOR-MAP, keyword) SAFE-CHILDREN ( GDL object message on GWL::GEOMETRY-VIEW-MIXIN, keyword) SAFE-CHILDREN ( GDL object message on GWL:GRID-FORM-CONTROL, keyword) SAFE-CHILDREN ( GDL object message on GWL:GWL-RULE-OBJECT, keyword) SAFE-CHILDREN ( GDL object message on GWL::LAYOUT-MIXIN, keyword) SAFE-CHILDREN ( GDL object message on GWL:MENU-FORM-CONTROL, keyword) SAFE-CHILDREN ( GDL object message on GWL:NODE-MIXIN, keyword) SAFE-CHILDREN ( GDL object message on GWL:RADIO-FORM-CONTROL, keyword) SAFE-CHILDREN ( GDL object message on GWL:SESSION-CONTROL-MIXIN, keyword) SAFE-CHILDREN ( GDL object message on GWL:SHEET-SECTION, keyword) SAFE-CHILDREN ( GDL object message on GWL::SKELETON-FORM-CONTROL, keyword) SAFE-CHILDREN ( GDL object message on GWL:SKELETON-UI-ELEMENT, keyword) SAFE-CHILDREN ( GDL object message on GWL:TEXT-FORM-CONTROL, keyword) SAFE-CHILDREN ( GDL object",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 166,
      "chunk_count": 216
    },
    "id": "af52d62c5ed29e1a39eb5a982b47ddcd"
  },
  {
    "text": "N-FORM-CONTROL, keyword) SAFE-CHILDREN ( GDL object message on GWL:SKELETON-UI-ELEMENT, keyword) SAFE-CHILDREN ( GDL object message on GWL:TEXT-FORM-CONTROL, keyword) SAFE-CHILDREN ( GDL object message on GWL:WEB-DRAWING, keyword) SAFE-CHILDREN ( GDL object message on YADD:ASSEMBLY, keyword) SAFE-CHILDREN ( GDL object message on YADD::BASE-YADD-SHEET, keyword) SAFE-CHILDREN ( GDL object message on YADD::MASTER-INDEX, keyword) SAFE-CHILDREN ( GDL object message on YADD:PACKAGE-DOKUMENTATION, keyword) SAFE-CHILDREN ( GDL object message on YADD::PACKAGE-FORM, keyword) safe-float ( Function, gendl) SAFE-HIDDEN-CHILDREN ( GDL object message on VANILLA-MIXIN*, keyword) safe-sort ( Function, gendl) same-direction-vectors? ( Function, geom-base) SAMPLE-DRAWING ( Object, geom-base) SANITY-ERROR ( GDL object message on GWL:BASE-HTML-SHEET, keyword) SAVED-SLOTS ( GDL object message on GWL::LAYOUT-MIXIN, keyword) scalar*matrix ( Function, geom-base) scalar*vector ( Function, geom-base) SCALED? (",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 167,
      "chunk_count": 216
    },
    "id": "3ea7b985c885b8e579175510d08d2318"
  },
  {
    "text": "DL object message on GWL:BASE-HTML-SHEET, keyword) SAVED-SLOTS ( GDL object message on GWL::LAYOUT-MIXIN, keyword) scalar*matrix ( Function, geom-base) scalar*vector ( Function, geom-base) SCALED? ( GDL object message on POINT, keyword) SELECT-CHOICES ( GDL object message on GWL:BASE-HTML-SHEET, keyword) SESSION-CLEAN-UP ( GDL object message on GWL:SESSION-CONTROL-MIXIN, keyword) session-control-auto-refresh ( Function, gwl) SESSION-CONTROL-MIXIN ( Object, gwl) SESSION-DURATION ( GDL object message on GWL:SESSION-CONTROL-MIXIN, keyword) session-report ( Function, gwl) SET-EXPIRES-AT ( GDL object message on GWL:SESSION-CONTROL-MIXIN, keyword) set-format-slot ( Macro, gendl) SET-SLOT! ( GDL object message on VANILLA-MIXIN*, keyword) SET-SLOTS! ( GDL object message on VANILLA-MIXIN*, keyword) SHEET-SECTION ( Object, gwl) SHORT-SEGMENT-LENGTH ( GDL object message on CENTER-LINE, keyword) SHOW-SUPPORTED-FLAG ( GDL object message on YADD:PACKAGE-DOKUMENTATION, keyword) SHOW-TITLE? ( GDL",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 168,
      "chunk_count": 216
    },
    "id": "c87cb91ae2369f5225a155bfd7cc6d5e"
  },
  {
    "text": "SHEET-SECTION ( Object, gwl) SHORT-SEGMENT-LENGTH ( GDL object message on CENTER-LINE, keyword) SHOW-SUPPORTED-FLAG ( GDL object message on YADD:PACKAGE-DOKUMENTATION, keyword) SHOW-TITLE? ( GDL object message on GWL:APPLICATION-MIXIN, keyword) SHOW-TITLE? ( GDL object message on GWL::LAYOUT-MIXIN, keyword) SHOW-TITLE? ( GDL object message on GWL:NODE-MIXIN, keyword) SIZE ( GDL object message on CENTER-LINE, keyword) SIZE ( GDL object message on GWL:BASE-FORM-CONTROL, keyword) SIZE ( GDL object message on GWL:CHECKBOX-FORM-CONTROL, keyword) SIZE ( GDL object message on GWL:MENU-FORM-CONTROL, keyword) SIZE ( GDL object message on GWL:RADIO-FORM-CONTROL, keyword) SIZE ( GDL object message on GWL:TEXT-FORM-CONTROL, keyword) SKELETON-FORM-CONTROL ( Object, gwl) SKELETON-UI-ELEMENT ( Object, gwl) SLOT-DOCUMENTATION ( GDL object message on VANILLA-MIXIN*, keyword) SLOT-SOURCE ( GDL object message on VANILLA-MIXIN*, keyword) SLOT-STATUS ( GDL object message on VANILLA-MIXIN*, keyword)",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 169,
      "chunk_count": 216
    },
    "id": "250a3c08cb53ff033f65afb170565353"
  },
  {
    "text": "wl) SLOT-DOCUMENTATION ( GDL object message on VANILLA-MIXIN*, keyword) SLOT-SOURCE ( GDL object message on VANILLA-MIXIN*, keyword) SLOT-STATUS ( GDL object message on VANILLA-MIXIN*, keyword) SNAP-TO ( GDL object message on BASE-VIEW, keyword) sort-points-along-vector ( Function, geom-base) SOURCE-FILES-TO-IGNORE ( GDL object message on CL-LITE:CODEBASE-DIRECTORY-NODE, keyword) SPECIAL-SUBDIR-NAMES ( GDL object message on CL-LITE:CODEBASE-DIRECTORY-NODE, keyword) SPHERE ( Object, geom-base) SPHERE-CENTER ( GDL object message on SPHERICAL-CAP, keyword) SPHERE-RADIUS ( GDL object message on SPHERICAL-CAP, keyword) SPHERICAL-CAP ( Object, geom-base) split ( Function, gendl) SRC ( GDL object message on GWL:BASE-FORM-CONTROL, keyword) SRC ( GDL object message on GWL:CHECKBOX-FORM-CONTROL, keyword) SRC ( GDL object message on GWL:MENU-FORM-CONTROL, keyword) SRC ( GDL object message on GWL:RADIO-FORM-CONTROL, keyword) SRC ( GDL object message on GWL:TEXT-FORM-CONTROL, keyword)",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 170,
      "chunk_count": 216
    },
    "id": "9b59fedc871857d0889665bcea4ed38a"
  },
  {
    "text": "word) SRC ( GDL object message on GWL:MENU-FORM-CONTROL, keyword) SRC ( GDL object message on GWL:RADIO-FORM-CONTROL, keyword) SRC ( GDL object message on GWL:TEXT-FORM-CONTROL, keyword) STANDARD-SAVED-SLOTS ( GDL object message on GWL::LAYOUT-MIXIN, keyword) STANDARD-SEQUENCE ( Object, gendl) STANDARD-VIEWS ( GDL object message on GWL:APPLICATION-MIXIN, keyword) STANDARD-VIEWS ( GDL object message on GWL:BASE-AJAX-GRAPHICS-SHEET, keyword) STANDARD-VIEWS ( GDL object message on GWL:BASE-HTML-GRAPHICS-SHEET, keyword) STANDARD-VIEWS ( GDL object message on GWL:GWL-RULE-OBJECT, keyword) STANDARD-VIEWS ( GDL object message on GWL::LAYOUT-MIXIN, keyword) STANDARD-VIEWS ( GDL object message on GWL:NODE-MIXIN, keyword) START ( GDL object message on ARC, keyword) START ( GDL object message on C-CYLINDER, keyword) START ( GDL object message on CONSTRAINED-LINE, keyword) START ( GDL object message on CYLINDER, keyword) START ( GDL object message on GENERAL-NOTE, keyword) START ( GDL object",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 171,
      "chunk_count": 216
    },
    "id": "f2d430d847d82143431d137ca9235427"
  },
  {
    "text": "LINDER, keyword) START ( GDL object message on CONSTRAINED-LINE, keyword) START ( GDL object message on CYLINDER, keyword) START ( GDL object message on GENERAL-NOTE, keyword) START ( GDL object message on LINE, keyword) START ( GDL object message on TEXT-LINE, keyword) START ( GDL object message on TYPESET-BLOCK, keyword) START-ANGLE ( GDL object message on ARC, keyword) START-ANGLE ( GDL object message on GEOM-BASE::ARCOID-MIXIN, keyword) START-ANGLE ( GDL object message on C-CYLINDER, keyword) START-ANGLE ( GDL object message on CIRCLE, keyword) START-ANGLE ( GDL object message on CONE, keyword) START-ANGLE ( GDL object message on CONSTRAINED-ARC, keyword) START-ANGLE ( GDL object message on CONSTRAINED-FILLET, keyword) START-ANGLE ( GDL object message on CYLINDER, keyword) START-ANGLE ( GDL object message on ELLIPSE, keyword) START-ANGLE ( GDL object message on POINT, keyword) START-ANGLE ( GDL object message on SPHERE, keyword) START-ANGLE ( GDL object message on SPHERICAL-CAP,",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 172,
      "chunk_count": 216
    },
    "id": "606d3bb36049702d2dedac7b2bd79f49"
  },
  {
    "text": "( GDL object message on ELLIPSE, keyword) START-ANGLE ( GDL object message on POINT, keyword) START-ANGLE ( GDL object message on SPHERE, keyword) START-ANGLE ( GDL object message on SPHERICAL-CAP, keyword) START-ANGLE ( GDL object message on TORUS, keyword) START-HORIZONTAL-ARC ( GDL object message on POINT, keyword) START-HORIZONTAL-ARC ( GDL object message on SPHERE, keyword) START-LINE-INDEX ( GDL object message on TYPESET-BLOCK, keyword) START-POINT ( GDL object message on ANGULAR-DIMENSION, keyword) START-POINT ( GDL object message on HORIZONTAL-DIMENSION, keyword) START-POINT ( GDL object message on LINEAR-DIMENSION, keyword) START-POINT ( GDL object message on PARALLEL-DIMENSION, keyword) START-POINT ( GDL object message on VERTICAL-DIMENSION, keyword) START-VERTICAL-ARC ( GDL object message on POINT, keyword) START-VERTICAL-ARC ( GDL object message on SPHERE, keyword) status-message ( Function, gendl) STRAIGHTS ( GDL object message on",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 173,
      "chunk_count": 216
    },
    "id": "3d0692944181cca6243c1cafe3c75104"
  },
  {
    "text": "ct message on POINT, keyword) START-VERTICAL-ARC ( GDL object message on SPHERE, keyword) status-message ( Function, gendl) STRAIGHTS ( GDL object message on GEOM-BASE::GLOBAL-FILLETED-POLYLINE-MIXIN, keyword) string-append ( Function, gendl) STRINGS ( GDL object message on GENERAL-NOTE, keyword) STRINGS ( GDL object message on LABEL, keyword) STRINGS-FOR-DISPLAY ( GDL object message on CL-LITE:CODEBASE-DIRECTORY-NODE, keyword) STRINGS-FOR-DISPLAY ( GDL object message on BASE-RULE-OBJECT, keyword) STRINGS-FOR-DISPLAY ( GDL object message on GDL-APP, keyword) STRINGS-FOR-DISPLAY ( GDL object message on GENDL::MATRIX-SEQUENCE, keyword) STRINGS-FOR-DISPLAY ( GDL object message on NULL-OBJECT, keyword) STRINGS-FOR-DISPLAY ( GDL object message on QUANTIFICATION, keyword) STRINGS-FOR-DISPLAY ( GDL object message on GENDL::RADIAL-SEQUENCE, keyword) STRINGS-FOR-DISPLAY ( GDL object message on GENDL::STANDARD-SEQUENCE, keyword) STRINGS-FOR-DISPLAY ( GDL object message on VANILLA-MIXIN*,",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 174,
      "chunk_count": 216
    },
    "id": "f06fc54f789c4ed07c0ca355cd3ab70c"
  },
  {
    "text": "DL object message on GENDL::RADIAL-SEQUENCE, keyword) STRINGS-FOR-DISPLAY ( GDL object message on GENDL::STANDARD-SEQUENCE, keyword) STRINGS-FOR-DISPLAY ( GDL object message on VANILLA-MIXIN*, keyword) STRINGS-FOR-DISPLAY ( GDL object message on GENDL::VARIABLE-SEQUENCE, keyword) STRINGS-FOR-DISPLAY ( GDL object message on ANGULAR-DIMENSION, keyword) STRINGS-FOR-DISPLAY ( GDL object message on ARC, keyword) STRINGS-FOR-DISPLAY ( GDL object message on GEOM-BASE::ARCOID-MIXIN, keyword) STRINGS-FOR-DISPLAY ( GDL object message on BASE-COORDINATE-SYSTEM, keyword) STRINGS-FOR-DISPLAY ( GDL object message on BASE-DRAWING, keyword) STRINGS-FOR-DISPLAY ( GDL object message on BASE-OBJECT, keyword) STRINGS-FOR-DISPLAY ( GDL object message on BASE-VIEW, keyword) STRINGS-FOR-DISPLAY ( GDL object message on BEZIER-CURVE, keyword) STRINGS-FOR-DISPLAY ( GDL object message on BOX, keyword) STRINGS-FOR-DISPLAY ( GDL object message on C-CYLINDER, keyword) STRINGS-FOR-DISPLAY ( GDL object message on",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 175,
      "chunk_count": 216
    },
    "id": "07d102564cc0c4f1a15c122dbe7b5033"
  },
  {
    "text": "age on BEZIER-CURVE, keyword) STRINGS-FOR-DISPLAY ( GDL object message on BOX, keyword) STRINGS-FOR-DISPLAY ( GDL object message on C-CYLINDER, keyword) STRINGS-FOR-DISPLAY ( GDL object message on CENTER-LINE, keyword) STRINGS-FOR-DISPLAY ( GDL object message on CIRCLE, keyword) STRINGS-FOR-DISPLAY ( GDL object message on CONE, keyword) STRINGS-FOR-DISPLAY ( GDL object message on CONSTRAINED-ARC, keyword) STRINGS-FOR-DISPLAY ( GDL object message on CONSTRAINED-FILLET, keyword) STRINGS-FOR-DISPLAY ( GDL object message on CONSTRAINED-LINE, keyword) STRINGS-FOR-DISPLAY ( GDL object message on CYLINDER, keyword) STRINGS-FOR-DISPLAY ( GDL object message on ELLIPSE, keyword) STRINGS-FOR-DISPLAY ( GDL object message on GENERAL-NOTE, keyword) STRINGS-FOR-DISPLAY ( GDL object message on GLOBAL-FILLETED-POLYGON-PROJECTION, keyword) STRINGS-FOR-DISPLAY ( GDL object message on GLOBAL-FILLETED-POLYLINE, keyword) STRINGS-FOR-DISPLAY ( GDL object message on GEOM-BASE::GLOBAL-FILLETED-POLYLINE-MIXIN,",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 176,
      "chunk_count": 216
    },
    "id": "73dcb2d870585f2c5f55509fe70ce661"
  },
  {
    "text": "ETED-POLYGON-PROJECTION, keyword) STRINGS-FOR-DISPLAY ( GDL object message on GLOBAL-FILLETED-POLYLINE, keyword) STRINGS-FOR-DISPLAY ( GDL object message on GEOM-BASE::GLOBAL-FILLETED-POLYLINE-MIXIN, keyword) STRINGS-FOR-DISPLAY ( GDL object message on GLOBAL-POLYGON-PROJECTION, keyword) STRINGS-FOR-DISPLAY ( GDL object message on GLOBAL-POLYLINE, keyword) STRINGS-FOR-DISPLAY ( GDL object message on GEOM-BASE::GLOBAL-POLYLINE-MIXIN, keyword) STRINGS-FOR-DISPLAY ( GDL object message on HORIZONTAL-DIMENSION, keyword) STRINGS-FOR-DISPLAY ( GDL object message on LABEL, keyword) STRINGS-FOR-DISPLAY ( GDL object message on LEADER-LINE, keyword) STRINGS-FOR-DISPLAY ( GDL object message on LINE, keyword) STRINGS-FOR-DISPLAY ( GDL object message on LINEAR-DIMENSION, keyword) STRINGS-FOR-DISPLAY ( GDL object message on PARALLEL-DIMENSION, keyword) STRINGS-FOR-DISPLAY ( GDL object message on PIE-CHART, keyword) STRINGS-FOR-DISPLAY ( GDL object message on POINT, keyword) STRINGS-FOR-DISPLAY ( GDL",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 177,
      "chunk_count": 216
    },
    "id": "29817a2564a741e3cc061811c2d45dd8"
  },
  {
    "text": "DL object message on PARALLEL-DIMENSION, keyword) STRINGS-FOR-DISPLAY ( GDL object message on PIE-CHART, keyword) STRINGS-FOR-DISPLAY ( GDL object message on POINT, keyword) STRINGS-FOR-DISPLAY ( GDL object message on POINTS-DISPLAY, keyword) STRINGS-FOR-DISPLAY ( GDL object message on GEOM-BASE::RENDERER-MIXIN, keyword) STRINGS-FOR-DISPLAY ( GDL object message on ROUTE-PIPE, keyword) STRINGS-FOR-DISPLAY ( GDL object message on SAMPLE-DRAWING, keyword) STRINGS-FOR-DISPLAY ( GDL object message on SPHERE, keyword) STRINGS-FOR-DISPLAY ( GDL object message on SPHERICAL-CAP, keyword) STRINGS-FOR-DISPLAY ( GDL object message on TEXT-LINE, keyword) STRINGS-FOR-DISPLAY ( GDL object message on TORUS, keyword) STRINGS-FOR-DISPLAY ( GDL object message on TYPESET-BLOCK, keyword) STRINGS-FOR-DISPLAY ( GDL object message on VERTICAL-DIMENSION, keyword) STRINGS-FOR-DISPLAY ( GDL object message on GEYSR::MENU, keyword) STRINGS-FOR-DISPLAY ( GDL object message on GEYSR:TREE, keyword)",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 178,
      "chunk_count": 216
    },
    "id": "bb0337f8b70cbbbab1b4b9852ceac831"
  },
  {
    "text": "GDL object message on VERTICAL-DIMENSION, keyword) STRINGS-FOR-DISPLAY ( GDL object message on GEYSR::MENU, keyword) STRINGS-FOR-DISPLAY ( GDL object message on GEYSR:TREE, keyword) STRINGS-FOR-DISPLAY ( GDL object message on GWL:APPLICATION-MIXIN, keyword) STRINGS-FOR-DISPLAY ( GDL object message on GWL:BASE-AJAX-GRAPHICS-SHEET, keyword) STRINGS-FOR-DISPLAY ( GDL object message on GWL:BASE-AJAX-SHEET, keyword) STRINGS-FOR-DISPLAY ( GDL object message on GWL:BASE-FORM-CONTROL, keyword) STRINGS-FOR-DISPLAY ( GDL object message on GWL:BASE-HTML-GRAPHICS-SHEET, keyword) STRINGS-FOR-DISPLAY ( GDL object message on GWL:BASE-HTML-SHEET, keyword) STRINGS-FOR-DISPLAY ( GDL object message on GWL:CHECKBOX-FORM-CONTROL, keyword) STRINGS-FOR-DISPLAY ( GDL object message on GWL::COLOR-MAP, keyword) STRINGS-FOR-DISPLAY ( GDL object message on GWL::GEOMETRY-VIEW-MIXIN, keyword) STRINGS-FOR-DISPLAY ( GDL object message on GWL:GRID-FORM-CONTROL, keyword) STRINGS-FOR-DISPLAY ( GDL object message on",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 179,
      "chunk_count": 216
    },
    "id": "ab55e4e4ad3f25336b359f003c7a5529"
  },
  {
    "text": "INGS-FOR-DISPLAY ( GDL object message on GWL::GEOMETRY-VIEW-MIXIN, keyword) STRINGS-FOR-DISPLAY ( GDL object message on GWL:GRID-FORM-CONTROL, keyword) STRINGS-FOR-DISPLAY ( GDL object message on GWL:GWL-RULE-OBJECT, keyword) STRINGS-FOR-DISPLAY ( GDL object message on GWL::LAYOUT-MIXIN, keyword) STRINGS-FOR-DISPLAY ( GDL object message on GWL:MENU-FORM-CONTROL, keyword) STRINGS-FOR-DISPLAY ( GDL object message on GWL:NODE-MIXIN, keyword) STRINGS-FOR-DISPLAY ( GDL object message on GWL:RADIO-FORM-CONTROL, keyword) STRINGS-FOR-DISPLAY ( GDL object message on GWL:SESSION-CONTROL-MIXIN, keyword) STRINGS-FOR-DISPLAY ( GDL object message on GWL:SHEET-SECTION, keyword) STRINGS-FOR-DISPLAY ( GDL object message on GWL::SKELETON-FORM-CONTROL, keyword) STRINGS-FOR-DISPLAY ( GDL object message on GWL:SKELETON-UI-ELEMENT, keyword) STRINGS-FOR-DISPLAY ( GDL object message on GWL:TEXT-FORM-CONTROL, keyword) STRINGS-FOR-DISPLAY ( GDL object message on GWL:WEB-DRAWING, keyword) STRINGS-FOR-DISPLAY (",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 180,
      "chunk_count": 216
    },
    "id": "fc76cda27da1c7f0300acc78298b1afa"
  },
  {
    "text": ":SKELETON-UI-ELEMENT, keyword) STRINGS-FOR-DISPLAY ( GDL object message on GWL:TEXT-FORM-CONTROL, keyword) STRINGS-FOR-DISPLAY ( GDL object message on GWL:WEB-DRAWING, keyword) STRINGS-FOR-DISPLAY ( GDL object message on YADD:ASSEMBLY, keyword) STRINGS-FOR-DISPLAY ( GDL object message on YADD::BASE-YADD-SHEET, keyword) STRINGS-FOR-DISPLAY ( GDL object message on YADD::MASTER-INDEX, keyword) STRINGS-FOR-DISPLAY ( GDL object message on YADD:PACKAGE-DOKUMENTATION, keyword) STRINGS-FOR-DISPLAY ( GDL object message on YADD::PACKAGE-FORM, keyword) STYLE ( GDL object message on GWL:BASE-FORM-CONTROL, keyword) STYLE ( GDL object message on GWL:CHECKBOX-FORM-CONTROL, keyword) STYLE ( GDL object message on GWL:MENU-FORM-CONTROL, keyword) STYLE ( GDL object message on GWL:RADIO-FORM-CONTROL, keyword) STYLE ( GDL object message on GWL:TEXT-FORM-CONTROL, keyword) subtract-vectors ( Function, geom-base) sum-elements ( Macro, gendl) SUPPRESS-DISPLAY? ( GDL object message on BASE-RULE-OBJECT,",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 181,
      "chunk_count": 216
    },
    "id": "3237274c3b13f99da007b93a39ccf708"
  },
  {
    "text": "STYLE ( GDL object message on GWL:TEXT-FORM-CONTROL, keyword) subtract-vectors ( Function, geom-base) sum-elements ( Macro, gendl) SUPPRESS-DISPLAY? ( GDL object message on BASE-RULE-OBJECT, keyword) SUPPRESS-DISPLAY? ( GDL object message on GWL:GWL-RULE-OBJECT, keyword) SVG-CLASS ( GDL object message on BASE-DRAWING, keyword) SVG-CLASS ( GDL object message on SAMPLE-DRAWING, keyword) SVG-CLASS ( GDL object message on GWL:BASE-AJAX-GRAPHICS-SHEET, keyword) SVG-CLASS ( GDL object message on GWL:WEB-DRAWING, keyword) SYMBOLS-FOR-INDEX ( GDL object message on YADD::MASTER-INDEX, keyword) TABINDEX ( GDL object message on GWL:BASE-FORM-CONTROL, keyword) TABINDEX ( GDL object message on GWL:CHECKBOX-FORM-CONTROL, keyword) TABINDEX ( GDL object message on GWL:MENU-FORM-CONTROL, keyword) TABINDEX ( GDL object message on GWL:RADIO-FORM-CONTROL, keyword) TABINDEX ( GDL object message on GWL:TEXT-FORM-CONTROL, keyword) TABLE-CLASS ( GDL object message on GWL:RADIO-FORM-CONTROL, keyword) TANGENT",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 182,
      "chunk_count": 216
    },
    "id": "77faadcd66bc522cace06a5c39f7ada5"
  },
  {
    "text": "( GDL object message on GWL:RADIO-FORM-CONTROL, keyword) TABINDEX ( GDL object message on GWL:TEXT-FORM-CONTROL, keyword) TABLE-CLASS ( GDL object message on GWL:RADIO-FORM-CONTROL, keyword) TANGENT ( GDL object message on ARC, keyword) TANGENT-POINT ( GDL object message on CONSTRAINED-LINE, keyword) TARGET ( GDL object message on GWL:APPLICATION-MIXIN, keyword) TARGET ( GDL object message on GWL:BASE-AJAX-GRAPHICS-SHEET, keyword) TARGET ( GDL object message on GWL:BASE-AJAX-SHEET, keyword) TARGET ( GDL object message on GWL:BASE-HTML-GRAPHICS-SHEET, keyword) TARGET ( GDL object message on GWL:BASE-HTML-SHEET, keyword) TARGET ( GDL object message on GWL::COLOR-MAP, keyword) TARGET ( GDL object message on GWL:GWL-RULE-OBJECT, keyword) TARGET ( GDL object message on GWL::LAYOUT-MIXIN, keyword) TARGET ( GDL object message on GWL:NODE-MIXIN, keyword) TARGET ( GDL object message on YADD:ASSEMBLY, keyword) TARGET ( GDL object message on YADD::BASE-YADD-SHEET, keyword) TARGET ( GDL object",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 183,
      "chunk_count": 216
    },
    "id": "654593013440677ced3086468fdc12b2"
  },
  {
    "text": "rd) TARGET ( GDL object message on GWL:NODE-MIXIN, keyword) TARGET ( GDL object message on YADD:ASSEMBLY, keyword) TARGET ( GDL object message on YADD::BASE-YADD-SHEET, keyword) TARGET ( GDL object message on YADD::MASTER-INDEX, keyword) TARGET ( GDL object message on YADD:PACKAGE-DOKUMENTATION, keyword) TARGET ( GDL object message on YADD::PACKAGE-FORM, keyword) TEST ( GDL object message on GWL:MENU-FORM-CONTROL, keyword) TEST ( GDL object message on GWL:RADIO-FORM-CONTROL, keyword) TEXT ( GDL object message on LABEL, keyword) TEXT-ABOVE-LEADER? ( GDL object message on ANGULAR-DIMENSION, keyword) TEXT-ABOVE-LEADER? ( GDL object message on HORIZONTAL-DIMENSION, keyword) TEXT-ABOVE-LEADER? ( GDL object message on LINEAR-DIMENSION, keyword) TEXT-ABOVE-LEADER? ( GDL object message on PARALLEL-DIMENSION, keyword) TEXT-ABOVE-LEADER? ( GDL object message on VERTICAL-DIMENSION, keyword) TEXT-ALONG-AXIS? ( GDL object message on ANGULAR-DIMENSION, keyword) TEXT-ALONG-AXIS? ( GDL object message",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 184,
      "chunk_count": 216
    },
    "id": "05fab999f41d9b7715bed65c598ed3e6"
  },
  {
    "text": "-DIMENSION, keyword) TEXT-ABOVE-LEADER? ( GDL object message on VERTICAL-DIMENSION, keyword) TEXT-ALONG-AXIS? ( GDL object message on ANGULAR-DIMENSION, keyword) TEXT-ALONG-AXIS? ( GDL object message on HORIZONTAL-DIMENSION, keyword) TEXT-ALONG-AXIS? ( GDL object message on LINEAR-DIMENSION, keyword) TEXT-ALONG-AXIS? ( GDL object message on PARALLEL-DIMENSION, keyword) TEXT-ALONG-AXIS? ( GDL object message on VERTICAL-DIMENSION, keyword) TEXT-ALONG-LEADER-PADDING-FACTOR ( GDL object message on ANGULAR-DIMENSION, keyword) TEXT-FORM-CONTROL ( Object, gwl) TEXT-GAP ( GDL object message on LABEL, keyword) TEXT-LINE ( Object, geom-base) TEXT-SIDE ( GDL object message on LABEL, keyword) TEXT-X-SCALE ( GDL object message on ANGULAR-DIMENSION, keyword) TEXT-X-SCALE ( GDL object message on GENERAL-NOTE, keyword) TEXT-X-SCALE ( GDL object message on HORIZONTAL-DIMENSION, keyword) TEXT-X-SCALE ( GDL object message on LINEAR-DIMENSION, keyword) TEXT-X-SCALE ( GDL object message on",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 185,
      "chunk_count": 216
    },
    "id": "2d722d6c0a4ed7714b44ac10649c64dc"
  },
  {
    "text": "NOTE, keyword) TEXT-X-SCALE ( GDL object message on HORIZONTAL-DIMENSION, keyword) TEXT-X-SCALE ( GDL object message on LINEAR-DIMENSION, keyword) TEXT-X-SCALE ( GDL object message on PARALLEL-DIMENSION, keyword) TEXT-X-SCALE ( GDL object message on VERTICAL-DIMENSION, keyword) the ( Macro, gendl) the-child ( Macro, gendl) the-element ( Macro, gendl) the-object ( Macro, gendl) TITLE ( GDL object message on PIE-CHART, keyword) TITLE ( GDL object message on GWL:BASE-AJAX-GRAPHICS-SHEET, keyword) TITLE ( GDL object message on GWL:BASE-AJAX-SHEET, keyword) TITLE ( GDL object message on GWL:BASE-FORM-CONTROL, keyword) TITLE ( GDL object message on GWL:CHECKBOX-FORM-CONTROL, keyword) TITLE ( GDL object message on GWL:MENU-FORM-CONTROL, keyword) TITLE ( GDL object message on GWL:RADIO-FORM-CONTROL, keyword) TITLE ( GDL object message on GWL:TEXT-FORM-CONTROL, keyword) TITLE ( GDL object message on YADD:ASSEMBLY, keyword) TITLE ( GDL object message on YADD::BASE-YADD-SHEET, keyword) TITLE (",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 186,
      "chunk_count": 216
    },
    "id": "826704ffeff8501df0961daf9002e057"
  },
  {
    "text": "L, keyword) TITLE ( GDL object message on GWL:TEXT-FORM-CONTROL, keyword) TITLE ( GDL object message on YADD:ASSEMBLY, keyword) TITLE ( GDL object message on YADD::BASE-YADD-SHEET, keyword) TITLE ( GDL object message on YADD::MASTER-INDEX, keyword) TITLE ( GDL object message on YADD:PACKAGE-DOKUMENTATION, keyword) TITLE ( GDL object message on YADD::PACKAGE-FORM, keyword) TITLE-COLOR ( GDL object message on PIE-CHART, keyword) TITLE-FONT ( GDL object message on PIE-CHART, keyword) TITLE-FONT-SIZE ( GDL object message on PIE-CHART, keyword) TOGGLE-SLOT! ( GDL object message on VANILLA-MIXIN*, keyword) TOP-CAP? ( GDL object message on C-CYLINDER, keyword) TOP-CAP? ( GDL object message on CONE, keyword) TOP-CAP? ( GDL object message on CYLINDER, keyword) TORUS ( Object, geom-base) transform-and-translate-point ( Function, geom-base) transform-numeric-point ( Function, geom-base) TRANSITORY-SLOTS ( GDL object message on GWL:APPLICATION-MIXIN, keyword) TRANSITORY-SLOTS ( GDL object message",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 187,
      "chunk_count": 216
    },
    "id": "7ba0ef4fb9954e8cbed2a6de41ba5686"
  },
  {
    "text": "nd-translate-point ( Function, geom-base) transform-numeric-point ( Function, geom-base) TRANSITORY-SLOTS ( GDL object message on GWL:APPLICATION-MIXIN, keyword) TRANSITORY-SLOTS ( GDL object message on GWL:BASE-AJAX-GRAPHICS-SHEET, keyword) TRANSITORY-SLOTS ( GDL object message on GWL:BASE-AJAX-SHEET, keyword) TRANSITORY-SLOTS ( GDL object message on GWL:BASE-HTML-GRAPHICS-SHEET, keyword) TRANSITORY-SLOTS ( GDL object message on GWL:BASE-HTML-SHEET, keyword) TRANSITORY-SLOTS ( GDL object message on GWL::COLOR-MAP, keyword) TRANSITORY-SLOTS ( GDL object message on GWL:GWL-RULE-OBJECT, keyword) TRANSITORY-SLOTS ( GDL object message on GWL::LAYOUT-MIXIN, keyword) TRANSITORY-SLOTS ( GDL object message on GWL:NODE-MIXIN, keyword) TRANSITORY-SLOTS ( GDL object message on YADD:ASSEMBLY, keyword) TRANSITORY-SLOTS ( GDL object message on YADD::BASE-YADD-SHEET, keyword) TRANSITORY-SLOTS ( GDL object message on YADD::MASTER-INDEX, keyword) TRANSITORY-SLOTS ( GDL object message on",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 188,
      "chunk_count": 216
    },
    "id": "2514d1f185cab2a693153d3f7550272e"
  },
  {
    "text": "TRANSITORY-SLOTS ( GDL object message on YADD::BASE-YADD-SHEET, keyword) TRANSITORY-SLOTS ( GDL object message on YADD::MASTER-INDEX, keyword) TRANSITORY-SLOTS ( GDL object message on YADD:PACKAGE-DOKUMENTATION, keyword) TRANSITORY-SLOTS ( GDL object message on YADD::PACKAGE-FORM, keyword) translate ( Macro, geom-base) translate-along-vector ( Function, geom-base) transpose-matrix ( Function, geom-base) TREE ( Object, geysr) TREE-BGCOLOR ( GDL object message on GWL:APPLICATION-MIXIN, keyword) TREE-BGCOLOR ( GDL object message on GWL::LAYOUT-MIXIN, keyword) TREE-BGCOLOR ( GDL object message on GWL:NODE-MIXIN, keyword) TREE-TITLE ( GDL object message on GWL:APPLICATION-MIXIN, keyword) TREE-TITLE ( GDL object message on GWL::LAYOUT-MIXIN, keyword) TREE-TITLE ( GDL object message on GWL:NODE-MIXIN, keyword) twice ( Function, gendl) TYPE ( GDL object message on VANILLA-MIXIN*, keyword) TYPE-MAPPING ( GDL object message on CL-LITE:CODEBASE-DIRECTORY-NODE, keyword) TYPESET-BLOCK ( Object,",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 189,
      "chunk_count": 216
    },
    "id": "ba4c2f10ecb03bf2392058e3f2273548"
  },
  {
    "text": "MIXIN, keyword) twice ( Function, gendl) TYPE ( GDL object message on VANILLA-MIXIN*, keyword) TYPE-MAPPING ( GDL object message on CL-LITE:CODEBASE-DIRECTORY-NODE, keyword) TYPESET-BLOCK ( Object, geom-base) UI-DISPLAY-LIST-LEAVES ( GDL object message on GWL:APPLICATION-MIXIN, keyword) UI-DISPLAY-LIST-LEAVES ( GDL object message on GWL::LAYOUT-MIXIN, keyword) UI-DISPLAY-LIST-LEAVES ( GDL object message on GWL:NODE-MIXIN, keyword) UI-DISPLAY-LIST-OBJECTS ( GDL object message on GWL:APPLICATION-MIXIN, keyword) UI-DISPLAY-LIST-OBJECTS ( GDL object message on GWL::LAYOUT-MIXIN, keyword) UI-DISPLAY-LIST-OBJECTS ( GDL object message on GWL:NODE-MIXIN, keyword) UI-SPECIFIC-LAYOUT-JS ( GDL object message on GWL:BASE-AJAX-GRAPHICS-SHEET, keyword) UI-SPECIFIC-LAYOUT-JS ( GDL object message on GWL:BASE-AJAX-SHEET, keyword) UI-SPECIFIC-LAYOUT-JS ( GDL object message on YADD:ASSEMBLY, keyword) UI-SPECIFIC-LAYOUT-JS ( GDL object message on YADD::BASE-YADD-SHEET, keyword) UI-SPECIFIC-LAYOUT-JS (",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 190,
      "chunk_count": 216
    },
    "id": "53be81690351ac3cfb1ab1fc54641e79"
  },
  {
    "text": "ASE-AJAX-SHEET, keyword) UI-SPECIFIC-LAYOUT-JS ( GDL object message on YADD:ASSEMBLY, keyword) UI-SPECIFIC-LAYOUT-JS ( GDL object message on YADD::BASE-YADD-SHEET, keyword) UI-SPECIFIC-LAYOUT-JS ( GDL object message on YADD::MASTER-INDEX, keyword) UI-SPECIFIC-LAYOUT-JS ( GDL object message on YADD:PACKAGE-DOKUMENTATION, keyword) UI-SPECIFIC-LAYOUT-JS ( GDL object message on YADD::PACKAGE-FORM, keyword) undefine-object ( Function, gendl) UNDERLINE? ( GDL object message on ANGULAR-DIMENSION, keyword) UNDERLINE? ( GDL object message on GENERAL-NOTE, keyword) UNDERLINE? ( GDL object message on HORIZONTAL-DIMENSION, keyword) UNDERLINE? ( GDL object message on LINEAR-DIMENSION, keyword) UNDERLINE? ( GDL object message on PARALLEL-DIMENSION, keyword) UNDERLINE? ( GDL object message on VERTICAL-DIMENSION, keyword) unitize-vector ( Function, geom-base) universal-time-from-iso-8601 ( Function, gendl) UPDATE! ( GDL object message on VANILLA-MIXIN*, keyword) URL ( GDL object message on",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 191,
      "chunk_count": 216
    },
    "id": "fec17304498783d6b1e78bd16e0c47b7"
  },
  {
    "text": "MENSION, keyword) unitize-vector ( Function, geom-base) universal-time-from-iso-8601 ( Function, gendl) UPDATE! ( GDL object message on VANILLA-MIXIN*, keyword) URL ( GDL object message on GWL:BASE-HTML-SHEET, keyword) USE-BSPLINES? ( GDL object message on GWL:APPLICATION-MIXIN, keyword) USE-BSPLINES? ( GDL object message on GWL:BASE-AJAX-GRAPHICS-SHEET, keyword) USE-BSPLINES? ( GDL object message on GWL:BASE-HTML-GRAPHICS-SHEET, keyword) USE-BSPLINES? ( GDL object message on GWL:GWL-RULE-OBJECT, keyword) USE-BSPLINES? ( GDL object message on GWL::LAYOUT-MIXIN, keyword) USE-BSPLINES? ( GDL object message on GWL:NODE-MIXIN, keyword) USE-JQUERY? ( GDL object message on GWL:BASE-AJAX-GRAPHICS-SHEET, keyword) USE-JQUERY? ( GDL object message on GWL:BASE-AJAX-SHEET, keyword) USE-JQUERY? ( GDL object message on YADD:ASSEMBLY, keyword) USE-JQUERY? ( GDL object message on YADD::BASE-YADD-SHEET, keyword) USE-JQUERY? ( GDL object message on YADD::MASTER-INDEX, keyword) USE-JQUERY? ( GDL object",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 192,
      "chunk_count": 216
    },
    "id": "9ff55f2d5a639852d08ed9a371d7ff05"
  },
  {
    "text": "bject message on YADD:ASSEMBLY, keyword) USE-JQUERY? ( GDL object message on YADD::BASE-YADD-SHEET, keyword) USE-JQUERY? ( GDL object message on YADD::MASTER-INDEX, keyword) USE-JQUERY? ( GDL object message on YADD:PACKAGE-DOKUMENTATION, keyword) USE-JQUERY? ( GDL object message on YADD::PACKAGE-FORM, keyword) USE-RAPHAEL-GRAF? ( GDL object message on GWL:BASE-AJAX-GRAPHICS-SHEET, keyword) USE-RAPHAEL? ( GDL object message on GWL:BASE-AJAX-GRAPHICS-SHEET, keyword) USE-RECOVERY-OBJECT? ( GDL object message on GWL:SESSION-CONTROL-MIXIN, keyword) USE-STANDARD-SAVED-SLOTS? ( GDL object message on GWL:APPLICATION-MIXIN, keyword) USE-STANDARD-SAVED-SLOTS? ( GDL object message on GWL::LAYOUT-MIXIN, keyword) USE-STANDARD-SAVED-SLOTS? ( GDL object message on GWL:NODE-MIXIN, keyword) USEMAP ( GDL object message on GWL:BASE-FORM-CONTROL, keyword) USEMAP ( GDL object message on GWL:CHECKBOX-FORM-CONTROL, keyword) USEMAP ( GDL object message on GWL:MENU-FORM-CONTROL, keyword) USEMAP ( GDL object",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 193,
      "chunk_count": 216
    },
    "id": "4dde92cebbd4a3529ffb7de0cfa1803e"
  },
  {
    "text": "ject message on GWL:BASE-FORM-CONTROL, keyword) USEMAP ( GDL object message on GWL:CHECKBOX-FORM-CONTROL, keyword) USEMAP ( GDL object message on GWL:MENU-FORM-CONTROL, keyword) USEMAP ( GDL object message on GWL:RADIO-FORM-CONTROL, keyword) USEMAP ( GDL object message on GWL:TEXT-FORM-CONTROL, keyword) VALIDATION-FUNCTION ( GDL object message on GWL:BASE-FORM-CONTROL, keyword) VALIDATION-FUNCTION ( GDL object message on GWL:CHECKBOX-FORM-CONTROL, keyword) VALIDATION-FUNCTION ( GDL object message on GWL:MENU-FORM-CONTROL, keyword) VALIDATION-FUNCTION ( GDL object message on GWL:RADIO-FORM-CONTROL, keyword) VALIDATION-FUNCTION ( GDL object message on GWL:TEXT-FORM-CONTROL, keyword) VALUE ( GDL object message on GWL:BASE-FORM-CONTROL, keyword) VANILLA-MIXIN* ( Object, gendl) VARIABLE-DOCS ( GDL object message on YADD:PACKAGE-DOKUMENTATION, keyword) VARIABLE-SEQUENCE ( Object, gendl) VECTOR-GRAPHICS ( GDL object message on GWL:BASE-AJAX-GRAPHICS-SHEET, keyword) VERTEX ( GDL object",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 194,
      "chunk_count": 216
    },
    "id": "3d11c2c90efe7cdcf0069ece6aabd056"
  },
  {
    "text": "GDL object message on YADD:PACKAGE-DOKUMENTATION, keyword) VARIABLE-SEQUENCE ( Object, gendl) VECTOR-GRAPHICS ( GDL object message on GWL:BASE-AJAX-GRAPHICS-SHEET, keyword) VERTEX ( GDL object message on BASE-OBJECT, keyword) VERTEX-LIST ( GDL object message on GLOBAL-FILLETED-POLYGON-PROJECTION, keyword) VERTEX-LIST ( GDL object message on GLOBAL-FILLETED-POLYLINE, keyword) VERTEX-LIST ( GDL object message on GEOM-BASE::GLOBAL-FILLETED-POLYLINE-MIXIN, keyword) VERTEX-LIST ( GDL object message on GLOBAL-POLYGON-PROJECTION, keyword) VERTEX-LIST ( GDL object message on GLOBAL-POLYLINE, keyword) VERTEX-LIST ( GDL object message on GEOM-BASE::GLOBAL-POLYLINE-MIXIN, keyword) VERTEX-LIST ( GDL object message on ROUTE-PIPE, keyword) VERTICAL-DIMENSION ( Object, geom-base) VIEW ( GDL object message on GWL:APPLICATION-MIXIN, keyword) VIEW ( GDL object message on GWL:BASE-AJAX-GRAPHICS-SHEET, keyword) VIEW ( GDL object message on GWL:BASE-HTML-GRAPHICS-SHEET, keyword) VIEW ( GDL object message",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 195,
      "chunk_count": 216
    },
    "id": "4a928ff9be82316da005d10fd786d63c"
  },
  {
    "text": "e on GWL:APPLICATION-MIXIN, keyword) VIEW ( GDL object message on GWL:BASE-AJAX-GRAPHICS-SHEET, keyword) VIEW ( GDL object message on GWL:BASE-HTML-GRAPHICS-SHEET, keyword) VIEW ( GDL object message on GWL:GWL-RULE-OBJECT, keyword) VIEW ( GDL object message on GWL::LAYOUT-MIXIN, keyword) VIEW ( GDL object message on GWL:NODE-MIXIN, keyword) VIEW-CENTER ( GDL object message on BASE-VIEW, keyword) VIEW-CONTROLS ( GDL object message on GWL:BASE-AJAX-GRAPHICS-SHEET, keyword) VIEW-DIRECTION-DEFAULT ( GDL object message on GWL:BASE-AJAX-GRAPHICS-SHEET, keyword) VIEW-OBJECT ( GDL object message on GWL:BASE-AJAX-GRAPHICS-SHEET, keyword) VIEW-OBJECT ( GDL object message on GWL:BASE-HTML-GRAPHICS-SHEET, keyword) VIEW-OBJECT ( GDL object message on GWL::GEOMETRY-VIEW-MIXIN, keyword) VIEW-OBJECT ( GDL object message on GWL:GWL-RULE-OBJECT, keyword) VIEW-OBJECT ( GDL object message on GWL::LAYOUT-MIXIN, keyword) VIEW-POINT ( GDL object message on BASE-VIEW, keyword) VIEW-REFERENCE-OBJECT ( GDL",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 196,
      "chunk_count": 216
    },
    "id": "06f49cd8a6f1bca057d18b7ecf27982e"
  },
  {
    "text": "object message on GWL:GWL-RULE-OBJECT, keyword) VIEW-OBJECT ( GDL object message on GWL::LAYOUT-MIXIN, keyword) VIEW-POINT ( GDL object message on BASE-VIEW, keyword) VIEW-REFERENCE-OBJECT ( GDL object message on ANGULAR-DIMENSION, keyword) VIEW-REFERENCE-OBJECT ( GDL object message on HORIZONTAL-DIMENSION, keyword) VIEW-REFERENCE-OBJECT ( GDL object message on LABEL, keyword) VIEW-REFERENCE-OBJECT ( GDL object message on LINEAR-DIMENSION, keyword) VIEW-REFERENCE-OBJECT ( GDL object message on PARALLEL-DIMENSION, keyword) VIEW-REFERENCE-OBJECT ( GDL object message on VERTICAL-DIMENSION, keyword) VIEW-SCALE ( GDL object message on BASE-VIEW, keyword) VIEW-VECTORS ( GDL object message on GEOM-BASE::RENDERER-MIXIN, keyword) VIEW-VECTORS ( GDL object message on GWL:WEB-DRAWING, keyword) VIEWPOINTS ( GDL object message on GEOM-BASE::RENDERER-MIXIN, keyword) VIEWPOINTS ( GDL object message on GWL:WEB-DRAWING, keyword) VIEWPORT-BORDER-DEFAULT ( GDL object message on",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 197,
      "chunk_count": 216
    },
    "id": "2133c30c8343767028581315fbf97ed4"
  },
  {
    "text": "OINTS ( GDL object message on GEOM-BASE::RENDERER-MIXIN, keyword) VIEWPOINTS ( GDL object message on GWL:WEB-DRAWING, keyword) VIEWPORT-BORDER-DEFAULT ( GDL object message on GWL:BASE-AJAX-GRAPHICS-SHEET, keyword) VIOLATED-RULES ( GDL object message on GWL:APPLICATION-MIXIN, keyword) VIOLATED-RULES ( GDL object message on GWL::LAYOUT-MIXIN, keyword) VIOLATED-RULES ( GDL object message on GWL:NODE-MIXIN, keyword) VIOLATED-RULES-BGCOLOR ( GDL object message on GWL:APPLICATION-MIXIN, keyword) VIOLATED-RULES-BGCOLOR ( GDL object message on GWL::LAYOUT-MIXIN, keyword) VIOLATED-RULES-BGCOLOR ( GDL object message on GWL:NODE-MIXIN, keyword) VIOLATED-RULES-TITLE ( GDL object message on GWL:APPLICATION-MIXIN, keyword) VIOLATED-RULES-TITLE ( GDL object message on GWL::LAYOUT-MIXIN, keyword) VIOLATED-RULES-TITLE ( GDL object message on GWL:NODE-MIXIN, keyword) VIOLATED? ( GDL object message on BASE-RULE-OBJECT, keyword) VIOLATED? ( GDL object message on GWL:GWL-RULE-OBJECT, keyword)",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 198,
      "chunk_count": 216
    },
    "id": "15b3e978e88bc232f3752115e4db94a8"
  },
  {
    "text": "-RULES-TITLE ( GDL object message on GWL:NODE-MIXIN, keyword) VIOLATED? ( GDL object message on BASE-RULE-OBJECT, keyword) VIOLATED? ( GDL object message on GWL:GWL-RULE-OBJECT, keyword) VISIBLE-CHILDREN ( GDL object message on CL-LITE:CODEBASE-DIRECTORY-NODE, keyword) VISIBLE-CHILDREN ( GDL object message on BASE-RULE-OBJECT, keyword) VISIBLE-CHILDREN ( GDL object message on GDL-APP, keyword) VISIBLE-CHILDREN ( GDL object message on GENDL::MATRIX-SEQUENCE, keyword) VISIBLE-CHILDREN ( GDL object message on NULL-OBJECT, keyword) VISIBLE-CHILDREN ( GDL object message on QUANTIFICATION, keyword) VISIBLE-CHILDREN ( GDL object message on GENDL::RADIAL-SEQUENCE, keyword) VISIBLE-CHILDREN ( GDL object message on GENDL::STANDARD-SEQUENCE, keyword) VISIBLE-CHILDREN ( GDL object message on VANILLA-MIXIN*, keyword) VISIBLE-CHILDREN ( GDL object message on GENDL::VARIABLE-SEQUENCE, keyword) VISIBLE-CHILDREN ( GDL object message on ANGULAR-DIMENSION, keyword) VISIBLE-CHILDREN ( GDL object message",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 199,
      "chunk_count": 216
    },
    "id": "0b3c5600a8002299b2b87a43318940d7"
  },
  {
    "text": "IXIN*, keyword) VISIBLE-CHILDREN ( GDL object message on GENDL::VARIABLE-SEQUENCE, keyword) VISIBLE-CHILDREN ( GDL object message on ANGULAR-DIMENSION, keyword) VISIBLE-CHILDREN ( GDL object message on ARC, keyword) VISIBLE-CHILDREN ( GDL object message on GEOM-BASE::ARCOID-MIXIN, keyword) VISIBLE-CHILDREN ( GDL object message on BASE-COORDINATE-SYSTEM, keyword) VISIBLE-CHILDREN ( GDL object message on BASE-DRAWING, keyword) VISIBLE-CHILDREN ( GDL object message on BASE-OBJECT, keyword) VISIBLE-CHILDREN ( GDL object message on BASE-VIEW, keyword) VISIBLE-CHILDREN ( GDL object message on BEZIER-CURVE, keyword) VISIBLE-CHILDREN ( GDL object message on BOX, keyword) VISIBLE-CHILDREN ( GDL object message on C-CYLINDER, keyword) VISIBLE-CHILDREN ( GDL object message on CENTER-LINE, keyword) VISIBLE-CHILDREN ( GDL object message on CIRCLE, keyword) VISIBLE-CHILDREN ( GDL object message on CONE, keyword) VISIBLE-CHILDREN ( GDL object message on CONSTRAINED-ARC, keyword) VISIBLE-CHILDREN (",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 200,
      "chunk_count": 216
    },
    "id": "b6f2cf6b5a3f680a8e7dd4efa13fda01"
  },
  {
    "text": "IBLE-CHILDREN ( GDL object message on CIRCLE, keyword) VISIBLE-CHILDREN ( GDL object message on CONE, keyword) VISIBLE-CHILDREN ( GDL object message on CONSTRAINED-ARC, keyword) VISIBLE-CHILDREN ( GDL object message on CONSTRAINED-FILLET, keyword) VISIBLE-CHILDREN ( GDL object message on CONSTRAINED-LINE, keyword) VISIBLE-CHILDREN ( GDL object message on CYLINDER, keyword) VISIBLE-CHILDREN ( GDL object message on ELLIPSE, keyword) VISIBLE-CHILDREN ( GDL object message on GENERAL-NOTE, keyword) VISIBLE-CHILDREN ( GDL object message on GLOBAL-FILLETED-POLYGON-PROJECTION, keyword) VISIBLE-CHILDREN ( GDL object message on GLOBAL-FILLETED-POLYLINE, keyword) VISIBLE-CHILDREN ( GDL object message on GEOM-BASE::GLOBAL-FILLETED-POLYLINE-MIXIN, keyword) VISIBLE-CHILDREN ( GDL object message on GLOBAL-POLYGON-PROJECTION, keyword) VISIBLE-CHILDREN ( GDL object message on GLOBAL-POLYLINE, keyword) VISIBLE-CHILDREN ( GDL object message on GEOM-BASE::GLOBAL-POLYLINE-MIXIN, keyword) VISIBLE-CHILDREN",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 201,
      "chunk_count": 216
    },
    "id": "2cb9f2024908fa098136175635af126c"
  },
  {
    "text": "L-POLYGON-PROJECTION, keyword) VISIBLE-CHILDREN ( GDL object message on GLOBAL-POLYLINE, keyword) VISIBLE-CHILDREN ( GDL object message on GEOM-BASE::GLOBAL-POLYLINE-MIXIN, keyword) VISIBLE-CHILDREN ( GDL object message on HORIZONTAL-DIMENSION, keyword) VISIBLE-CHILDREN ( GDL object message on LABEL, keyword) VISIBLE-CHILDREN ( GDL object message on LEADER-LINE, keyword) VISIBLE-CHILDREN ( GDL object message on LINE, keyword) VISIBLE-CHILDREN ( GDL object message on LINEAR-DIMENSION, keyword) VISIBLE-CHILDREN ( GDL object message on PARALLEL-DIMENSION, keyword) VISIBLE-CHILDREN ( GDL object message on PIE-CHART, keyword) VISIBLE-CHILDREN ( GDL object message on POINT, keyword) VISIBLE-CHILDREN ( GDL object message on POINTS-DISPLAY, keyword) VISIBLE-CHILDREN ( GDL object message on GEOM-BASE::RENDERER-MIXIN, keyword) VISIBLE-CHILDREN ( GDL object message on ROUTE-PIPE, keyword) VISIBLE-CHILDREN ( GDL object message on SAMPLE-DRAWING, keyword) VISIBLE-CHILDREN ( GDL object message on",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 202,
      "chunk_count": 216
    },
    "id": "562fd4f97844d97afd17ee8940b617dc"
  },
  {
    "text": "SE::RENDERER-MIXIN, keyword) VISIBLE-CHILDREN ( GDL object message on ROUTE-PIPE, keyword) VISIBLE-CHILDREN ( GDL object message on SAMPLE-DRAWING, keyword) VISIBLE-CHILDREN ( GDL object message on SPHERE, keyword) VISIBLE-CHILDREN ( GDL object message on SPHERICAL-CAP, keyword) VISIBLE-CHILDREN ( GDL object message on TEXT-LINE, keyword) VISIBLE-CHILDREN ( GDL object message on TORUS, keyword) VISIBLE-CHILDREN ( GDL object message on TYPESET-BLOCK, keyword) VISIBLE-CHILDREN ( GDL object message on VERTICAL-DIMENSION, keyword) VISIBLE-CHILDREN ( GDL object message on GEYSR::MENU, keyword) VISIBLE-CHILDREN ( GDL object message on GEYSR:TREE, keyword) VISIBLE-CHILDREN ( GDL object message on GWL:APPLICATION-MIXIN, keyword) VISIBLE-CHILDREN ( GDL object message on GWL:BASE-AJAX-GRAPHICS-SHEET, keyword) VISIBLE-CHILDREN ( GDL object message on GWL:BASE-AJAX-SHEET, keyword) VISIBLE-CHILDREN ( GDL object message on GWL:BASE-FORM-CONTROL, keyword) VISIBLE-CHILDREN ( GDL object message on",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 203,
      "chunk_count": 216
    },
    "id": "b924b519e11a6f74bb497a6ee2418b6e"
  },
  {
    "text": ", keyword) VISIBLE-CHILDREN ( GDL object message on GWL:BASE-AJAX-SHEET, keyword) VISIBLE-CHILDREN ( GDL object message on GWL:BASE-FORM-CONTROL, keyword) VISIBLE-CHILDREN ( GDL object message on GWL:BASE-HTML-GRAPHICS-SHEET, keyword) VISIBLE-CHILDREN ( GDL object message on GWL:BASE-HTML-SHEET, keyword) VISIBLE-CHILDREN ( GDL object message on GWL:CHECKBOX-FORM-CONTROL, keyword) VISIBLE-CHILDREN ( GDL object message on GWL::COLOR-MAP, keyword) VISIBLE-CHILDREN ( GDL object message on GWL::GEOMETRY-VIEW-MIXIN, keyword) VISIBLE-CHILDREN ( GDL object message on GWL:GRID-FORM-CONTROL, keyword) VISIBLE-CHILDREN ( GDL object message on GWL:GWL-RULE-OBJECT, keyword) VISIBLE-CHILDREN ( GDL object message on GWL::LAYOUT-MIXIN, keyword) VISIBLE-CHILDREN ( GDL object message on GWL:MENU-FORM-CONTROL, keyword) VISIBLE-CHILDREN ( GDL object message on GWL:NODE-MIXIN, keyword) VISIBLE-CHILDREN ( GDL object message on GWL:RADIO-FORM-CONTROL, keyword) VISIBLE-CHILDREN ( GDL object message on",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 204,
      "chunk_count": 216
    },
    "id": "2756d8fb73fd11b136a61088854e1497"
  },
  {
    "text": ", keyword) VISIBLE-CHILDREN ( GDL object message on GWL:NODE-MIXIN, keyword) VISIBLE-CHILDREN ( GDL object message on GWL:RADIO-FORM-CONTROL, keyword) VISIBLE-CHILDREN ( GDL object message on GWL:SESSION-CONTROL-MIXIN, keyword) VISIBLE-CHILDREN ( GDL object message on GWL:SHEET-SECTION, keyword) VISIBLE-CHILDREN ( GDL object message on GWL::SKELETON-FORM-CONTROL, keyword) VISIBLE-CHILDREN ( GDL object message on GWL:SKELETON-UI-ELEMENT, keyword) VISIBLE-CHILDREN ( GDL object message on GWL:TEXT-FORM-CONTROL, keyword) VISIBLE-CHILDREN ( GDL object message on GWL:WEB-DRAWING, keyword) VISIBLE-CHILDREN ( GDL object message on YADD:ASSEMBLY, keyword) VISIBLE-CHILDREN ( GDL object message on YADD::BASE-YADD-SHEET, keyword) VISIBLE-CHILDREN ( GDL object message on YADD::MASTER-INDEX, keyword) VISIBLE-CHILDREN ( GDL object message on YADD:PACKAGE-DOKUMENTATION, keyword) VISIBLE-CHILDREN ( GDL object message on YADD::PACKAGE-FORM, keyword) VOLUME ( GDL object message on BOX, keyword)",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 205,
      "chunk_count": 216
    },
    "id": "d5b565d033fcc1372cae06cfcd8f54b0"
  },
  {
    "text": "SIBLE-CHILDREN ( GDL object message on YADD:PACKAGE-DOKUMENTATION, keyword) VISIBLE-CHILDREN ( GDL object message on YADD::PACKAGE-FORM, keyword) VOLUME ( GDL object message on BOX, keyword) WEB-DRAWING ( Object, gwl) WIDTH ( GDL object message on ANGULAR-DIMENSION, keyword) WIDTH ( GDL object message on ARC, keyword) WIDTH ( GDL object message on BASE-COORDINATE-SYSTEM, keyword) WIDTH ( GDL object message on BASE-DRAWING, keyword) WIDTH ( GDL object message on BASE-OBJECT, keyword) WIDTH ( GDL object message on BASE-VIEW, keyword) WIDTH ( GDL object message on BEZIER-CURVE, keyword) WIDTH ( GDL object message on BOX, keyword) WIDTH ( GDL object message on C-CYLINDER, keyword) WIDTH ( GDL object message on CENTER-LINE, keyword) WIDTH ( GDL object message on CONE, keyword) WIDTH ( GDL object message on CONSTRAINED-LINE, keyword) WIDTH ( GDL object message on CYLINDER, keyword) WIDTH ( GDL object message on ELLIPSE, keyword) WIDTH ( GDL object message on GENERAL-NOTE, keyword) WIDTH (",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 206,
      "chunk_count": 216
    },
    "id": "b71cbc231579b8c0f05c64536e7dc268"
  },
  {
    "text": "t message on CONSTRAINED-LINE, keyword) WIDTH ( GDL object message on CYLINDER, keyword) WIDTH ( GDL object message on ELLIPSE, keyword) WIDTH ( GDL object message on GENERAL-NOTE, keyword) WIDTH ( GDL object message on GLOBAL-FILLETED-POLYGON-PROJECTION, keyword) WIDTH ( GDL object message on GLOBAL-FILLETED-POLYLINE, keyword) WIDTH ( GDL object message on GEOM-BASE::GLOBAL-FILLETED-POLYLINE-MIXIN, keyword) WIDTH ( GDL object message on GLOBAL-POLYGON-PROJECTION, keyword) WIDTH ( GDL object message on GLOBAL-POLYLINE, keyword) WIDTH ( GDL object message on GEOM-BASE::GLOBAL-POLYLINE-MIXIN, keyword) WIDTH ( GDL object message on HORIZONTAL-DIMENSION, keyword) WIDTH ( GDL object message on LABEL, keyword) WIDTH ( GDL object message on LEADER-LINE, keyword) WIDTH ( GDL object message on LINE, keyword) WIDTH ( GDL object message on LINEAR-DIMENSION, keyword) WIDTH ( GDL object message on PARALLEL-DIMENSION, keyword) WIDTH ( GDL object message on PIE-CHART, keyword) WIDTH ( GDL object",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 207,
      "chunk_count": 216
    },
    "id": "11bc2c924c40a4227f033f222a978eee"
  },
  {
    "text": ", keyword) WIDTH ( GDL object message on LINEAR-DIMENSION, keyword) WIDTH ( GDL object message on PARALLEL-DIMENSION, keyword) WIDTH ( GDL object message on PIE-CHART, keyword) WIDTH ( GDL object message on POINTS-DISPLAY, keyword) WIDTH ( GDL object message on ROUTE-PIPE, keyword) WIDTH ( GDL object message on SAMPLE-DRAWING, keyword) WIDTH ( GDL object message on SPHERE, keyword) WIDTH ( GDL object message on SPHERICAL-CAP, keyword) WIDTH ( GDL object message on TEXT-LINE, keyword) WIDTH ( GDL object message on TORUS, keyword) WIDTH ( GDL object message on TYPESET-BLOCK, keyword) WIDTH ( GDL object message on VERTICAL-DIMENSION, keyword) WIDTH ( GDL object message on GWL:APPLICATION-MIXIN, keyword) WIDTH ( GDL object message on GWL:BASE-AJAX-GRAPHICS-SHEET, keyword) WIDTH ( GDL object message on GWL:BASE-HTML-GRAPHICS-SHEET, keyword) WIDTH ( GDL object message on GWL::GEOMETRY-VIEW-MIXIN, keyword) WIDTH ( GDL object message on GWL:GWL-RULE-OBJECT, keyword) WIDTH ( GDL object message",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 208,
      "chunk_count": 216
    },
    "id": "61de2eb79b46549129960c580f8d2650"
  },
  {
    "text": "ssage on GWL:BASE-HTML-GRAPHICS-SHEET, keyword) WIDTH ( GDL object message on GWL::GEOMETRY-VIEW-MIXIN, keyword) WIDTH ( GDL object message on GWL:GWL-RULE-OBJECT, keyword) WIDTH ( GDL object message on GWL::LAYOUT-MIXIN, keyword) WIDTH ( GDL object message on GWL:NODE-MIXIN, keyword) WIDTH ( GDL object message on GWL:WEB-DRAWING, keyword) with-cl-who ( Macro, gwl) with-cl-who-string ( Macro, gwl) with-error-handling ( Macro, gendl) with-format ( Macro, gendl) with-format-slots ( Macro, gendl) with-html-form ( Macro, gwl) WITNESS-1-TO-CENTER? ( GDL object message on ANGULAR-DIMENSION, keyword) WITNESS-2-TO-CENTER? ( GDL object message on ANGULAR-DIMENSION, keyword) WITNESS-DIRECTION-VECTOR ( GDL object message on ANGULAR-DIMENSION, keyword) WITNESS-DIRECTION-VECTOR ( GDL object message on HORIZONTAL-DIMENSION, keyword) WITNESS-DIRECTION-VECTOR ( GDL object message on LINEAR-DIMENSION, keyword) WITNESS-DIRECTION-VECTOR ( GDL object message on PARALLEL-DIMENSION, keyword)",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 209,
      "chunk_count": 216
    },
    "id": "4fb73ddab17bda3a9f145255ce0de362"
  },
  {
    "text": "HORIZONTAL-DIMENSION, keyword) WITNESS-DIRECTION-VECTOR ( GDL object message on LINEAR-DIMENSION, keyword) WITNESS-DIRECTION-VECTOR ( GDL object message on PARALLEL-DIMENSION, keyword) WITNESS-DIRECTION-VECTOR ( GDL object message on VERTICAL-DIMENSION, keyword) WITNESS-LINE-2? ( GDL object message on ANGULAR-DIMENSION, keyword) WITNESS-LINE-2? ( GDL object message on HORIZONTAL-DIMENSION, keyword) WITNESS-LINE-2? ( GDL object message on LINEAR-DIMENSION, keyword) WITNESS-LINE-2? ( GDL object message on PARALLEL-DIMENSION, keyword) WITNESS-LINE-2? ( GDL object message on VERTICAL-DIMENSION, keyword) WITNESS-LINE-EXT ( GDL object message on ANGULAR-DIMENSION, keyword) WITNESS-LINE-EXT ( GDL object message on HORIZONTAL-DIMENSION, keyword) WITNESS-LINE-EXT ( GDL object message on LINEAR-DIMENSION, keyword) WITNESS-LINE-EXT ( GDL object message on PARALLEL-DIMENSION, keyword) WITNESS-LINE-EXT ( GDL object message on VERTICAL-DIMENSION, keyword) WITNESS-LINE-GAP ( GDL object message on",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 210,
      "chunk_count": 216
    },
    "id": "51cfd0e9e96b86807204b4dcd9ab32d4"
  },
  {
    "text": "NSION, keyword) WITNESS-LINE-EXT ( GDL object message on PARALLEL-DIMENSION, keyword) WITNESS-LINE-EXT ( GDL object message on VERTICAL-DIMENSION, keyword) WITNESS-LINE-GAP ( GDL object message on ANGULAR-DIMENSION, keyword) WITNESS-LINE-GAP ( GDL object message on HORIZONTAL-DIMENSION, keyword) WITNESS-LINE-GAP ( GDL object message on LINEAR-DIMENSION, keyword) WITNESS-LINE-GAP ( GDL object message on PARALLEL-DIMENSION, keyword) WITNESS-LINE-GAP ( GDL object message on VERTICAL-DIMENSION, keyword) WITNESS-LINE-LENGTH ( GDL object message on ANGULAR-DIMENSION, keyword) WITNESS-LINE-LENGTH ( GDL object message on HORIZONTAL-DIMENSION, keyword) WITNESS-LINE-LENGTH ( GDL object message on LINEAR-DIMENSION, keyword) WITNESS-LINE-LENGTH ( GDL object message on PARALLEL-DIMENSION, keyword) WITNESS-LINE-LENGTH ( GDL object message on VERTICAL-DIMENSION, keyword) WITNESS-LINE? ( GDL object message on ANGULAR-DIMENSION, keyword) WITNESS-LINE? ( GDL object message on HORIZONTAL-DIMENSION,",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 211,
      "chunk_count": 216
    },
    "id": "a57f4bfa638fde29b7bb266d10c7deb2"
  },
  {
    "text": "ESS-LINE-LENGTH ( GDL object message on VERTICAL-DIMENSION, keyword) WITNESS-LINE? ( GDL object message on ANGULAR-DIMENSION, keyword) WITNESS-LINE? ( GDL object message on HORIZONTAL-DIMENSION, keyword) WITNESS-LINE? ( GDL object message on LINEAR-DIMENSION, keyword) WITNESS-LINE? ( GDL object message on PARALLEL-DIMENSION, keyword) WITNESS-LINE? ( GDL object message on VERTICAL-DIMENSION, keyword) WRITE-CHILD-LINKS ( GDL object message on GWL:BASE-HTML-SHEET, keyword) WRITE-DEVELOPMENT-LINKS ( GDL object message on GWL:BASE-HTML-SHEET, keyword) WRITE-EMBEDDED-VRML-WORLD ( GDL object message on GWL:BASE-HTML-GRAPHICS-SHEET, keyword) WRITE-EMBEDDED-X3D-WORLD ( GDL object message on GWL:BASE-HTML-GRAPHICS-SHEET, keyword) WRITE-EMBEDDED-X3DOM-WORLD ( GDL object message on GWL:BASE-AJAX-GRAPHICS-SHEET, keyword) write-env ( Macro, gendl) WRITE-GEOMETRY ( GDL object message on GWL:BASE-HTML-GRAPHICS-SHEET, keyword) WRITE-HTML-SHEET ( GDL object message on GWL:BASE-HTML-SHEET, keyword)",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 212,
      "chunk_count": 216
    },
    "id": "aecb619d4b293ef87b42da6b7033d6ad"
  },
  {
    "text": "ICS-SHEET, keyword) write-env ( Macro, gendl) WRITE-GEOMETRY ( GDL object message on GWL:BASE-HTML-GRAPHICS-SHEET, keyword) WRITE-HTML-SHEET ( GDL object message on GWL:BASE-HTML-SHEET, keyword) WRITE-HTML-SHEET ( GDL object message on GWL::COLOR-MAP, keyword) WRITE-HTML-SHEET ( GDL object message on GWL::LAYOUT-MIXIN, keyword) WRITE-HTML-SHEET ( GDL object message on YADD:PACKAGE-DOKUMENTATION, keyword) WRITE-HTML-SHEET ( GDL object message on YADD::PACKAGE-FORM, keyword) write-plist ( Function, gendl) WRITE-SAVED-SLOTS ( GDL object message on GWL::LAYOUT-MIXIN, keyword) WRITE-SELF-LINK ( GDL object message on GWL:BASE-HTML-SHEET, keyword) WRITE-SNAPSHOT ( GDL object message on VANILLA-MIXIN*, keyword) WRITE-STANDARD-FOOTER ( GDL object message on GWL:BASE-HTML-SHEET, keyword) write-the ( Macro, gendl) write-the-object ( Macro, gendl) X3DOM-GRAPHICS ( GDL object message on GWL:BASE-AJAX-GRAPHICS-SHEET, keyword) zero-vector? ( Function, geom-base) ZOOM-FACTOR ( GDL object message on",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 213,
      "chunk_count": 216
    },
    "id": "b2d4b22c83bd896f80e1b77dfceb481f"
  },
  {
    "text": "Macro, gendl) write-the-object ( Macro, gendl) X3DOM-GRAPHICS ( GDL object message on GWL:BASE-AJAX-GRAPHICS-SHEET, keyword) zero-vector? ( Function, geom-base) ZOOM-FACTOR ( GDL object message on GWL:APPLICATION-MIXIN, keyword) ZOOM-FACTOR ( GDL object message on GWL:BASE-AJAX-GRAPHICS-SHEET, keyword) ZOOM-FACTOR ( GDL object message on GWL:BASE-HTML-GRAPHICS-SHEET, keyword) ZOOM-FACTOR ( GDL object message on GWL:GWL-RULE-OBJECT, keyword) ZOOM-FACTOR ( GDL object message on GWL::LAYOUT-MIXIN, keyword) ZOOM-FACTOR ( GDL object message on GWL:NODE-MIXIN, keyword) ZOOM-MODE ( GDL object message on GWL:APPLICATION-MIXIN, keyword) ZOOM-MODE ( GDL object message on GWL:BASE-AJAX-GRAPHICS-SHEET, keyword) ZOOM-MODE ( GDL object message on GWL:BASE-HTML-GRAPHICS-SHEET, keyword) ZOOM-MODE ( GDL object message on GWL:GWL-RULE-OBJECT, keyword) ZOOM-MODE ( GDL object message on GWL::LAYOUT-MIXIN, keyword) ZOOM-MODE ( GDL object message on GWL:NODE-MIXIN, keyword) ^2 ( Function, gendl) <-Back",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 214,
      "chunk_count": 216
    },
    "id": "a573cc6f9790a83698b6d8b425b8fe4f"
  },
  {
    "text": "bject message on GWL:GWL-RULE-OBJECT, keyword) ZOOM-MODE ( GDL object message on GWL::LAYOUT-MIXIN, keyword) ZOOM-MODE ( GDL object message on GWL:NODE-MIXIN, keyword) ^2 ( Function, gendl) <-Back Copyright \u00a9 2025 Genworks \u00ae International . All rights reserved. Genworks Build: 1598p001",
    "metadata": {
      "source": "yadd-reference/master-index/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 215,
      "chunk_count": 216
    },
    "id": "ea8083751879ebf06482bbc9a9edb695"
  },
  {
    "text": "GendL Application - MASTER-INDEX-GROUPED 719 Matches for ARC Matches for ARC ARC ( Object, geom-base)",
    "metadata": {
      "source": "yadd-reference/master-index-grouped/719/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "cadb2e325f2ded3ff29393dce10f6210"
  },
  {
    "text": "GendL Application - MASTER-INDEX-GROUPED 125 Matches for GLOBAL-POLYGON-PROJECTION Matches for GLOBAL-POLYGON-PROJECTION GLOBAL-POLYGON-PROJECTION ( Object, geom-base)",
    "metadata": {
      "source": "yadd-reference/master-index-grouped/125/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "9580aa32d6181dfb8c7a1d539748040e"
  },
  {
    "text": "GendL Application - MASTER-INDEX-GROUPED 717 Matches for GWL:BASE-AJAX-SHEET Matches for GWL:BASE-AJAX-SHEET BASE-AJAX-SHEET ( Object, gwl)",
    "metadata": {
      "source": "yadd-reference/master-index-grouped/717/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "b19891327df5ce56dc7157b3e893dacc"
  },
  {
    "text": "GendL Application - MASTER-INDEX-GROUPED 457 Matches for GWL::LAYOUT-MIXIN Matches for GWL::LAYOUT-MIXIN LAYOUT-MIXIN ( Object, gwl)",
    "metadata": {
      "source": "yadd-reference/master-index-grouped/457/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "4fb9b0afbcf19f531eb617ad10ad3f49"
  },
  {
    "text": "GendL Application - MASTER-INDEX-GROUPED 521 Matches for GWL:BASE-FORM-CONTROL Matches for GWL:BASE-FORM-CONTROL BASE-FORM-CONTROL ( Object, gwl)",
    "metadata": {
      "source": "yadd-reference/master-index-grouped/521/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "a2411eef0c116467f66810f0c6aa0ebe"
  },
  {
    "text": "GendL Application - MASTER-INDEX-GROUPED 208 Matches for GWL:BASE-HTML-SHEET Matches for GWL:BASE-HTML-SHEET BASE-HTML-SHEET ( Object, gwl)",
    "metadata": {
      "source": "yadd-reference/master-index-grouped/208/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "52d030fce6e0468efec1da986f87485c"
  },
  {
    "text": "GendL Application - MASTER-INDEX-GROUPED 349 Matches for QUANTIFICATION Matches for QUANTIFICATION QUANTIFICATION ( Object, gendl)",
    "metadata": {
      "source": "yadd-reference/master-index-grouped/349/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "4e29954b30399dceceb1ae52162809eb"
  },
  {
    "text": "GendL Application - MASTER-INDEX-GROUPED 239 Matches for YADD:PACKAGE-DOKUMENTATION Matches for YADD:PACKAGE-DOKUMENTATION PACKAGE-DOKUMENTATION ( Object, yadd)",
    "metadata": {
      "source": "yadd-reference/master-index-grouped/239/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "9e33fc9da3826f177bafa7baaaca222a"
  },
  {
    "text": "GendL Application - MASTER-INDEX-GROUPED 663 Matches for YADD::PACKAGE-FORM Matches for YADD::PACKAGE-FORM PACKAGE-FORM ( Object, yadd)",
    "metadata": {
      "source": "yadd-reference/master-index-grouped/663/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "807623ad6ccef924de8d4ae8ecabed32"
  },
  {
    "text": "GendL Application - MASTER-INDEX-GROUPED 94 Matches for GWL::SKELETON-FORM-CONTROL Matches for GWL::SKELETON-FORM-CONTROL SKELETON-FORM-CONTROL ( Object, gwl)",
    "metadata": {
      "source": "yadd-reference/master-index-grouped/94/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "742623e3a8ee7077b66af129b24f5bfd"
  },
  {
    "text": "GendL Application - MASTER-INDEX-GROUPED 185 Matches for BASE-RULE-OBJECT Matches for BASE-RULE-OBJECT BASE-RULE-OBJECT ( Object, gendl)",
    "metadata": {
      "source": "yadd-reference/master-index-grouped/185/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "c05b69c910dc4dcd6f37ed9bb7df8ca9"
  },
  {
    "text": "GendL Application - MASTER-INDEX-GROUPED 91 Matches for LINEAR-DIMENSION Matches for LINEAR-DIMENSION LINEAR-DIMENSION ( Object, geom-base)",
    "metadata": {
      "source": "yadd-reference/master-index-grouped/91/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "258e73996b4c9b141981d67ef192334d"
  },
  {
    "text": "GendL Application - MASTER-INDEX-GROUPED 192 Matches for GEOM-BASE::GLOBAL-FILLETED-POLYLINE-MIXIN Matches for GEOM-BASE::GLOBAL-FILLETED-POLYLINE-MIXIN GLOBAL-FILLETED-POLYLINE-MIXIN ( Object, geom-base)",
    "metadata": {
      "source": "yadd-reference/master-index-grouped/192/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "69a885ab2a869ba6c46a953cd683b58a"
  },
  {
    "text": "GendL Application - MASTER-INDEX-GROUPED 751 Matches for BASE-OBJECT Matches for BASE-OBJECT BASE-OBJECT ( Object, geom-base)",
    "metadata": {
      "source": "yadd-reference/master-index-grouped/751/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "6de6e2b57c9faa768e386c3a040eb41d"
  },
  {
    "text": "GendL Application - MASTER-INDEX-GROUPED 469 Matches for GEOM-BASE::ARCOID-MIXIN Matches for GEOM-BASE::ARCOID-MIXIN ARCOID-MIXIN ( Object, geom-base)",
    "metadata": {
      "source": "yadd-reference/master-index-grouped/469/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "ba7116cc70b8c67352ff36efff903987"
  },
  {
    "text": "GendL Application - MASTER-INDEX-GROUPED 715 Matches for GWL::GEOMETRY-VIEW-MIXIN Matches for GWL::GEOMETRY-VIEW-MIXIN GEOMETRY-VIEW-MIXIN ( Object, gwl)",
    "metadata": {
      "source": "yadd-reference/master-index-grouped/715/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "b82daee34f1fb9af8815c4e73c96628a"
  },
  {
    "text": "GendL Application - MASTER-INDEX-GROUPED 506 Matches for GWL:SKELETON-UI-ELEMENT Matches for GWL:SKELETON-UI-ELEMENT SKELETON-UI-ELEMENT ( Object, gwl)",
    "metadata": {
      "source": "yadd-reference/master-index-grouped/506/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "1cd7e747584261bf9251d9588ff7e726"
  },
  {
    "text": "GendL Application - MASTER-INDEX-GROUPED 141 Matches for LINE Matches for LINE LINE ( Object, geom-base)",
    "metadata": {
      "source": "yadd-reference/master-index-grouped/141/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "e3fc7c9f48548822d2558b767176c134"
  },
  {
    "text": "GendL Application - MASTER-INDEX-GROUPED 772 Matches for SPHERE Matches for SPHERE SPHERE ( Object, geom-base)",
    "metadata": {
      "source": "yadd-reference/master-index-grouped/772/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "f2d291d8cdad7e21549639ba444c9d65"
  },
  {
    "text": "GendL Application - MASTER-INDEX-GROUPED 709 Matches for GEOM-BASE::RENDERER-MIXIN Matches for GEOM-BASE::RENDERER-MIXIN RENDERER-MIXIN ( Object, geom-base)",
    "metadata": {
      "source": "yadd-reference/master-index-grouped/709/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "616bc61bece32aa2c23a8248332e4265"
  },
  {
    "text": "GendL Application - MASTER-INDEX-GROUPED 587 Matches for YADD::BASE-YADD-SHEET Matches for YADD::BASE-YADD-SHEET BASE-YADD-SHEET ( Object, yadd)",
    "metadata": {
      "source": "yadd-reference/master-index-grouped/587/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "581e82f99c3bcc936d3479fe8dec02e7"
  },
  {
    "text": "GendL Application - MASTER-INDEX-GROUPED 629 Matches for CONSTRAINED-ARC Matches for CONSTRAINED-ARC CONSTRAINED-ARC ( Object, geom-base)",
    "metadata": {
      "source": "yadd-reference/master-index-grouped/629/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "842e9ef6fa2926aa7aa0c34e0fede39c"
  },
  {
    "text": "GendL Application - MASTER-INDEX-GROUPED 312 Matches for GWL:MENU-FORM-CONTROL Matches for GWL:MENU-FORM-CONTROL MENU-FORM-CONTROL ( Object, gwl)",
    "metadata": {
      "source": "yadd-reference/master-index-grouped/312/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "f69c7d6160b00d85effe3966504ec6de"
  },
  {
    "text": "GendL Application - MASTER-INDEX-GROUPED 759 Matches for CYLINDER Matches for CYLINDER CYLINDER ( Object, geom-base)",
    "metadata": {
      "source": "yadd-reference/master-index-grouped/759/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "4ee213abd1c65e4ce1d03aad734749bb"
  },
  {
    "text": "GendL Application - MASTER-INDEX-GROUPED 426 Matches for GWL:BASE-HTML-GRAPHICS-SHEET Matches for GWL:BASE-HTML-GRAPHICS-SHEET BASE-HTML-GRAPHICS-SHEET ( Object, gwl)",
    "metadata": {
      "source": "yadd-reference/master-index-grouped/426/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "a920ebea2500d12ba837c2f74c9637eb"
  },
  {
    "text": "GendL Application - MASTER-INDEX-GROUPED 298 Matches for GEOM-BASE::GLOBAL-POLYLINE-MIXIN Matches for GEOM-BASE::GLOBAL-POLYLINE-MIXIN GLOBAL-POLYLINE-MIXIN ( Object, geom-base)",
    "metadata": {
      "source": "yadd-reference/master-index-grouped/298/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "3d6788425e252bde2eb21f8c08fbbac3"
  },
  {
    "text": "GendL Application - MASTER-INDEX-GROUPED 351 Matches for GENDL::STANDARD-SEQUENCE Matches for GENDL::STANDARD-SEQUENCE STANDARD-SEQUENCE ( Object, gendl)",
    "metadata": {
      "source": "yadd-reference/master-index-grouped/351/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "8914c3241125ccab216df75ad104bca6"
  },
  {
    "text": "GendL Application - MASTER-INDEX-GROUPED 157 Matches for BASE-DRAWING Matches for BASE-DRAWING BASE-DRAWING ( Object, geom-base)",
    "metadata": {
      "source": "yadd-reference/master-index-grouped/157/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "a8ba019fbeb6a148ecba9c4608e21b1f"
  },
  {
    "text": "GendL Application - MASTER-INDEX-GROUPED 654 Matches for VANILLA-MIXIN* Matches for VANILLA-MIXIN* VANILLA-MIXIN* ( Object, gendl)",
    "metadata": {
      "source": "yadd-reference/master-index-grouped/654/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "a35c564f615708eb75446b1e9588f202"
  },
  {
    "text": "GendL Application - MASTER-INDEX-GROUPED 532 Matches for GWL:SHEET-SECTION Matches for GWL:SHEET-SECTION SHEET-SECTION ( Object, gwl)",
    "metadata": {
      "source": "yadd-reference/master-index-grouped/532/index.html",
      "file_name": "index.html",
      "file_type": "html",
      "content_type": "reference",
      "topic": "general",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "866012f90357a4989dff3aa6c958458b"
  },
  {
    "text": "\n# GendL Training \n\nThis is a collaborative effort between Genworks and Mike Twelves, with\nthe intention of releasing the materials under a shared copyright\n\n\n## Compiling/Loading\n\n\nFirst, (re)generate the `training.asd` file if necessary (only needed if files were added/removed/renamed):\n\n```\n(cl-lite \".../path/to/training/\" :create-asd-file? t)\n```\n\nNext, set up Quicklisp (this can be in your `gdlinit.cl`):\n\n```\n(load-quicklisp)\n(pushnew \".../path/to/training/\" ql:*local-project-directories*)\n(ql:quickload :training)\n\n```\n\nTo visit the toplevel you can go to\n\n  `http://localhost:9000/gendl-self-start-backdoor`\n\nor to any of the tutorial sets with e.g.\n\n  `http://localhost:9000/t2-backdoor`\n\n\n  \n\n\n\n\n\n",
    "metadata": {
      "source": "gornschool-training/README.md",
      "file_name": "README.md",
      "file_type": "md",
      "content_type": "tutorial",
      "topic": "general",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "d2d4916aeb030f36dddea0b1b4e5ef82"
  },
  {
    "text": "\n## External program dependency:\n\n(from https://github.com/indic-transliteration/indic_transliteration_py):\n\n\n\n0. [ Install python pip if you don't already have it ]\n1. sudo pip install indic_transliteration -U\n2. sudo pip install git+https://github.com/indic-transliteration/indic_transliteration_py/@master -U\n\n\n",
    "metadata": {
      "source": "gornschool-training/quiz/README.md",
      "file_name": "README.md",
      "file_type": "md",
      "content_type": "tutorial",
      "topic": "general",
      "chunk_id": 0,
      "chunk_count": 1
    },
    "id": "e8cdb5929ae7eb42d263450a9cbde225"
  }
]