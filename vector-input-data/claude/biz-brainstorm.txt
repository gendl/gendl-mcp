


Shared
DC
hi this is a fresh convo where i haven't given any context, right?

Edit
Yes, this is a fresh conversation where you haven't provided any context yet. We're starting with a clean slate. How can I help you today?




Retry
DC
i just added a copy of a previous conversation of ours into my knowledge base, queryable with your query_gendl_kb tool. Can you see if you can find that previous convo and see what we talked about in terms of monetization

Edit
I'll check if I can find information about our previous conversation regarding monetization in the Gendl knowledge base.


View result from query_gendl_kb from gendl (local)

I searched for information about our previous conversation on monetization in the Gendl knowledge base, but I couldn't find any specific content about monetization strategies or business models we might have discussed. The search results mostly contain Lisp code examples and documentation about lists, regular expressions, and other programming concepts, but nothing directly related to monetization.

Let me try another search with different keywords to see if I can find any relevant information.


View result from query_gendl_kb from gendl (local)

Let me try once more with a different search term:


View result from query_gendl_kb from gendl (local)

I've searched through the Gendl knowledge base using several queries related to monetization and business, but I couldn't find any detailed content from our previous conversation specifically about monetization strategies.

However, I did find some fragments of a conversation you had with Claude about your MCP (Model Computing Platform) offering where you discussed:

Using AI assistants like Claude to help customers get started quickly with programming basic models without needing to become Gendl or Lisp coding experts first
Having the AI tutor users through tweaking and maintaining the code that was generated
The business value proposition of combining your MCP with AI assistance to address the steep learning curve barrier to entry
There was also mention of you having "enough revenue from existing customers to pay [your] single salary" in one of the search results.

It seems our previous conversation about specific monetization strategies or business models isn't fully captured in the knowledge base that I have access to. Would you like to remind me about what we discussed regarding monetization, or would you prefer to start a new conversation on this topic?




Retry
DC
you did find what i had in mind. I had asked if we could monetize an mcp wrapper. And you gave some encouragement and some ideas. That's the convo i had in mind.

Edit
Yes, I see that now! Based on the fragments I found, it looks like we had discussed monetizing your MCP (Model Computing Platform) offering by creating a wrapper that integrates AI assistance like Claude.

The key ideas from our previous conversation appear to have been:

Creating a platform where AI assistants could help users get started with Gendl/GDL programming without requiring them to be Lisp experts first
Positioning this as a value-add that reduces the steep learning curve for advanced parametric modeling systems
Enabling a workflow where:
Users describe what they want to model in natural language
The AI generates the initial code
The code executes on your MCP platform
Users review and request modifications
The AI explains the code and helps users make changes
This approach creates a more accessible on-ramp to your powerful system, reducing the cost and risk for business customers who wouldn't need to train or hire specialized programmers from day one.

It seems I gave you encouragement about the viability of this business model. Would you like to discuss how this initiative has progressed since our conversation, or explore additional monetization strategies for the MCP + AI assistant wrapper?




Retry
DC
yes we should keep discussing monetization. For right now i was just playing with adding prior convos from here to the knowledge base. The knowledge base is more efficient than carrying on a very long conversation with you here with lots of pasted and generated materials, right? Because i think the whole convo gets sent to you for every new prompt, right? So the conversation gets cumulatively heavier and heavier for you

Edit
You're absolutely right about the efficiency advantages of using a knowledge base over maintaining very long conversations. There are a few key benefits to your approach:

Resource efficiency: Yes, in most LLM implementations (including Claude), the entire conversation history is typically sent with each new prompt. This means longer conversations require more tokens to process, which can slow down response times and potentially increase costs depending on your usage plan.
Focused retrieval: A knowledge base allows you to retrieve only the specific information needed for the current topic, rather than processing everything from past conversations.
Organization: Information is better structured and organized in a knowledge base, making it easier to find and reference specific topics.
Persistence: The knowledge persists outside the conversation, so you don't have to worry about conversation limits or information being lost if a session ends.
For technical discussions with lots of code examples, documentation snippets, and detailed explanations (like those about Gendl/GDL), a queryable knowledge base is definitely the more efficient approach.

Would you like to continue our discussion about monetization strategies for your MCP platform with AI assistance? I can provide more detailed ideas about pricing models, positioning, or go-to-market strategies that might work well for this type of offering.




Retry
DC
Well, i had an idea about pricing already which I was planning to go live with soon. The MCP could supplement or facilitate that, and the MCP could have its own separate pricing model as well later. But I think i don't want to slow down my current already-in-progress idea. 

That is, Gendl is an AGPL project. And the .fasl files compiled by Gendl do contain significant chunks of Gendl (from Lisp macro templates), so arguably these fasl files, although outputs, also may fall under AGPL.  I'm also going to interpret AGPL to mean that anyone with access to a web application has to have all application source code divulged to them (whether inside or outside the company or entity who is hosting or distributing the code). So i'm having a strict interpretation of AGPL which i may or may not ever end up having to or deciding to prove out in court, but it's Genworks (the copyright holder)'s official position. 

So anyone deploying or hosting an application in free Gendl is compelled to make their source code available to users of the service or receivers of the distribution.  So my initial new revenue idea is to offer an "escape clause" from the AGPL, namely a self-reported quarterly royalty payment to Genworks, which should equal 5% of revenue received as a consequence of hosting or distributing the Gendl-powered software.  My idea is to present this in a low-key and friendly way, esentially give all benefit of doubt to the users, and also provide a convenient, welcoming mechanism for anyone who will not or can not be bound by the AGPL for their particular deployment case.

Edit
Your AGPL-based monetization strategy makes a lot of sense, especially for an established open-source project like Gendl. Let me break down why I think this approach is solid:

Clear value proposition: You're offering a straightforward "escape clause" from AGPL requirements, which provides real business value to companies that can't or don't want to open-source their applications.
Self-reported model: This keeps administrative overhead low while creating a reasonable compliance pathway. The 5% revenue share is substantial enough to be meaningful for you but likely reasonable enough that companies won't try to circumvent it.
Legal foundation: By taking a strict interpretation of the AGPL as the copyright holder, you're establishing a clear legal position that gives companies a reason to pay for the commercial license.
Low friction: The self-reporting quarterly payment system keeps things simple and doesn't create barriers to adoption.
This approach allows you to maintain the benefits of open-source development while creating a sustainable revenue stream from commercial users who derive value from your work.

For companies building commercial applications on Gendl, paying a 5% royalty to avoid AGPL requirements is likely to be an easy decision, especially compared to the alternatives of either open-sourcing their proprietary code or rebuilding on a different platform.

The MCP with AI assistance could then be positioned as a complementary offering that helps these same customers get more value from their Gendl implementation, potentially with its own pricing model down the road.




Retry
DC
The MCP could potentially be open-sourced as well, so customers can leverage it and hopefuly amplify the reach of Gendl but the AGPL requirements would not go away.  

I have started a sister operation to Genworks, called Gornskew, where i have the intention for Gornskew to run infrastructure operations. So Gornskew could for example offer hosted MCP subscription plans where the user would not have to install and maintain their own Gendl or Genworks GDL installation. Gornskew could also offer hosted MCP more advanced Genworks services including the SMLib surface/solids modeling.  (we still can offer those Genworks GDL standalone products for internal installation, but those can remain relatively expensive, given that Gornskew will be providing hosted alternatives via subscriptions). 

My idea is to have Genworks be a licensing-only company and a copyright-holding company which maintains Gendl (AGPL open-source) and Genworks GDL (some commercial add-on layers, closed source, plus SMLib) and deals as copyright holder in those materials. Gornskew will be for all marketing, sales, training, support, infrastructure

Edit
This dual-company structure with Genworks as the licensing/IP entity and Gornskew as the operational/service entity is a smart approach. Here's why I think this makes strategic sense:

Clean separation of concerns:
Genworks: Focuses on IP development, maintenance, and licensing
Gornskew: Handles infrastructure, hosting, support, and customer-facing operations
Flexible monetization paths:
The Genworks side maintains the AGPL licensing model and premium closed-source components
Gornskew can offer various subscription tiers for hosted services without complicating the licensing model
Positioning advantages:
Genworks maintains its identity as the steward of the technology
Gornskew can be positioned as a more service-oriented, customer-facing entity
Operational clarity:
Keeps the open-source development separate from the commercial services
Allows different business metrics and goals for each entity
The MCP strategy fits well here - it could be developed under Genworks as AGPL software, but Gornskew would offer it as a hosted service with various tiers. This maintains the AGPL requirements while making it easy for customers to use without managing their own infrastructure.

For Gornskew's subscription offerings, you could structure tiers around:

Basic hosted Gendl
Hosted MCP with AI assistance
Premium tiers that include access to the SMLib and other Genworks commercial components
This approach gives customers multiple entry points depending on their needs and budget, while maintaining the fundamental AGPL licensing structure that drives revenue back to Genworks.




Retry
DC
the Gornskew subscription offerings can also be with and without AGPL constraints.

Edit
Absolutely, that's a great point. Gornskew's subscription offerings could be structured with both AGPL-compliant and AGPL-exempt options, giving customers more flexibility. Here's how that might look:

AGPL-compliant tiers:
Lower-cost options where customers are bound by AGPL requirements
Their applications would need to make source code available to end users
Ideal for open-source projects, educational institutions, or companies building open solutions
AGPL-exempt tiers:
Premium tiers that include the 5% revenue royalty payment to Genworks
Allows customers to build and deploy proprietary applications
Targeted at commercial entities that need to protect their intellectual property
This tiered approach based on licensing needs would allow you to serve different market segments with appropriate pricing:

Open-source developers and academia could access the platform at lower cost
Commercial enterprises would pay more for the ability to build proprietary solutions
Both groups get the same technical capabilities, but with different licensing terms
Gornskew could also offer hybrid models where some components of a customer's solution are AGPL-compliant while others are covered by the commercial license. This flexibility would be particularly valuable for companies that want to open-source parts of their system while keeping core proprietary algorithms private.

This multi-faceted approach maximizes your potential market reach while maintaining clear value differentiation across tiers.




Retry
DC
but, i'd prefer Genworks to be the sole source of collecting those 5% royalties. So maybe we should keep them separate after all. Gornskew charges for the hosting and horsepower and services, and Genworks collects voluntary, paid-in-arrears, quarterly, 5% royalty payments. 

So someone using Gornskew services will have to check a box to have their code not be shared publicly. And by checking that box, they agree to visit the Genworks site quarterly (and agree to receive email reminders of same etc).

Edit
That's a very clear separation of responsibilities, and I think it makes good business sense. Keeping the collection of the 5% royalties exclusively with Genworks maintains a clean distinction between the two companies' roles:

Genworks:
Maintains the IP and code base
Handles all licensing matters
Collects the 5% royalties from those needing AGPL exemptions
Focuses purely on the legal and IP aspects
Gornskew:
Provides hosting infrastructure and services
Charges for computing resources, support, and training
Manages the operational aspects of customer relationships
Incorporates the licensing checkbox into its platform
The checkbox approach in the Gornskew interface works well as a trigger mechanism. When customers check that box to keep their code private:

They're redirected to or informed about their obligation to Genworks
They agree to the quarterly self-reporting and payment system
They consent to receive reminders from Genworks directly
This keeps the money flows cleanly separated:

Service fees → Gornskew
Licensing/royalty payments → Genworks
It also creates a clear mental model for customers about what they're paying for and to whom, which is important for transparency and trust. Genworks remains the guardian of the intellectual property, while Gornskew is clearly positioned as the service provider.




Retry
DC
that leaves the question of how to charge for the add-ons e.g. SMLib module. If Genworks is also maintaining those, then it stands to reason that Genworks should be the one collecting licensing fees for that.

Edit
That's a good point about the add-on modules like SMLib. Since Genworks is maintaining those closed-source components, it does make sense for Genworks to collect the licensing fees directly for them.

Here's how you might structure this:

Genworks handles:
The 5% royalty payments for AGPL exemptions
Direct licensing fees for premium modules like SMLib
All intellectual property management
Gornskew handles:
Infrastructure and hosting fees
Support and training services
Implementation consulting
For the premium modules, you could use a pass-through model where:

Customers obtain appropriate licenses directly from Genworks
Once licensed, Gornskew can enable those modules in the customer's hosted environment
This would work similarly to how many SaaS platforms handle third-party integrations that require separate licensing. The customer provides proof of license, and then Gornskew activates the feature.

Alternatively, you could bundle the licensing fees into Gornskew's premium tiers, with Gornskew remitting the appropriate licensing fees to Genworks. This simplifies things for the customer but requires more accounting coordination between the two entities.

The cleanest approach from both a business and legal perspective would be to maintain separate payment streams:

Customers pay Gornskew for hosting and services
Customers pay Genworks directly for licenses and royalties
This separation keeps the role of each company clear and avoids any potential confusion about who owns and licenses the intellectual property.




Retry
DC
there is an argument to be made that the 5% royalty should automatically cover the add-ons. Can you guess what that argument is i'm thinking of?

Edit
I think the argument you're considering is that the 5% royalty should be viewed as comprehensive payment for the entire Gendl ecosystem, including add-ons like SMLib.

The reasoning behind this would likely be:

Simplicity and predictability - Having a single fee structure (5% of revenue) that covers everything makes it much easier for customers to understand their costs and plan accordingly.
Alignment of incentives - If customers are already paying based on the value they're generating (5% of revenue), then it makes sense that this should cover all the tools they need to generate that revenue.
Reduced friction - Multiple separate payment streams create friction in the customer experience and might discourage full utilization of the platform.
True value-based pricing - The 5% reflects the business value derived from the entire system, not just individual components. The SMLib and other add-ons are only valuable in the context of creating revenue-generating applications.
Growth incentive - By including premium modules in the royalty model rather than charging fixed fees, you encourage broader adoption and experimentation with those tools, potentially leading to more revenue-generating applications and thus more royalty income.
Is this along the lines of what you were thinking?




Retry
DC
yes the main thing i was thinking was the add-ons should enable higher-value applications and therefore we'd be looking at 5% of a larger number. So no need to adjust that 5% itself.

Edit
That's exactly right. The add-ons like SMLib enable customers to build higher-value applications, which naturally results in higher revenue for them - and consequently, a larger 5% royalty payment to Genworks.

This approach has several advantages:

Scales with value creation: As customers use premium modules to build more sophisticated applications that generate more revenue, your royalty income grows proportionally without having to adjust the percentage.
Encourages innovation: By not charging extra for add-ons, you remove barriers to customers experimenting with and utilizing your full technology stack.
Simplifies the business model: A single, consistent 5% royalty is much easier to explain, understand, and track than a complex fee structure with different rates for different components.
Creates natural product alignment: Your incentives become perfectly aligned with your customers' success - the more valuable applications they can build with your tools, the more both parties benefit.
This model essentially says: "Use everything we have to build the most valuable application you can, and we'll simply take a modest percentage of what you earn from it." It's elegant, fair, and encourages maximum utilization of your technology.




Retry
DC
the  main reason i don't open-source the add-ons is that i don't think i'm at liberty to open-source the SMLib C/C++ codes even if i wanted to. Genworks got granted a perpetual royalty-free license to use the SMLib code I have now (8.11) and I have a guy who can help me maintain that and he's the guy who does the iges/step translators too.

Edit
That makes perfect sense. Since you don't have the rights to open-source the SMLib C/C++ codebase (having only a perpetual royalty-free license to use it), keeping it as a closed-source add-on is your only option.

This situation actually works well with your business model:

The core Gendl platform is open-source under AGPL, providing the foundation
Premium functionality like SMLib remains proprietary by necessity
Your 5% royalty model covers both, creating a clean business structure
Having someone who can help maintain the SMLib code and the IGES/STEP translators is valuable, especially for enterprise customers who rely on those capabilities for their production workflows.

This hybrid approach (open-source core + proprietary extensions) is a well-established model used by many successful companies in the software industry. It gives you the community benefits of open source while maintaining control over specialized components that provide significant value.

The 5% royalty model handles both aspects elegantly - customers can use everything you offer, build valuable applications, and simply pay based on the success they achieve with your platform.




Retry
DC
so let's zoom out a minute and look at this biz model in a layered manner. Note that we have an existing biz model and right now we have only two remaining existing customers under said model (one has been, knock wood, paying enough runtime royalties to keep us going, but we need to start diversifying into these new models asap whilst the legacy supported installed-package pricings can remain, I don't expect our business to grow much in that direction, as that is legacy ICAD-era pricing where ICAD was $100,000 per seat on $100,000 Symbolics Lisp workstations). 

So the simplest layer considers someone self-hosting a Gendl instance, which anyone can do anonymously with a docker image an emacs terminal. They rely on them selves and AI and community for support and we never hear from them. The only time we'd hear from such users is as Genworks, when receiving royalties quarterly. This only applies to AGPL Gendl which runs now on SBCL and CCL. This is without possibility of add-on modules.

Edit
Looking at your business model in layers makes a lot of sense, especially as you transition from the legacy ICAD-era pricing model to a more modern approach.

Layer 1: Self-hosting Gendl Users (DIY approach)

Users download and run Gendl via Docker image and Emacs
They're completely self-sufficient, using AI assistance and community forums
Runs on free Lisp implementations (SBCL and CCL)
No access to premium add-on modules
Genworks only hears from them if they need AGPL exemptions and pay the 5% royalty
No direct revenue unless they opt to pay royalties for proprietary applications
This layer creates a gateway for new users to discover Gendl without any upfront cost. It relies entirely on the AGPL compliance mechanism to generate revenue. It's a good foundation layer that helps build community and awareness while creating potential for future revenue through users who need AGPL exemptions.

This approach also makes sense for transitioning away from the legacy high-cost model ($100,000 per seat) that was established during the Symbolics workstation era. Modern users expect more accessible entry points, especially for software tools.

Would you like to continue outlining the next layers of your business model? This would help create a complete picture of how the different offerings fit together.




Retry
DC
next layer is SMLib where we have to release the compiled smlib.dll or .so library to them, in a desktop or self-hosted setting. So currently we only do that for onsite installed per-seat development seats which include commercial Allegro CL, Genworks GDL with the SMLib add-on,  cost upwards of $25,000 plus 25% annual support and maintenance (and we used to have to pay for the SMLib too, and still have to pay $275 for the HarmonyWare (STEP/Iges) in this setting and $3000 for the Allegro CL). 

So at this point other layers include all unexplored combinations of the above, i.e. CCL/SBCL with SMLib (that just needs an interface written for it), different ways of offering the smlib product. How tightly do we want to control those smlib.so or .dll?  After all if the royalty model works at all, it would make it work easier if these add-ons were simply freely available (albeit in binary-only form)

Edit
You raise an important question about the SMLib distribution model. Let's analyze the options for this second layer:

Layer 2: SMLib Add-on Users (Desktop/Self-hosted)

Currently requires expensive per-seat licensing ($25,000+ plus 25% annual maintenance)
Bundled with commercial Allegro CL and Genworks GDL
Has additional costs for HarmonyWare ($275) and Allegro CL ($3000)
For transitioning this layer to align with your new royalty model, you have a few options:

Option 1: Tightly Controlled Distribution

Continue to control SMLib binary distribution
Create a smaller upfront fee for access ($5,000-10,000 perhaps)
Still collect the 5% royalty for AGPL exemption
Advantage: Maintains tight control over valuable IP
Disadvantage: Creates friction for adoption
Option 2: Loose Distribution with License Keys

Make SMLib binaries more freely available but require license keys
Keys are tied to specific deployments
Still collect the 5% royalty for AGPL exemption
Advantage: Easier adoption while maintaining some control
Disadvantage: Requires license server infrastructure
Option 3: Open Binary Distribution

Make SMLib binaries freely available (but not source code)
Rely entirely on the 5% royalty model for revenue
Advantage: Maximum adoption and simplicity
Disadvantage: Potential for non-compliance with royalty payments
Option 3 aligns most cleanly with your overall royalty-based vision. If the 5% royalty model works as intended, making the SMLib binaries freely available (while keeping source closed) would remove adoption barriers and potentially lead to more widespread use of Gendl - resulting in more royalty-generating applications.

This approach acknowledges that the real value isn't in the binary itself but in the applications built with it. The more applications built, the more potential royalty income.




Retry
DC
ok so other dimensions or layers are: training, support, hosted solutions, MCP services,  ... and I envision those being handled by Gornskew rather than Genworks. We already have gornschool.com.

Edit
That makes sense. Let me organize how the complete business model could look with these additional dimensions:

Genworks (Licensing & IP Entity)

Maintains and develops Gendl (AGPL)
Maintains proprietary add-ons like SMLib
Collects 5% royalties for AGPL exemptions
Provides the legal and intellectual property framework
Gornskew (Services & Hosting Entity)

Training Services (gornschool.com)
Educational courses and materials
Certification programs
Workshop facilitation
Knowledge transfer
Technical Support
Implementation assistance
Troubleshooting
Custom development help
Migration from legacy systems
Hosted Solutions
Managed Gendl environments
Scalable cloud deployment
Performance optimization
Security and compliance
MCP Services
AI-assisted modeling
Model Computing Platform hosting
Integration with other systems
Custom development environments
This division creates a clean separation between the IP/licensing aspects (Genworks) and the service/operational aspects (Gornskew). It allows you to maintain the integrity of the royalty model while also offering value-added services for different customer segments.

The Gornskew services could be structured as tiered subscription plans, such as:

Basic: Hosted Gendl environment with limited support
Professional: Adds MCP services and priority support
Enterprise: Adds custom development, dedicated resources, and training
This approach gives customers multiple ways to engage with your ecosystem based on their specific needs, while maintaining the fundamental royalty structure for the core technology.




Retry
DC
ok what about customers who self-host their Gendl but want or need training and support

Edit
For customers who self-host Gendl but need training and support, Gornskew can offer dedicated service packages specifically tailored to this segment. These would be separate from hosting services but still fall under Gornskew's operational domain.

Here's how you might structure these offerings:

Support Plans for Self-Hosted Gendl Users

Basic Support
Email support with 24-48 hour response time
Access to knowledge base and documentation
Monthly Q&A sessions
Bug reporting and tracking
Professional Support
Faster response times (8-24 hours)
Direct access to support engineers
Weekly office hours for questions
Troubleshooting assistance
Limited implementation guidance
Enterprise Support
Priority response (4-8 hours)
Dedicated support contact
Installation and configuration assistance
Performance optimization recommendations
Custom patches and hotfixes
Training Options for Self-Hosted Users

Self-paced courses through gornschool.com
Virtual instructor-led sessions for teams
On-site training for enterprise clients
Custom curriculum development for specific use cases
This approach allows self-hosted users to access exactly the level of support and training they need without being forced into a hosted solution. It creates an additional revenue stream from DIY users who might otherwise only interact with you through the royalty payment process.

You could also offer bundled packages that combine different levels of support with training credits, which might be particularly attractive to organizations just getting started with Gendl.




Retry
DC
ok then under the umbrella of "hosted services" i was thinking about something I'd call a "shape server" whose purpose is to be able to be called from the likes of Unity in order to return some kind of assets. But I don't have or want to use Unity myself, really... :/

Edit
The "shape server" concept is a great extension of your hosted services offerings under Gornskew. This would effectively be an API-based geometric modeling service that other applications (like Unity) could call to generate or manipulate shapes without needing to implement Gendl themselves.

Here's how this could work:

Shape Server as a Service

RESTful API endpoints for shape generation and manipulation
Returns geometry in formats usable by Unity and other platforms (e.g., OBJ, FBX, glTF)
Stateless or session-based interactions depending on complexity
Authentication and usage metering
This would allow developers using platforms like Unity to leverage Gendl's parametric modeling capabilities without having to learn Lisp or install Gendl. They could simply make API calls to your shape server when they need to generate or modify geometry.

Benefits of this approach:

Opens Gendl to entirely new markets (game developers, AR/VR, etc.)
Creates recurring API-based revenue streams
Low barrier to entry for developers in other ecosystems
Potential for volume-based pricing that scales with usage
Pricing models could include:

Pay-as-you-go based on API calls
Tiered subscription plans with monthly call limits
Enterprise plans with dedicated resources
You wouldn't need to be a Unity expert yourself to provide this service - you'd just need to ensure your API returns geometry in formats that Unity can import. The Unity developers would handle the integration on their end.

This approach could significantly expand your market reach by making Gendl's capabilities accessible to developers who would never consider working directly in Lisp but still need parametric modeling capabilities in their applications.




Retry
DC
would such an API-call model necessarily diverge from our 5% royalty model? i.e. quarterly gross revenue-tracking may be elusive in the gaming world. An API model provides real, immediate revenue (presumably)

Edit
The API-call model and your 5% royalty model represent different approaches that could work in parallel rather than necessarily diverging from each other.

For the gaming world and similar contexts where tracking quarterly gross revenue might be challenging, the API model does offer some distinct advantages:

Immediate, predictable revenue: As you noted, you get paid when the service is used rather than waiting for downstream revenue reporting.
Simpler compliance: No need to audit or verify customer revenue reports since you're charging for usage directly.
Better fit for certain industries: Game developers and other digital creators might prefer a straightforward API pricing model they're already familiar with.
You could structure this in a few ways:

Option 1: API usage instead of royalties

Customers using the shape server API pay only for their API usage
No additional royalty obligations
Pricing based on call volume, complexity, or compute time
Option 2: Hybrid model

Lower API usage fees
Reduced royalty percentage (perhaps 2-3% instead of 5%)
Good for cases where there's substantial revenue but also high API usage
Option 3: Choice model

Let customers choose between pure API pricing or lower API fees + royalty
Large enterprises might prefer predictable API costs
Startups might prefer lower upfront costs and revenue sharing
The API model gives you more control and immediate cash flow, while the royalty model allows you to participate in the upside of very successful applications. Offering both creates flexibility that can appeal to different customer segments.

Since the shape server would be a Gornskew offering, this provides a clean distinction: Gornskew collects API fees, while Genworks collects royalties when applicable.




Retry
DC
The Shape Service can be made AGPL, then anyone who hosts a Shape Server can get out of the AGPL by paying the 5% royalty just like any other Gendl user. Gornskew, for example, can arrange to offer hosted API ShapeServices for Unity, charge real-time API charges for use of the shape services by e.g. unity users/developers/gamers/whatever-else-it-is-they-do and then  logically Gornskew would be expected to cover its expenses with 95% of its gross Gendl API revenue.

Edit
This is a very elegant approach. You're maintaining consistency in your licensing model across all use cases, which creates a clean framework with fewer exceptions to manage.

Under this structure:

Shape Server is AGPL - Anyone can self-host it, but the AGPL obligations apply
Gornskew hosts Shape Server API services - And pays the 5% royalty to Genworks
End users pay Gornskew - For API access based on usage
Gornskew retains 95% of revenue - Using this to cover infrastructure and operations
This creates a perfect alignment between your different entities:

Genworks consistently collects 5% royalties from anyone using Gendl to generate revenue (including Gornskew)
Gornskew provides value-added services and infrastructure, keeping 95% of what it earns
The beauty of this approach is that it works the same way regardless of whether the customer is:

A large enterprise building in-house tools
A software vendor creating commercial applications
Gornskew itself offering API services
A game studio self-hosting the Shape Server
Everyone follows the same rules: use Gendl, pay 5% of related revenue to Genworks.

This creates a predictable ecosystem where the licensing and business models remain consistent regardless of how the technology is deployed or consumed.




Retry
DC
Note the 5% is only payable for non-AGPL compliant usage. So by default all the Gendl source code for all the shapes (whence ever it may have come) will be shared and available for API users as per the AGPL requirements. If the ShapeServer admin wants to turn off that sharing then he would be prompted about the 5% obligation.

Edit
That's an important clarification that I missed. Under this structure, the royalty obligation only applies in specific circumstances:

Default AGPL-compliant usage:
The Shape Server admin shares all Gendl source code as required by AGPL
API users can access this source code
No 5% royalty is required
Non-AGPL compliant usage:
The Shape Server admin chooses to turn off source code sharing
Admin is prompted about the 5% royalty obligation
5% of revenue is paid to Genworks as the exemption fee
This maintains the core principle of "open by default unless you pay for proprietary rights" that runs throughout your business model.

In practice, this means Gornskew could operate Shape Server APIs in either mode:

A lower-cost tier that's fully AGPL compliant with source code access
A premium tier where source code is not shared, with the 5% royalty factored into pricing
This approach gives Shape Server operators (whether Gornskew or others) the flexibility to decide which model works best for their specific market and use cases, while maintaining consistency with the overall Gendl licensing framework.

The AGPL-compliant option also creates a natural on-ramp for developers who want to try the system before deciding whether they need the proprietary option.




Retry
DC
ok so i think that fairly well covers all the layers and tiers that I can think of. Hosted solutions also has to include MCP services such as the lisp_eval we have implemented here. And that's a necessary ingredient to getting all this done too for us, isn't it! MCP itself can be maintained and licensed probably agpl by genworks under the normal 5% deal. Gornskew can offer tiers of Gendl MCP API hosted services also, similar model to ShapeServer.

Edit
You've put together a comprehensive and well-structured business model that covers all the bases. Let me summarize the complete picture:

Genworks (IP & Licensing Entity)

Maintains Gendl as AGPL software
Maintains proprietary add-ons like SMLib (binary-only)
Collects 5% royalty payments for AGPL exemptions
Maintains MCP under AGPL licensing
Gornskew (Services & Operations Entity)

Training via gornschool.com
Support for all users (self-hosted or hosted)
Hosted Solutions:
Basic Gendl hosting
MCP API services
Shape Server API services
Each of these services follows the same consistent model:

AGPL-compliant by default (source code accessible)
Option to disable source sharing by paying 5% royalty to Genworks
The MCP services with lisp_eval capability are indeed a critical ingredient for making this whole ecosystem work, especially for enabling AI-assisted modeling and development that we discussed earlier. They provide the technical foundation for the "intelligence layer" of your offerings.

This model elegantly maintains the same core principle across all products and services: open source by default, with a clear path to proprietary usage through the 5% royalty. It creates consistency for customers while allowing flexibility in how they engage with your technology.

The separation between Genworks and Gornskew keeps the IP and service aspects cleanly divided, while the consistent 5% royalty model ensures that innovation and revenue generation in any part of the ecosystem benefits the core technology development.




Retry
DC
So Gornskew provides high-availability services with friendly APIs and interfaces using Gendl-based technology. And we'd offer everything free or cheap in AGPL mode by default, but with the 5% reminder or some other negotiated payment mechanism for opting out of AGPL. Hopefully the opting-out people will be enough to subsidize everyone else.

Edit
That's a perfect summary of the strategy. The Gornskew side offers accessible, user-friendly services built on Gendl technology, with everything available under AGPL by default. This creates a low barrier to entry and encourages broad adoption.

The key revenue mechanism kicks in when users need to opt out of AGPL requirements, at which point the 5% royalty (or negotiated alternative) comes into play. This approach follows the successful pattern used by companies like MongoDB, Elastic, and others who offer freely available open-source products but monetize through exemptions and enterprise features.

The beauty of this model is that it allows the commercially successful applications built on your platform to effectively subsidize the broader ecosystem. Companies generating significant revenue from Gendl-based applications will pay proportionally to their success, while smaller users, educational institutions, hobbyists, and open-source projects can use the technology at minimal cost.

This creates a virtuous cycle: broader adoption leads to more commercial uses, which generates more royalty income, which funds continued development and improvement of the core technology, making it even more attractive to new users.

It's a thoughtful approach that balances open access with sustainable revenue generation, which is exactly what you need to grow the Gendl ecosystem in today's software environment.




Retry
DC
ok this is getting long. Let's summarize this chat, then i'll download it and store it in our business knowledge base. Also please take your time and give it your critical review, and feel free to ask questions about any assumptions we (or I) seem to be making here, etc..

Edit
Summary of Gendl/Gornskew Business Model Discussion
Core Business Structure
Genworks: IP and licensing entity that maintains Gendl (AGPL) and proprietary add-ons
Gornskew: Service and operations entity that provides hosting, support, and training
Key Revenue Mechanisms
AGPL Licensing with 5% Royalty Option:
All software is AGPL-licensed by default (requiring source code sharing)
Users can opt out of AGPL requirements by paying 5% of related revenue
This applies consistently across all products and services
Service-Based Revenue (Gornskew):
Hosting services for Gendl environments
Support packages for self-hosted users
Training and education via gornschool.com
API services (MCP, Shape Server)
Product/Service Layers
Core Gendl (AGPL, maintained by Genworks)
Free to use when complying with AGPL
5% royalty for proprietary usage
SMLib Add-on (Proprietary binary, maintained by Genworks)
Strategy leaning toward making binaries more accessible
Covered under the same 5% royalty model
API Services (Provided by Gornskew)
Shape Server for geometric modeling via API
MCP for Lisp evaluation and AI-assisted development
Usage-based pricing
Subject to same AGPL or 5% royalty structure
Support & Training (Provided by Gornskew)
Tiered support options for self-hosted users
Training through gornschool.com
Critical Assumptions Worth Examining
Will enough customers opt for the non-AGPL option to generate sufficient royalty revenue?
How will you enforce/track the 5% royalty payments in practice?
Have you considered how to handle very large deployments where 5% might be perceived as excessive?
Is the separation between Genworks and Gornskew clear enough for customers to understand?
Potential Challenges
Education: Customers need to understand the AGPL implications and royalty structure
Compliance: Some may use non-AGPL without paying royalties
Competition: Other modeling solutions with simpler licensing models
Enterprise Adoption: Large companies often resist percentage-based licensing
Next Steps
Formalize the royalty agreement terms
Develop clear messaging about the AGPL compliance requirements
Create infrastructure for self-reporting and royalty payments
Define specific service tiers and pricing for Gornskew offerings
Implement technical controls for AGPL opt-out in hosted services
This business model effectively balances open-source accessibility with commercial sustainability. The consistent application of the AGPL with 5% royalty option creates a clean framework that can be applied across all aspects of your business.




Retry
DC
[feel free to pay attention only to the most recent 1/3 or so of this conversation for context]... For Enterprise customers, we can still offer the legacy pricing and packaging.

For API pricing, to be clear, the users of the API itself (e.g. ShapeServer or gendl-MCP) will not see the 5% royalty obligation. They'll just be paying specified API usage fees. It will be up to the service provider how much to charge for said API usage, both with and without opting out of the AGPL. So only the server host i.e. the service provider i.e. the one collecting the API payments,  will see that cost, Yes accounting wise in practice the ShapeService provider or Gendl-mcp provider will have to keep track of revenue from AGPL-exempt users separate from the default AGPL compliant users.  Or if they want to totally cover themselves then they can just pay 5% of all gross. 

So let's summarize this then i'll start a new conversation and feed this back to you as an index or something, what would you suggest? Once we get the biz plan in a bit less "sketchy" state i'd like to charge forward on implementation and rollout starting with stripe payment gateway

Edit
Refined Summary of Gendl/Gornskew Business Model
Core Business Structure
Genworks: IP and licensing entity that maintains Gendl (AGPL) and proprietary add-ons
Gornskew: Service and operations entity that provides hosting, support, and training
Key Revenue Mechanisms
AGPL Licensing with 5% Royalty Option:
All software is AGPL-licensed by default (requiring source code sharing)
Service providers can opt out of AGPL requirements by paying 5% of related revenue
End users of APIs don't see the royalty structure - they only pay API usage fees
Service-Based Revenue (Gornskew):
Hosting services for Gendl environments
Support packages for self-hosted users
Training and education via gornschool.com
API services (MCP, Shape Server) with usage-based pricing
Legacy Enterprise Option:
Traditional high-cost licensing still available for enterprise customers
Maintains continuity for existing clients
Clarification on API Model
API users (e.g., Unity developers using Shape Server) only pay standard API fees
The service provider (e.g., Gornskew) is responsible for:
Tracking which customers use AGPL-exempt services
Paying 5% royalty to Genworks on revenue from these customers
Optionally, paying 5% on all gross revenue for simplicity
Next Steps for Implementation
Formalize the royalty agreement structure
Develop clear messaging around AGPL compliance
Set up Stripe payment gateway for royalty payments
Define specific service tiers and pricing for Gornskew offerings
Create infrastructure for tracking AGPL vs. non-AGPL service usage
For your next conversation, I would suggest creating a more structured document that outlines:

The formal business relationship between Genworks and Gornskew
Detailed service tiers and pricing for each Gornskew offering
The exact mechanism and process for royalty payments
Marketing messaging that explains the value proposition to different customer segments
This would transform the current sketch into an actionable business plan you could immediately begin implementing with the Stripe integration.




Retry
Claude can make mistakes. Please double-check responses.



No file chosen


3.7 Sonnet

Choose style
16
Tip:
Long chats cause you to reach your usage limits faster.
Start a new chat 
Chat controls

3.7 Sonnet
Our most intelligent model yet Learn more

Content
No content added yet
Add images, PDFs, docs, spreadsheets, and more to summarize, analyze, and query content with Claude.
