(in-package :quiz)

;;
;; Following was generated by ChatGPT (after much prompting):
;;

(defparameter *bad-chars* (mapcar #'code-char
				  '(#x093e #x093f #x0940 #x0941 #x0942 #x0943 #x0944 #x0900
				    #x0945 #x0946 #x0947 #x0948 #x0949 #x094a #x094b #x094c
				    #x094d #x094e #x094f #x0955 #x0956 #x0957 #x0962 #x0963
				    #x0901 #x0902 #x0903
				    #x093a #x093b #x093c #x093e #x093f #x0940 #x0941)))

(defun scramble-string (string)
  (let* ((string-list (coerce string 'list))
         (string-length (length string-list)))
    (dotimes (i (1- string-length))
      (let* ((j (+ i (random (- string-length i))))
             (scramble-prob (/ i (1- string-length))))
        (when (and (/= i j)
                   (not (char= (nth i string-list)(nth j string-list)))
                   (not (char= #\Space (nth i string-list)))
                   (not (char= #\Space (nth j string-list)))
                   (< (random 1.0) scramble-prob))
          (rotatef (nth i string-list)
                   (nth j string-list)))))

    (setq string-list (remove-if #'(lambda(char) (member char *bad-chars*)) string-list))
    
    (let ((result (coerce string-list 'string)))
      (if (string= string result)
          (subseq string 0 (max 0 (1- (length string))))
          result))))

