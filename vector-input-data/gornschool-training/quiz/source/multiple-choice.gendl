(in-package :quiz)

(define-object multiple-choice (training-common:base-site-mixin)

  :input-slots ((vocab-sets '("verbs-conjugation-1" "nouns-ending-in-a"
			      "asanas" "animals" "body-parts"))
                (select-menu-class "rounded-md text-base focus:border-indigo-500 focus:outline-none focus:ring-indigo-500")
                ;;(prompt-class "inline text-3xl font-bold tracking-tight text-fuchsia-500 sm:block sm:text-4xl lg:pb-5 md:pb-2 pb-3")
                (prompt-class "break-normal text-3xl font-bold tracking-tight text-fuchsia-500 sm:block sm:text-4xl lg:pb-5 md:pb-2 pb-3")
                )


  :computed-slots
  ((vocab-set (the vocab-set-input value))
   (quiz-type (the quiz-type-input value))
   (quiz-type-name (getf (the quiz-type-input effective-choice-plist)
			 (the quiz-type)))

   (number-of-choices 4)
   
   (body-content (with-cl-who-string ()
                   (str (the quiz-title-section div))
	           (str (the quiz-section div)))))
	   


  :objects
  ((quiz-title-section :type 'base-html-div
		       :inner-html (with-cl-who-string ()
				     (when *developing?*
				       (htm (:p (str (the development-links)))))
				     (:h2 :class "flex -mb-8"
                                          (:span :class "px-1" "Quiz:") (str (the quiz-type-input form-control)))
                                     (:h2 :class "flex"
                                          (:span :class "px-1" "Vocab:") (str (the vocab-set-input form-control)))))


   (quiz-section :type 'quiz-section
		 :pass-down (quiz-type number-of-choices prompt-class)
		 :word-category (cond ((search "noun" (the vocab-set))
				       :nouns)
				      ((search "verb" (the vocab-set))
				       :verbs)
				      (t :unknown))
		 :conjugation-type 1 ;; flag fill in with computed one.
		 :triples (alexandria:shuffle (the (populators (position (the vocab-set)
						                         (the vocab-sets)
						                         :test #'string-equal)) triples)))
   
   (vocab-set-input :type 'menu-form-control
		    :ajax-submit-on-change? t
		    :default (first (the-child choice-list))
		    :size 1
                    :id "vocab-set"
                    :validation-function #'(lambda(value)
                                             (declare (ignore value))
                                             (the quiz-section
                                                  (restore-slot-defaults!
                                                   (list :current-index :selected-indices) :force? t))
                                             t
                                             )
		    :choice-list (the vocab-sets)
                    :class (the select-menu-class))

   
   (quiz-type-input :type 'menu-form-control
		    :ajax-submit-on-change? t
		    :default (first (the-child choice-plist))
		    :size 1
                    :id "quiz-type"
                    :class (the select-menu-class)
		    :choice-plist (list :iast-to-meaning "IAST to meaning"
					:iast-to-devanagari "IAST to Devanagari"
					:devanagari-to-iast "Devanagari to IAST"
					:devanagari-to-meaning "Devanagari to Meaning"
					:meaning-to-iast "Meaning to IAST"
					:meaning-to-devanagari "Meaning to Devanagari"))
					
   (populators :type 'populator
	       :sequence (:size (length (the vocab-sets)))
	       :set-name (nth (the-child index) (the vocab-sets)))))


(define-object quiz-section (base-html-div)

  :input-slots (triples
		word-category conjugation-type
                quiz-type
                ;;
                ;; FLAG -- have to figure out how to keep devanagari char clusters together when
                ;;         scrambling the letters, before we can use this for :iast-to-devanagari.
                ;; 
                (choices-type (ecase (the quiz-type)
                                ((:devanagari-to-meaning :iast-to-meaning
                                  :meaning-to-devanagari :meaning-to-iast :iast-to-devanagari) :others-in-set)
                                ((:devanagari-to-iast) :scrambled)))
                number-of-choices prompt-class)

  :computed-slots
  ((current-index 0 :settable)

   (last-question? (= (the current-index) (1- (the triplets number-of-elements))))

   (count-string (format nil "(~a/~a)" (1+ (the current-index)) (the triplets number-of-elements)))
   
   (wrong-indices (let (indices
			(candidates
			  (remove (the current-index)
				  (list-of-numbers
				   0 (1- (the triplets number-of-elements))))))
		    (setq *random-state* (make-random-state t))
		    (dotimes (n (1- (the number-of-choices)) indices)
		      (when candidates
			(let ((index (nth (random (length candidates)) candidates)))
			  (pushnew index indices)
			  (setq candidates (delete index candidates)))))))

   (choice-indices
    (alexandria:shuffle (cons (the current-index) (the wrong-indices))))

   (selected-indices nil :settable)

   (correct-selected? (member (the current-index) (the selected-indices)))
   
   (inner-html
    (with-cl-who-string ()
      (:div :class "grid grid-flow-col auto-cols-max break-normal py-3 px-4 sm:px-6 lg:py-8 lg:px-5"
            (:div :class "px-3"
                  (:p (str (the count-string)))
                  (:p :class (the prompt-class) (str (the (triplets (the current-index)) prompt)))
                  (:ol :class "list-decimal ml-3 md:ml-5 lg:ml-8"
                       (dolist (index (the choice-indices))
	                 (let ((already-picked? (the (triplets index) already-picked?))
                               (class (the (triplets index) span-class)))
	                   (htm (:li (:span :class class
			                    :onclick (unless (or already-picked? (the correct-selected?))
                                                       (the (gdl-ajax-call :function-key :submit-answer :arguments (list index))))
				            (str (the (triplets index) correct-answer))))))))))
      (when (and (the correct-selected?)
                 (not (the last-question?)))
        (htm
         (:div (:button :class "bg-blue-500 text-white font-bold py-2 px-4 rounded"
                        :onclick (the (gdl-ajax-call :function-key :next-question))
                        "Next->")))))))

  :objects ((triplets :type 'triplet
		      :sequence (:size (length (the triples)))
		      :pass-down (quiz-type choices-type correct-selected? word-category
					    conjugation-type)
                      :correct? (eql (the-child index) (the current-index))
                      :already-picked? (member (the-child index) (the selected-indices))
                      :correct-triple (nth (the current-index) (the triples))
		      :triple (nth (the-child index) (the triples))))

  :functions ((submit-answer (index) (the (set-slot! :selected-indices (cons index (the selected-indices)))))

              (next-question () (unless (the last-question?)
                                  (the (set-slot! :current-index (1+ (the current-index))))
                                  (the (restore-slot-default! :selected-indices))))

	      (wrong-answer () (format t "Wrong Answer.~%"))))
	


(define-object triplet ()
  
  :input-slots (triple quiz-type choices-type correct? correct-selected?
		       already-picked? correct-triple
		       word-category conjugation-type
		       (noun-case :subjective))

  :functions ((inflect-root (root-word)
			    (ecase (the word-category)
			      (:nouns
			       (cond ((eql (aref root-word (1- (length root-word))) #\a)
				      (ecase (the noun-case)
					(:subjective
					 (string-append root-word "á¸¥"))))
				     (t root-word) ;; FLAG -- figure out inflection
				     ))
			      (:verbs
			       (ecase (the conjugation-type)
				 (1 (string-append root-word "ati"))))
			      (:unknown root-word)))

	      (iast-to-devanagari
	       (iast-string)
	       (uiop:run-program (format nil "sanscript --from iast --to devanagari \"~a\""
					 iast-string) :output :string)))

  
  :computed-slots ((iast (the (inflect-root (first (the triple)))))
		   (devanagari (the (iast-to-devanagari (the iast))))
		   (meaning (third (the triple)))
                   (correct-iast (the (inflect-root (first (the correct-triple)))))
                   (correct-devanagari (the (iast-to-devanagari (the correct-iast))))
                   (correct-meaning (third (the correct-triple)))
                   
                   (span-class (format nil "flex rounded-md auto ~a py-3 ~a text-xl"
                                       (if (or (the already-picked?)(the correct-selected?))
                                           "cursor-default" "cursor-pointer")
                                       (cond ((and (the already-picked?) (the correct?)) "bg-green-400")
                                             ((the already-picked?) "bg-red-500")
                                             (t "bg-blue-100"))))

		   (correct-answer (ecase (the choices-type)
                                     (:others-in-set
                                      (ecase (the quiz-type)
				        ((:iast-to-meaning :devanagari-to-meaning)
				         (the meaning))
				        ((:devanagari-to-iast :meaning-to-iast)
				         (the iast))
				        ((:meaning-to-devanagari :iast-to-devanagari)
				         (the devanagari))))
                                     (:scrambled
                                      (let ((scramble-func (if (the correct?) #'identity #'scramble-string)))
                                        (ecase (the quiz-type)
				          ((:iast-to-meaning :devanagari-to-meaning)
				           (funcall scramble-func (the correct-meaning)))
				          ((:devanagari-to-iast :meaning-to-iast)
				           (funcall scramble-func (the correct-iast)))
				          ((:meaning-to-devanagari :iast-to-devanagari)
				           (funcall scramble-func (the correct-devanagari))))))))
		   
		   (prompt (ecase (the quiz-type)
			     ((:iast-to-meaning :iast-to-devanagari)
			      (the iast))
			     ((:devanagari-to-meaning :devanagari-to-iast)
			      (the devanagari))
			     ((:meaning-to-devanagari :meaning-to-iast)
			      (the meaning))))))



(defun publish-endpoints ()
  (with-all-servers
      (server)
      (dolist (path (list "/multiple-choice" "/m-c"))
	(publish-gwl-app path 'multiple-choice
                         :server server
                         :publish-args (list :content-type "text/html; charset=utf-8")))))

;;
;; FLAG -- below line needs to be in application init.
;;
(publish-endpoints)

      
